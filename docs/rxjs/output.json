[
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "Observable",
    "overloads": [
      {
        "file": "src/internal/Observable.ts#L20-L488",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A representation of any set of values over any amount of time. This is the most basic building block\nof RxJS.\n"
            }
          ],
          ["class", { "__kind": "heading", "description": "Observable<T>\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "subscribe",
              "info": {
                "file": "src/internal/Observable.ts#L206-L234",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n\n<span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n\n`subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\nmight be for example a function that you passed to Observable's constructor, but most of the time it is\na library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\nthat calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\nthe thought.\n\nApart from starting the execution of an Observable, this method allows you to listen for values\nthat an Observable emits, as well as for when it completes or errors. You can achieve this in two\nof the following ways.\n\nThe first way is creating an object that implements {@link Observer} interface. It should have methods\ndefined by that interface, but note that it should be just a regular JavaScript object, which you can create\nyourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\nnot attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\nthat your object does not have to implement all methods. If you find yourself creating a method that doesn't\ndo anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\nbe left uncaught.\n\nThe second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\nThis means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\nof a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\nif you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\nsince `subscribe` recognizes these functions by where they were placed in function call. When it comes\nto `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n\nWhichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\nThis object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\nup all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\nprovided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n\nRemember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\nIt is an Observable itself that decides when these functions will be called. For example {@link of}\nby default emits all its values synchronously. Always check documentation for how given Observable\nwill behave when subscribed and if its default behavior can be modified with a `scheduler`.\n\n## Example\n### Subscribe with an Observer\n```ts\nimport { of } from 'rxjs';\n\nconst sumObserver = {\nsum: 0,\nnext(value) {\nconsole.log('Adding: ' + value);\nthis.sum = this.sum + value;\n},\nerror() {\n// We actually could just remove this method,\n// since we do not really care about errors right now.\n},\ncomplete() {\nconsole.log('Sum equals: ' + this.sum);\n}\n};\n\nof(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n.subscribe(sumObserver);\n\n// Logs:\n// \"Adding: 1\"\n// \"Adding: 2\"\n// \"Adding: 3\"\n// \"Sum equals: 6\"\n```\n\n### Subscribe with functions\n```ts\nimport { of } from 'rxjs'\n\nlet sum = 0;\n\nof(1, 2, 3).subscribe(\nvalue => {\nconsole.log('Adding: ' + value);\nsum = sum + value;\n},\nundefined,\n() => console.log('Sum equals: ' + sum)\n);\n\n// Logs:\n// \"Adding: 1\"\n// \"Adding: 2\"\n// \"Adding: 3\"\n// \"Sum equals: 6\"\n```\n\n### Cancel a subscription\n```ts\nimport { interval } from 'rxjs';\n\nconst subscription = interval(1000).subscribe(\nnum => console.log(num),\nundefined,\n() => {\n// Will not be called, even when cancelling subscription.\nconsole.log('completed!');\n}\n);\n\nsetTimeout(() => {\nsubscription.unsubscribe();\nconsole.log('unsubscribed!');\n}, 2500);\n\n// Logs:\n// 0 after 1s\n// 1 after 2s\n// \"unsubscribed!\" after 2.5s\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{Observer|Function}",
                      "description": "observerOrNext (optional) Either an observer with methods to be called,",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{Function}",
                      "description": "error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{Function}",
                      "description": "complete (optional) A handler for a terminal event resulting from successful completion.",
                      "type": ""
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "{ISubscription} a subscription reference to the registered handlers"
                    }
                  ],
                  [
                    "method",
                    { "__kind": "heading", "description": "subscribe\n" }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "observerOrNext",
                      "description": "",
                      "type": "import(\"C:/Users/tdeschryver/dev/forks/rxjs/src/internal/types\").NextObserver<T> | import(\"C:/Users/tdeschryver/dev/forks/rxjs/src/internal/types\").ErrorObserver<T> | import(\"C:/Users/tdeschryver/dev/forks/rxjs/src/internal/types\").CompletionObserver<T> | ((value: T) => void)"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "(error: any) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "complete",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "subscribe(  observerOrNext?: PartialObserver<T> | ((value: T) => void) | null,  error?: ((error: any) => void) | null,  complete?: (() => void) | null ): Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "subscribe",
              "info": {
                "file": "src/internal/Observable.ts#L73-L73",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "observer",
                      "description": "",
                      "type": "PartialObserver<T>"
                    }
                  ]
                ],
                "signature": "subscribe(observer?: PartialObserver<T>): Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "subscribe",
              "info": {
                "file": "src/internal/Observable.ts#L75-L75",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "",
                      "type": "null"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "null"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "complete",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "subscribe(next: null | undefined, error: null | undefined, complete: () => void): Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "subscribe",
              "info": {
                "file": "src/internal/Observable.ts#L77-L77",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "",
                      "type": "null"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "(error: any) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "complete",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "subscribe",
              "info": {
                "file": "src/internal/Observable.ts#L79-L79",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "null"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "complete",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "subscribe",
              "info": {
                "file": "src/internal/Observable.ts#L80-L80",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "(error: any) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "complete",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEach",
              "info": {
                "file": "src/internal/Observable.ts#L312-L334",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "promiseCtor",
                      "description": "",
                      "type": "PromiseConstructorLike"
                    }
                  ]
                ],
                "signature": "forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEach",
              "info": {
                "file": "src/internal/Observable.ts#L297-L297",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\nAPIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n\n**WARNING**: Only use this with observables you *know* will complete. If the source\nobservable does not complete, you will end up with a promise that is hung up, and\npotentially all of the state of an async function hanging out in memory. To avoid\nthis situation, look into adding something like {@link timeout}, {@link take},\n{@link takeWhile}, or {@link takeUntil} amongst others.\n\n### Example:\n\n```ts\nimport { interval } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst source$ = interval(1000).pipe(take(4));\n\nasync function getTotal() {\nlet total = 0;\n\nawait source$.forEach(value => {\ntotal += value;\nconsole.log('observable -> ', value);\n});\n\nreturn total;\n}\n\ngetTotal().then(\ntotal => console.log('Total:', total)\n)\n\n// Expected:\n// \"observable -> 0\"\n// \"observable -> 1\"\n// \"observable -> 2\"\n// \"observable -> 3\"\n// \"Total: 6\"\n```"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "a handler for each value emitted by the observable",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "a promise that either resolves on observable completion or\nrejects with the handled error\n"
                    }
                  ]
                ],
                "signature": "forEach(next: (value: T) => void): Promise<void>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEach",
              "info": {
                "file": "src/internal/Observable.ts#L310-L310",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "a handler for each value emitted by the observable",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "promiseCtor",
                      "description": "a constructor function used to instantiate the Promise",
                      "type": "PromiseConstructorLike"
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "a promise that either resolves on observable completion or\nrejects with the handled error"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. Passing a Promise constructor will no longer be available\nin upcoming versions of RxJS. This is because it adds weight to the library, for very\nlittle benefit. If you need this functionality, it is recommended that you either\npolyfill Promise, or you create an adapter to convert the returned native promise\nto whatever promise implementation you wanted.\n"
                    }
                  ]
                ],
                "signature": "forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "[Symbol_observable]",
              "info": {
                "file": "src/internal/Observable.ts#L347-L349",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable"
                    }
                  ],
                  [
                    "method",
                    { "__kind": "heading", "description": "Symbol.observable" }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "{Observable} this instance of the observable\n"
                    }
                  ]
                ],
                "signature": "[Symbol_observable]();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L441-L447",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Used to stitch together functional operators into a chain."
                    }
                  ],
                  ["method", { "__kind": "heading", "description": "pipe" }],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "{Observable} the Observable result of all of the operators having\nbeen called in the order they were passed in.\n\n### Example\n```ts\nimport { interval } from 'rxjs';\nimport { map, filter, scan } from 'rxjs/operators';\n\ninterval(1000)\n.pipe(\nfilter(x => x % 2 === 0),\nmap(x => x + x),\nscan((acc, x) => acc + x)\n)\n.subscribe(x => console.log(x))\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "operations",
                      "description": "",
                      "type": "OperatorFunction<any, any>[]"
                    }
                  ]
                ],
                "signature": "pipe(...operations: OperatorFunction<any, any>[]): Observable<any>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L352-L352",
                "info": [],
                "signature": "pipe(): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L353-L353",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op1",
                      "description": "",
                      "type": "OperatorFunction<T, A>"
                    }
                  ]
                ],
                "signature": "pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L354-L354",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op1",
                      "description": "",
                      "type": "OperatorFunction<T, A>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op2",
                      "description": "",
                      "type": "OperatorFunction<A, B>"
                    }
                  ]
                ],
                "signature": "pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L355-L355",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op1",
                      "description": "",
                      "type": "OperatorFunction<T, A>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op2",
                      "description": "",
                      "type": "OperatorFunction<A, B>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op3",
                      "description": "",
                      "type": "OperatorFunction<B, C>"
                    }
                  ]
                ],
                "signature": "pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L356-L361",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op1",
                      "description": "",
                      "type": "OperatorFunction<T, A>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op2",
                      "description": "",
                      "type": "OperatorFunction<A, B>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op3",
                      "description": "",
                      "type": "OperatorFunction<B, C>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op4",
                      "description": "",
                      "type": "OperatorFunction<C, D>"
                    }
                  ]
                ],
                "signature": "pipe<A, B, C, D>(  op1: OperatorFunction<T, A>,  op2: OperatorFunction<A, B>,  op3: OperatorFunction<B, C>,  op4: OperatorFunction<C, D> ): Observable<D>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L362-L368",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op1",
                      "description": "",
                      "type": "OperatorFunction<T, A>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op2",
                      "description": "",
                      "type": "OperatorFunction<A, B>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op3",
                      "description": "",
                      "type": "OperatorFunction<B, C>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op4",
                      "description": "",
                      "type": "OperatorFunction<C, D>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op5",
                      "description": "",
                      "type": "OperatorFunction<D, E>"
                    }
                  ]
                ],
                "signature": "pipe<A, B, C, D, E>(  op1: OperatorFunction<T, A>,  op2: OperatorFunction<A, B>,  op3: OperatorFunction<B, C>,  op4: OperatorFunction<C, D>,  op5: OperatorFunction<D, E> ): Observable<E>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L369-L376",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op1",
                      "description": "",
                      "type": "OperatorFunction<T, A>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op2",
                      "description": "",
                      "type": "OperatorFunction<A, B>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op3",
                      "description": "",
                      "type": "OperatorFunction<B, C>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op4",
                      "description": "",
                      "type": "OperatorFunction<C, D>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op5",
                      "description": "",
                      "type": "OperatorFunction<D, E>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op6",
                      "description": "",
                      "type": "OperatorFunction<E, F>"
                    }
                  ]
                ],
                "signature": "pipe<A, B, C, D, E, F>(  op1: OperatorFunction<T, A>,  op2: OperatorFunction<A, B>,  op3: OperatorFunction<B, C>,  op4: OperatorFunction<C, D>,  op5: OperatorFunction<D, E>,  op6: OperatorFunction<E, F> ): Observable<F>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L377-L385",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op1",
                      "description": "",
                      "type": "OperatorFunction<T, A>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op2",
                      "description": "",
                      "type": "OperatorFunction<A, B>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op3",
                      "description": "",
                      "type": "OperatorFunction<B, C>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op4",
                      "description": "",
                      "type": "OperatorFunction<C, D>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op5",
                      "description": "",
                      "type": "OperatorFunction<D, E>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op6",
                      "description": "",
                      "type": "OperatorFunction<E, F>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op7",
                      "description": "",
                      "type": "OperatorFunction<F, G>"
                    }
                  ]
                ],
                "signature": "pipe<A, B, C, D, E, F, G>(  op1: OperatorFunction<T, A>,  op2: OperatorFunction<A, B>,  op3: OperatorFunction<B, C>,  op4: OperatorFunction<C, D>,  op5: OperatorFunction<D, E>,  op6: OperatorFunction<E, F>,  op7: OperatorFunction<F, G> ): Observable<G>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L386-L395",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op1",
                      "description": "",
                      "type": "OperatorFunction<T, A>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op2",
                      "description": "",
                      "type": "OperatorFunction<A, B>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op3",
                      "description": "",
                      "type": "OperatorFunction<B, C>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op4",
                      "description": "",
                      "type": "OperatorFunction<C, D>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op5",
                      "description": "",
                      "type": "OperatorFunction<D, E>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op6",
                      "description": "",
                      "type": "OperatorFunction<E, F>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op7",
                      "description": "",
                      "type": "OperatorFunction<F, G>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op8",
                      "description": "",
                      "type": "OperatorFunction<G, H>"
                    }
                  ]
                ],
                "signature": "pipe<A, B, C, D, E, F, G, H>(  op1: OperatorFunction<T, A>,  op2: OperatorFunction<A, B>,  op3: OperatorFunction<B, C>,  op4: OperatorFunction<C, D>,  op5: OperatorFunction<D, E>,  op6: OperatorFunction<E, F>,  op7: OperatorFunction<F, G>,  op8: OperatorFunction<G, H> ): Observable<H>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L396-L406",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op1",
                      "description": "",
                      "type": "OperatorFunction<T, A>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op2",
                      "description": "",
                      "type": "OperatorFunction<A, B>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op3",
                      "description": "",
                      "type": "OperatorFunction<B, C>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op4",
                      "description": "",
                      "type": "OperatorFunction<C, D>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op5",
                      "description": "",
                      "type": "OperatorFunction<D, E>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op6",
                      "description": "",
                      "type": "OperatorFunction<E, F>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op7",
                      "description": "",
                      "type": "OperatorFunction<F, G>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op8",
                      "description": "",
                      "type": "OperatorFunction<G, H>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op9",
                      "description": "",
                      "type": "OperatorFunction<H, I>"
                    }
                  ]
                ],
                "signature": "pipe<A, B, C, D, E, F, G, H, I>(  op1: OperatorFunction<T, A>,  op2: OperatorFunction<A, B>,  op3: OperatorFunction<B, C>,  op4: OperatorFunction<C, D>,  op5: OperatorFunction<D, E>,  op6: OperatorFunction<E, F>,  op7: OperatorFunction<F, G>,  op8: OperatorFunction<G, H>,  op9: OperatorFunction<H, I> ): Observable<I>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pipe",
              "info": {
                "file": "src/internal/Observable.ts#L407-L418",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op1",
                      "description": "",
                      "type": "OperatorFunction<T, A>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op2",
                      "description": "",
                      "type": "OperatorFunction<A, B>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op3",
                      "description": "",
                      "type": "OperatorFunction<B, C>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op4",
                      "description": "",
                      "type": "OperatorFunction<C, D>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op5",
                      "description": "",
                      "type": "OperatorFunction<D, E>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op6",
                      "description": "",
                      "type": "OperatorFunction<E, F>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op7",
                      "description": "",
                      "type": "OperatorFunction<F, G>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op8",
                      "description": "",
                      "type": "OperatorFunction<G, H>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op9",
                      "description": "",
                      "type": "OperatorFunction<H, I>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "operations",
                      "description": "",
                      "type": "OperatorFunction<any, any>[]"
                    }
                  ]
                ],
                "signature": "pipe<A, B, C, D, E, F, G, H, I>(  op1: OperatorFunction<T, A>,  op2: OperatorFunction<A, B>,  op3: OperatorFunction<B, C>,  op4: OperatorFunction<C, D>,  op5: OperatorFunction<D, E>,  op6: OperatorFunction<E, F>,  op7: OperatorFunction<F, G>,  op8: OperatorFunction<G, H>,  op9: OperatorFunction<H, I>,  ...operations: OperatorFunction<any, any>[] ): Observable<unknown>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toPromise",
              "info": {
                "file": "src/internal/Observable.ts#L476-L487",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Subscribe to this Observable and get a Promise resolving on\n`complete` with the last emission (if any).\n\n**WARNING**: Only use this with observables you *know* will complete. If the source\nobservable does not complete, you will end up with a promise that is hung up, and\npotentially all of the state of an async function hanging out in memory. To avoid\nthis situation, look into adding something like {@link timeout}, {@link take},\n{@link takeWhile}, or {@link takeUntil} amongst others.\n"
                    }
                  ],
                  [
                    "method",
                    { "__kind": "heading", "description": "toPromise" }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "[promiseCtor]",
                      "description": "a constructor function used to instantiate",
                      "type": ""
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "A Promise that resolves with the last value emit, or\nrejects on an error. If there were no emissions, Promise\nresolves with undefined."
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "Deprecated use {@link firstValueFrom} or {@link lastValueFrom} instead\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "promiseCtor",
                      "description": "",
                      "type": "PromiseConstructorLike"
                    }
                  ]
                ],
                "signature": "toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toPromise",
              "info": {
                "file": "src/internal/Observable.ts#L451-L451",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "this",
                      "description": "",
                      "type": "Observable<T>"
                    }
                  ]
                ],
                "signature": "toPromise<T>(this: Observable<T>): Promise<T | undefined>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toPromise",
              "info": {
                "file": "src/internal/Observable.ts#L453-L453",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "this",
                      "description": "",
                      "type": "Observable<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "PromiseCtor",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T | undefined>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toPromise",
              "info": {
                "file": "src/internal/Observable.ts#L455-L455",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "this",
                      "description": "",
                      "type": "Observable<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "PromiseCtor",
                      "description": "",
                      "type": "PromiseConstructorLike"
                    }
                  ]
                ],
                "signature": "toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "create",
              "type": "Function",
              "description": "/**\r\n   * Creates a new cold Observable by calling the Observable constructor\r\n   * @static true\r\n   * @owner Observable\r\n   * @method create\r\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\r\n   * @return {Observable} a new cold observable\r\n   * @nocollapse\r\n   * @deprecated use new Observable() instead\r\n   */"
            }
          ]
        ],
        "signature": "class Observable<T> implements Subscribable<T> {\n  static create: Function = <T>(\n    subscribe?: (subscriber: Subscriber<T>) => TeardownLogic\n  ) => {\n    return new Observable<T>(subscribe);\n  };\n\n  subscribe(\n    observerOrNext?: PartialObserver<T> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription;\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(\n    next: null | undefined,\n    error: null | undefined,\n    complete: () => void\n  ): Subscription;\n  subscribe(\n    next: null | undefined,\n    error: (error: any) => void,\n    complete?: () => void\n  ): Subscription;\n  subscribe(\n    next: (value: T) => void,\n    error: null | undefined,\n    complete: () => void\n  ): Subscription;\n  subscribe(\n    next?: (value: T) => void,\n    error?: (error: any) => void,\n    complete?: () => void\n  ): Subscription;\n  forEach(\n    next: (value: T) => void,\n    promiseCtor?: PromiseConstructorLike\n  ): Promise<void>;\n  forEach(next: (value: T) => void): Promise<void>;\n  forEach(\n    next: (value: T) => void,\n    promiseCtor: PromiseConstructorLike\n  ): Promise<void>;\n  [Symbol_observable]();\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any>;\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>\n  ): Observable<B>;\n  pipe<A, B, C>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>\n  ): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined>;\n  toPromise<T>(this: Observable<T>): Promise<T | undefined>;\n  toPromise<T>(\n    this: Observable<T>,\n    PromiseCtor: typeof Promise\n  ): Promise<T | undefined>;\n  toPromise<T>(\n    this: Observable<T>,\n    PromiseCtor: PromiseConstructorLike\n  ): Promise<T | undefined>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "ConnectableObservable",
    "overloads": [
      {
        "file": "src/internal/observable/ConnectableObservable.ts#L12-L56",
        "info": [
          [
            "class",
            { "__kind": "heading", "description": "ConnectableObservable<T>\n" }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_subscribe",
              "info": {
                "file": "src/internal/observable/ConnectableObservable.ts#L26-L28",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "subscriber",
                      "description": "",
                      "type": "Subscriber<T>"
                    }
                  ]
                ],
                "signature": "_subscribe(subscriber: Subscriber<T>);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "connect",
              "info": {
                "file": "src/internal/observable/ConnectableObservable.ts#L38-L51",
                "info": [],
                "signature": "connect(): Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "refCount",
              "info": {
                "file": "src/internal/observable/ConnectableObservable.ts#L53-L55",
                "info": [],
                "signature": "refCount(): Observable<T>;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_isComplete",
              "type": "boolean",
              "description": "/** @internal */"
            }
          ]
        ],
        "signature": "class ConnectableObservable<T> extends Observable<T> {\n  _isComplete = false;\n\n  _subscribe(subscriber: Subscriber<T>);\n  connect(): Subscription;\n  refCount(): Observable<T>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "GroupedObservable",
    "overloads": [
      {
        "file": "src/internal/operators/groupBy.ts#L281-L299",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An Observable representing values belonging to the same group represented by\na common key. The values emitted by a GroupedObservable come from the source\nObservable. The common key is available as the field `key` on a\nGroupedObservable instance.\n"
            }
          ],
          [
            "class",
            { "__kind": "heading", "description": "GroupedObservable<K, T>\n" }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_subscribe",
              "info": {
                "file": "src/internal/operators/groupBy.ts#L290-L298",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "subscriber",
                      "description": "",
                      "type": "Subscriber<T>"
                    }
                  ]
                ],
                "signature": "_subscribe(subscriber: Subscriber<T>);"
              }
            }
          ]
        ],
        "signature": "class GroupedObservable<K, T> extends Observable<T> {\n  _subscribe(subscriber: Subscriber<T>);\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "Operator",
    "overloads": [
      {
        "file": "src/internal/Operator.ts#L7-L9",
        "signature": "interface Operator<T, R> {}",
        "info": [
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "Internal implementation detail, do not use.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "observable",
    "overloads": [
      {
        "file": "src/internal/symbol/observable.ts#L11-L11",
        "signature": "const observable: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "animationFrames",
    "overloads": [
      {
        "file": "src/internal/observable/dom/animationFrames.ts#L79-L81",
        "signature": "function animationFrames(timestampProvider?: TimestampProvider);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An observable of animation frames\n\nEmits the the amount of time elapsed since subscription and the timestamp on each animation frame.\nDefaults to milliseconds provided to the requestAnimationFrame's callback. Does not end on its own.\n\nEvery subscription will start a separate animation loop. Since animation frames are always scheduled\nby the browser to occur directly before a repaint, scheduling more than one animation frame synchronously\nshould not be much different or have more overhead than looping over an array of events during\na single animation frame. However, if for some reason the developer would like to ensure the\nexecution of animation-related handlers are all executed during the same task by the engine,\nthe `share` operator can be used.\n\nThis is useful for setting up animations with RxJS.\n\n### Example\n\nTweening a div to move it on the screen\n\n```ts\nimport { animationFrames } from 'rxjs';\nimport { map, takeWhile, endWith } from 'rxjs/operators';\n\nfunction tween(start: number, end: number, duration: number) {\nconst diff = end - start;\nreturn animationFrames().pipe(\n// Figure out what percentage of time has passed\nmap(({elapsed}) => elapsed / duration),\n// Take the vector while less than 100%\ntakeWhile(v => v < 1),\n// Finish with 100%\nendWith(1),\n// Calculate the distance traveled between start and end\nmap(v => v * diff + start)\n);\n}\n\n// Setup a div for us to move around\nconst div = document.createElement('div');\ndocument.body.appendChild(div);\ndiv.style.position = 'absolute';\ndiv.style.width = '40px';\ndiv.style.height = '40px';\ndiv.style.backgroundColor = 'lime';\ndiv.style.transform = 'translate3d(10px, 0, 0)';\n\ntween(10, 200, 4000).subscribe(x => {\ndiv.style.transform = `translate3d(${x}px, 0, 0)`;\n});\n```\n\n### Example\n\nProviding a custom timestamp provider\n\n```ts\nimport { animationFrames, TimestampProvider } from 'rxjs';\n\n// A custom timestamp provider\nlet now = 0;\nconst customTSProvider: TimestampProvider = {\nnow() { return now++; }\n};\n\nconst source$ = animationFrames(customTSProvider);\n\n// Log increasing numbers 0...1...2... on every animation frame.\nsource$.subscribe(({ elapsed }) => console.log(elapsed));\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "timestampProvider",
              "description": "An object with a `now` method that provides a numeric timestamp",
              "type": "TimestampProvider"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "Subject",
    "overloads": [
      {
        "file": "src/internal/Subject.ts#L16-L134",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A Subject is a special type of Observable that allows values to be\nmulticasted to many Observers. Subjects are like EventEmitters.\n\nEvery Subject is an Observable and an Observer. You can subscribe to a\nSubject, and you can call next to feed values as well as error and complete.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "lift",
              "info": {
                "file": "src/internal/Subject.ts#L42-L46",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "operator",
                      "description": "",
                      "type": "Operator<T, R>"
                    }
                  ]
                ],
                "signature": "lift<R>(operator: Operator<T, R>): Observable<R>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "next",
              "info": {
                "file": "src/internal/Subject.ts#L48-L60",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "next(value: T);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "error",
              "info": {
                "file": "src/internal/Subject.ts#L62-L76",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "err",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "error(err: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "complete",
              "info": {
                "file": "src/internal/Subject.ts#L78-L90",
                "info": [],
                "signature": "complete();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "unsubscribe",
              "info": {
                "file": "src/internal/Subject.ts#L92-L96",
                "info": [],
                "signature": "unsubscribe();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_trySubscribe",
              "info": {
                "file": "src/internal/Subject.ts#L99-L105",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "subscriber",
                      "description": "",
                      "type": "Subscriber<T>"
                    }
                  ]
                ],
                "signature": "_trySubscribe(subscriber: Subscriber<T>): TeardownLogic;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_subscribe",
              "info": {
                "file": "src/internal/Subject.ts#L108-L121",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "subscriber",
                      "description": "",
                      "type": "Subscriber<T>"
                    }
                  ]
                ],
                "signature": "_subscribe(subscriber: Subscriber<T>): Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "asObservable",
              "info": {
                "file": "src/internal/Subject.ts#L129-L133",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates a new Observable with this Subject as the source. You can do this\nto create customize Observer-side logic of the Subject and conceal it from\ncode that uses the Observable."
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "{Observable} Observable that the Subject casts to\n"
                    }
                  ]
                ],
                "signature": "asObservable(): Observable<T>;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "observers",
              "type": "Observer<T>[]",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "closed",
              "type": "boolean",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isStopped",
              "type": "boolean",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hasError",
              "type": "boolean",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "thrownError",
              "type": "any",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "create",
              "type": "Function",
              "description": "/**\r\n   * Creates a \"subject\" by basically gluing an observer to an observable.\r\n   *\r\n   * @nocollapse\r\n   * @deprecated Recommended you do not use, will be removed at some point in the future. Plans for replacement still under discussion.\r\n   */"
            }
          ]
        ],
        "signature": "class Subject<T> extends Observable<T> implements SubscriptionLike {\n  observers: Observer<T>[] = [];\n  closed = false;\n  isStopped = false;\n  hasError = false;\n  thrownError: any = null;\n  static create: Function = <T>(\n    destination: Observer<T>,\n    source: Observable<T>\n  ): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<R>(operator: Operator<T, R>): Observable<R>;\n  next(value: T);\n  error(err: any);\n  complete();\n  unsubscribe();\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic;\n  _subscribe(subscriber: Subscriber<T>): Subscription;\n  asObservable(): Observable<T>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "BehaviorSubject",
    "overloads": [
      {
        "file": "src/internal/BehaviorSubject.ts#L13-L45",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A variant of Subject that requires an initial value and emits its current\nvalue whenever it is subscribed to.\n"
            }
          ],
          [
            "class",
            { "__kind": "heading", "description": "BehaviorSubject<T>\n" }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_subscribe",
              "info": {
                "file": "src/internal/BehaviorSubject.ts#L24-L30",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "subscriber",
                      "description": "",
                      "type": "Subscriber<T>"
                    }
                  ]
                ],
                "signature": "_subscribe(subscriber: Subscriber<T>): Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getValue",
              "info": {
                "file": "src/internal/BehaviorSubject.ts#L32-L40",
                "info": [],
                "signature": "getValue(): T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "next",
              "info": {
                "file": "src/internal/BehaviorSubject.ts#L42-L44",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "next(value: T): void;"
              }
            }
          ]
        ],
        "signature": "class BehaviorSubject<T> extends Subject<T> {\n  _subscribe(subscriber: Subscriber<T>): Subscription;\n  getValue(): T;\n  next(value: T): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "ReplaySubject",
    "overloads": [
      {
        "file": "src/internal/ReplaySubject.ts#L39-L157",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A variant of {@link Subject} that \"replays\" old values to new subscribers by emitting them when they first subscribe.\n\n`ReplaySubject` has an internal buffer that will store a specified number of values that it has observed. Like `Subject`,\n`ReplaySubject` \"observes\" values by having them passed to its `next` method. When it observes a value, it will store that\nvalue for a time determined by the configuration of the `ReplaySubject`, as passed to its constructor.\n\nWhen a new subscriber subscribes to the `ReplaySubject` instance, it will synchronously emit all values in its buffer in\na First-In-First-Out (FIFO) manner. The `ReplaySubject` will also complete, if it has observed completion; and it will\nerror if it has observed an error.\n\nThere are two main configuration items to be concerned with:\n\n1. `bufferSize` - This will determine how many items are stored in the buffer, defaults to infinite.\n2. `windowTime` - The amount of time to hold a value in the buffer before removing it from the buffer.\n\nBoth configurations may exist simultaneously. So if you would like to buffer a maximum of 3 values, as long as the values\nare less than 2 seconds old, you could do so with a `new ReplaySubject(3, 2000)`.\n\n### Differences with BehaviorSubject\n\n`BehaviorSubject` is similar to `new ReplaySubject(1)`, with a couple fo exceptions:\n\n1. `BehaviorSubject` comes \"primed\" with a single value upon construction.\n2. `ReplaySubject` will replay values, even after observing an error, where `BehaviorSubject` will not.\n\n{@see Subject}\n{@see BehaviorSubject}\n{@see shareReplay}\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_subscribe",
              "info": {
                "file": "src/internal/ReplaySubject.ts#L87-L120",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "subscriber",
                      "description": "",
                      "type": "Subscriber<T>"
                    }
                  ]
                ],
                "signature": "_subscribe(subscriber: Subscriber<T>): Subscription;"
              }
            }
          ]
        ],
        "signature": "class ReplaySubject<T> extends Subject<T> {\n  _subscribe(subscriber: Subscriber<T>): Subscription;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "AsyncSubject",
    "overloads": [
      {
        "file": "src/internal/AsyncSubject.ts#L11-L49",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A variant of Subject that only emits a value when it completes. It will emit\nits latest value to all its observers on completion.\n"
            }
          ],
          [
            "class",
            { "__kind": "heading", "description": "AsyncSubject<T>\n" }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_subscribe",
              "info": {
                "file": "src/internal/AsyncSubject.ts#L17-L27",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "subscriber",
                      "description": "",
                      "type": "Subscriber<any>"
                    }
                  ]
                ],
                "signature": "_subscribe(subscriber: Subscriber<any>): Subscription;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "next",
              "info": {
                "file": "src/internal/AsyncSubject.ts#L29-L34",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "next(value: T): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "error",
              "info": {
                "file": "src/internal/AsyncSubject.ts#L36-L40",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "error(error: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "complete",
              "info": {
                "file": "src/internal/AsyncSubject.ts#L42-L48",
                "info": [],
                "signature": "complete(): void;"
              }
            }
          ]
        ],
        "signature": "class AsyncSubject<T> extends Subject<T> {\n  _subscribe(subscriber: Subscriber<any>): Subscription;\n  next(value: T): void;\n  error(error: any): void;\n  complete(): void;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "asap",
    "overloads": [
      {
        "file": "src/internal/scheduler/asap.ts#L44-L44",
        "signature": "const asap: AsapScheduler;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "asapScheduler",
    "overloads": [
      {
        "file": "src/internal/scheduler/asap.ts#L39-L39",
        "signature": "const asapScheduler: AsapScheduler;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "async",
    "overloads": [
      {
        "file": "src/internal/scheduler/async.ts#L56-L56",
        "signature": "const async: AsyncScheduler;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "asyncScheduler",
    "overloads": [
      {
        "file": "src/internal/scheduler/async.ts#L51-L51",
        "signature": "const asyncScheduler: AsyncScheduler;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "queue",
    "overloads": [
      {
        "file": "src/internal/scheduler/queue.ts#L72-L72",
        "signature": "const queue: QueueScheduler;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "queueScheduler",
    "overloads": [
      {
        "file": "src/internal/scheduler/queue.ts#L67-L67",
        "signature": "const queueScheduler: QueueScheduler;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "animationFrame",
    "overloads": [
      {
        "file": "src/internal/scheduler/animationFrame.ts#L41-L41",
        "signature": "const animationFrame: AnimationFrameScheduler;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "animationFrameScheduler",
    "overloads": [
      {
        "file": "src/internal/scheduler/animationFrame.ts#L36-L36",
        "signature": "const animationFrameScheduler: AnimationFrameScheduler;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "VirtualTimeScheduler",
    "overloads": [
      {
        "file": "src/internal/scheduler/VirtualTimeScheduler.ts#L6-L63",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "flush",
              "info": {
                "file": "src/internal/scheduler/VirtualTimeScheduler.ts#L42-L62",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Prompt the Scheduler to execute all of its queued actions, therefore\nclearing its queue."
                    }
                  ],
                  ["return", { "__kind": "heading", "description": "{void}\n" }]
                ],
                "signature": "public flush(): void;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "frameTimeFactor",
              "type": "number",
              "description": "/** @deprecated remove in v8. `frameTimeFactor` is not used in VirtualTimeScheduler directly. */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "frame",
              "type": "number",
              "description": "/**\r\n   * The current frame for the state of the virtual scheduler instance. The the difference\r\n   * between two \"frames\" is synonymous with the passage of \"virtual time units\". So if\r\n   * you record `scheduler.frame` to be `1`, then later, observe `scheduler.frame` to be at `11`,\r\n   * that means `10` virtual time units have passed.\r\n   */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "index",
              "type": "number",
              "description": "/**\r\n   * Used internally to examine the current virtual action index being processed.\r\n   * @deprecated remove in v8. Should be a private API.\r\n   */"
            }
          ]
        ],
        "signature": "class VirtualTimeScheduler extends AsyncScheduler {\n  static frameTimeFactor = 10;\n  public frame: number = 0;\n  public index: number = -1;\n\n  public flush(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "VirtualAction",
    "overloads": [
      {
        "file": "src/internal/scheduler/VirtualTimeScheduler.ts#L64-L128",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "schedule",
              "info": {
                "file": "src/internal/scheduler/VirtualTimeScheduler.ts#L75-L93",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "delay",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "public schedule(state?: T, delay: number = 0): Subscription;"
              }
            }
          ]
        ],
        "signature": "class VirtualAction<T> extends AsyncAction<T> {\n  public schedule(state?: T, delay: number = 0): Subscription;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "Scheduler",
    "overloads": [
      {
        "file": "src/internal/Scheduler.ts#L25-L64",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An execution context and a data structure to order tasks and schedule their\nexecution. Provides a notion of (potentially virtual) time, through the\n`now()` getter method.\n\nEach unit of work in a Scheduler is called an `Action`.\n\n```ts\nclass Scheduler {\nnow(): number;\nschedule(work, delay?, state?): Subscription;\n}\n```\n"
            }
          ],
          ["class", { "__kind": "heading", "description": "Scheduler" }],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "Scheduler is an internal implementation detail of RxJS, and\nshould not be used directly. Rather, create your own class and implement\n{@link SchedulerLike}\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "schedule",
              "info": {
                "file": "src/internal/Scheduler.ts#L61-L63",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Schedules a function, `work`, for execution. May happen at some point in\nthe future, according to the `delay` parameter, if specified. May be passed\nsome context object, `state`, which will be passed to the `work` function.\n\nThe given arguments will be processed an stored as an Action object in a\nqueue of actions.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{function(state:",
                      "description": "?T): ?Subscription} work A function representing a",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{number}",
                      "description": "[delay] Time to wait before executing the work, where the",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{T}",
                      "description": "[state] Some contextual data that the `work` function uses when",
                      "type": ""
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "{Subscription} A subscription in order to be able to unsubscribe\nthe scheduled work.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "work",
                      "description": "",
                      "type": "(this: SchedulerAction<T>, state?: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "delay",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "now",
              "type": "() => number",
              "description": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "now",
              "type": "() => number",
              "description": "/**\r\n   * A getter method that returns a number representing the current time\r\n   * (at the time this function was called) according to the scheduler's own\r\n   * internal clock.\r\n   * @return {number} A number that represents the current time. May or may not\r\n   * have a relation to wall-clock time. May or may not refer to a time unit\r\n   * (e.g. milliseconds).\r\n   */"
            }
          ]
        ],
        "signature": "class Scheduler implements SchedulerLike {\n  public static now: () => number = dateTimestampProvider.now;\n  public now: () => number;\n\n  public schedule<T>(\n    work: (this: SchedulerAction<T>, state?: T) => void,\n    delay: number = 0,\n    state?: T\n  ): Subscription;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "Subscription",
    "overloads": [
      {
        "file": "src/internal/Subscription.ts#L18-L251",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents a disposable resource, such as the execution of an Observable. A\nSubscription has one important method, `unsubscribe`, that takes no argument\nand just disposes the resource held by the subscription.\n\nAdditionally, subscriptions may be grouped together through the `add()`\nmethod, which will attach a child Subscription to the current Subscription.\nWhen a Subscription is unsubscribed, all its children (and its grandchildren)\nwill be unsubscribed as well.\n"
            }
          ],
          ["class", { "__kind": "heading", "description": "Subscription\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "unsubscribe",
              "info": {
                "file": "src/internal/Subscription.ts#L59-L125",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Disposes the resources held by the subscription. May, for instance, cancel\nan ongoing Observable execution or cancel any other type of work that\nstarted when the Subscription was created."
                    }
                  ],
                  ["return", { "__kind": "heading", "description": "{void}\n" }]
                ],
                "signature": "unsubscribe(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "add",
              "info": {
                "file": "src/internal/Subscription.ts#L145-L170",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Adds a teardown to this subscription, so that teardown will be unsubscribed/called\nwhen this subscription is unsubscribed. If this subscription is already {@link closed},\nbecause it has already been unsubscribed, then whatever teardown is passed to it\nwill automatically be executed (unless the teardown itself is also a closed subscription).\n\nClosed Subscriptions cannot be added as teardowns to any subscription. Adding a closed\nsubscription to a any subscription will result in no operation. (A noop).\n\nAdding a subscription to itself, or adding `null` or `undefined` will not perform any\noperation at all. (A noop).\n\n`Subscription` instances that are added to this instance will automatically remove themselves\nif they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\nwill need to be removed manually with {@link remove}\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "teardown",
                      "description": "The teardown logic to add to this subscription.",
                      "type": "TeardownLogic"
                    }
                  ]
                ],
                "signature": "add(teardown: TeardownLogic): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "remove",
              "info": {
                "file": "src/internal/Subscription.ts#L238-L250",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Removes a teardown from this subscription that was previously added with the {@link add} method.\n\nNote that `Subscription` instances, when unsubscribed, will automatically remove themselves\nfrom every other `Subscription` they have been added to. This means that using the `remove` method\nis not a common thing and should be used thoughtfully.\n\nIf you add the same teardown instance of a function or an unsubscribable object to a `Subcription` instance\nmore than once, you will need to call `remove` the same number of times to remove all instances.\n\nAll teardown instances are removed to free up memory upon unsubscription.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "teardown",
                      "description": "The teardown to remove from this subscription",
                      "type": "Function | Subscription | import(\"C:/Users/tdeschryver/dev/forks/rxjs/src/internal/types\").Unsubscribable"
                    }
                  ]
                ],
                "signature": "remove(teardown: Exclude<TeardownLogic, void>): void;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "EMPTY",
              "type": "Subscription",
              "description": "/** @nocollapse */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "closed",
              "type": "boolean",
              "description": "/**\r\n   * A flag to indicate whether this Subscription has already been unsubscribed.\r\n   */"
            }
          ]
        ],
        "signature": "class Subscription implements SubscriptionLike {\n  public static EMPTY: Subscription = (function (empty: any) {\n    empty.closed = true;\n    return empty;\n  })(new Subscription());\n  public closed = false;\n\n  unsubscribe(): void;\n  add(teardown: TeardownLogic): void;\n  remove(teardown: Exclude<TeardownLogic, void>): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "Subscriber",
    "overloads": [
      {
        "file": "src/internal/Subscriber.ts#L18-L147",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Implements the {@link Observer} interface and extends the\n{@link Subscription} class. While the {@link Observer} is the public API for\nconsuming the values of an {@link Observable}, all Observers get converted to\na Subscriber, in order to provide Subscription-like capabilities such as\n`unsubscribe`. Subscriber is a common type in RxJS, and crucial for\nimplementing operators, but it is rarely used as a public API.\n"
            }
          ],
          ["class", { "__kind": "heading", "description": "Subscriber<T>\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "src/internal/Subscriber.ts#L31-L37",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "A static factory for a Subscriber, given a (potentially partial) definition\nof an Observer."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{function(x:",
                      "description": "?T): void} [next] The `next` callback of an Observer.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{function(e:",
                      "description": "?any): void} [error] The `error` callback of an",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{function():",
                      "description": "void} [complete] The `complete` callback of an",
                      "type": ""
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "{Subscriber<T>} A Subscriber wrapping the (partially defined)\nObserver represented by the given arguments."
                    }
                  ],
                  ["nocollapse", { "__kind": "heading", "description": "\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "",
                      "type": "(x?: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "(e?: any) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "complete",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "static create<T>(next?: (x?: T) => void,          error?: (e?: any) => void,          complete?: () => void): Subscriber<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "next",
              "info": {
                "file": "src/internal/Subscriber.ts#L93-L97",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "The {@link Observer} callback to receive notifications of type `next` from\nthe Observable, with a value. The Observable may call this method 0 or more\ntimes."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{T}",
                      "description": "[value] The `next` value.",
                      "type": ""
                    }
                  ],
                  [
                    "return",
                    { "__kind": "heading", "description": "{void}\n" }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "next(value?: T): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "error",
              "info": {
                "file": "src/internal/Subscriber.ts#L106-L111",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "The {@link Observer} callback to receive notifications of type `error` from\nthe Observable, with an attached `Error`. Notifies the Observer that\nthe Observable has experienced an error condition."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{any}",
                      "description": "[err] The `error` exception.",
                      "type": ""
                    }
                  ],
                  [
                    "return",
                    { "__kind": "heading", "description": "{void}\n" }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "err",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "error(err?: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "complete",
              "info": {
                "file": "src/internal/Subscriber.ts#L119-L124",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "The {@link Observer} callback to receive a valueless notification of type\n`complete` from the Observable. Notifies the Observer that the Observable\nhas finished sending push-based notifications."
                    }
                  ],
                  ["return", { "__kind": "heading", "description": "{void}\n" }]
                ],
                "signature": "complete(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "unsubscribe",
              "info": {
                "file": "src/internal/Subscriber.ts#L126-L132",
                "info": [],
                "signature": "unsubscribe(): void;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "syncErrorValue",
              "type": "any",
              "description": "/** @internal */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "syncErrorThrown",
              "type": "boolean",
              "description": "/** @internal */"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "syncErrorThrowable",
              "type": "boolean",
              "description": "/** @internal */"
            }
          ]
        ],
        "signature": "class Subscriber<T> extends Subscription implements Observer<T> {\n  syncErrorValue: any = null;\n  syncErrorThrown: boolean = false;\n  syncErrorThrowable: boolean = false;\n\n  static create<T>(\n    next?: (x?: T) => void,\n    error?: (e?: any) => void,\n    complete?: () => void\n  ): Subscriber<T>;\n  next(value?: T): void;\n  error(err?: any): void;\n  complete(): void;\n  unsubscribe(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "src",
    "name": "Notification",
    "overloads": [
      {
        "file": "src/internal/Notification.ts#L38-L238",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents a push-based event or value that an {@link Observable} can emit.\nThis class is particularly useful for operators that manage notifications,\nlike {@link materialize}, {@link dematerialize}, {@link observeOn}, and\nothers. Besides wrapping the actual delivered value, it also annotates it\nwith metadata of, for instance, what type of push message it is (`next`,\n`error`, or `complete`).\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link materialize}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link dematerialize}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link observeOn}" }],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "remove in v8. It is NOT recommended to create instances of `Notification` directly\nand use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\nFor example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "observe",
              "info": {
                "file": "src/internal/Notification.ts#L77-L89",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes the appropriate handler on a passed `observer` given the `kind` of notification.\nIf the handler is missing it will do nothing. Even if the notification is an error, if\nthere is no error handler on the observer, an error will not be thrown, it will noop."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "observer",
                      "description": "The observer to notify.",
                      "type": "PartialObserver<T>"
                    }
                  ]
                ],
                "signature": "observe(observer: PartialObserver<T>): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "do",
              "info": {
                "file": "src/internal/Notification.ts#L117-L130",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "(err: any) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "complete",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "do",
              "info": {
                "file": "src/internal/Notification.ts#L100-L100",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes a notification on the appropriate handler from a list provided.\nIf a handler is missing for the kind of notification, nothing is called\nand no error is thrown, it will be a noop."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "A next handler",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "An error handler",
                      "type": "(err: any) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "complete",
                      "description": "A complete handler",
                      "type": "() => void"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. use {@link Notification.prototype.observe} instead.\n"
                    }
                  ]
                ],
                "signature": "do(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "do",
              "info": {
                "file": "src/internal/Notification.ts#L109-L109",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes a notification on the appropriate handler from a list provided.\nIf a handler is missing for the kind of notification, nothing is called\nand no error is thrown, it will be a noop."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "A next handler",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "An error handler",
                      "type": "(err: any) => void"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. use {@link Notification.prototype.observe} instead.\n"
                    }
                  ]
                ],
                "signature": "do(next: (value: T) => void, error: (err: any) => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "do",
              "info": {
                "file": "src/internal/Notification.ts#L116-L116",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\nthis will not error, and it will be a noop."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "The next handler",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. use {@link Notification.prototype.observe} instead.\n"
                    }
                  ]
                ],
                "signature": "do(next: (value: T) => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "accept",
              "info": {
                "file": "src/internal/Notification.ts#L167-L173",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "nextOrObserver",
                      "description": "",
                      "type": "import(\"C:/Users/tdeschryver/dev/forks/rxjs/src/internal/types\").NextObserver<T> | import(\"C:/Users/tdeschryver/dev/forks/rxjs/src/internal/types\").ErrorObserver<T> | import(\"C:/Users/tdeschryver/dev/forks/rxjs/src/internal/types\").CompletionObserver<T> | ((value: T) => void)"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "(err: any) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "complete",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "accept",
              "info": {
                "file": "src/internal/Notification.ts#L141-L141",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes a notification on the appropriate handler from a list provided.\nIf a handler is missing for the kind of notification, nothing is called\nand no error is thrown, it will be a noop."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "A next handler",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "An error handler",
                      "type": "(err: any) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "complete",
                      "description": "A complete handler",
                      "type": "() => void"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. use {@link Notification.prototype.observe} instead.\n"
                    }
                  ]
                ],
                "signature": "accept(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "accept",
              "info": {
                "file": "src/internal/Notification.ts#L150-L150",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes a notification on the appropriate handler from a list provided.\nIf a handler is missing for the kind of notification, nothing is called\nand no error is thrown, it will be a noop."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "A next handler",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "An error handler",
                      "type": "(err: any) => void"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. use {@link Notification.prototype.observe} instead.\n"
                    }
                  ]
                ],
                "signature": "accept(next: (value: T) => void, error: (err: any) => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "accept",
              "info": {
                "file": "src/internal/Notification.ts#L157-L157",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\nthis will not error, and it will be a noop."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "next",
                      "description": "The next handler",
                      "type": "(value: T) => void"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. use {@link Notification.prototype.observe} instead.\n"
                    }
                  ]
                ],
                "signature": "accept(next: (value: T) => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "accept",
              "info": {
                "file": "src/internal/Notification.ts#L166-L166",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes the appropriate handler on a passed `observer` given the `kind` of notification.\nIf the handler is missing it will do nothing. Even if the notification is an error, if\nthere is no error handler on the observer, an error will not be thrown, it will noop."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "observer",
                      "description": "The observer to notify.",
                      "type": "PartialObserver<T>"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. Use {@link Notification.prototype.observe} instead.\n"
                    }
                  ]
                ],
                "signature": "accept(observer: PartialObserver<T>): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toObservable",
              "info": {
                "file": "src/internal/Notification.ts#L183-L194",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Returns a simple Observable that just delivers the notification represented\nby this Notification instance.\n"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. In order to accomplish converting `Notification` to an {@link Observable}\nyou may use {@link of} and {@link dematerialize}: `of(notification).pipe(dematerialize())`. This is\nbeing removed as it has limited usefulness, and we're trying to streamline the library.\n"
                    }
                  ]
                ],
                "signature": "toObservable(): Observable<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createNext",
              "info": {
                "file": "src/internal/Notification.ts#L208-L210",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "A shortcut to create a Notification instance of the type `next` from a\ngiven value."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{T}",
                      "description": "value The `next` value.",
                      "type": ""
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "{Notification<T>} The \"next\" Notification representing the\nargument."
                    }
                  ],
                  ["nocollapse", { "__kind": "heading", "description": "" }],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. It is NOT recommended to create instances of `Notification` directly\nand use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\nFor example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "static createNext<T>(value: T);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createError",
              "info": {
                "file": "src/internal/Notification.ts#L223-L225",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "A shortcut to create a Notification instance of the type `error` from a\ngiven error."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{any}",
                      "description": "[err] The `error` error.",
                      "type": ""
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "{Notification<T>} The \"error\" Notification representing the\nargument."
                    }
                  ],
                  ["nocollapse", { "__kind": "heading", "description": "" }],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. It is NOT recommended to create instances of `Notification` directly\nand use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\nFor example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "err",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "static createError(err?: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createComplete",
              "info": {
                "file": "src/internal/Notification.ts#L235-L237",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "A shortcut to create a Notification instance of the type `complete`."
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "{Notification<any>} The valueless \"complete\" Notification."
                    }
                  ],
                  ["nocollapse", { "__kind": "heading", "description": "" }],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "remove in v8. It is NOT recommended to create instances of `Notification` directly\nand use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\nFor example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n"
                    }
                  ]
                ],
                "signature": "static createComplete(): Notification<never> & CompleteNotification;"
              }
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hasValue",
              "type": "boolean",
              "description": "/**\r\n   * A value signifying that the notification will \"next\" if observed. In truth,\r\n   * This is really synonomous with just checking `kind === \"N\"`.\r\n   * @deprecated remove in v8. Instead, just check to see if the value of `kind` is `\"N\"`.\r\n   */"
            }
          ]
        ],
        "signature": "class Notification<T> {\n  readonly hasValue: boolean;\n\n  observe(observer: PartialObserver<T>): void;\n  do(\n    next: (value: T) => void,\n    error?: (err: any) => void,\n    complete?: () => void\n  ): void;\n  do(\n    next: (value: T) => void,\n    error: (err: any) => void,\n    complete: () => void\n  ): void;\n  do(next: (value: T) => void, error: (err: any) => void): void;\n  do(next: (value: T) => void): void;\n  accept(\n    nextOrObserver: PartialObserver<T> | ((value: T) => void),\n    error?: (err: any) => void,\n    complete?: () => void\n  );\n  accept(\n    next: (value: T) => void,\n    error: (err: any) => void,\n    complete: () => void\n  ): void;\n  accept(next: (value: T) => void, error: (err: any) => void): void;\n  accept(next: (value: T) => void): void;\n  accept(observer: PartialObserver<T>): void;\n  toObservable(): Observable<T>;\n  static createNext<T>(value: T);\n  static createError(err?: any);\n  static createComplete(): Notification<never> & CompleteNotification;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "src",
    "name": "NotificationKind",
    "overloads": [
      {
        "file": "src/internal/Notification.ts#L17-L21",
        "signature": "export enum NotificationKind {\n  NEXT = \"N\",\n  ERROR = \"E\",\n  COMPLETE = \"C\",\n}",
        "info": [
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "pipe",
    "overloads": [
      {
        "file": "src/internal/util/pipe.ts#L18-L20",
        "signature": "function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fns",
              "description": "",
              "type": "UnaryFunction<any, any>[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/util/pipe.ts#L5-L5",
        "signature": "function pipe<T>(): UnaryFunction<T, T>;",
        "info": []
      },
      {
        "file": "src/internal/util/pipe.ts#L6-L6",
        "signature": "function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fn1",
              "description": "",
              "type": "UnaryFunction<T, A>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/util/pipe.ts#L7-L7",
        "signature": "function pipe<T, A, B>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>\n): UnaryFunction<T, B>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fn1",
              "description": "",
              "type": "UnaryFunction<T, A>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn2",
              "description": "",
              "type": "UnaryFunction<A, B>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/util/pipe.ts#L8-L8",
        "signature": "function pipe<T, A, B, C>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>\n): UnaryFunction<T, C>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fn1",
              "description": "",
              "type": "UnaryFunction<T, A>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn2",
              "description": "",
              "type": "UnaryFunction<A, B>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn3",
              "description": "",
              "type": "UnaryFunction<B, C>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/util/pipe.ts#L9-L9",
        "signature": "function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fn1",
              "description": "",
              "type": "UnaryFunction<T, A>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn2",
              "description": "",
              "type": "UnaryFunction<A, B>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn3",
              "description": "",
              "type": "UnaryFunction<B, C>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn4",
              "description": "",
              "type": "UnaryFunction<C, D>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/util/pipe.ts#L10-L10",
        "signature": "function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fn1",
              "description": "",
              "type": "UnaryFunction<T, A>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn2",
              "description": "",
              "type": "UnaryFunction<A, B>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn3",
              "description": "",
              "type": "UnaryFunction<B, C>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn4",
              "description": "",
              "type": "UnaryFunction<C, D>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn5",
              "description": "",
              "type": "UnaryFunction<D, E>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/util/pipe.ts#L11-L11",
        "signature": "function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fn1",
              "description": "",
              "type": "UnaryFunction<T, A>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn2",
              "description": "",
              "type": "UnaryFunction<A, B>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn3",
              "description": "",
              "type": "UnaryFunction<B, C>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn4",
              "description": "",
              "type": "UnaryFunction<C, D>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn5",
              "description": "",
              "type": "UnaryFunction<D, E>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn6",
              "description": "",
              "type": "UnaryFunction<E, F>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/util/pipe.ts#L12-L12",
        "signature": "function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fn1",
              "description": "",
              "type": "UnaryFunction<T, A>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn2",
              "description": "",
              "type": "UnaryFunction<A, B>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn3",
              "description": "",
              "type": "UnaryFunction<B, C>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn4",
              "description": "",
              "type": "UnaryFunction<C, D>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn5",
              "description": "",
              "type": "UnaryFunction<D, E>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn6",
              "description": "",
              "type": "UnaryFunction<E, F>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn7",
              "description": "",
              "type": "UnaryFunction<F, G>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/util/pipe.ts#L13-L13",
        "signature": "function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fn1",
              "description": "",
              "type": "UnaryFunction<T, A>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn2",
              "description": "",
              "type": "UnaryFunction<A, B>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn3",
              "description": "",
              "type": "UnaryFunction<B, C>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn4",
              "description": "",
              "type": "UnaryFunction<C, D>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn5",
              "description": "",
              "type": "UnaryFunction<D, E>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn6",
              "description": "",
              "type": "UnaryFunction<E, F>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn7",
              "description": "",
              "type": "UnaryFunction<F, G>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn8",
              "description": "",
              "type": "UnaryFunction<G, H>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/util/pipe.ts#L14-L14",
        "signature": "function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fn1",
              "description": "",
              "type": "UnaryFunction<T, A>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn2",
              "description": "",
              "type": "UnaryFunction<A, B>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn3",
              "description": "",
              "type": "UnaryFunction<B, C>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn4",
              "description": "",
              "type": "UnaryFunction<C, D>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn5",
              "description": "",
              "type": "UnaryFunction<D, E>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn6",
              "description": "",
              "type": "UnaryFunction<E, F>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn7",
              "description": "",
              "type": "UnaryFunction<F, G>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn8",
              "description": "",
              "type": "UnaryFunction<G, H>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn9",
              "description": "",
              "type": "UnaryFunction<H, I>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/util/pipe.ts#L15-L15",
        "signature": "function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, {}>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fn1",
              "description": "",
              "type": "UnaryFunction<T, A>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn2",
              "description": "",
              "type": "UnaryFunction<A, B>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn3",
              "description": "",
              "type": "UnaryFunction<B, C>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn4",
              "description": "",
              "type": "UnaryFunction<C, D>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn5",
              "description": "",
              "type": "UnaryFunction<D, E>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn6",
              "description": "",
              "type": "UnaryFunction<E, F>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn7",
              "description": "",
              "type": "UnaryFunction<F, G>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn8",
              "description": "",
              "type": "UnaryFunction<G, H>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn9",
              "description": "",
              "type": "UnaryFunction<H, I>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fns",
              "description": "",
              "type": "UnaryFunction<any, any>[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "noop",
    "overloads": [
      {
        "file": "src/internal/util/noop.ts#L2-L2",
        "signature": "function noop();",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "identity",
    "overloads": [
      {
        "file": "src/internal/util/identity.ts#L1-L3",
        "signature": "function identity<T>(x: T): T;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "x", "description": "", "type": "T" }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "isObservable",
    "overloads": [
      {
        "file": "src/internal/util/isObservable.ts#L7-L9",
        "signature": "function isObservable<T>(obj: any): obj is Observable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Tests to see if the object is an RxJS {@link Observable}"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "obj",
              "description": "the object to test",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "lastValueFrom",
    "overloads": [
      {
        "file": "src/internal/lastValueFrom.ts#L44-L63",
        "signature": "function lastValueFrom<T>(source: Observable<T>);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts an observable to a promise by subscribing to the observable,\nwaiting for it to complete, and resolving the returned promise with the\nlast value from the observed stream.\n\nIf the observable stream completes before any values were emitted, the\nreturned promise will reject with {@link EmptyError}.\n\nIf the observable stream emits an error, the returned promise will reject\nwith that error.\n\n**WARNING**: Only use this with observables you *know* will complete. If the source\nobservable does not complete, you will end up with a promise that is hung up, and\npotentially all of the state of an async function hanging out in memory. To avoid\nthis situation, look into adding something like {@link timeout}, {@link take},\n{@link takeWhile}, or {@link takeUntil} amongst others.\n\n### Example\n\nWait for the last value from a stream and emit it from a promise in\nan async function.\n\n```ts\nimport { interval, lastValueFrom } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nasync function execute() {\nconst source$ = interval(2000).pipe(take(10));\nconst finalNumber = await lastValueFrom(source$);\nconsole.log(`The final number is ${finalNumber}`);\n}\n\nexecute();\n\n// Expected output:\n// \"The final number is 9\"\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "source",
              "description": "the observable to convert to a promise",
              "type": "Observable<T>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "firstValueFrom",
    "overloads": [
      {
        "file": "src/internal/firstValueFrom.ts#L45-L61",
        "signature": "function firstValueFrom<T>(source: Observable<T>);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts an observable to a promise by subscribing to the observable,\nand returning a promise that will resolve as soon as the first value\narrives from the observable. The subscription will then be closed.\n\nIf the observable stream completes before any values were emitted, the\nreturned promise will reject with {@link EmptyError}.\n\nIf the observable stream emits an error, the returned promise will reject\nwith that error.\n\n**WARNING**: Only use this with observables you *know* will emit at least one value,\n*OR* complete. If the source observable does not emit one value or complete, you will\nend up with a promise that is hung up, and potentially all of the state of an\nasync function hanging out in memory. To avoid this situation, look into adding\nsomething like {@link timeout}, {@link take}, {@link takeWhile}, or {@link takeUntil}\namongst others.\n\n### Example\n\nWait for the first value from a stream and emit it from a promise in\nan async function.\n\n```ts\nimport { interval, firstValueFrom } from 'rxjs';\n\nasync function execute() {\nconst source$ = interval(2000);\nconst firstNumber = await firstValueFrom(source$);\nconsole.log(`The first number is ${firstNumber}`);\n}\n\nexecute();\n\n// Expected output:\n// \"The first number is 0\"\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "source",
              "description": "the observable to convert to a promise",
              "type": "Observable<T>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "ArgumentOutOfRangeError",
    "overloads": [
      {
        "file": "src/internal/util/ArgumentOutOfRangeError.ts#L1-L2",
        "signature": "interface ArgumentOutOfRangeError {\n  // inherited from Error\n  name: string;\n  message: string;\n  stack?: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "EmptyError",
    "overloads": [
      {
        "file": "src/internal/util/EmptyError.ts#L1-L2",
        "signature": "interface EmptyError {\n  // inherited from Error\n  name: string;\n  message: string;\n  stack?: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "NotFoundError",
    "overloads": [
      {
        "file": "src/internal/util/NotFoundError.ts#L1-L2",
        "signature": "interface NotFoundError {\n  // inherited from Error\n  name: string;\n  message: string;\n  stack?: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "ObjectUnsubscribedError",
    "overloads": [
      {
        "file": "src/internal/util/ObjectUnsubscribedError.ts#L1-L2",
        "signature": "interface ObjectUnsubscribedError {\n  // inherited from Error\n  name: string;\n  message: string;\n  stack?: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "SequenceError",
    "overloads": [
      {
        "file": "src/internal/util/SequenceError.ts#L1-L2",
        "signature": "interface SequenceError {\n  // inherited from Error\n  name: string;\n  message: string;\n  stack?: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "TimeoutError",
    "overloads": [
      {
        "file": "src/internal/operators/timeout.ts#L56-L65",
        "signature": "interface TimeoutError<T = unknown, M = unknown> {\n  info: TimeoutInfo<T, M> | null;\n\n  // inherited from Error\n  name: string;\n  message: string;\n  stack?: string;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An error emitted when a timeout occurs.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "UnsubscriptionError",
    "overloads": [
      {
        "file": "src/internal/util/UnsubscriptionError.ts#L1-L3",
        "signature": "interface UnsubscriptionError {\n  readonly errors: any[];\n\n  // inherited from Error\n  name: string;\n  message: string;\n  stack?: string;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "bindCallback",
    "overloads": [
      {
        "file": "src/internal/observable/bindCallback.ts#L179-L232",
        "signature": "function bindCallback<T>(\n  callbackFunc: Function,\n  resultSelector?: Function | SchedulerLike,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts a callback API to a function that returns an Observable.\n\n<span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\nit will return a function `g` that when called as `g(x)` will output an\nObservable.</span>\n\n`bindCallback` is not an operator because its input and output are not\nObservables. The input is a function `func` with some parameters. The\nlast parameter must be a callback function that `func` calls when it is\ndone.\n\nThe output of `bindCallback` is a function that takes the same parameters\nas `func`, except the last one (the callback). When the output function\nis called with arguments it will return an Observable. If function `func`\ncalls its callback with one argument, the Observable will emit that value.\nIf on the other hand the callback is called with multiple values the resulting\nObservable will emit an array with said values as arguments.\n\nIt is **very important** to remember that input function `func` is not called\nwhen the output function is, but rather when the Observable returned by the output\nfunction is subscribed. This means if `func` makes an AJAX request, that request\nwill be made every time someone subscribes to the resulting Observable, but not before.\n\nThe last optional parameter - `scheduler` - can be used to control when the call\nto `func` happens after someone subscribes to Observable, as well as when results\npassed to callback will be emitted. By default, the subscription to an Observable calls `func`\nsynchronously, but using {@link asyncScheduler} as the last parameter will defer the call to `func`,\njust like wrapping the call in `setTimeout` with a timeout of `0` would. If you were to use the async Scheduler\nand call `subscribe` on the output Observable, all function calls that are currently executing\nwill end before `func` is invoked.\n\nBy default, results passed to the callback are emitted immediately after `func` invokes the callback.\nIn particular, if the callback is called synchronously, then the subscription of the resulting Observable\nwill call the `next` function synchronously as well.  If you want to defer that call,\nyou may use {@link asyncScheduler} just as before.  This means that by using `Scheduler.async` you can\nensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n\nNote that the Observable created by the output function will always emit a single value\nand then complete immediately. If `func` calls the callback multiple times, values from subsequent\ncalls will not appear in the stream. If you need to listen for multiple calls,\nyou probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n\nIf `func` depends on some context (`this` property) and is not already bound, the context of `func`\nwill be the context that the output function has at call time. In particular, if `func`\nis called as a method of some objec and if `func` is not already bound, in order to preserve the context\nit is recommended that the context of the output function is set to that object as well.\n\nIf the input function calls its callback in the \"node style\" (i.e. first argument to callback is\noptional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\nprovides convenient error handling and probably is a better choice.\n`bindCallback` will treat such functions the same as any other and error parameters\n(whether passed or not) will always be interpreted as regular callback argument.\n\n## Examples\n\n### Convert jQuery's getJSON to an Observable API\n```ts\nimport { bindCallback } from 'rxjs';\nimport * as jQuery from 'jquery';\n\n// Suppose we have jQuery.getJSON('/my/url', callback)\nconst getJSONAsObservable = bindCallback(jQuery.getJSON);\nconst result = getJSONAsObservable('/my/url');\nresult.subscribe(x => console.log(x), e => console.error(e));\n```\n\n### Receive an array of arguments passed to a callback\n```ts\nimport { bindCallback } from 'rxjs';\n\nconst someFunction = (cb) => {\ncb(5, 'some string', {someProperty: 'someValue'})\n};\n\nconst boundSomeFunction = bindCallback(someFunction);\nboundSomeFunction(12, 10).subscribe(values => {\nconsole.log(values); // [22, 2]\n});\n```\n\n### Compare behaviour with and without async Scheduler\n```ts\nimport { bindCallback, asyncScheduler } from 'rxjs';\n\nfunction iCallMyCallbackSynchronously(cb) {\ncb();\n}\n\nconst boundSyncFn = bindCallback(iCallMyCallbackSynchronously);\nconst boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, asyncScheduler);\n\nboundSyncFn().subscribe(() => console.log('I was sync!'));\nboundAsyncFn().subscribe(() => console.log('I was async!'));\nconsole.log('This happened...');\n\n// Logs:\n// I was sync!\n// This happened...\n// I was async!\n```\n\n### Use bindCallback on an object method\n```ts\nimport { bindCallback } from 'rxjs';\n\nconst boundMethod = bindCallback(someObject.methodWithCallback);\nboundMethod\n.call(someObject) // make sure methodWithCallback has access to someObject\n.subscribe(subscriber);\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link bindNodeCallback}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link from}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "func A function with a callback as the last parameter.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler] The scheduler on which to schedule the",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{function(...params: *): Observable} A function which returns the\nObservable that delivers the same values the callback would deliver."
            }
          ],
          ["name", { "__kind": "heading", "description": "bindCallback\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "Function"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "Function | SchedulerLike"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L12-L12",
        "signature": "function bindCallback(\n  callbackFunc: Function,\n  resultSelector: Function,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "Function"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "Function"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L14-L14",
        "signature": "function bindCallback<R1, R2, R3, R4>(\n  callbackFunc: (\n    callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): () => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L15-L15",
        "signature": "function bindCallback<R1, R2, R3>(\n  callbackFunc: (callback: (res1: R1, res2: R2, res3: R3) => any) => any,\n  scheduler?: SchedulerLike\n): () => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(callback: (res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L16-L16",
        "signature": "function bindCallback<R1, R2>(\n  callbackFunc: (callback: (res1: R1, res2: R2) => any) => any,\n  scheduler?: SchedulerLike\n): () => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(callback: (res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L17-L17",
        "signature": "function bindCallback<R1>(\n  callbackFunc: (callback: (res1: R1) => any) => any,\n  scheduler?: SchedulerLike\n): () => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(callback: (res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L18-L18",
        "signature": "function bindCallback(\n  callbackFunc: (callback: () => any) => any,\n  scheduler?: SchedulerLike\n): () => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(callback: () => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L20-L20",
        "signature": "function bindCallback<A1, R1, R2, R3, R4>(\n  callbackFunc: (\n    arg1: A1,\n    callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L21-L21",
        "signature": "function bindCallback<A1, R1, R2, R3>(\n  callbackFunc: (\n    arg1: A1,\n    callback: (res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1) => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, callback: (res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L22-L22",
        "signature": "function bindCallback<A1, R1, R2>(\n  callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2) => any) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1) => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, callback: (res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L23-L23",
        "signature": "function bindCallback<A1, R1>(\n  callbackFunc: (arg1: A1, callback: (res1: R1) => any) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1) => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, callback: (res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L24-L24",
        "signature": "function bindCallback<A1>(\n  callbackFunc: (arg1: A1, callback: () => any) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1) => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, callback: () => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L26-L26",
        "signature": "function bindCallback<A1, A2, R1, R2, R3, R4>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L27-L27",
        "signature": "function bindCallback<A1, A2, R1, R2, R3>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    callback: (res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L28-L28",
        "signature": "function bindCallback<A1, A2, R1, R2>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    callback: (res1: R1, res2: R2) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, callback: (res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L29-L29",
        "signature": "function bindCallback<A1, A2, R1>(\n  callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1) => any) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2) => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, callback: (res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L30-L30",
        "signature": "function bindCallback<A1, A2>(\n  callbackFunc: (arg1: A1, arg2: A2, callback: () => any) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2) => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, callback: () => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L32-L32",
        "signature": "function bindCallback<A1, A2, A3, R1, R2, R3, R4>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L33-L33",
        "signature": "function bindCallback<A1, A2, A3, R1, R2, R3>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    callback: (res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L34-L34",
        "signature": "function bindCallback<A1, A2, A3, R1, R2>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    callback: (res1: R1, res2: R2) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L35-L35",
        "signature": "function bindCallback<A1, A2, A3, R1>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    callback: (res1: R1) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L36-L36",
        "signature": "function bindCallback<A1, A2, A3>(\n  callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: () => any) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, callback: () => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L38-L38",
        "signature": "function bindCallback<A1, A2, A3, A4, R1, R2, R3, R4>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L39-L39",
        "signature": "function bindCallback<A1, A2, A3, A4, R1, R2, R3>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    callback: (res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L40-L40",
        "signature": "function bindCallback<A1, A2, A3, A4, R1, R2>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    callback: (res1: R1, res2: R2) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L41-L41",
        "signature": "function bindCallback<A1, A2, A3, A4, R1>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    callback: (res1: R1) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L42-L42",
        "signature": "function bindCallback<A1, A2, A3, A4>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    callback: () => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: () => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L44-L44",
        "signature": "function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    arg5: A5,\n    callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L45-L45",
        "signature": "function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    arg5: A5,\n    callback: (res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (\n  arg1: A1,\n  arg2: A2,\n  arg3: A3,\n  arg4: A4,\n  arg5: A5\n) => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L46-L46",
        "signature": "function bindCallback<A1, A2, A3, A4, A5, R1, R2>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    arg5: A5,\n    callback: (res1: R1, res2: R2) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L47-L47",
        "signature": "function bindCallback<A1, A2, A3, A4, A5, R1>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    arg5: A5,\n    callback: (res1: R1) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L48-L48",
        "signature": "function bindCallback<A1, A2, A3, A4, A5>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    arg5: A5,\n    callback: () => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: () => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L50-L50",
        "signature": "function bindCallback<A, R>(\n  callbackFunc: (...args: Array<A | ((result: R) => any)>) => any,\n  scheduler?: SchedulerLike\n): (...args: A[]) => Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(...args: (A | ((result: R) => any))[]) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L51-L51",
        "signature": "function bindCallback<A, R>(\n  callbackFunc: (...args: Array<A | ((...results: R[]) => any)>) => any,\n  scheduler?: SchedulerLike\n): (...args: A[]) => Observable<R[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(...args: (A | ((...results: R[]) => any))[]) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindCallback.ts#L53-L53",
        "signature": "function bindCallback(\n  callbackFunc: Function,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "Function"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "bindNodeCallback",
    "overloads": [
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L156-L215",
        "signature": "function bindNodeCallback<T>(\n  callbackFunc: Function,\n  resultSelector?: Function | SchedulerLike,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts a Node.js-style callback API to a function that returns an\nObservable.\n\n<span class=\"informal\">It's just like {@link bindCallback}, but the\ncallback is expected to be of type `callback(error, result)`.</span>\n\n`bindNodeCallback` is not an operator because its input and output are not\nObservables. The input is a function `func` with some parameters, but the\nlast parameter must be a callback function that `func` calls when it is\ndone. The callback function is expected to follow Node.js conventions,\nwhere the first argument to the callback is an error object, signaling\nwhether call was successful. If that object is passed to callback, it means\nsomething went wrong.\n\nThe output of `bindNodeCallback` is a function that takes the same\nparameters as `func`, except the last one (the callback). When the output\nfunction is called with arguments, it will return an Observable.\nIf `func` calls its callback with error parameter present, Observable will\nerror with that value as well. If error parameter is not passed, Observable will emit\nsecond parameter. If there are more parameters (third and so on),\nObservable will emit an array with all arguments, except first error argument.\n\nNote that `func` will not be called at the same time output function is,\nbut rather whenever resulting Observable is subscribed. By default call to\n`func` will happen synchronously after subscription, but that can be changed\nwith proper `scheduler` provided as optional third parameter. {@link SchedulerLike}\ncan also control when values from callback will be emitted by Observable.\nTo find out more, check out documentation for {@link bindCallback}, where\n{@link SchedulerLike} works exactly the same.\n\nAs in {@link bindCallback}, context (`this` property) of input function will be set to context\nof returned function, when it is called.\n\nAfter Observable emits value, it will complete immediately. This means\neven if `func` calls callback again, values from second and consecutive\ncalls will never appear on the stream. If you need to handle functions\nthat call callbacks multiple times, check out {@link fromEvent} or\n{@link fromEventPattern} instead.\n\nNote that `bindNodeCallback` can be used in non-Node.js environments as well.\n\"Node.js-style\" callbacks are just a convention, so if you write for\nbrowsers or any other environment and API you use implements that callback style,\n`bindNodeCallback` can be safely used on that API functions as well.\n\nRemember that Error object passed to callback does not have to be an instance\nof JavaScript built-in `Error` object. In fact, it does not even have to an object.\nError parameter of callback function is interpreted as \"present\", when value\nof that parameter is truthy. It could be, for example, non-zero number, non-empty\nstring or boolean `true`. In all of these cases resulting Observable would error\nwith that value. This means usually regular style callbacks will fail very often when\n`bindNodeCallback` is used. If your Observable errors much more often then you\nwould expect, check if callback really is called in Node.js-style and, if not,\nswitch to {@link bindCallback} instead.\n\nNote that even if error parameter is technically present in callback, but its value\nis falsy, it still won't appear in array emitted by Observable.\n\n## Examples\n###  Read a file from the filesystem and get the data as an Observable\n```ts\nimport * as fs from 'fs';\nconst readFileAsObservable = bindNodeCallback(fs.readFile);\nconst result = readFileAsObservable('./roadNames.txt', 'utf8');\nresult.subscribe(x => console.log(x), e => console.error(e));\n```\n\n### Use on function calling callback with multiple arguments\n```ts\nsomeFunction((err, a, b) => {\nconsole.log(err); // null\nconsole.log(a); // 5\nconsole.log(b); // \"some string\"\n});\nconst boundSomeFunction = bindNodeCallback(someFunction);\nboundSomeFunction()\n.subscribe(value => {\nconsole.log(value); // [5, \"some string\"]\n});\n```\n\n### Use on function calling callback in regular style\n```ts\nsomeFunction(a => {\nconsole.log(a); // 5\n});\nconst boundSomeFunction = bindNodeCallback(someFunction);\nboundSomeFunction()\n.subscribe(\nvalue => {}             // never gets called\nerr => console.log(err) // 5\n);\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link bindCallback}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link from}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "func Function with a Node.js-style callback as the last parameter.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler] The scheduler on which to schedule the",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{function(...params: *): Observable} A function which returns the\nObservable that delivers the same values the Node.js callback would\ndeliver."
            }
          ],
          [
            "name",
            { "__kind": "heading", "description": "bindNodeCallback\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "Function"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "Function | SchedulerLike"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L12-L12",
        "signature": "function bindNodeCallback(\n  callbackFunc: Function,\n  resultSelector: Function,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "Function"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "Function"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L14-L14",
        "signature": "function bindNodeCallback<R1, R2, R3, R4>(\n  callbackFunc: (\n    callback: (\n      err: any,\n      res1: R1,\n      res2: R2,\n      res3: R3,\n      res4: R4,\n      ...args: any[]\n    ) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L15-L15",
        "signature": "function bindNodeCallback<R1, R2, R3>(\n  callbackFunc: (\n    callback: (err: any, res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): () => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L16-L16",
        "signature": "function bindNodeCallback<R1, R2>(\n  callbackFunc: (callback: (err: any, res1: R1, res2: R2) => any) => any,\n  scheduler?: SchedulerLike\n): () => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(callback: (err: any, res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L17-L17",
        "signature": "function bindNodeCallback<R1>(\n  callbackFunc: (callback: (err: any, res1: R1) => any) => any,\n  scheduler?: SchedulerLike\n): () => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(callback: (err: any, res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L18-L18",
        "signature": "function bindNodeCallback(\n  callbackFunc: (callback: (err: any) => any) => any,\n  scheduler?: SchedulerLike\n): () => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(callback: (err: any) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L20-L20",
        "signature": "function bindNodeCallback<A1, R1, R2, R3, R4>(\n  callbackFunc: (\n    arg1: A1,\n    callback: (\n      err: any,\n      res1: R1,\n      res2: R2,\n      res3: R3,\n      res4: R4,\n      ...args: any[]\n    ) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L21-L21",
        "signature": "function bindNodeCallback<A1, R1, R2, R3>(\n  callbackFunc: (\n    arg1: A1,\n    callback: (err: any, res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1) => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L22-L22",
        "signature": "function bindNodeCallback<A1, R1, R2>(\n  callbackFunc: (\n    arg1: A1,\n    callback: (err: any, res1: R1, res2: R2) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1) => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, callback: (err: any, res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L23-L23",
        "signature": "function bindNodeCallback<A1, R1>(\n  callbackFunc: (arg1: A1, callback: (err: any, res1: R1) => any) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1) => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, callback: (err: any, res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L24-L24",
        "signature": "function bindNodeCallback<A1>(\n  callbackFunc: (arg1: A1, callback: (err: any) => any) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1) => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, callback: (err: any) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L26-L26",
        "signature": "function bindNodeCallback<A1, A2, R1, R2, R3, R4>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    callback: (\n      err: any,\n      res1: R1,\n      res2: R2,\n      res3: R3,\n      res4: R4,\n      ...args: any[]\n    ) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L27-L27",
        "signature": "function bindNodeCallback<A1, A2, R1, R2, R3>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    callback: (err: any, res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L28-L28",
        "signature": "function bindNodeCallback<A1, A2, R1, R2>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    callback: (err: any, res1: R1, res2: R2) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L29-L29",
        "signature": "function bindNodeCallback<A1, A2, R1>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    callback: (err: any, res1: R1) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2) => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, callback: (err: any, res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L30-L30",
        "signature": "function bindNodeCallback<A1, A2>(\n  callbackFunc: (arg1: A1, arg2: A2, callback: (err: any) => any) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2) => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, callback: (err: any) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L32-L32",
        "signature": "function bindNodeCallback<A1, A2, A3, R1, R2, R3, R4>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    callback: (\n      err: any,\n      res1: R1,\n      res2: R2,\n      res3: R3,\n      res4: R4,\n      ...args: any[]\n    ) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L33-L33",
        "signature": "function bindNodeCallback<A1, A2, A3, R1, R2, R3>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    callback: (err: any, res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L34-L34",
        "signature": "function bindNodeCallback<A1, A2, A3, R1, R2>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    callback: (err: any, res1: R1, res2: R2) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L35-L35",
        "signature": "function bindNodeCallback<A1, A2, A3, R1>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    callback: (err: any, res1: R1) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L36-L36",
        "signature": "function bindNodeCallback<A1, A2, A3>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    callback: (err: any) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, callback: (err: any) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L38-L38",
        "signature": "function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3, R4>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    callback: (\n      err: any,\n      res1: R1,\n      res2: R2,\n      res3: R3,\n      res4: R4,\n      ...args: any[]\n    ) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L39-L39",
        "signature": "function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    callback: (err: any, res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L40-L40",
        "signature": "function bindNodeCallback<A1, A2, A3, A4, R1, R2>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    callback: (err: any, res1: R1, res2: R2) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L41-L41",
        "signature": "function bindNodeCallback<A1, A2, A3, A4, R1>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    callback: (err: any, res1: R1) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L42-L42",
        "signature": "function bindNodeCallback<A1, A2, A3, A4>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    callback: (err: any) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L44-L44",
        "signature": "function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    arg5: A5,\n    callback: (\n      err: any,\n      res1: R1,\n      res2: R2,\n      res3: R3,\n      res4: R4,\n      ...args: any[]\n    ) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L45-L45",
        "signature": "function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    arg5: A5,\n    callback: (err: any, res1: R1, res2: R2, res3: R3) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (\n  arg1: A1,\n  arg2: A2,\n  arg3: A3,\n  arg4: A4,\n  arg5: A5\n) => Observable<[R1, R2, R3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L46-L46",
        "signature": "function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    arg5: A5,\n    callback: (err: any, res1: R1, res2: R2) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L47-L47",
        "signature": "function bindNodeCallback<A1, A2, A3, A4, A5, R1>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    arg5: A5,\n    callback: (err: any, res1: R1) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L48-L48",
        "signature": "function bindNodeCallback<A1, A2, A3, A4, A5>(\n  callbackFunc: (\n    arg1: A1,\n    arg2: A2,\n    arg3: A3,\n    arg4: A4,\n    arg5: A5,\n    callback: (err: any) => any\n  ) => any,\n  scheduler?: SchedulerLike\n): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "(arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any) => any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/bindNodeCallback.ts#L50-L50",
        "signature": "function bindNodeCallback(\n  callbackFunc: Function,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "callbackFunc",
              "description": "",
              "type": "Function"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "combineLatest",
    "overloads": [
      {
        "file": "src/internal/observable/combineLatest.ts#L238-L269",
        "signature": "function combineLatest<O extends ObservableInput<any>, R>(\n  ...observables: (\n    | O\n    | ((...values: ObservedValueOf<O>[]) => R)\n    | SchedulerLike\n  )[]\n): Observable<R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Combines multiple Observables to create an Observable whose values are\ncalculated from the latest values of each of its input Observables.\n\n<span class=\"informal\">Whenever any input Observable emits a value, it\ncomputes a formula using the latest values from all the inputs, then emits\nthe output of that formula.</span>\n\n![](combineLatest.png)\n\n`combineLatest` combines the values from all the Observables passed in the\nobservables array. This is done by subscribing to each Observable in order and,\nwhenever any Observable emits, collecting an array of the most recent\nvalues from each Observable. So if you pass `n` Observables to this operator,\nthe returned Observable will always emit an array of `n` values, in an order\ncorresponding to the order of the passed Observables (the value from the first Observable\nwill be at index 0 of the array and so on).\n\nStatic version of `combineLatest` accepts an array of Observables. Note that an array of\nObservables is a good choice, if you don't know beforehand how many Observables\nyou will combine. Passing an empty array will result in an Observable that\ncompletes immediately.\n\nTo ensure the output array always has the same length, `combineLatest` will\nactually wait for all input Observables to emit at least once,\nbefore it starts emitting results. This means if some Observable emits\nvalues before other Observables started emitting, all these values but the last\nwill be lost. On the other hand, if some Observable does not emit a value but\ncompletes, resulting Observable will complete at the same moment without\nemitting anything, since it will now be impossible to include a value from the\ncompleted Observable in the resulting array. Also, if some input Observable does\nnot emit any value and never completes, `combineLatest` will also never emit\nand never complete, since, again, it will wait for all streams to emit some\nvalue.\n\nIf at least one Observable was passed to `combineLatest` and all passed Observables\nemitted something, the resulting Observable will complete when all combined\nstreams complete. So even if some Observable completes, the result of\n`combineLatest` will still emit values when other Observables do. In case\nof a completed Observable, its value from now on will always be the last\nemitted value. On the other hand, if any Observable errors, `combineLatest`\nwill error immediately as well, and all other Observables will be unsubscribed.\n\n## Examples\n### Combine two timer Observables\n```ts\nimport { combineLatest, timer } from 'rxjs';\n\nconst firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\nconst secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\nconst combinedTimers = combineLatest([firstTimer, secondTimer]);\ncombinedTimers.subscribe(value => console.log(value));\n// Logs\n// [0, 0] after 0.5s\n// [1, 0] after 1s\n// [1, 1] after 1.5s\n// [2, 1] after 2s\n```\n### Combine a dictionary of Observables\n```ts\nimport { combineLatest, of } from 'rxjs';\nimport { delay, startWith } from 'rxjs/operators';\n\nconst observables = {\na: of(1).pipe(delay(1000), startWith(0)),\nb: of(5).pipe(delay(5000), startWith(0)),\nc: of(10).pipe(delay(10000), startWith(0))\n};\nconst combined = combineLatest(observables);\ncombined.subscribe(value => console.log(value));\n// Logs\n// {a: 0, b: 0, c: 0} immediately\n// {a: 1, b: 0, c: 0} after 1s\n// {a: 1, b: 5, c: 0} after 5s\n// {a: 1, b: 5, c: 10} after 10s\n```\n### Combine an array of Observables\n```ts\nimport { combineLatest, of } from 'rxjs';\nimport { delay, startWith } from 'rxjs/operators';\n\nconst observables = [1, 5, 10].map(\nn => of(n).pipe(\ndelay(n * 1000),   // emit 0 and then emit n after n seconds\nstartWith(0),\n)\n);\nconst combined = combineLatest(observables);\ncombined.subscribe(value => console.log(value));\n// Logs\n// [0, 0, 0] immediately\n// [1, 0, 0] after 1s\n// [1, 5, 0] after 5s\n// [1, 5, 10] after 10s\n```\n\n\n### Use map operator to dynamically calculate the Body-Mass Index\n```ts\nimport { combineLatest, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst weight = of(70, 72, 76, 79, 75);\nconst height = of(1.76, 1.77, 1.78);\nconst bmi = combineLatest([weight, height]).pipe(\nmap(([w, h]) => w / (h * h)),\n);\nbmi.subscribe(x => console.log('BMI is ' + x));\n\n// With output to console:\n// BMI is 24.212293388429753\n// BMI is 23.93948099205209\n// BMI is 23.671253629592222\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link combineAll}" }],
          ["see", { "__kind": "heading", "description": "{@link merge}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link withLatestFrom}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{ObservableInput}",
              "description": "[observables] An array of input Observables to combine with each other.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "[project] An optional function to project the values from",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler=null] The {@link SchedulerLike} to use for subscribing to",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable of projected values from the most recent\nvalues from each input Observable, or an array of the most recent values from\neach input Observable.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "(O | ((...values: ObservedValueOf<O>[]) => R) | SchedulerLike)[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L18-L18",
        "signature": "function combineLatest<O1 extends ObservableInput<any>, R>(\n  sources: [O1],\n  resultSelector: (v1: ObservedValueOf<O1>) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L20-L20",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  R\n>(\n  sources: [O1, O2],\n  resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L22-L22",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  R\n>(\n  sources: [O1, O2, O3],\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>\n  ) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L24-L24",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  R\n>(\n  sources: [O1, O2, O3, O4],\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>\n  ) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3, O4]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L26-L26",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  R\n>(\n  sources: [O1, O2, O3, O4, O5],\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>,\n    v5: ObservedValueOf<O5>\n  ) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3, O4, O5]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L28-L28",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  O6 extends ObservableInput<any>,\n  R\n>(\n  sources: [O1, O2, O3, O4, O5, O6],\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>,\n    v5: ObservedValueOf<O5>,\n    v6: ObservedValueOf<O6>\n  ) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3, O4, O5, O6]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L30-L30",
        "signature": "function combineLatest<O extends ObservableInput<any>, R>(\n  sources: O[],\n  resultSelector: (...args: ObservedValueOf<O>[]) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "O[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(...args: ObservedValueOf<O>[]) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L34-L34",
        "signature": "function combineLatest<O1 extends ObservableInput<any>, R>(\n  v1: O1,\n  resultSelector: (v1: ObservedValueOf<O1>) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L36-L36",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  R\n>(\n  v1: O1,\n  v2: O2,\n  resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L38-L38",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  R\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>\n  ) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L40-L40",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  R\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>\n  ) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L42-L42",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  R\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>,\n    v5: ObservedValueOf<O5>\n  ) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L44-L44",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  O6 extends ObservableInput<any>,\n  R\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  v6: O6,\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>,\n    v5: ObservedValueOf<O5>,\n    v6: ObservedValueOf<O6>\n  ) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "O6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L48-L48",
        "signature": "function combineLatest<O1 extends ObservableInput<any>>(\n  sources: [O1],\n  scheduler: SchedulerLike\n): Observable<[ObservedValueOf<O1>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L50-L50",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>\n>(\n  sources: [O1, O2],\n  scheduler: SchedulerLike\n): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L52-L52",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>\n>(\n  sources: [O1, O2, O3],\n  scheduler: SchedulerLike\n): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L54-L54",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>\n>(\n  sources: [O1, O2, O3, O4],\n  scheduler: SchedulerLike\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3, O4]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L56-L56",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>\n>(\n  sources: [O1, O2, O3, O4, O5],\n  scheduler: SchedulerLike\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>,\n    ObservedValueOf<O5>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3, O4, O5]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L58-L58",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  O6 extends ObservableInput<any>\n>(\n  sources: [O1, O2, O3, O4, O5, O6],\n  scheduler: SchedulerLike\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>,\n    ObservedValueOf<O5>,\n    ObservedValueOf<O6>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3, O4, O5, O6]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L60-L60",
        "signature": "function combineLatest<O extends ObservableInput<any>>(\n  sources: O[],\n  scheduler: SchedulerLike\n): Observable<ObservedValueOf<O>[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "O[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L63-L63",
        "signature": "function combineLatest<O1 extends ObservableInput<any>>(\n  sources: [O1]\n): Observable<[ObservedValueOf<O1>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L64-L64",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>\n>(sources: [O1, O2]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L65-L65",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>\n>(\n  sources: [O1, O2, O3]\n): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L66-L66",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>\n>(\n  sources: [O1, O2, O3, O4]\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3, O4]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L67-L67",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>\n>(\n  sources: [O1, O2, O3, O4, O5]\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>,\n    ObservedValueOf<O5>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3, O4, O5]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L68-L68",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  O6 extends ObservableInput<any>\n>(\n  sources: [O1, O2, O3, O4, O5, O6]\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>,\n    ObservedValueOf<O5>,\n    ObservedValueOf<O6>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[O1, O2, O3, O4, O5, O6]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L69-L69",
        "signature": "function combineLatest<O extends ObservableInput<any>>(\n  sources: O[]\n): Observable<ObservedValueOf<O>[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "O[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L73-L73",
        "signature": "function combineLatest<O1 extends ObservableInput<any>>(\n  v1: O1,\n  scheduler?: SchedulerLike\n): Observable<[ObservedValueOf<O1>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L75-L75",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  scheduler?: SchedulerLike\n): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L77-L77",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  scheduler?: SchedulerLike\n): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L79-L79",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  scheduler?: SchedulerLike\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L81-L81",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  scheduler?: SchedulerLike\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>,\n    ObservedValueOf<O5>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L83-L83",
        "signature": "function combineLatest<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  O6 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  v6: O6,\n  scheduler?: SchedulerLike\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>,\n    ObservedValueOf<O5>,\n    ObservedValueOf<O6>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "O6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L86-L86",
        "signature": "function combineLatest<O extends ObservableInput<any>>(\n  ...observables: O[]\n): Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "O[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L89-L89",
        "signature": "function combineLatest<O extends ObservableInput<any>, R>(\n  ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L92-L92",
        "signature": "function combineLatest<O extends ObservableInput<any>, R>(\n  array: O[],\n  resultSelector: (...values: ObservedValueOf<O>[]) => R,\n  scheduler?: SchedulerLike\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "O[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(...values: ObservedValueOf<O>[]) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L95-L95",
        "signature": "function combineLatest<O extends ObservableInput<any>>(\n  ...observables: Array<O | SchedulerLike>\n): Observable<any[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "(SchedulerLike | O)[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L98-L98",
        "signature": "function combineLatest<O extends ObservableInput<any>, R>(\n  ...observables: Array<\n    O | ((...values: ObservedValueOf<O>[]) => R) | SchedulerLike\n  >\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "(SchedulerLike | O | ((...values: ObservedValueOf<O>[]) => R))[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L101-L101",
        "signature": "function combineLatest<R>(\n  ...observables: Array<\n    ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike\n  >\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L104-L104",
        "signature": "function combineLatest(sourcesObject: {}): Observable<never>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sourcesObject",
              "description": "",
              "type": "{}"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/combineLatest.ts#L105-L105",
        "signature": "function combineLatest<T, K extends keyof T>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sourcesObject",
              "description": "",
              "type": "T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "concat",
    "overloads": [
      {
        "file": "src/internal/observable/concat.ts#L128-L131",
        "signature": "function concat<O extends ObservableInput<any>>(\n  ...observables: Array<O | SchedulerLike>\n): Observable<ObservedValueOf<O>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an output Observable which sequentially emits all values from the first given\nObservable and then moves on to the next.\n\n<span class=\"informal\">Concatenates multiple Observables together by\nsequentially emitting their values, one Observable after the other.</span>\n\n![](concat.png)\n\n`concat` joins multiple Observables together, by subscribing to them one at a time and\nmerging their results into the output Observable. You can pass either an array of\nObservables, or put them directly as arguments. Passing an empty array will result\nin Observable that completes immediately.\n\n`concat` will subscribe to first input Observable and emit all its values, without\nchanging or affecting them in any way. When that Observable completes, it will\nsubscribe to then next Observable passed and, again, emit its values. This will be\nrepeated, until the operator runs out of Observables. When last input Observable completes,\n`concat` will complete as well. At any given moment only one Observable passed to operator\nemits values. If you would like to emit values from passed Observables concurrently, check out\n{@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n`concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n\nNote that if some input Observable never completes, `concat` will also never complete\nand Observables following the one that did not complete will never be subscribed. On the other\nhand, if some Observable simply completes immediately after it is subscribed, it will be\ninvisible for `concat`, which will just move on to the next Observable.\n\nIf any Observable in chain errors, instead of passing control to the next Observable,\n`concat` will error immediately as well. Observables that would be subscribed after\nthe one that emitted error, never will.\n\nIf you pass to `concat` the same Observable many times, its stream of values\nwill be \"replayed\" on every subscription, which means you can repeat given Observable\nas many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\nyou can always use {@link repeat}.\n\n## Examples\n### Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n```ts\nimport { concat, interval, range } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst timer = interval(1000).pipe(take(4));\nconst sequence = range(1, 10);\nconst result = concat(timer, sequence);\nresult.subscribe(x => console.log(x));\n\n// results in:\n// 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n```\n\n### Concatenate 3 Observables\n```ts\nimport { concat, interval } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst timer1 = interval(1000).pipe(take(10));\nconst timer2 = interval(2000).pipe(take(6));\nconst timer3 = interval(500).pipe(take(10));\n\nconst result = concat(timer1, timer2, timer3);\nresult.subscribe(x => console.log(x));\n\n// results in the following:\n// (Prints to console sequentially)\n// -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n// -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n// -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n```\n\n### Concatenate the same Observable to repeat it\n```ts\nimport { concat, interval } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst timer = interval(1000).pipe(take(2));\n\nconcat(timer, timer) // concatenating the same Observable!\n.subscribe(\nvalue => console.log(value),\nerr => {},\n() => console.log('...and it is done!')\n);\n\n// Logs:\n// 0 after 1s\n// 1 after 2s\n// 0 after 3s\n// 1 after 4s\n// \"...and it is done!\" also after 4s\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link concatAll}" }],
          ["see", { "__kind": "heading", "description": "{@link concatMap}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link concatMapTo}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link startWith}" }],
          ["see", { "__kind": "heading", "description": "{@link endWith}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "input1",
              "description": "An input Observable to concatenate with others.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "input2",
              "description": "An input Observable to concatenate with others.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "An optional {@link SchedulerLike} to schedule each",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "(O | SchedulerLike)[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/concat.ts#L8-L8",
        "signature": "function concat<O1 extends ObservableInput<any>>(\n  v1: O1,\n  scheduler: SchedulerLike\n): Observable<ObservedValueOf<O1>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/concat.ts#L10-L10",
        "signature": "function concat<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  scheduler: SchedulerLike\n): Observable<ObservedValueOf<O1> | ObservedValueOf<O2>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/concat.ts#L12-L12",
        "signature": "function concat<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  scheduler: SchedulerLike\n): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/concat.ts#L14-L14",
        "signature": "function concat<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  scheduler: SchedulerLike\n): Observable<\n  | ObservedValueOf<O1>\n  | ObservedValueOf<O2>\n  | ObservedValueOf<O3>\n  | ObservedValueOf<O4>\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/concat.ts#L16-L16",
        "signature": "function concat<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  scheduler: SchedulerLike\n): Observable<\n  | ObservedValueOf<O1>\n  | ObservedValueOf<O2>\n  | ObservedValueOf<O3>\n  | ObservedValueOf<O4>\n  | ObservedValueOf<O5>\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/concat.ts#L18-L18",
        "signature": "function concat<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  O6 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  v6: O6,\n  scheduler: SchedulerLike\n): Observable<\n  | ObservedValueOf<O1>\n  | ObservedValueOf<O2>\n  | ObservedValueOf<O3>\n  | ObservedValueOf<O4>\n  | ObservedValueOf<O5>\n  | ObservedValueOf<O6>\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "O6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/concat.ts#L20-L20",
        "signature": "function concat<A extends ObservableInput<any>[]>(\n  ...observables: A\n): Observable<ObservedValueUnionFromArray<A>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "A"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "defer",
    "overloads": [
      {
        "file": "src/internal/observable/defer.ts#L54-L66",
        "signature": "function defer<R extends ObservableInput<any>>(\n  observableFactory: () => R\n): Observable<ObservedValueOf<R>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an Observable that, on subscribe, calls an Observable factory to\nmake an Observable for each new Observer.\n\n<span class=\"informal\">Creates the Observable lazily, that is, only when it\nis subscribed.\n</span>\n\n![](defer.png)\n\n`defer` allows you to create an Observable only when the Observer\nsubscribes. It waits until an Observer subscribes to it, calls the given\nfactory function to get an Observable -- where a factory function typically\ngenerates a new Observable -- and subscribes the Observer to this Observable.\nIn case the factory function returns a falsy value, then EMPTY is used as\nObservable instead. Last but not least, an exception during the factory\nfunction call is transferred to the Observer by calling `error`.\n\n## Example\n### Subscribe to either an Observable of clicks or an Observable of interval, at random\n```ts\nimport { defer, fromEvent, interval } from 'rxjs';\n\nconst clicksOrInterval = defer(function () {\nreturn Math.random() > 0.5\n? fromEvent(document, 'click')\n: interval(1000);\n});\nclicksOrInterval.subscribe(x => console.log(x));\n\n// Results in the following behavior:\n// If the result of Math.random() is greater than 0.5 it will listen\n// for clicks anywhere on the \"document\"; when document is clicked it\n// will log a MouseEvent object to the console. If the result is less\n// than 0.5 it will emit ascending numbers, one every second(1000ms).\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link Observable}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function():",
              "description": "SubscribableOrPromise} observableFactory The Observable",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable whose Observers' subscriptions trigger\nan invocation of the given Observable factory function."
            }
          ],
          ["static", { "__kind": "heading", "description": "true" }],
          ["name", { "__kind": "heading", "description": "defer" }],
          ["owner", { "__kind": "heading", "description": "Observable\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "observableFactory",
              "description": "",
              "type": "() => R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "empty",
    "overloads": [
      {
        "file": "src/internal/observable/empty.ts#L87-L89",
        "signature": "function empty(scheduler?: SchedulerLike);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an Observable that emits no items to the Observer and immediately\nemits a complete notification.\n\n<span class=\"informal\">Just emits 'complete', and nothing else.</span>\n\n![](empty.png)\n\nThis static operator is useful for creating a simple Observable that only\nemits the complete notification. It can be used for composing with other\nObservables, such as in a {@link mergeMap}.\n\n## Examples\n\n### Emit the number 7, then complete\n\n```ts\nimport { empty } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nconst result = empty().pipe(startWith(7));\nresult.subscribe(x => console.log(x));\n\n// Outputs\n// 7\n```\n\n### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n\n```ts\nimport { empty, interval, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nconst interval$ = interval(1000);\nconst result = interval$.pipe(\nmergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n);\nresult.subscribe(x => console.log(x));\n\n// Results in the following to the console:\n// x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\n// x will occur every 1000ms\n// if x % 2 is equal to 1, print a, b, c (each on its own)\n// if x % 2 is not equal to 1, nothing will be output\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link Observable}" }],
          ["see", { "__kind": "heading", "description": "{@link never}" }],
          ["see", { "__kind": "heading", "description": "{@link of}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link throwError}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "A {@link SchedulerLike} to use for scheduling",
              "type": "SchedulerLike"
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "An \"empty\" Observable: emits only the complete\nnotification."
            }
          ],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "Deprecated in favor of using {@link EMPTY} constant, or {@link scheduled} (e.g. `scheduled([], scheduler)`)\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "forkJoin",
    "overloads": [
      {
        "file": "src/internal/observable/forkJoin.ts#L141-L165",
        "signature": "function forkJoin(...sources: any[]): Observable<any>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Accepts an `Array` of {@link ObservableInput} or a dictionary `Object` of {@link ObservableInput} and returns\nan {@link Observable} that emits either an array of values in the exact same order as the passed array,\nor a dictionary of values in the same shape as the passed dictionary.\n\n<span class=\"informal\">Wait for Observables to complete and then combine last values they emitted;\ncomplete immediately if an empty array is passed.</span>\n\n![](forkJoin.png)\n\n`forkJoin` is an operator that takes any number of input observables which can be passed either as an array\nor a dictionary of input observables. If no input observables are provided (e.g. an empty array is passed),\nthen the resulting stream will complete immediately.\n\n`forkJoin` will wait for all passed observables to emit and complete and then it will emit an array or an object with last\nvalues from corresponding observables.\n\nIf you pass an array of `n` observables to the operator, then the resulting\narray will have `n` values, where the first value is the last one emitted by the first observable,\nsecond value is the last one emitted by the second observable and so on.\n\nIf you pass a dictionary of observables to the operator, then the resulting\nobjects will have the same keys as the dictionary passed, with their last values they have emitted\nlocated at the corresponding key.\n\nThat means `forkJoin` will not emit more than once and it will complete after that. If you need to emit combined\nvalues not only at the end of the lifecycle of passed observables, but also throughout it, try out {@link combineLatest}\nor {@link zip} instead.\n\nIn order for the resulting array to have the same length as the number of input observables, whenever any of\nthe given observables completes without emitting any value, `forkJoin` will complete at that moment as well\nand it will not emit anything either, even if it already has some last values from other observables.\nConversely, if there is an observable that never completes, `forkJoin` will never complete either,\nunless at any point some other observable completes without emitting a value, which brings us back to\nthe previous case. Overall, in order for `forkJoin` to emit a value, all given observables\nhave to emit something at least once and complete.\n\nIf any given observable errors at some point, `forkJoin` will error as well and immediately unsubscribe\nfrom the other observables.\n\nOptionally `forkJoin` accepts a `resultSelector` function, that will be called with values which normally\nwould land in the emitted array. Whatever is returned by the `resultSelector`, will appear in the output\nobservable instead. This means that the default `resultSelector` can be thought of as a function that takes\nall its arguments and puts them into an array. Note that the `resultSelector` will be called only\nwhen `forkJoin` is supposed to emit a result.\n\n## Examples\n\n### Use forkJoin with a dictionary of observable inputs\n```ts\nimport { forkJoin, of, timer } from 'rxjs';\n\nconst observable = forkJoin({\nfoo: of(1, 2, 3, 4),\nbar: Promise.resolve(8),\nbaz: timer(4000),\n});\nobservable.subscribe({\nnext: value => console.log(value),\ncomplete: () => console.log('This is how it ends!'),\n});\n\n// Logs:\n// { foo: 4, bar: 8, baz: 0 } after 4 seconds\n// \"This is how it ends!\" immediately after\n```\n\n### Use forkJoin with an array of observable inputs\n```ts\nimport { forkJoin, of, timer } from 'rxjs';\n\nconst observable = forkJoin([\nof(1, 2, 3, 4),\nPromise.resolve(8),\ntimer(4000),\n]);\nobservable.subscribe({\nnext: value => console.log(value),\ncomplete: () => console.log('This is how it ends!'),\n});\n\n// Logs:\n// [4, 8, 0] after 4 seconds\n// \"This is how it ends!\" immediately after\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link combineLatest}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link zip}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{...ObservableInput}",
              "description": "sources Any number of Observables provided either as an array or as an arguments",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "[project] Function that takes values emitted by input Observables and returns value",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} Observable emitting either an array of last values emitted by passed Observables\nor value from project function.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L12-L12",
        "signature": "function forkJoin<T>(v1: SubscribableOrPromise<T>): Observable<[T]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "SubscribableOrPromise<T>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L14-L14",
        "signature": "function forkJoin<T, T2>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>\n): Observable<[T, T2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L16-L16",
        "signature": "function forkJoin<T, T2, T3>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>\n): Observable<[T, T2, T3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L18-L18",
        "signature": "function forkJoin<T, T2, T3, T4>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>\n): Observable<[T, T2, T3, T4]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L20-L20",
        "signature": "function forkJoin<T, T2, T3, T4, T5>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>\n): Observable<[T, T2, T3, T4, T5]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L22-L22",
        "signature": "function forkJoin<T, T2, T3, T4, T5, T6>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>\n): Observable<[T, T2, T3, T4, T5, T6]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L27-L27",
        "signature": "function forkJoin<A>(sources: [ObservableInput<A>]): Observable<[A]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[any]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L28-L28",
        "signature": "function forkJoin<A, B>(\n  sources: [ObservableInput<A>, ObservableInput<B>]\n): Observable<[A, B]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[any, any]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L29-L29",
        "signature": "function forkJoin<A, B, C>(\n  sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]\n): Observable<[A, B, C]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[any, any, any]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L30-L30",
        "signature": "function forkJoin<A, B, C, D>(\n  sources: [\n    ObservableInput<A>,\n    ObservableInput<B>,\n    ObservableInput<C>,\n    ObservableInput<D>\n  ]\n): Observable<[A, B, C, D]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[any, any, any, any]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L31-L31",
        "signature": "function forkJoin<A, B, C, D, E>(\n  sources: [\n    ObservableInput<A>,\n    ObservableInput<B>,\n    ObservableInput<C>,\n    ObservableInput<D>,\n    ObservableInput<E>\n  ]\n): Observable<[A, B, C, D, E]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[any, any, any, any, any]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L32-L32",
        "signature": "function forkJoin<A, B, C, D, E, F>(\n  sources: [\n    ObservableInput<A>,\n    ObservableInput<B>,\n    ObservableInput<C>,\n    ObservableInput<D>,\n    ObservableInput<E>,\n    ObservableInput<F>\n  ]\n): Observable<[A, B, C, D, E, F]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "[any, any, any, any, any, any]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L33-L33",
        "signature": "function forkJoin<A extends ObservableInput<any>[]>(\n  sources: A\n): Observable<ObservedValueUnionFromArray<A>[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "A"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L36-L36",
        "signature": "function forkJoin(sourcesObject: {}): Observable<never>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sourcesObject",
              "description": "",
              "type": "{}"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L37-L37",
        "signature": "function forkJoin<T, K extends keyof T>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sourcesObject",
              "description": "",
              "type": "T"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L40-L40",
        "signature": "function forkJoin(\n  ...args: Array<ObservableInput<any> | Function>\n): Observable<any>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "args",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/forkJoin.ts#L42-L42",
        "signature": "function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "from",
    "overloads": [
      {
        "file": "src/internal/observable/from.ts#L109-L118",
        "signature": "function from<T>(\n  input: ObservableInput<T>,\n  scheduler?: SchedulerLike\n): Observable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n\n<span class=\"informal\">Converts almost anything to an Observable.</span>\n\n![](from.png)\n\n`from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\nobject into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\nas an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\nconverted through this operator.\n\n## Examples\n\n### Converts an array to an Observable\n\n```ts\nimport { from } from 'rxjs';\n\nconst array = [10, 20, 30];\nconst result = from(array);\n\nresult.subscribe(x => console.log(x));\n\n// Logs:\n// 10\n// 20\n// 30\n```\n\n---\n\n### Convert an infinite iterable (from a generator) to an Observable\n\n```ts\nimport { from } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nfunction* generateDoubles(seed) {\nlet i = seed;\nwhile (true) {\nyield i;\ni = 2 * i; // double it\n}\n}\n\nconst iterator = generateDoubles(3);\nconst result = from(iterator).pipe(take(10));\n\nresult.subscribe(x => console.log(x));\n\n// Logs:\n// 3\n// 6\n// 12\n// 24\n// 48\n// 96\n// 192\n// 384\n// 768\n// 1536\n```\n\n---\n\n### With async scheduler\n\n```ts\nimport { from, asyncScheduler } from 'rxjs';\n\nconsole.log('start');\n\nconst array = [10, 20, 30];\nconst result = from(array, asyncScheduler);\n\nresult.subscribe(x => console.log(x));\n\nconsole.log('end');\n\n// Logs:\n// start\n// end\n// 10\n// 20\n// 30\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link fromEvent}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link fromEventPattern}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{ObservableInput<T>}",
              "description": "A subscription object, a Promise, an Observable-like,",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "An optional {@link SchedulerLike} on which to schedule the emission of values.",
              "type": ""
            }
          ],
          ["return", { "__kind": "heading", "description": "{Observable<T>}" }],
          ["name", { "__kind": "heading", "description": "from" }],
          ["owner", { "__kind": "heading", "description": "Observable\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "input",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/from.ts#L6-L6",
        "signature": "function from<O extends ObservableInput<any>>(\n  input: O\n): Observable<ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "input",
              "description": "",
              "type": "O"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/from.ts#L8-L8",
        "signature": "function from<O extends ObservableInput<any>>(\n  input: O,\n  scheduler: SchedulerLike\n): Observable<ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "input",
              "description": "",
              "type": "O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "fromEvent",
    "overloads": [
      {
        "file": "src/internal/observable/fromEvent.ts#L175-L204",
        "signature": "function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: (...args: any[]) => T\n): Observable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an Observable that emits events of a specific type coming from the\ngiven event target.\n\n<span class=\"informal\">Creates an Observable from DOM events, or Node.js\nEventEmitter events or others.</span>\n\n![](fromEvent.png)\n\n`fromEvent` accepts as a first argument event target, which is an object with methods\nfor registering event handler functions. As a second argument it takes string that indicates\ntype of event we want to listen for. `fromEvent` supports selected types of event targets,\nwhich are described in detail below. If your event target does not match any of the ones listed,\nyou should use {@link fromEventPattern}, which can be used on arbitrary APIs.\nWhen it comes to APIs supported by `fromEvent`, their methods for adding and removing event\nhandler functions have different names, but they all accept a string describing event type\nand function itself, which will be called whenever said event happens.\n\nEvery time resulting Observable is subscribed, event handler function will be registered\nto event target on given event type. When that event fires, value\npassed as a first argument to registered function will be emitted by output Observable.\nWhen Observable is unsubscribed, function will be unregistered from event target.\n\nNote that if event target calls registered function with more than one argument, second\nand following arguments will not appear in resulting stream. In order to get access to them,\nyou can pass to `fromEvent` optional project function, which will be called with all arguments\npassed to event handler. Output Observable will then emit value returned by project function,\ninstead of the usual value.\n\nRemember that event targets listed below are checked via duck typing. It means that\nno matter what kind of object you have and no matter what environment you work in,\nyou can safely use `fromEvent` on that object if it exposes described methods (provided\nof course they behave as was described above). So for example if Node.js library exposes\nevent target which has the same method names as DOM EventTarget, `fromEvent` is still\na good choice.\n\nIf the API you use is more callback then event handler oriented (subscribed\ncallback function fires only once and thus there is no need to manually\nunregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\ninstead.\n\n`fromEvent` supports following types of event targets:\n\n**DOM EventTarget**\n\nThis is an object with `addEventListener` and `removeEventListener` methods.\n\nIn the browser, `addEventListener` accepts - apart from event type string and event\nhandler function arguments - optional third parameter, which is either an object or boolean,\nboth used for additional configuration how and when passed function will be called. When\n`fromEvent` is used with event target of that type, you can provide this values\nas third parameter as well.\n\n**Node.js EventEmitter**\n\nAn object with `addListener` and `removeListener` methods.\n\n**JQuery-style event target**\n\nAn object with `on` and `off` methods\n\n**DOM NodeList**\n\nList of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n\nAlthough this collection is not event target in itself, `fromEvent` will iterate over all Nodes\nit contains and install event handler function in every of them. When returned Observable\nis unsubscribed, function will be removed from all Nodes.\n\n**DOM HtmlCollection**\n\nJust as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\ninstalled and removed in each of elements.\n\n\n## Examples\n### Emits clicks happening on the DOM document\n```ts\nimport { fromEvent } from 'rxjs';\n\nconst clicks = fromEvent(document, 'click');\nclicks.subscribe(x => console.log(x));\n\n// Results in:\n// MouseEvent object logged to console every time a click\n// occurs on the document.\n```\n\n### Use addEventListener with capture option\n```ts\nimport { fromEvent } from 'rxjs';\n\nconst clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n// which will be passed to addEventListener\nconst clicksInDiv = fromEvent(someDivInDocument, 'click');\n\nclicksInDocument.subscribe(() => console.log('document'));\nclicksInDiv.subscribe(() => console.log('div'));\n\n// By default events bubble UP in DOM tree, so normally\n// when we would click on div in document\n// \"div\" would be logged first and then \"document\".\n// Since we specified optional `capture` option, document\n// will catch event when it goes DOWN DOM tree, so console\n// will log \"document\" and then \"div\".\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link bindCallback}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link bindNodeCallback}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link fromEventPattern}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{FromEventTarget<T>}",
              "description": "target The DOM EventTarget, Node.js",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{string}",
              "description": "eventName The event name of interest, being emitted by the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{EventListenerOptions}",
              "description": "[options] Options to pass through to addEventListener",
              "type": ""
            }
          ],
          ["return", { "__kind": "heading", "description": "{Observable<T>}" }],
          ["name", { "__kind": "heading", "description": "fromEvent\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "target",
              "description": "",
              "type": "FromEventTarget<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "eventName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "EventListenerOptions | ((...args: any[]) => T)"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(...args: any[]) => T"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/fromEvent.ts#L48-L48",
        "signature": "function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "target",
              "description": "",
              "type": "FromEventTarget<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "eventName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/fromEvent.ts#L50-L50",
        "signature": "function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  resultSelector?: (...args: any[]) => T\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "target",
              "description": "",
              "type": "FromEventTarget<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "eventName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(...args: any[]) => T"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/fromEvent.ts#L51-L51",
        "signature": "function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options?: EventListenerOptions\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "target",
              "description": "",
              "type": "FromEventTarget<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "eventName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "EventListenerOptions"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/fromEvent.ts#L53-L53",
        "signature": "function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options: EventListenerOptions,\n  resultSelector: (...args: any[]) => T\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "target",
              "description": "",
              "type": "FromEventTarget<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "eventName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "EventListenerOptions"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(...args: any[]) => T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "fromEventPattern",
    "overloads": [
      {
        "file": "src/internal/observable/fromEventPattern.ts#L141-L169",
        "signature": "function fromEventPattern<T>(\n  addHandler: (handler: NodeEventHandler) => any,\n  removeHandler?: (handler: NodeEventHandler, signal?: any) => void,\n  resultSelector?: (...args: any[]) => T\n): Observable<T | T[]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an Observable from an arbitrary API for registering event handlers.\n\n<span class=\"informal\">When that method for adding event handler was something {@link fromEvent}\nwas not prepared for.</span>\n\n![](fromEventPattern.png)\n\n`fromEventPattern` allows you to convert into an Observable any API that supports registering handler functions\nfor events. It is similar to {@link fromEvent}, but far\nmore flexible. In fact, all use cases of {@link fromEvent} could be easily handled by\n`fromEventPattern` (although in slightly more verbose way).\n\nThis operator accepts as a first argument an `addHandler` function, which will be injected with\nhandler parameter. That handler is actually an event handler function that you now can pass\nto API expecting it. `addHandler` will be called whenever Observable\nreturned by the operator is subscribed, so registering handler in API will not\nnecessarily happen when `fromEventPattern` is called.\n\nAfter registration, every time an event that we listen to happens,\nObservable returned by `fromEventPattern` will emit value that event handler\nfunction was called with. Note that if event handler was called with more\nthan one argument, second and following arguments will not appear in the Observable.\n\nIf API you are using allows to unregister event handlers as well, you can pass to `fromEventPattern`\nanother function - `removeHandler` - as a second parameter. It will be injected\nwith the same handler function as before, which now you can use to unregister\nit from the API. `removeHandler` will be called when consumer of resulting Observable\nunsubscribes from it.\n\nIn some APIs unregistering is actually handled differently. Method registering an event handler\nreturns some kind of token, which is later used to identify which function should\nbe unregistered or it itself has method that unregisters event handler.\nIf that is the case with your API, make sure token returned\nby registering method is returned by `addHandler`. Then it will be passed\nas a second argument to `removeHandler`, where you will be able to use it.\n\nIf you need access to all event handler parameters (not only the first one),\nor you need to transform them in any way, you can call `fromEventPattern` with optional\nthird parameter - project function which will accept all arguments passed to\nevent handler when it is called. Whatever is returned from project function will appear on\nresulting stream instead of usual event handlers first argument. This means\nthat default project can be thought of as function that takes its first parameter\nand ignores the rest.\n\n## Example\n### Emits clicks happening on the DOM document\n\n```ts\nimport { fromEventPattern } from 'rxjs';\n\nfunction addClickHandler(handler) {\ndocument.addEventListener('click', handler);\n}\n\nfunction removeClickHandler(handler) {\ndocument.removeEventListener('click', handler);\n}\n\nconst clicks = fromEventPattern(\naddClickHandler,\nremoveClickHandler\n);\nclicks.subscribe(x => console.log(x));\n\n// Whenever you click anywhere in the browser, DOM MouseEvent\n// object will be logged.\n```\n\n## Example\n### Use with API that returns cancellation token\n\n```ts\nimport { fromEventPattern } from 'rxjs';\n\nconst token = someAPI.registerEventHandler(function() {});\nsomeAPI.unregisterEventHandler(token); // this APIs cancellation method accepts\n// not handler itself, but special token.\n\nconst someAPIObservable = fromEventPattern(\nfunction(handler) { return someAPI.registerEventHandler(handler); }, // Note that we return the token here...\nfunction(handler, token) { someAPI.unregisterEventHandler(token); }  // ...to then use it here.\n);\n```\n\n## Example\n### Use with project function\n\n```ts\nimport { fromEventPattern } from 'rxjs';\n\nsomeAPI.registerEventHandler((eventType, eventMessage) => {\nconsole.log(eventType, eventMessage); // Logs \"EVENT_TYPE\" \"EVENT_MESSAGE\" to console.\n});\n\nconst someAPIObservable = fromEventPattern(\nhandler => someAPI.registerEventHandler(handler),\nhandler => someAPI.unregisterEventHandler(handler)\n(eventType, eventMessage) => eventType + \" --- \" + eventMessage // without that function only \"EVENT_TYPE\"\n);                                                                // would be emitted by the Observable\n\nsomeAPIObservable.subscribe(value => console.log(value));\n\n// Logs:\n// \"EVENT_TYPE --- EVENT_MESSAGE\"\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link fromEvent}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bindCallback}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link bindNodeCallback}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(handler:",
              "description": "Function): any} addHandler A function that takes",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(handler:",
              "description": "Function, token?: any): void} [removeHandler] A function that",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(...args:",
              "description": "any): T} [project] A function to",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} Observable which, when an event happens, emits first parameter\npassed to registered event handler. Alternatively it emits whatever project function returns\nat that moment."
            }
          ],
          ["static", { "__kind": "heading", "description": "true" }],
          ["name", { "__kind": "heading", "description": "fromEventPattern" }],
          ["owner", { "__kind": "heading", "description": "Observable\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "addHandler",
              "description": "",
              "type": "(handler: NodeEventHandler) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "removeHandler",
              "description": "",
              "type": "(handler: NodeEventHandler, signal?: any) => void"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(...args: any[]) => T"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/fromEventPattern.ts#L8-L8",
        "signature": "function fromEventPattern<T>(\n  addHandler: (handler: NodeEventHandler) => any,\n  removeHandler?: (handler: NodeEventHandler, signal?: any) => void\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "addHandler",
              "description": "",
              "type": "(handler: NodeEventHandler) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "removeHandler",
              "description": "",
              "type": "(handler: NodeEventHandler, signal?: any) => void"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/fromEventPattern.ts#L10-L10",
        "signature": "function fromEventPattern<T>(\n  addHandler: (handler: NodeEventHandler) => any,\n  removeHandler?: (handler: NodeEventHandler, signal?: any) => void,\n  resultSelector?: (...args: any[]) => T\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "addHandler",
              "description": "",
              "type": "(handler: NodeEventHandler) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "removeHandler",
              "description": "",
              "type": "(handler: NodeEventHandler, signal?: any) => void"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(...args: any[]) => T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "generate",
    "overloads": [
      {
        "file": "src/internal/observable/generate.ts#L336-L408",
        "signature": "function generate<T, S>(\n  initialStateOrOptions: S | GenerateOptions<T, S>,\n  condition?: ConditionFunc<S>,\n  iterate?: IterateFunc<S>,\n  resultSelectorOrScheduler?: ResultFunc<S, T> | SchedulerLike,\n  scheduler?: SchedulerLike\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "initialStateOrOptions",
              "description": "",
              "type": "S | GenerateOptions<T, S>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "condition",
              "description": "",
              "type": "ConditionFunc<S>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "iterate",
              "description": "",
              "type": "IterateFunc<S>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelectorOrScheduler",
              "description": "",
              "type": "ResultFunc<S, T> | SchedulerLike"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/generate.ts#L98-L102",
        "signature": "function generate<T, S>(\n  initialState: S,\n  condition: ConditionFunc<S>,\n  iterate: IterateFunc<S>,\n  resultSelector: ResultFunc<S, T>,\n  scheduler?: SchedulerLike\n): Observable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Generates an observable sequence by running a state-driven loop\nproducing the sequence's elements, using the specified scheduler\nto send out observer messages.\n\n![](generate.png)\n\n## Examples\n\n### Produces sequences of number\n\n```ts\nimport { generate } from 'rxjs';\n\nconst result = generate(0, x => x < 3, x => x + 1, x => x);\n\nresult.subscribe(x => console.log(x));\n\n// Logs:\n// 0\n// 1\n// 2\n```\n\n### Use asap scheduler\n\n```ts\nimport { generate } from 'rxjs';\n\nconst result = generate(1, x => x < 5, x => x * 2, x => x + 1, asap);\n\nresult.subscribe(x => console.log(x));\n\n// Logs:\n// 2\n// 3\n// 5\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link from}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link Observable}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{S}",
              "description": "initialState Initial state.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function",
              "description": "(state: S): boolean} condition Condition to terminate generation (upon returning false).",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function",
              "description": "(state: S): S} iterate Iteration step function.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function",
              "description": "(state: S): T} resultSelector Selector function for results produced in the sequence. (deprecated)",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.",
              "type": ""
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "{Observable<T>} The generated sequence.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "initialState",
              "description": "",
              "type": "S"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "condition",
              "description": "",
              "type": "ConditionFunc<S>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "iterate",
              "description": "",
              "type": "IterateFunc<S>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "ResultFunc<S, T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/generate.ts#L246-L249",
        "signature": "function generate<S>(\n  initialState: S,\n  condition: ConditionFunc<S>,\n  iterate: IterateFunc<S>,\n  scheduler?: SchedulerLike\n): Observable<S>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Generates an Observable by running a state-driven loop\nthat emits an element on each iteration.\n\n<span class=\"informal\">Use it instead of nexting values in a for loop.</span>\n\n![](generate.png)\n\n`generate` allows you to create a stream of values generated with a loop very similar to\na traditional for loop. The first argument of `generate` is a beginning value. The second argument\nis a function that accepts this value and tests if some condition still holds. If it does,\nthen the loop continues, if not, it stops. The third value is a function which takes the\npreviously defined value and modifies it in some way on each iteration. Note how these three parameters\nare direct equivalents of three expressions in a traditional for loop: the first expression\ninitializes some state (for example, a numeric index), the second tests if the loop can perform the next\niteration (for example, if the index is lower than 10) and the third states how the defined value\nwill be modified on every step (for example, the index will be incremented by one).\n\nReturn value of a `generate` operator is an Observable that on each loop iteration\nemits a value. First of all, the condition function is ran. If it returns true, then the Observable\nemits the currently stored value (initial value at the first iteration) and finally updates\nthat value with iterate function. If at some point the condition returns false, then the Observable\ncompletes at that moment.\n\nOptionally you can pass a fourth parameter to `generate` - a result selector function which allows you\nto immediately map the value that would normally be emitted by an Observable.\n\nIf you find three anonymous functions in `generate` call hard to read, you can provide\na single object to the operator instead where the object has the properties: `initialState`,\n`condition`, `iterate` and `resultSelector`, which should have respective values that you\nwould normally pass to `generate`. `resultSelector` is still optional, but that form\nof calling `generate` allows you to omit `condition` as well. If you omit it, that means\ncondition always holds, or in other words the resulting Observable will never complete.\n\nBoth forms of `generate` can optionally accept a scheduler. In case of a multi-parameter call,\nscheduler simply comes as a last argument (no matter if there is a `resultSelector`\nfunction or not). In case of a single-parameter call, you can provide it as a\n`scheduler` property on the object passed to the operator. In both cases, a scheduler decides when\nthe next iteration of the loop will happen and therefore when the next value will be emitted\nby the Observable. For example, to ensure that each value is pushed to the Observer\non a separate task in the event loop, you could use the `async` scheduler. Note that\nby default (when no scheduler is passed) values are simply emitted synchronously.\n\n\n## Examples\n\n### Use with condition and iterate functions\n\n```ts\nimport { generate } from 'rxjs';\n\nconst result = generate(0, x => x < 3, x => x + 1);\n\nresult.subscribe({\nnext: value => console.log(value),\ncomplete: () => console.log('Complete!')\n});\n\n// Logs:\n// 0\n// 1\n// 2\n// \"Complete!\"\n```\n\n### Use with condition, iterate and resultSelector functions\n\n```ts\nimport { generate } from 'rxjs';\n\nconst result = generate(0, x => x < 3, x => x + 1, x => x * 1000);\n\nresult.subscribe({\nnext: value => console.log(value),\ncomplete: () => console.log('complete!')\n});\n\n// Logs:\n// 0\n// 1000\n// 2000\n// \"complete!\"\n```\n\n### Use with options object\n\n```ts\nimport { generate } from 'rxjs';\n\nconst result = generate({\ninitialState: 0,\ncondition(value) { return value < 3; },\niterate(value) { return value + 1; },\nresultSelector(value) { return value * 1000; }\n});\n\nresult.subscribe({\nnext: value => console.log(value),\ncomplete: () => console.log('complete!')\n});\n\n// Logs:\n// 0\n// 1000\n// 2000\n// \"Complete!\"\n```\n\n### Use options object without condition function\n\n```ts\nimport { generate } from 'rxjs';\n\nconst result = generate({\ninitialState: 0,\niterate(value) { return value + 1; },\nresultSelector(value) { return value * 1000; }\n});\n\nresult.subscribe({\nnext: value => console.log(value),\ncomplete: () => console.log('complete!') // This will never run\n});\n\n// Logs:\n// 0\n// 1000\n// 2000\n// 3000\n// ...and never stops.\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link from}" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link index/Observable.create}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{S}",
              "description": "initialState Initial state.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function",
              "description": "(state: S): boolean} condition Condition to terminate generation (upon returning false).",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function",
              "description": "(state: S): S} iterate Iteration step function.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function",
              "description": "(state: S): T} [resultSelector] Selector function for results produced in the sequence.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Scheduler}",
              "description": "[scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emitting immediately.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} The generated sequence.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "initialState",
              "description": "",
              "type": "S"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "condition",
              "description": "",
              "type": "ConditionFunc<S>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "iterate",
              "description": "",
              "type": "IterateFunc<S>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/generate.ts#L291-L291",
        "signature": "function generate<S>(options: GenerateBaseOptions<S>): Observable<S>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Generates an observable sequence by running a state-driven loop\nproducing the sequence's elements, using the specified scheduler\nto send out observer messages.\nThe overload accepts options object that might contain initial state, iterate,\ncondition and scheduler.\n\n![](generate.png)\n\n## Examples\n\n### Use options object with condition function\n\n```ts\nimport { generate } from 'rxjs';\n\nconst result = generate({\ninitialState: 0,\ncondition: x => x < 3,\niterate: x => x + 1,\n});\n\nresult.subscribe({\nnext: value => console.log(value),\ncomplete: () => console.log('complete!')\n});\n\n// Logs:\n// 0\n// 1\n// 2\n// \"Complete!\".\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link from}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link Observable}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{GenerateBaseOptions<S>}",
              "description": "options Object that must contain initialState, iterate and might contain condition and scheduler.",
              "type": ""
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "{Observable<S>} The generated sequence.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "GenerateBaseOptions<S>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/generate.ts#L334-L334",
        "signature": "function generate<T, S>(options: GenerateOptions<T, S>): Observable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Generates an observable sequence by running a state-driven loop\nproducing the sequence's elements, using the specified scheduler\nto send out observer messages.\nThe overload accepts options object that might contain initial state, iterate,\ncondition, result selector and scheduler.\n\n![](generate.png)\n\n## Examples\n\n### Use options object with condition and iterate function\n\n```ts\nimport { generate } from 'rxjs';\n\nconst result = generate({\ninitialState: 0,\ncondition: x => x < 3,\niterate: x => x + 1,\nresultSelector: x => x,\n});\n\nresult.subscribe({\nnext: value => console.log(value),\ncomplete: () => console.log('complete!')\n});\n\n// Logs:\n// 0\n// 1\n// 2\n// \"Complete!\".\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link from}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link Observable}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{GenerateOptions<T,",
              "description": "S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.",
              "type": ""
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "{Observable<T>} The generated sequence.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "GenerateOptions<T, S>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "iif",
    "overloads": [
      {
        "file": "src/internal/observable/iif.ts#L94-L100",
        "signature": "function iif<T = never, F = never>(\n  condition: () => boolean,\n  trueResult: SubscribableOrPromise<T> = EMPTY,\n  falseResult: SubscribableOrPromise<F> = EMPTY\n): Observable<T | F>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Decides at subscription time which Observable will actually be subscribed.\n\n<span class=\"informal\">`If` statement for Observables.</span>\n\n`iif` accepts a condition function and two Observables. When\nan Observable returned by the operator is subscribed, condition function will be called.\nBased on what boolean it returns at that moment, consumer will subscribe either to\nthe first Observable (if condition was true) or to the second (if condition was false). Condition\nfunction may also not return anything - in that case condition will be evaluated as false and\nsecond Observable will be subscribed.\n\nNote that Observables for both cases (true and false) are optional. If condition points to an Observable that\nwas left undefined, resulting stream will simply complete immediately. That allows you to, rather\nthan controlling which Observable will be subscribed, decide at runtime if consumer should have access\nto given Observable or not.\n\nIf you have more complex logic that requires decision between more than two Observables, {@link defer}\nwill probably be a better choice. Actually `iif` can be easily implemented with {@link defer}\nand exists only for convenience and readability reasons.\n\n\n## Examples\n### Change at runtime which Observable will be subscribed\n```ts\nimport { iif, of } from 'rxjs';\n\nlet subscribeToFirst;\nconst firstOrSecond = iif(\n() => subscribeToFirst,\nof('first'),\nof('second'),\n);\n\nsubscribeToFirst = true;\nfirstOrSecond.subscribe(value => console.log(value));\n\n// Logs:\n// \"first\"\n\nsubscribeToFirst = false;\nfirstOrSecond.subscribe(value => console.log(value));\n\n// Logs:\n// \"second\"\n\n```\n\n### Control an access to an Observable\n```ts\nlet accessGranted;\nconst observableIfYouHaveAccess = iif(\n() => accessGranted,\nof('It seems you have an access...'), // Note that only one Observable is passed to the operator.\n);\n\naccessGranted = true;\nobservableIfYouHaveAccess.subscribe(\nvalue => console.log(value),\nerr => {},\n() => console.log('The end'),\n);\n\n// Logs:\n// \"It seems you have an access...\"\n// \"The end\"\n\naccessGranted = false;\nobservableIfYouHaveAccess.subscribe(\nvalue => console.log(value),\nerr => {},\n() => console.log('The end'),\n);\n\n// Logs:\n// \"The end\"\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link defer}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function():",
              "description": "boolean} condition Condition which Observable should be chosen.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable}",
              "description": "[trueObservable] An Observable that will be subscribed if condition is true.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable}",
              "description": "[falseObservable] An Observable that will be subscribed if condition is false.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} Either first or second Observable, depending on condition."
            }
          ],
          ["static", { "__kind": "heading", "description": "true" }],
          ["name", { "__kind": "heading", "description": "iif" }],
          ["owner", { "__kind": "heading", "description": "Observable\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "condition",
              "description": "",
              "type": "() => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "trueResult",
              "description": "",
              "type": "SubscribableOrPromise<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "falseResult",
              "description": "",
              "type": "SubscribableOrPromise<F>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "interval",
    "overloads": [
      {
        "file": "src/internal/observable/interval.ts#L55-L71",
        "signature": "function interval(\n  period = 0,\n  scheduler: SchedulerLike = async\n): Observable<number>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an Observable that emits sequential numbers every specified\ninterval of time, on a specified {@link SchedulerLike}.\n\n<span class=\"informal\">Emits incremental numbers periodically in time.\n</span>\n\n![](interval.png)\n\n`interval` returns an Observable that emits an infinite sequence of\nascending integers, with a constant interval of time of your choosing\nbetween those emissions. The first emission is not sent immediately, but\nonly after the first period has passed. By default, this operator uses the\n`async` {@link SchedulerLike} to provide a notion of time, but you may pass any\n{@link SchedulerLike} to it.\n\n## Example\nEmits ascending numbers, one every second (1000ms) up to the number 3\n```ts\nimport { interval } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst numbers = interval(1000);\n\nconst takeFourNumbers = numbers.pipe(take(4));\n\ntakeFourNumbers.subscribe(x => console.log('Next: ', x));\n\n// Logs:\n// Next: 0\n// Next: 1\n// Next: 2\n// Next: 3\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link timer}" }],
          ["see", { "__kind": "heading", "description": "{@link delay}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[period=0] The interval size in milliseconds (by default)",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler=async] The {@link SchedulerLike} to use for scheduling",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits a sequential number each time\ninterval."
            }
          ],
          ["static", { "__kind": "heading", "description": "true" }],
          ["name", { "__kind": "heading", "description": "interval" }],
          ["owner", { "__kind": "heading", "description": "Observable\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "period",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "merge",
    "overloads": [
      {
        "file": "src/internal/observable/merge.ts#L122-L140",
        "signature": "function merge<T, R>(\n  ...observables: Array<\n    ObservableInput<any> | SchedulerLike | number | undefined\n  >\n): Observable<R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an output Observable which concurrently emits all values from every\ngiven input Observable.\n\n<span class=\"informal\">Flattens multiple Observables together by blending\ntheir values into one Observable.</span>\n\n![](merge.png)\n\n`merge` subscribes to each given input Observable (as arguments), and simply\nforwards (without doing any transformation) all the values from all the input\nObservables to the output Observable. The output Observable only completes\nonce all input Observables have completed. Any error delivered by an input\nObservable will be immediately emitted on the output Observable.\n\n## Examples\n### Merge together two Observables: 1s interval and clicks\n```ts\nimport { merge, fromEvent, interval } from 'rxjs';\n\nconst clicks = fromEvent(document, 'click');\nconst timer = interval(1000);\nconst clicksOrTimer = merge(clicks, timer);\nclicksOrTimer.subscribe(x => console.log(x));\n\n// Results in the following:\n// timer will emit ascending values, one every second(1000ms) to console\n// clicks logs MouseEvents to console everytime the \"document\" is clicked\n// Since the two streams are merged you see these happening\n// as they occur.\n```\n\n### Merge together 3 Observables, but only 2 run concurrently\n```ts\nimport { merge, interval } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst timer1 = interval(1000).pipe(take(10));\nconst timer2 = interval(2000).pipe(take(6));\nconst timer3 = interval(500).pipe(take(10));\nconst concurrent = 2; // the argument\nconst merged = merge(timer1, timer2, timer3, concurrent);\nmerged.subscribe(x => console.log(x));\n\n// Results in the following:\n// - First timer1 and timer2 will run concurrently\n// - timer1 will emit a value every 1000ms for 10 iterations\n// - timer2 will emit a value every 2000ms for 6 iterations\n// - after timer1 hits its max iteration, timer2 will\n//   continue, and timer3 will start to run concurrently with timer2\n// - when timer2 hits its max iteration it terminates, and\n//   timer3 will continue to emit a value every 500ms until it is complete\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link mergeAll}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeMap}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeMapTo}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link mergeScan}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{...ObservableInput}",
              "description": "observables Input Observables to merge together.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[concurrent=Infinity] Maximum number of input",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler=null] The {@link SchedulerLike} to use for managing",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} an Observable that emits items that are the result of\nevery input Observable."
            }
          ],
          ["static", { "__kind": "heading", "description": "true" }],
          ["name", { "__kind": "heading", "description": "merge" }],
          ["owner", { "__kind": "heading", "description": "Observable\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L9-L9",
        "signature": "function merge<T>(\n  v1: ObservableInput<T>,\n  scheduler: SchedulerLike\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L11-L11",
        "signature": "function merge<T>(\n  v1: ObservableInput<T>,\n  concurrent: number,\n  scheduler: SchedulerLike\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L13-L13",
        "signature": "function merge<T, T2>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  scheduler: SchedulerLike\n): Observable<T | T2>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L15-L15",
        "signature": "function merge<T, T2>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  concurrent: number,\n  scheduler: SchedulerLike\n): Observable<T | T2>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L17-L17",
        "signature": "function merge<T, T2, T3>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L19-L19",
        "signature": "function merge<T, T2, T3>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  concurrent: number,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L21-L21",
        "signature": "function merge<T, T2, T3, T4>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L23-L23",
        "signature": "function merge<T, T2, T3, T4>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  concurrent: number,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L25-L25",
        "signature": "function merge<T, T2, T3, T4, T5>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4 | T5>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L27-L27",
        "signature": "function merge<T, T2, T3, T4, T5>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  concurrent: number,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4 | T5>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L29-L29",
        "signature": "function merge<T, T2, T3, T4, T5, T6>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4 | T5 | T6>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L31-L31",
        "signature": "function merge<T, T2, T3, T4, T5, T6>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>,\n  concurrent: number,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4 | T5 | T6>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L33-L33",
        "signature": "function merge<T>(v1: ObservableInput<T>): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L34-L34",
        "signature": "function merge<T>(v1: ObservableInput<T>, concurrent?: number): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L35-L35",
        "signature": "function merge<T, T2>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>\n): Observable<T | T2>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L36-L36",
        "signature": "function merge<T, T2>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  concurrent?: number\n): Observable<T | T2>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L37-L37",
        "signature": "function merge<T, T2, T3>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>\n): Observable<T | T2 | T3>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L38-L38",
        "signature": "function merge<T, T2, T3>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  concurrent?: number\n): Observable<T | T2 | T3>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L39-L39",
        "signature": "function merge<T, T2, T3, T4>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>\n): Observable<T | T2 | T3 | T4>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L40-L40",
        "signature": "function merge<T, T2, T3, T4>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  concurrent?: number\n): Observable<T | T2 | T3 | T4>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L41-L41",
        "signature": "function merge<T, T2, T3, T4, T5>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>\n): Observable<T | T2 | T3 | T4 | T5>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L42-L42",
        "signature": "function merge<T, T2, T3, T4, T5>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  concurrent?: number\n): Observable<T | T2 | T3 | T4 | T5>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L43-L43",
        "signature": "function merge<T, T2, T3, T4, T5, T6>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>\n): Observable<T | T2 | T3 | T4 | T5 | T6>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L44-L44",
        "signature": "function merge<T, T2, T3, T4, T5, T6>(\n  v1: ObservableInput<T>,\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>,\n  concurrent?: number\n): Observable<T | T2 | T3 | T4 | T5 | T6>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L45-L45",
        "signature": "function merge<T>(\n  ...observables: (ObservableInput<T> | number)[]\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L47-L47",
        "signature": "function merge<T>(\n  ...observables: (ObservableInput<T> | SchedulerLike | number)[]\n): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L48-L48",
        "signature": "function merge<T, R>(\n  ...observables: (ObservableInput<any> | number)[]\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/merge.ts#L50-L50",
        "signature": "function merge<T, R>(\n  ...observables: (ObservableInput<any> | SchedulerLike | number)[]\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "never",
    "overloads": [
      {
        "file": "src/internal/observable/never.ts#L39-L41",
        "signature": "function never();",
        "info": [
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "Deprecated in favor of using {@link NEVER} constant.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "of",
    "overloads": [
      {
        "file": "src/internal/observable/of.ts#L99-L107",
        "signature": "function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts the arguments to an observable sequence.\n\n<span class=\"informal\">Each argument becomes a `next` notification.</span>\n\n![](of.png)\n\nUnlike {@link from}, it does not do any flattening and emits each argument in whole\nas a separate `next` notification.\n\n## Examples\n\nEmit the values `10, 20, 30`\n\n```ts\nimport { of } from 'rxjs';\n\nof(10, 20, 30)\n.subscribe(\nnext => console.log('next:', next),\nerr => console.log('error:', err),\n() => console.log('the end'),\n);\n\n// Outputs\n// next: 10\n// next: 20\n// next: 30\n// the end\n```\n\nEmit the array `[1, 2, 3]`\n\n```ts\nimport { of } from 'rxjs';\n\nof([1, 2, 3])\n.subscribe(\nnext => console.log('next:', next),\nerr => console.log('error:', err),\n() => console.log('the end'),\n);\n\n// Outputs\n// next: [1, 2, 3]\n// the end\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link from}" }],
          ["see", { "__kind": "heading", "description": "{@link range}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{...T}",
              "description": "values A comma separated list of arguments you want to be emitted",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits the arguments\ndescribed above and then completes."
            }
          ],
          ["name", { "__kind": "heading", "description": "of\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "args",
              "description": "",
              "type": "(T | SchedulerLike)[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L9-L9",
        "signature": "function of(scheduler: SchedulerLike): Observable<never>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L11-L11",
        "signature": "function of<T>(a: T, scheduler: SchedulerLike): Observable<T>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "a", "description": "", "type": "T" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L13-L13",
        "signature": "function of<T, T2>(a: T, b: T2, scheduler: SchedulerLike): Observable<T | T2>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "a", "description": "", "type": "T" }
          ],
          [
            "param",
            { "__kind": "table", "label": "b", "description": "", "type": "T2" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L15-L15",
        "signature": "function of<T, T2, T3>(\n  a: T,\n  b: T2,\n  c: T3,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "a", "description": "", "type": "T" }
          ],
          [
            "param",
            { "__kind": "table", "label": "b", "description": "", "type": "T2" }
          ],
          [
            "param",
            { "__kind": "table", "label": "c", "description": "", "type": "T3" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L17-L17",
        "signature": "function of<T, T2, T3, T4>(\n  a: T,\n  b: T2,\n  c: T3,\n  d: T4,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "a", "description": "", "type": "T" }
          ],
          [
            "param",
            { "__kind": "table", "label": "b", "description": "", "type": "T2" }
          ],
          [
            "param",
            { "__kind": "table", "label": "c", "description": "", "type": "T3" }
          ],
          [
            "param",
            { "__kind": "table", "label": "d", "description": "", "type": "T4" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L19-L19",
        "signature": "function of<T, T2, T3, T4, T5>(\n  a: T,\n  b: T2,\n  c: T3,\n  d: T4,\n  e: T5,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4 | T5>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "a", "description": "", "type": "T" }
          ],
          [
            "param",
            { "__kind": "table", "label": "b", "description": "", "type": "T2" }
          ],
          [
            "param",
            { "__kind": "table", "label": "c", "description": "", "type": "T3" }
          ],
          [
            "param",
            { "__kind": "table", "label": "d", "description": "", "type": "T4" }
          ],
          [
            "param",
            { "__kind": "table", "label": "e", "description": "", "type": "T5" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L21-L21",
        "signature": "function of<T, T2, T3, T4, T5, T6>(\n  a: T,\n  b: T2,\n  c: T3,\n  d: T4,\n  e: T5,\n  f: T6,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4 | T5 | T6>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "a", "description": "", "type": "T" }
          ],
          [
            "param",
            { "__kind": "table", "label": "b", "description": "", "type": "T2" }
          ],
          [
            "param",
            { "__kind": "table", "label": "c", "description": "", "type": "T3" }
          ],
          [
            "param",
            { "__kind": "table", "label": "d", "description": "", "type": "T4" }
          ],
          [
            "param",
            { "__kind": "table", "label": "e", "description": "", "type": "T5" }
          ],
          [
            "param",
            { "__kind": "table", "label": "f", "description": "", "type": "T6" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L23-L24",
        "signature": "function of<T, T2, T3, T4, T5, T6, T7>(\n  a: T,\n  b: T2,\n  c: T3,\n  d: T4,\n  e: T5,\n  f: T6,\n  g: T7,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "a", "description": "", "type": "T" }
          ],
          [
            "param",
            { "__kind": "table", "label": "b", "description": "", "type": "T2" }
          ],
          [
            "param",
            { "__kind": "table", "label": "c", "description": "", "type": "T3" }
          ],
          [
            "param",
            { "__kind": "table", "label": "d", "description": "", "type": "T4" }
          ],
          [
            "param",
            { "__kind": "table", "label": "e", "description": "", "type": "T5" }
          ],
          [
            "param",
            { "__kind": "table", "label": "f", "description": "", "type": "T6" }
          ],
          [
            "param",
            { "__kind": "table", "label": "g", "description": "", "type": "T7" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L26-L27",
        "signature": "function of<T, T2, T3, T4, T5, T6, T7, T8>(\n  a: T,\n  b: T2,\n  c: T3,\n  d: T4,\n  e: T5,\n  f: T6,\n  g: T7,\n  h: T8,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "a", "description": "", "type": "T" }
          ],
          [
            "param",
            { "__kind": "table", "label": "b", "description": "", "type": "T2" }
          ],
          [
            "param",
            { "__kind": "table", "label": "c", "description": "", "type": "T3" }
          ],
          [
            "param",
            { "__kind": "table", "label": "d", "description": "", "type": "T4" }
          ],
          [
            "param",
            { "__kind": "table", "label": "e", "description": "", "type": "T5" }
          ],
          [
            "param",
            { "__kind": "table", "label": "f", "description": "", "type": "T6" }
          ],
          [
            "param",
            { "__kind": "table", "label": "g", "description": "", "type": "T7" }
          ],
          [
            "param",
            { "__kind": "table", "label": "h", "description": "", "type": "T8" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L29-L30",
        "signature": "function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(\n  a: T,\n  b: T2,\n  c: T3,\n  d: T4,\n  e: T5,\n  f: T6,\n  g: T7,\n  h: T8,\n  i: T9,\n  scheduler: SchedulerLike\n): Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "a", "description": "", "type": "T" }
          ],
          [
            "param",
            { "__kind": "table", "label": "b", "description": "", "type": "T2" }
          ],
          [
            "param",
            { "__kind": "table", "label": "c", "description": "", "type": "T3" }
          ],
          [
            "param",
            { "__kind": "table", "label": "d", "description": "", "type": "T4" }
          ],
          [
            "param",
            { "__kind": "table", "label": "e", "description": "", "type": "T5" }
          ],
          [
            "param",
            { "__kind": "table", "label": "f", "description": "", "type": "T6" }
          ],
          [
            "param",
            { "__kind": "table", "label": "g", "description": "", "type": "T7" }
          ],
          [
            "param",
            { "__kind": "table", "label": "h", "description": "", "type": "T8" }
          ],
          [
            "param",
            { "__kind": "table", "label": "i", "description": "", "type": "T9" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L33-L33",
        "signature": "function of(): Observable<never>;",
        "info": []
      },
      {
        "file": "src/internal/observable/of.ts#L35-L35",
        "signature": "function of<T>(): Observable<T>;",
        "info": []
      },
      {
        "file": "src/internal/observable/of.ts#L36-L36",
        "signature": "function of<T>(value: T): Observable<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "T"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L37-L37",
        "signature": "function of<T, U>(value1: T, value2: U): Observable<T | U>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value1",
              "description": "",
              "type": "T"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value2",
              "description": "",
              "type": "U"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L38-L38",
        "signature": "function of<T, U, V>(value1: T, value2: U, value3: V): Observable<T | U | V>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value1",
              "description": "",
              "type": "T"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value2",
              "description": "",
              "type": "U"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value3",
              "description": "",
              "type": "V"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/of.ts#L39-L39",
        "signature": "function of<A extends Array<any>>(...args: A): Observable<ValueFromArray<A>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "args",
              "description": "",
              "type": "A"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "onErrorResumeNext",
    "overloads": [
      {
        "file": "src/internal/observable/onErrorResumeNext.ts#L77-L102",
        "signature": "function onErrorResumeNext<T, R>(\n  ...sources: Array<\n    | ObservableInput<any>\n    | Array<ObservableInput<any>>\n    | ((...values: Array<any>) => R)\n  >\n): Observable<R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\nthat was passed.\n\n<span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n\n![](onErrorResumeNext.png)\n\n`onErrorResumeNext` Will subscribe to each observable source it is provided, in order.\nIf the source it's subscribed to emits an error or completes, it will move to the next source\nwithout error.\n\nIf `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link index/EMPTY}.\n\n`onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its\nsources emits an error.\n\nNote that there is no way to handle any errors thrown by sources via the result of\n`onErrorResumeNext`. If you want to handle errors thrown in any given source, you can\nalways use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.\n\n## Example\nSubscribe to the next Observable after map fails</caption>\n```ts\nimport { onErrorResumeNext, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nonErrorResumeNext(\nof(1, 2, 3, 0).pipe(\nmap(x => {\nif (x === 0) throw Error();\nreturn 10 / x;\n})\n),\nof(1, 2, 3),\n)\n.subscribe(\nval => console.log(val),\nerr => console.log(err),          // Will never be called.\n() => console.log('done'),\n);\n\n// Logs:\n// 10\n// 5\n// 3.3333333333333335\n// 1\n// 2\n// 3\n// \"done\"\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link concat}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link catchError}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{...ObservableInput}",
              "description": "sources Observables (or anything that *is* observable) passed either directly or as an array.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that concatenates all sources, one after the other,\nignoring all errors, such that any error causes it to move on to the next source.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sources",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/onErrorResumeNext.ts#L8-L8",
        "signature": "function onErrorResumeNext<R>(v: ObservableInput<R>): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/onErrorResumeNext.ts#L9-L9",
        "signature": "function onErrorResumeNext<T2, T3, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/onErrorResumeNext.ts#L10-L10",
        "signature": "function onErrorResumeNext<T2, T3, T4, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/onErrorResumeNext.ts#L11-L11",
        "signature": "function onErrorResumeNext<T2, T3, T4, T5, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/onErrorResumeNext.ts#L12-L12",
        "signature": "function onErrorResumeNext<T2, T3, T4, T5, T6, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/onErrorResumeNext.ts#L14-L14",
        "signature": "function onErrorResumeNext<R>(\n  ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/onErrorResumeNext.ts#L15-L15",
        "signature": "function onErrorResumeNext<R>(array: ObservableInput<any>[]): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "pairs",
    "overloads": [
      {
        "file": "src/internal/observable/pairs.ts#L53-L78",
        "signature": "function pairs<T>(\n  obj: Object,\n  scheduler?: SchedulerLike\n): Observable<[string, T]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Convert an object into an Observable of `[key, value]` pairs.\n\n<span class=\"informal\">Turn entries of an object into a stream.</span>\n\n![](pairs.png)\n\n`pairs` takes an arbitrary object and returns an Observable that emits arrays. Each\nemitted array has exactly two elements - the first is a key from the object\nand the second is a value corresponding to that key. Keys are extracted from\nan object via `Object.keys` function, which means that they will be only\nenumerable keys that are present on an object directly - not ones inherited\nvia prototype chain.\n\nBy default these arrays are emitted synchronously. To change that you can\npass a {@link SchedulerLike} as a second argument to `pairs`.\n\n## Example\n### Converts an object to an Observable\n```ts\nimport { pairs } from 'rxjs';\n\nconst obj = {\nfoo: 42,\nbar: 56,\nbaz: 78\n};\n\npairs(obj).subscribe({\nnext: value => console.log(value),\ncomplete: () => console.log('Complete!')\n});\n\n// Logs:\n// [\"foo\", 42],\n// [\"bar\", 56],\n// [\"baz\", 78],\n// \"Complete!\"\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Object}",
              "description": "obj The object to inspect and turn into an",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Scheduler}",
              "description": "[scheduler] An optional IScheduler to schedule",
              "type": ""
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "{(Observable<Array<string|T>>)} An observable sequence of\n[key, value] pairs from the object.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "obj",
              "description": "",
              "type": "Object"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "partition",
    "overloads": [
      {
        "file": "src/internal/observable/partition.ts#L58-L67",
        "signature": "function partition<T>(\n  source: ObservableInput<T>,\n  predicate: (value: T, index: number) => boolean,\n  thisArg?: any\n): [Observable<T>, Observable<T>];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Splits the source Observable into two, one with values that satisfy a\npredicate, and another with values that don't satisfy the predicate.\n\n<span class=\"informal\">It's like {@link filter}, but returns two Observables:\none like the output of {@link filter}, and the other with values that did not\npass the condition.</span>\n\n![](partition.png)\n\n`partition` outputs an array with two Observables that partition the values\nfrom the source Observable through the given `predicate` function. The first\nObservable in that array emits source values for which the predicate argument\nreturns true. The second Observable emits source values for which the\npredicate returns false. The first behaves like {@link filter} and the second\nbehaves like {@link filter} with the predicate negated.\n\n## Example\nPartition a set of numbers into odds and evens observables\n```ts\nimport { of, partition } from 'rxjs';\n\nconst observableValues = of(1, 2, 3, 4, 5, 6);\nconst [evens$, odds$] = partition(observableValues, (value, index) => value % 2 === 0);\n\nodds$.subscribe(x => console.log('odds', x));\nevens$.subscribe(x => console.log('evens', x));\n\n// Logs:\n// odds 1\n// odds 3\n// odds 5\n// evens 2\n// evens 4\n// evens 6\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link filter}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, index: number): boolean} predicate A function that",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{any}",
              "description": "[thisArg] An optional argument to determine the value of `this`",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{[Observable<T>, Observable<T>]} An array with two Observables: one\nwith values that passed the predicate, and another with values that did not\npass the predicate.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "source",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "race",
    "overloads": [
      {
        "file": "src/internal/observable/race.ts#L56-L68",
        "signature": "function race<T>(\n  ...observables: (ObservableInput<T> | ObservableInput<T>[])[]\n): Observable<any>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an observable that mirrors the first source observable to emit an item.\n\n![](race.png)\n\n`race` returns an observable, that when subscribed to, subscribes to all source observables immediately.\nAs soon as one of the source observables emits a value, the result unsubscribes from the other sources.\nThe resulting observable will forward all notifications, including error and completion, from the \"winning\"\nsource observable.\n\nIf one of the used source observable throws an errors before a first notification\nthe race operator will also throw an error, no matter if another source observable\ncould potentially win the race.\n\n`race` can be useful for selecting the response from the fastest network connection for\nHTTP or WebSockets. `race` can also be useful for switching observable context based on user\ninput.\n\n## Example\n### Subscribes to the observable that was the first to start emitting.\n\n```ts\nimport { race, interval } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\n\nconst obs1 = interval(1000).pipe(mapTo('fast one'));\nconst obs2 = interval(3000).pipe(mapTo('medium one'));\nconst obs3 = interval(5000).pipe(mapTo('slow one'));\n\nrace(obs3, obs1, obs2)\n.subscribe(\nwinner => console.log(winner)\n);\n\n// Outputs\n// a series of 'fast one'\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{...Observables}",
              "description": "...observables sources used to race for which Observable emits first.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} an Observable that mirrors the output of the first Observable to emit an item.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/race.ts#L12-L12",
        "signature": "function race<A extends ObservableInput<any>[]>(\n  observables: A\n): Observable<ObservedValueUnionFromArray<A>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "A"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/race.ts#L13-L13",
        "signature": "function race<A extends ObservableInput<any>[]>(\n  ...observables: A\n): Observable<ObservedValueUnionFromArray<A>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "A"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "range",
    "overloads": [
      {
        "file": "src/internal/observable/range.ts#L51-L82",
        "signature": "function range(\n  start: number = 0,\n  count?: number,\n  scheduler?: SchedulerLike\n): Observable<number>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an Observable that emits a sequence of numbers within a specified\nrange.\n\n<span class=\"informal\">Emits a sequence of numbers in a range.</span>\n\n![](range.png)\n\n`range` operator emits a range of sequential integers, in order, where you\nselect the `start` of the range and its `length`. By default, uses no\n{@link SchedulerLike} and just delivers the notifications synchronously, but may use\nan optional {@link SchedulerLike} to regulate those deliveries.\n\n## Example\n\n### Produce a range of numbers\n\n```ts\nimport { range } from 'rxjs';\n\nconst numbers = range(1, 3);\n\nnumbers.subscribe({\nnext: value => { console.log(value) },\ncomplete: () => { console.log('Complete!') }\n});\n\n// Logs:\n// 1\n// 2\n// 3\n// \"Complete!\"\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link timer}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link index/interval}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[start=0] The value of the first integer in the sequence.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "count The number of sequential integers to generate.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler] A {@link SchedulerLike} to use for scheduling",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable of numbers that emits a finite range of\nsequential integers."
            }
          ],
          ["static", { "__kind": "heading", "description": "true" }],
          ["name", { "__kind": "heading", "description": "range" }],
          ["owner", { "__kind": "heading", "description": "Observable\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "start",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "count",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "throwError",
    "overloads": [
      {
        "file": "src/internal/observable/throwError.ts#L122-L134",
        "signature": "function throwError(\n  errorOrErrorFactory: any,\n  scheduler?: SchedulerLike\n): Observable<never>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "errorOrErrorFactory",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/throwError.ts#L100-L100",
        "signature": "function throwError(errorFactory: () => any): Observable<never>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an observable that will create an error instance and push it to the consumer as an error\nimmediately upon subscription.\n\n<span class=\"informal\">Just errors and does nothing else</span>\n\n![](throw.png)\n\nThis creation function is useful for creating an observable that will create an error and error every\ntime it is subscribed to. Generally, inside of most operators when you might want to return an errored\nobservable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\n{@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\nthat up and notify the consumer of the error.\n\n## Example\n\nCreate a simple observable that will create a new error with a timestamp and log it\nand the message every time you subscribe to it.\n\n```ts\nimport { throwError } from 'rxjs';\n\nlet errorCount = 0;\n\nconst errorWithTimestamp$ = throwError(() => {\nconst error: any = new Error(`This is error number ${++errorCount}`);\nerror.timestamp = Date.now();\nreturn error;\n});\n\nerrorWithTimesptamp$.subscribe({\nerror: err => console.log(err.timestamp, err.message)\n});\n\nerrorWithTimesptamp$.subscribe({\nerror: err => console.log(err.timestamp, err.message)\n});\n\n// Logs the timestamp and a new error message each subscription;\n```\n\n## Unnecessary usage\n\nUsing `throwError` inside of an operator or creation function\nwith a callback, is usually not necessary:\n\n```ts\nimport { throwError, timer, of } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\n\nconst delays$ = of(1000, 2000, Infinity, 3000);\n\ndelays$.pipe(\nconcatMap(ms => {\nif (ms < 10000) {\nreturn timer(ms);\n} else {\n// This is probably overkill.\nreturn throwError(() => new Error(`Invalid time ${ms}`));\n}\n})\n)\n.subscribe({\nnext: console.log,\nerror: console.error\n});\n```\n\nYou can just throw the error instead:\n\n```ts\nimport { throwError, timer, of } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\n\nconst delays$ = of(1000, 2000, Infinity, 3000);\n\ndelays$.pipe(\nconcatMap(ms => {\nif (ms < 10000) {\nreturn timer(ms);\n} else {\n// Cleaner and easier to read for most folks.\nthrow new Error(`Invalid time ${ms}`);\n}\n})\n)\n.subscribe({\nnext: console.log,\nerror: console.error\n});\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "errorFactory",
              "description": "A factory function that will create the error instance that is pushed.",
              "type": "() => any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/throwError.ts#L110-L110",
        "signature": "function throwError(error: any): Observable<never>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an observable that will error with the specified error immediately upon subscription.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "The error instance to emit",
              "type": "any"
            }
          ],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "Removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\nbecause it will create the error at the moment it should be created and capture a more appropriate stack trace. If\nfor some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`.\n"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/throwError.ts#L120-L120",
        "signature": "function throwError(\n  errorOrErrorFactory: any,\n  scheduler: SchedulerLike\n): Observable<never>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Notifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "errorOrErrorFactory",
              "description": "An error instance or error factory",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "A scheduler to use to schedule the error notification",
              "type": "SchedulerLike"
            }
          ],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "Use `throwError` in combination with {@link observeOn}:\n`throwError(() => new Error('test')).pipe(observeOn(scheduler));`\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "timer",
    "overloads": [
      {
        "file": "src/internal/observable/timer.ts#L131-L163",
        "signature": "function timer(\n  dueTime: number | Date = 0,\n  periodOrScheduler?: number | SchedulerLike,\n  scheduler?: SchedulerLike\n): Observable<number>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an observable that emits incrementing numbers, starting at `0`, over time.\n\n<span class=\"informal\">Its like {@link index/interval}, but you can specify when\nshould the emissions start (either by delay or exact date).</span>\n\n![](timer.png)\n\nWill return an observable that emits incrementing numbers over time, starting a `0`,\nor just a single number `0` after a specified delay or start time.\n\nIf no scheduler is provided, {@link index/asyncScheduler} will be the assumed default.\n\nWhen the first value of `0` is emitted is determined by a calculation based off of the\n`dueTime`:\n\n1. If the `dueTime` is a *valid* `Date` object, the first emission will be after a delay\ncalculated by subtracting the current timestamp (provided by the scheduler), from the numeric\nvalue of the `Date`, which will be an epoch number in milliseconds.\n2. If the `dueTime` is a number, the first emission will be after a delay equal to that number.\n3. If the result of either 1 or 2 above is negative, that is the `dueTime` is a `Date` in the\npast, OR a negative number, the result is the first emission will be scheduled after a delay\nof `0`.\n\nWhen subsequent values are emitted is determined by the `period` argument:\n\n1. If their is no `period` argument, there will be no further emissions.\n2. If the `period` argument is `0`, each new emission will be scheduled with a delay of `0`.\n3. If the `period` argument is a postive number, each new emission will be scheduled with a\ndelay equal to that number.\n4. If the `period` argument is negative, there will be no further emissions.\n\n**Known Issues**:\n\nIf a `scheduler` is provided that returns a timsstamp other than an epoch from `now()`, and\na `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\nshould occur will be incorrect. In this case, it would be best to do your own calculations\nahead of time, and pass a `number` in as the `dueTime`.\n\nOnce the first value is emitted, if a `period` was provided\n\n## Examples\n\n### Wait 3 seconds and start another observable\n\nYou might want to use `timer` to delay subscription to an\nobservable by a set amount of time. Here we use a timer with\n{@link concatMapTo} or {@link concatMap} in order to wait\na few seconds and start a subscription to a source.\n\n```ts\nimport { timer, of } from 'rxjs';\nimport { concatMapTo } from 'rxjs/operators';\n\n// This could be any observable\nconst source = of(1, 2, 3);\n\nconst result = timer(3000).pipe(\nconcatMapTo(source)\n)\n.subscribe(console.log);\n```\n\n### Take all of the values until the start of the next minute\n\nUsing the a date as the trigger for the first emission, you can\ndo things like wait until midnight to fire an event, or in this case,\nwait until a new minute starts (chosen so the example wouldn't take\ntoo long to run) in order to stop watching a stream. Leveraging\n{@link takeUntil}.\n\n```ts\nimport { interval, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n// Build a Date object that marks the\n// next minute.\nconst currentDate = new Date();\nconst startOfNextMinute = new Date(\ncurrentDate.getFullYear(),\ncurrentDate.getMonth(),\ncurrentDate.getDate(),\ncurrentDate.getHours(),\ncurrentDate.getMinutes() + 1,\n)\n\n// This could be any observable stream\nconst source = interval(1000);\n\nconst result = source.pipe(\ntakeUntil(timer(startOfNextMinute))\n);\n\nresult.subscribe(console.log);\n```\n\n### Start an interval that starts right away\n\nSince {@link index/interval} waits for the passed delay before starting,\nsometimes that's not ideal. You may want to start an interval immediately.\n`timer` works well for this. Here we have both side-by-side so you can\nsee them in comparison.\n\n```ts\nimport { timer, interval } from 'rxjs';\n\ntimer(0, 1000).subscribe(n => console.log('timer', n));\ninterval(1000).subscribe(n => console.log('interval', n));\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link index/interval}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link delay}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "dueTime",
              "description": "The initial delay time specified as a Date object or as an integer denoting",
              "type": "number | Date"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "periodOrScheduler",
              "description": "The period of time between emissions of the",
              "type": "number | SchedulerLike"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "The {@link SchedulerLike} to use for scheduling",
              "type": "SchedulerLike"
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "An Observable that emits a `0` after the\n`dueTime` and ever increasing numbers after each `period` of time\nthereafter.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "using",
    "overloads": [
      {
        "file": "src/internal/observable/using.ts#L34-L63",
        "signature": "function using<T>(\n  resourceFactory: () => Unsubscribable | void,\n  observableFactory: (\n    resource: Unsubscribable | void\n  ) => ObservableInput<T> | void\n): Observable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\n\n<span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\n\n`using` is a factory operator, which accepts two functions. First function returns a disposable resource.\nIt can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\nthat object and should return an Observable. That Observable can use resource object during its execution.\nBoth functions passed to `using` will be called every time someone subscribes - neither an Observable nor\nresource object will be shared in any way between subscriptions.\n\nWhen Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\nas well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\nObservable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\nthe `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\notherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\ncancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\nsure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link defer}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function():",
              "description": "ISubscription} resourceFactory A function which creates any resource object",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(resource:",
              "description": "ISubscription): Observable<T>} observableFactory A function which",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\nwhich - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resourceFactory",
              "description": "",
              "type": "() => Unsubscribable | void"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "observableFactory",
              "description": "",
              "type": "(resource: Unsubscribable | void) => ObservableInput<T> | void"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "zip",
    "overloads": [
      {
        "file": "src/internal/observable/zip.ts#L79-L88",
        "signature": "function zip<O extends ObservableInput<any>, R>(\n  ...observables: Array<O | ((...values: ObservedValueOf<O>[]) => R)>\n): Observable<ObservedValueOf<O>[] | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\nof its input Observables.\n\nIf the last parameter is a function, this function is used to compute the created value from the input values.\nOtherwise, an array of the input values is returned.\n\n## Example\n\nCombine age and name from different sources\n\n```ts\nimport { zip, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nlet age$ = of(27, 25, 29);\nlet name$ = of('Foo', 'Bar', 'Beer');\nlet isDev$ = of(true, true, false);\n\nzip(age$, name$, isDev$).pipe(\nmap(([age, name, isDev]) => ({ age, name, isDev }))\n)\n.subscribe(x => console.log(x));\n\n// Outputs\n// { age: 27, name: 'Foo', isDev: true }\n// { age: 25, name: 'Bar', isDev: true }\n// { age: 29, name: 'Beer', isDev: false }\n```"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "(O | ((...values: ObservedValueOf<O>[]) => R))[]"
            }
          ],
          ["return", { "__kind": "heading", "description": "{Observable<R>}" }],
          ["static", { "__kind": "heading", "description": "true" }],
          ["name", { "__kind": "heading", "description": "zip" }],
          ["owner", { "__kind": "heading", "description": "Observable\n" }]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L14-L14",
        "signature": "function zip<O1 extends ObservableInput<any>, R>(\n  v1: O1,\n  resultSelector: (v1: ObservedValueOf<O1>) => R\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L16-L16",
        "signature": "function zip<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  R\n>(\n  v1: O1,\n  v2: O2,\n  resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L18-L18",
        "signature": "function zip<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  R\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>\n  ) => R\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L20-L20",
        "signature": "function zip<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  R\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>\n  ) => R\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L22-L22",
        "signature": "function zip<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  R\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>,\n    v5: ObservedValueOf<O5>\n  ) => R\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L24-L24",
        "signature": "function zip<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  O6 extends ObservableInput<any>,\n  R\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  v6: O6,\n  resultSelector: (\n    v1: ObservedValueOf<O1>,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>,\n    v5: ObservedValueOf<O5>,\n    v6: ObservedValueOf<O6>\n  ) => R\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "O6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L26-L26",
        "signature": "function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(\n  v1: O1,\n  v2: O2\n): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L27-L27",
        "signature": "function zip<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3\n): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L28-L28",
        "signature": "function zip<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L29-L29",
        "signature": "function zip<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>,\n    ObservedValueOf<O5>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L30-L30",
        "signature": "function zip<\n  O1 extends ObservableInput<any>,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  O6 extends ObservableInput<any>\n>(\n  v1: O1,\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  v6: O6\n): Observable<\n  [\n    ObservedValueOf<O1>,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>,\n    ObservedValueOf<O5>,\n    ObservedValueOf<O6>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "O1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "O6"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L32-L32",
        "signature": "function zip<O extends ObservableInput<any>>(\n  array: O[]\n): Observable<ObservedValueOf<O>[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "O[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L33-L33",
        "signature": "function zip<R>(array: ObservableInput<any>[]): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L35-L35",
        "signature": "function zip<O extends ObservableInput<any>, R>(\n  array: O[],\n  resultSelector: (...values: ObservedValueOf<O>[]) => R\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "O[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(...values: ObservedValueOf<O>[]) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L37-L37",
        "signature": "function zip<R>(\n  array: ObservableInput<any>[],\n  resultSelector: (...values: any[]) => R\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(...values: any[]) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L39-L39",
        "signature": "function zip<O extends ObservableInput<any>>(\n  ...observables: O[]\n): Observable<ObservedValueOf<O>[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "O[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L40-L40",
        "signature": "function zip<O extends ObservableInput<any>, R>(\n  ...observables: Array<O | ((...values: ObservedValueOf<O>[]) => R)>\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "(O | ((...values: ObservedValueOf<O>[]) => R))[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/observable/zip.ts#L41-L41",
        "signature": "function zip<R>(\n  ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>\n): Observable<R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "src",
    "name": "scheduled",
    "overloads": [
      {
        "file": "src/internal/scheduled/scheduled.ts#L24-L39",
        "signature": "function scheduled<T>(\n  input: ObservableInput<T>,\n  scheduler: SchedulerLike\n): Observable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\nare scheduled on the provided scheduler.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link from}" }],
          ["see", { "__kind": "heading", "description": "{@link of}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "input",
              "description": "The observable, array, promise, iterable, etc you would like to schedule",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "The scheduler to use to schedule the subscription and emissions from",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "EMPTY",
    "overloads": [
      {
        "file": "src/internal/observable/empty.ts#L28-L28",
        "signature": "const EMPTY: Observable<never>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "NEVER",
    "overloads": [
      {
        "file": "src/internal/observable/never.ts#L34-L34",
        "signature": "const NEVER: Observable<never>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "src",
    "name": "config",
    "overloads": [
      {
        "file": "src/internal/config.ts#L9-L97",
        "signature": "const config: {\n  quietBadConfig: boolean;\n  Promise: PromiseConstructorLike;\n  useDeprecatedSynchronousErrorHandling: boolean;\n  useDeprecatedNextContext: boolean;\n};",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "UnaryFunction",
    "overloads": [
      {
        "file": "src/internal/types.ts#L6-L6",
        "signature": "interface UnaryFunction<T, R> {}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "OperatorFunction",
    "overloads": [
      {
        "file": "src/internal/types.ts#L8-L8",
        "signature": "interface OperatorFunction<T, R> {\n  // inherited from UnaryFunction\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "FactoryOrValue",
    "overloads": [
      {
        "file": "src/internal/types.ts#L10-L10",
        "signature": "export type FactoryOrValue<T> = T | (() => T);",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "MonoTypeOperatorFunction",
    "overloads": [
      {
        "file": "src/internal/types.ts#L12-L12",
        "signature": "interface MonoTypeOperatorFunction<T> {\n  // inherited from OperatorFunction\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "Timestamp",
    "overloads": [
      {
        "file": "src/internal/types.ts#L21-L28",
        "signature": "interface Timestamp<T> {\n  value: T;\n  timestamp: number;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A value and the time at which it was emitted.\n\nEmitted by the `timestamp` operator\n\n{@see timestamp}\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "TimeInterval",
    "overloads": [
      {
        "file": "src/internal/types.ts#L37-L46",
        "signature": "interface TimeInterval<T> {\n  value: T;\n  interval: number;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A value emitted and the amount of time since the last value was emitted.\n\nEmitted by the `timeInterval` operator.\n\n{@see timeInterval}\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "Unsubscribable",
    "overloads": [
      {
        "file": "src/internal/types.ts#L50-L52",
        "signature": "interface Unsubscribable {}",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "TeardownLogic",
    "overloads": [
      {
        "file": "src/internal/types.ts#L54-L54",
        "signature": "export type TeardownLogic = Subscription | Unsubscribable | Function | void;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "SubscriptionLike",
    "overloads": [
      {
        "file": "src/internal/types.ts#L56-L59",
        "signature": "interface SubscriptionLike {\n  readonly closed: boolean;\n\n  // inherited from Unsubscribable\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "SubscribableOrPromise",
    "overloads": [
      {
        "file": "src/internal/types.ts#L61-L61",
        "signature": "export type SubscribableOrPromise<T> =\n  | Subscribable<T>\n  | Subscribable<never>\n  | PromiseLike<T>\n  | InteropObservable<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "Subscribable",
    "overloads": [
      {
        "file": "src/internal/types.ts#L65-L74",
        "signature": "interface Subscribable<T> {}",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "ObservableInput",
    "overloads": [
      {
        "file": "src/internal/types.ts#L76-L76",
        "signature": "export type ObservableInput<T> =\n  | SubscribableOrPromise<T>\n  | ArrayLike<T>\n  | Iterable<T>\n  | AsyncIterableIterator<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "ObservableLike",
    "overloads": [
      {
        "file": "src/internal/types.ts#L79-L79",
        "signature": "export type ObservableLike<T> = InteropObservable<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "InteropObservable",
    "overloads": [
      {
        "file": "src/internal/types.ts#L81-L81",
        "signature": "export type InteropObservable<T> = {\n  [Symbol.observable]: () => Subscribable<T>;\n};",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "NextNotification",
    "overloads": [
      {
        "file": "src/internal/types.ts#L89-L94",
        "signature": "interface NextNotification<T> {\n  kind: \"N\";\n  value: T;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A notification representing a \"next\" from an observable.\nCan be used with {@link dematerialize}.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "ErrorNotification",
    "overloads": [
      {
        "file": "src/internal/types.ts#L100-L104",
        "signature": "interface ErrorNotification {\n  kind: \"E\";\n  error: any;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A notification representing an \"error\" from an observable.\nCan be used with {@link dematerialize}.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "CompleteNotification",
    "overloads": [
      {
        "file": "src/internal/types.ts#L110-L112",
        "signature": "interface CompleteNotification {\n  kind: \"C\";\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A notification representing a \"completion\" from an observable.\nCan be used with {@link dematerialize}.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "ObservableNotification",
    "overloads": [
      {
        "file": "src/internal/types.ts#L117-L117",
        "signature": "export type ObservableNotification<T> =\n  | NextNotification<T>\n  | ErrorNotification\n  | CompleteNotification;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Valid observable notification types.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "NextObserver",
    "overloads": [
      {
        "file": "src/internal/types.ts#L121-L126",
        "signature": "interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "ErrorObserver",
    "overloads": [
      {
        "file": "src/internal/types.ts#L128-L133",
        "signature": "interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "CompletionObserver",
    "overloads": [
      {
        "file": "src/internal/types.ts#L135-L140",
        "signature": "interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "PartialObserver",
    "overloads": [
      {
        "file": "src/internal/types.ts#L142-L142",
        "signature": "export type PartialObserver<T> =\n  | NextObserver<T>\n  | ErrorObserver<T>\n  | CompletionObserver<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "Observer",
    "overloads": [
      {
        "file": "src/internal/types.ts#L144-L149",
        "signature": "interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "SchedulerLike",
    "overloads": [
      {
        "file": "src/internal/types.ts#L153-L155",
        "signature": "interface SchedulerLike {\n  // inherited from TimestampProvider\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "SchedulerAction",
    "overloads": [
      {
        "file": "src/internal/types.ts#L157-L159",
        "signature": "interface SchedulerAction<T> {}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "src",
    "name": "TimestampProvider",
    "overloads": [
      {
        "file": "src/internal/types.ts#L164-L172",
        "signature": "interface TimestampProvider {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "This is a type that provides a method to allow RxJS to create a numeric timestamp\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "ObservedValueOf",
    "overloads": [
      {
        "file": "src/internal/types.ts#L179-L179",
        "signature": "export type ObservedValueOf<O> = O extends ObservableInput<infer T> ? T : never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Extracts the type from an `ObservableInput<any>`. If you have\n`O extends ObservableInput<any>` and you pass in `Observable<number>`, or\n`Promise<number>`, etc, it will type as `number`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "ObservedValueUnionFromArray",
    "overloads": [
      {
        "file": "src/internal/types.ts#L189-L192",
        "signature": "export type ObservedValueUnionFromArray<X> = X extends Array<\n  ObservableInput<infer T>\n>\n  ? T\n  : never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Extracts a union of element types from an `ObservableInput<any>[]`.\nIf you have `O extends ObservableInput<any>[]` and you pass in\n`Observable<string>[]` or `Promise<string>[]` you would get\nback a type of `string`.\nIf you pass in `[Observable<string>, Observable<number>]` you would\nget back a type of `string | number`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "ObservedValuesFromArray",
    "overloads": [
      {
        "file": "src/internal/types.ts#L195-L195",
        "signature": "export type ObservedValuesFromArray<X> = ObservedValueUnionFromArray<X>;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "ObservedValueTupleFromArray",
    "overloads": [
      {
        "file": "src/internal/types.ts#L203-L206",
        "signature": "export type ObservedValueTupleFromArray<X> = X extends Array<\n  ObservableInput<any>\n>\n  ? { [K in keyof X]: ObservedValueOf<X[K]> }\n  : never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Extracts a tuple of element types from an `ObservableInput<any>[]`.\nIf you have `O extends ObservableInput<any>[]` and you pass in\n`[Observable<string>, Observable<number>]` you would get back a type\nof `[string, number]`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "Cons",
    "overloads": [
      {
        "file": "src/internal/types.ts#L212-L215",
        "signature": "export type Cons<X, Y extends any[]> = ((arg: X, ...rest: Y) => any) extends (\n  ...args: infer U\n) => any\n  ? U\n  : never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Constructs a new tuple with the specified type at the head.\nIf you declare `Cons<A, [B, C]>` you will get back `[A, B, C]`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "Head",
    "overloads": [
      {
        "file": "src/internal/types.ts#L221-L224",
        "signature": "export type Head<X extends any[]> = ((...args: X) => any) extends (\n  arg: infer U,\n  ...rest: any[]\n) => any\n  ? U\n  : never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Extracts the head of a tuple.\nIf you declare `Head<[A, B, C]>` you will get back `A`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "Tail",
    "overloads": [
      {
        "file": "src/internal/types.ts#L230-L233",
        "signature": "export type Tail<X extends any[]> = ((...args: X) => any) extends (\n  arg: any,\n  ...rest: infer U\n) => any\n  ? U\n  : never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Extracts the tail of a tuple.\nIf you declare `Tail<[A, B, C]>` you will get back `[B, C]`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "ValueFromArray",
    "overloads": [
      {
        "file": "src/internal/types.ts#L240-L240",
        "signature": "export type ValueFromArray<A> = A extends Array<infer T> ? T : never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Extracts the generic value from an Array type.\nIf you have `T extends Array<any>`, and pass a `string[]` to it,\n`ValueFromArray<T>` will return the actual type of `string`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "src",
    "name": "ValueFromNotification",
    "overloads": [
      {
        "file": "src/internal/types.ts#L245-L249",
        "signature": "export type ValueFromNotification<T> = T extends { kind: \"N\" | \"E\" | \"C\" }\n  ? T extends NextNotification<any>\n    ? T extends { value: infer V }\n      ? V\n      : undefined\n    : never\n  : never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Gets the value type from an {@link ObservableNotification}, if possible.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "audit",
    "overloads": [
      {
        "file": "src/internal/operators/audit.ts#L55-L59",
        "signature": "function audit<T>(\n  durationSelector: (value: T) => SubscribableOrPromise<any>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Ignores source values for a duration determined by another Observable, then\nemits the most recent value from the source Observable, then repeats this\nprocess.\n\n<span class=\"informal\">It's like {@link auditTime}, but the silencing\nduration is determined by a second Observable.</span>\n\n![](audit.png)\n\n`audit` is similar to `throttle`, but emits the last value from the silenced\ntime window, instead of the first value. `audit` emits the most recent value\nfrom the source Observable on the output Observable as soon as its internal\ntimer becomes disabled, and ignores source values while the timer is enabled.\nInitially, the timer is disabled. As soon as the first source value arrives,\nthe timer is enabled by calling the `durationSelector` function with the\nsource value, which returns the \"duration\" Observable. When the duration\nObservable emits a value or completes, the timer is disabled, then the most\nrecent source value is emitted on the output Observable, and this process\nrepeats for the next source value.\n\n## Example\n\nEmit clicks at a rate of at most one click per second\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { audit } from 'rxjs/operators'\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(audit(ev => interval(1000)));\nresult.subscribe(x => console.log(x));\n```"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link auditTime}" }],
          ["see", { "__kind": "heading", "description": "{@link debounce}" }],
          ["see", { "__kind": "heading", "description": "{@link delayWhen}" }],
          ["see", { "__kind": "heading", "description": "{@link sample}" }],
          ["see", { "__kind": "heading", "description": "{@link throttle}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T): SubscribableOrPromise} durationSelector A function",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that performs rate-limiting of\nemissions from the source Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "audit\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "durationSelector",
              "description": "",
              "type": "(value: T) => SubscribableOrPromise<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "auditTime",
    "overloads": [
      {
        "file": "src/internal/operators/auditTime.ts#L54-L56",
        "signature": "function auditTime<T>(\n  duration: number,\n  scheduler: SchedulerLike = async\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Ignores source values for `duration` milliseconds, then emits the most recent\nvalue from the source Observable, then repeats this process.\n\n<span class=\"informal\">When it sees a source value, it ignores that plus\nthe next ones for `duration` milliseconds, and then it emits the most recent\nvalue from the source.</span>\n\n![](auditTime.png)\n\n`auditTime` is similar to `throttleTime`, but emits the last value from the\nsilenced time window, instead of the first value. `auditTime` emits the most\nrecent value from the source Observable on the output Observable as soon as\nits internal timer becomes disabled, and ignores source values while the\ntimer is enabled. Initially, the timer is disabled. As soon as the first\nsource value arrives, the timer is enabled. After `duration` milliseconds (or\nthe time unit determined internally by the optional `scheduler`) has passed,\nthe timer is disabled, then the most recent source value is emitted on the\noutput Observable, and this process repeats for the next source value.\nOptionally takes a {@link SchedulerLike} for managing timers.\n\n## Example\n\nEmit clicks at a rate of at most one click per second\n```ts\nimport { fromEvent } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(auditTime(1000));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link audit}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link debounceTime}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link delay}" }],
          ["see", { "__kind": "heading", "description": "{@link sampleTime}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link throttleTime}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "duration Time to wait before emitting the most recent source",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler=async] The {@link SchedulerLike} to use for",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that performs rate-limiting of\nemissions from the source Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "auditTime\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "duration",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "buffer",
    "overloads": [
      {
        "file": "src/internal/operators/buffer.ts#L47-L51",
        "signature": "function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Buffers the source Observable values until `closingNotifier` emits.\n\n<span class=\"informal\">Collects values from the past as an array, and emits\nthat array only when another Observable emits.</span>\n\n![](buffer.png)\n\nBuffers the incoming Observable values until the given `closingNotifier`\nObservable emits a value, at which point it emits the buffer on the output\nObservable and starts a new buffer internally, awaiting the next time\n`closingNotifier` emits.\n\n## Example\n\nOn every click, emit array of most recent interval events\n\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { buffer } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst intervalEvents = interval(1000);\nconst buffered = intervalEvents.pipe(buffer(clicks));\nbuffered.subscribe(x => console.log(x));\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferCount}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link bufferTime}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferToggle}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link bufferWhen}" }],
          ["see", { "__kind": "heading", "description": "{@link window}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable<any>}",
              "description": "closingNotifier An Observable that signals the",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T[]>} An Observable of buffers, which are arrays of\nvalues."
            }
          ],
          ["name", { "__kind": "heading", "description": "buffer\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "closingNotifier",
              "description": "",
              "type": "Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "bufferCount",
    "overloads": [
      {
        "file": "src/internal/operators/bufferCount.ts#L61-L65",
        "signature": "function bufferCount<T>(\n  bufferSize: number,\n  startBufferEvery: number | null = null\n): OperatorFunction<T, T[]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Buffers the source Observable values until the size hits the maximum\n`bufferSize` given.\n\n<span class=\"informal\">Collects values from the past as an array, and emits\nthat array only when its size reaches `bufferSize`.</span>\n\n![](bufferCount.png)\n\nBuffers a number of values from the source Observable by `bufferSize` then\nemits the buffer and clears it, and starts a new buffer each\n`startBufferEvery` values. If `startBufferEvery` is not provided or is\n`null`, then new buffers are started immediately at the start of the source\nand when each buffer closes and is emitted.\n\n## Examples\n\nEmit the last two click events as an array\n\n```ts\nimport { fromEvent } from 'rxjs';\nimport { bufferCount } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst buffered = clicks.pipe(bufferCount(2));\nbuffered.subscribe(x => console.log(x));\n```\n\nOn every click, emit the last two click events as an array\n\n```ts\nimport { fromEvent } from 'rxjs';\nimport { bufferCount } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst buffered = clicks.pipe(bufferCount(2, 1));\nbuffered.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link buffer}" }],
          ["see", { "__kind": "heading", "description": "{@link bufferTime}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferToggle}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link bufferWhen}" }],
          ["see", { "__kind": "heading", "description": "{@link pairwise}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowCount}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "bufferSize The maximum size of the buffer emitted.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[startBufferEvery] Interval at which to start a new buffer.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T[]>} An Observable of arrays of buffered values."
            }
          ],
          ["name", { "__kind": "heading", "description": "bufferCount\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferSize",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "startBufferEvery",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "bufferTime",
    "overloads": [
      {
        "file": "src/internal/operators/bufferTime.ts#L72-L94",
        "signature": "function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Buffers the source Observable values for a specific time period.\n\n<span class=\"informal\">Collects values from the past as an array, and emits\nthose arrays periodically in time.</span>\n\n![](bufferTime.png)\n\nBuffers values from the source for a specific time duration `bufferTimeSpan`.\nUnless the optional argument `bufferCreationInterval` is given, it emits and\nresets the buffer every `bufferTimeSpan` milliseconds. If\n`bufferCreationInterval` is given, this operator opens the buffer every\n`bufferCreationInterval` milliseconds and closes (emits and resets) the\nbuffer every `bufferTimeSpan` milliseconds. When the optional argument\n`maxBufferSize` is specified, the buffer will be closed either after\n`bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n\n## Examples\n\nEvery second, emit an array of the recent click events\n\n```ts\nimport { fromEvent } from 'rxjs';\nimport { bufferTime } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst buffered = clicks.pipe(bufferTime(1000));\nbuffered.subscribe(x => console.log(x));\n```\n\nEvery 5 seconds, emit the click events from the next 2 seconds\n\n```ts\nimport { fromEvent } from 'rxjs';\nimport { bufferTime } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst buffered = clicks.pipe(bufferTime(2000, 5000));\nbuffered.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link buffer}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferCount}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferToggle}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link bufferWhen}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowTime}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "bufferTimeSpan The amount of time to fill each buffer array.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[bufferCreationInterval] The interval at which to start new",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[maxBufferSize] The maximum buffer size.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler=async] The scheduler on which to schedule the",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T[]>} An observable of arrays of buffered values."
            }
          ],
          ["name", { "__kind": "heading", "description": "bufferTime\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferTimeSpan",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/bufferTime.ts#L11-L11",
        "signature": "function bufferTime<T>(\n  bufferTimeSpan: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferTimeSpan",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/bufferTime.ts#L12-L12",
        "signature": "function bufferTime<T>(\n  bufferTimeSpan: number,\n  bufferCreationInterval: number | null | undefined,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferTimeSpan",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferCreationInterval",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/bufferTime.ts#L13-L13",
        "signature": "function bufferTime<T>(\n  bufferTimeSpan: number,\n  bufferCreationInterval: number | null | undefined,\n  maxBufferSize: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferTimeSpan",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferCreationInterval",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "maxBufferSize",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "bufferToggle",
    "overloads": [
      {
        "file": "src/internal/operators/bufferToggle.ts#L54-L61",
        "signature": "function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Buffers the source Observable values starting from an emission from\n`openings` and ending when the output of `closingSelector` emits.\n\n<span class=\"informal\">Collects values from the past as an array. Starts\ncollecting only when `opening` emits, and calls the `closingSelector`\nfunction to get an Observable that tells when to close the buffer.</span>\n\n![](bufferToggle.png)\n\nBuffers values from the source by opening the buffer via signals from an\nObservable provided to `openings`, and closing and sending the buffers when\na Subscribable or Promise returned by the `closingSelector` function emits.\n\n## Example\n\nEvery other second, emit the click events from the next 500ms\n\n```ts\nimport { fromEvent, interval, EMPTY } from 'rxjs';\nimport { bufferToggle } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst openings = interval(1000);\nconst buffered = clicks.pipe(bufferToggle(openings, i =>\ni % 2 ? interval(500) : EMPTY\n));\nbuffered.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link buffer}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferCount}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link bufferTime}" }],
          ["see", { "__kind": "heading", "description": "{@link bufferWhen}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowToggle}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SubscribableOrPromise<O>}",
              "description": "openings A Subscribable or Promise of notifications to start new",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "O): SubscribableOrPromise} closingSelector A function that takes",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T[]>} An observable of arrays of buffered values."
            }
          ],
          ["name", { "__kind": "heading", "description": "bufferToggle\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "openings",
              "description": "",
              "type": "SubscribableOrPromise<O>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "closingSelector",
              "description": "",
              "type": "(value: O) => SubscribableOrPromise<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "bufferWhen",
    "overloads": [
      {
        "file": "src/internal/operators/bufferWhen.ts#L50-L54",
        "signature": "function bufferWhen<T>(\n  closingSelector: () => Observable<any>\n): OperatorFunction<T, T[]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Buffers the source Observable values, using a factory function of closing\nObservables to determine when to close, emit, and reset the buffer.\n\n<span class=\"informal\">Collects values from the past as an array. When it\nstarts collecting values, it calls a function that returns an Observable that\ntells when to close the buffer and restart collecting.</span>\n\n![](bufferWhen.png)\n\nOpens a buffer immediately, then closes the buffer when the observable\nreturned by calling `closingSelector` function emits a value. When it closes\nthe buffer, it immediately opens a new buffer and repeats the process.\n\n## Example\n\nEmit an array of the last clicks every [1-5] random seconds\n\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { bufferWhen } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst buffered = clicks.pipe(bufferWhen(() =>\ninterval(1000 + Math.random() * 4000)\n));\nbuffered.subscribe(x => console.log(x));\n```\n\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link buffer}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferCount}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link bufferTime}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferToggle}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowWhen}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function():",
              "description": "Observable} closingSelector A function that takes no",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T[]>} An observable of arrays of buffered values."
            }
          ],
          ["name", { "__kind": "heading", "description": "bufferWhen\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "closingSelector",
              "description": "",
              "type": "() => Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "catchError",
    "overloads": [
      {
        "file": "src/internal/operators/catchError.ts#L108-L153",
        "signature": "function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Catches errors on the observable to be handled by returning a new observable or throwing an error.\n\n<span class=\"informal\">\nIt only listens to the error channel and ignores notifications.\nHandles errors from the source observable, and maps them to a new observable.\nThe error may also be rethrown, or a new error can be thrown to emit an error from the result.\n</span>\n\n![](catch.png)\n\nThis operator handles errors, but forwards along all other events to the resulting observable.\nIf the source observable terminates with an error, it will map that error to a new observable,\nsubscribe to it, and forward all of its events to the resulting observable.\n\n## Examples\nContinues with a different Observable when there's an error\n\n```ts\nimport { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nof(1, 2, 3, 4, 5).pipe(\nmap(n => {\nif (n === 4) {\nthrow 'four!';\n}\nreturn n;\n}),\ncatchError(err => of('I', 'II', 'III', 'IV', 'V')),\n)\n.subscribe(x => console.log(x));\n// 1, 2, 3, I, II, III, IV, V\n```\n\nRetries the caught source Observable again in case of error, similar to retry() operator\n\n```ts\nimport { of } from 'rxjs';\nimport { map, catchError, take } from 'rxjs/operators';\n\nof(1, 2, 3, 4, 5).pipe(\nmap(n => {\nif (n === 4) {\nthrow 'four!';\n}\nreturn n;\n}),\ncatchError((err, caught) => caught),\ntake(30),\n)\n.subscribe(x => console.log(x));\n// 1, 2, 3, 1, 2, 3, ...\n```\n\nThrows a new error when the source Observable throws an error\n\n```ts\nimport { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nof(1, 2, 3, 4, 5).pipe(\nmap(n => {\nif (n === 4) {\nthrow 'four!';\n}\nreturn n;\n}),\ncatchError(err => {\nthrow 'error in source. Details: ' + err;\n}),\n)\n.subscribe(\nx => console.log(x),\nerr => console.log(err)\n);\n// 1, 2, 3, error in source. Details: four!\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link onErrorResumeNext}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link repeat}" }],
          ["see", { "__kind": "heading", "description": "{@link repeatWhen}" }],
          ["see", { "__kind": "heading", "description": "{@link retry }" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link retryWhen}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "selector a function that takes as arguments `err`, which is the error, and `caught`, which",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An observable that originates from either the source or the observable returned by the\ncatch `selector` function."
            }
          ],
          ["name", { "__kind": "heading", "description": "catchError\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "(err: any, caught: Observable<T>) => O"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/catchError.ts#L11-L13",
        "signature": "function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "(err: any, caught: Observable<T>) => O"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "combineAll",
    "overloads": [
      {
        "file": "src/internal/operators/combineAll.ts#L56-L58",
        "signature": "function combineAll<T, R>(\n  project?: (...values: Array<any>) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Flattens an Observable-of-Observables by applying {@link combineLatest} when the Observable-of-Observables completes.\n\n![](combineAll.png)\n\n`combineAll` takes an Observable of Observables, and collects all Observables from it. Once the outer Observable completes,\nit subscribes to all collected Observables and combines their values using the {@link combineLatest}</a> strategy, such that:\n\n* Every time an inner Observable emits, the output Observable emits\n* When the returned observable emits, it emits all of the latest values by:\n* If a `project` function is provided, it is called with each recent value from each inner Observable in whatever order they\narrived, and the result of the `project` function is what is emitted by the output Observable.\n* If there is no `project` function, an array of all the most recent values is emitted by the output Observable.\n\n---\n\n## Examples\n\n### Map two click events to a finite interval Observable, then apply `combineAll`\n\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { map, combineAll, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst higherOrder = clicks.pipe(\nmap(ev =>\ninterval(Math.random() * 2000).pipe(take(3))\n),\ntake(2)\n);\nconst result = higherOrder.pipe(\ncombineAll()\n);\n\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link combineLatest}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link mergeAll}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(...values:",
              "description": "Array<any>)} An optional function to map the most recent values from each inner Observable into a new result.",
              "type": ""
            }
          ],
          ["return", { "__kind": "heading", "description": "{Observable<T>}" }],
          ["name", { "__kind": "heading", "description": "combineAll\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(...values: Array<any>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineAll.ts#L6-L6",
        "signature": "function combineAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;",
        "info": []
      },
      {
        "file": "src/internal/operators/combineAll.ts#L7-L7",
        "signature": "function combineAll<T>(): OperatorFunction<any, T[]>;",
        "info": []
      },
      {
        "file": "src/internal/operators/combineAll.ts#L8-L8",
        "signature": "function combineAll<T, R>(\n  project: (...values: T[]) => R\n): OperatorFunction<ObservableInput<T>, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(...values: T[]) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineAll.ts#L9-L9",
        "signature": "function combineAll<R>(\n  project: (...values: Array<any>) => R\n): OperatorFunction<any, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(...values: Array<any>) => R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "combineLatest",
    "overloads": [
      {
        "file": "src/internal/operators/combineLatestWith.ts#L43-L62",
        "signature": "function combineLatest<T, R>(\n  ...observables: Array<\n    | ObservableInput<any>\n    | Array<ObservableInput<any>>\n    | ((...values: Array<any>) => R)\n  >\n): OperatorFunction<T, R>;",
        "info": [
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "Deprecated, use {@link combineLatestWith} or static {@link combineLatest}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L11-L11",
        "signature": "function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L13-L13",
        "signature": "function combineLatest<T, T2, R>(\n  v2: ObservableInput<T2>,\n  project: (v1: T, v2: T2) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: T2) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L15-L15",
        "signature": "function combineLatest<T, T2, T3, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  project: (v1: T, v2: T2, v3: T3) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: T2, v3: T3) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L17-L17",
        "signature": "function combineLatest<T, T2, T3, T4, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  project: (v1: T, v2: T2, v3: T3, v4: T4) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: T2, v3: T3, v4: T4) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L19-L19",
        "signature": "function combineLatest<T, T2, T3, T4, T5, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L21-L21",
        "signature": "function combineLatest<T, T2, T3, T4, T5, T6, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>,\n  project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L23-L23",
        "signature": "function combineLatest<T, T2>(\n  v2: ObservableInput<T2>\n): OperatorFunction<T, [T, T2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L25-L25",
        "signature": "function combineLatest<T, T2, T3>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>\n): OperatorFunction<T, [T, T2, T3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L27-L27",
        "signature": "function combineLatest<T, T2, T3, T4>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>\n): OperatorFunction<T, [T, T2, T3, T4]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L29-L29",
        "signature": "function combineLatest<T, T2, T3, T4, T5>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>\n): OperatorFunction<T, [T, T2, T3, T4, T5]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L31-L31",
        "signature": "function combineLatest<T, T2, T3, T4, T5, T6>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>\n): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L33-L33",
        "signature": "function combineLatest<T, R>(\n  ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L35-L35",
        "signature": "function combineLatest<T, R>(\n  array: ObservableInput<T>[]\n): OperatorFunction<T, Array<T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/combineLatestWith.ts#L37-L37",
        "signature": "function combineLatest<T, TOther, R>(\n  array: ObservableInput<TOther>[],\n  project: (v1: T, ...values: Array<TOther>) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, ...values: Array<TOther>) => R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "combineLatestWith",
    "overloads": [
      {
        "file": "src/internal/operators/combineLatestWith.ts#L100-L104",
        "signature": "function combineLatestWith<T, A extends ObservableInput<any>[]>(\n  ...otherSources: A\n): OperatorFunction<T, Cons<T, ObservedValueTupleFromArray<A>>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create an observable that combines the latest values from all passed observables and the source\ninto arrays and emits them.\n\nReturns an observable, that when subscribed to, will subscribe to the source observable and all\nsources provided as arguments. Once all sources emit at least one value, all of the latest values\nwill be emitted as an array. After that, every time any source emits a value, all of the latest values\nwill be emitted as an array.\n\nThis is a useful operator for eagerly calculating values based off of changed inputs.\n\n### Example\n\nSimple calculation from two inputs.\n\n```\n// Setup: Add two inputs to the page\nconst input1 = document.createElement('input');\ndocument.body.appendChild(input1);\nconst input2 = document.createElement('input');\ndocument.body.appendChild(input2);\n\n// Get streams of changes\nconst input1Changes$ = fromEvent(input1, 'change');\nconst input2Changes$ = fromEvent(input2, 'change');\n\n// Combine the changes by adding them together\ninput1Changes$.pipe(\ncombineLatestWith(input2Changes$),\nmap(([e1, e2]) => Number(e1.target.value) + Number(e2.target.value)),\n)\n.subscribe(x => console.log(x));\n\n```"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "otherSources",
              "description": "the other sources to subscribe to.",
              "type": "A"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "concat",
    "overloads": [
      {
        "file": "src/internal/operators/concat.ts#L28-L33",
        "signature": "function concat<T, R>(\n  ...observables: Array<ObservableInput<any> | SchedulerLike | undefined>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "remove in v8. Use {@link concatWith}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concat.ts#L8-L8",
        "signature": "function concat<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concat.ts#L10-L10",
        "signature": "function concat<T, T2>(\n  v2: ObservableInput<T2>,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | T2>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concat.ts#L12-L12",
        "signature": "function concat<T, T2, T3>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | T2 | T3>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concat.ts#L14-L14",
        "signature": "function concat<T, T2, T3, T4>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | T2 | T3 | T4>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concat.ts#L16-L16",
        "signature": "function concat<T, T2, T3, T4, T5>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concat.ts#L18-L18",
        "signature": "function concat<T, T2, T3, T4, T5, T6>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concat.ts#L20-L20",
        "signature": "function concat<T>(\n  ...observables: Array<ObservableInput<T> | SchedulerLike>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concat.ts#L22-L22",
        "signature": "function concat<T, R>(\n  ...observables: Array<ObservableInput<any> | SchedulerLike>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "concatAll",
    "overloads": [
      {
        "file": "src/internal/operators/concatAll.ts#L65-L67",
        "signature": "function concatAll<T>(): OperatorFunction<ObservableInput<T>, T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts a higher-order Observable into a first-order Observable by\nconcatenating the inner Observables in order.\n\n<span class=\"informal\">Flattens an Observable-of-Observables by putting one\ninner Observable after the other.</span>\n\n![](concatAll.svg)\n\nJoins every Observable emitted by the source (a higher-order Observable), in\na serial fashion. It subscribes to each inner Observable only after the\nprevious inner Observable has completed, and merges all of their values into\nthe returned observable.\n\n__Warning:__ If the source Observable emits Observables quickly and\nendlessly, and the inner Observables it emits generally complete slower than\nthe source emits, you can run into memory issues as the incoming Observables\ncollect in an unbounded buffer.\n\nNote: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\nto `1`.\n\n## Example\n\nFor each click event, tick every second from 0 to 3, with no concurrency\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { map, take, concatAll } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst higherOrder = clicks.pipe(\nmap(ev => interval(1000).pipe(take(4))),\n);\nconst firstOrder = higherOrder.pipe(concatAll());\nfirstOrder.subscribe(x => console.log(x));\n\n// Results in the following:\n// (results are not concurrent)\n// For every click on the \"document\" it will emit values 0 to 3 spaced\n// on a 1000ms interval\n// one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link combineAll}" }],
          ["see", { "__kind": "heading", "description": "{@link concat}" }],
          ["see", { "__kind": "heading", "description": "{@link concatMap}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link concatMapTo}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link exhaust}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeAll}" }],
          ["see", { "__kind": "heading", "description": "{@link switchAll}" }],
          ["see", { "__kind": "heading", "description": "{@link switchMap}" }],
          ["see", { "__kind": "heading", "description": "{@link zipAll}\n" }],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable emitting values from all the inner\nObservables concatenated."
            }
          ],
          ["name", { "__kind": "heading", "description": "concatAll\n" }]
        ]
      },
      {
        "file": "src/internal/operators/concatAll.ts#L5-L5",
        "signature": "function concatAll<T>(): OperatorFunction<ObservableInput<T>, T>;",
        "info": []
      },
      {
        "file": "src/internal/operators/concatAll.ts#L6-L6",
        "signature": "function concatAll<R>(): OperatorFunction<any, R>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "concatMap",
    "overloads": [
      {
        "file": "src/internal/operators/concatMap.ts#L71-L79",
        "signature": "function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (\n    outerValue: T,\n    innerValue: ObservedValueOf<O>,\n    outerIndex: number,\n    innerIndex: number\n  ) => R\n): OperatorFunction<T, ObservedValueOf<O> | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Projects each source value to an Observable which is merged in the output\nObservable, in a serialized fashion waiting for each one to complete before\nmerging the next.\n\n<span class=\"informal\">Maps each value to an Observable, then flattens all of\nthese inner Observables using {@link concatAll}.</span>\n\n![](concatMap.png)\n\nReturns an Observable that emits items based on applying a function that you\nsupply to each item emitted by the source Observable, where that function\nreturns an (so-called \"inner\") Observable. Each new inner Observable is\nconcatenated with the previous inner Observable.\n\n__Warning:__ if source values arrive endlessly and faster than their\ncorresponding inner Observables can complete, it will result in memory issues\nas inner Observables amass in an unbounded buffer waiting for their turn to\nbe subscribed to.\n\nNote: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\nto `1`.\n\n## Example\nFor each click event, tick every second from 0 to 3, with no concurrency\n\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { concatMap, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(\nconcatMap(ev => interval(1000).pipe(take(4)))\n);\nresult.subscribe(x => console.log(x));\n\n// Results in the following:\n// (results are not concurrent)\n// For every click on the \"document\" it will emit values 0 to 3 spaced\n// on a 1000ms interval\n// one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link concat}" }],
          ["see", { "__kind": "heading", "description": "{@link concatAll}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link concatMapTo}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link exhaustMap}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeMap}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link switchMap}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, ?index: number): ObservableInput} project A function",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits the result of applying the\nprojection function (and the optional deprecated `resultSelector`) to each item emitted\nby the source Observable and taking values from each projected inner\nObservable sequentially."
            }
          ],
          ["name", { "__kind": "heading", "description": "concatMap\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concatMap.ts#L5-L5",
        "signature": "function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concatMap.ts#L7-L7",
        "signature": "function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "undefined"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concatMap.ts#L9-L9",
        "signature": "function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (\n    outerValue: T,\n    innerValue: ObservedValueOf<O>,\n    outerIndex: number,\n    innerIndex: number\n  ) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "concatMapTo",
    "overloads": [
      {
        "file": "src/internal/operators/concatMapTo.ts#L67-L75",
        "signature": "function concatMapTo<T, R, O extends ObservableInput<any>>(\n  innerObservable: O,\n  resultSelector?: (\n    outerValue: T,\n    innerValue: ObservedValueOf<O>,\n    outerIndex: number,\n    innerIndex: number\n  ) => R\n): OperatorFunction<T, ObservedValueOf<O> | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Projects each source value to the same Observable which is merged multiple\ntimes in a serialized fashion on the output Observable.\n\n<span class=\"informal\">It's like {@link concatMap}, but maps each value\nalways to the same inner Observable.</span>\n\n![](concatMapTo.png)\n\nMaps each source value to the given Observable `innerObservable` regardless\nof the source value, and then flattens those resulting Observables into one\nsingle Observable, which is the output Observable. Each new `innerObservable`\ninstance emitted on the output Observable is concatenated with the previous\n`innerObservable` instance.\n\n__Warning:__ if source values arrive endlessly and faster than their\ncorresponding inner Observables can complete, it will result in memory issues\nas inner Observables amass in an unbounded buffer waiting for their turn to\nbe subscribed to.\n\nNote: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\nset to `1`.\n\n## Example\nFor each click event, tick every second from 0 to 3, with no concurrency\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { concatMapTo, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(\nconcatMapTo(interval(1000).pipe(take(4))),\n);\nresult.subscribe(x => console.log(x));\n\n// Results in the following:\n// (results are not concurrent)\n// For every click on the \"document\" it will emit values 0 to 3 spaced\n// on a 1000ms interval\n// one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link concat}" }],
          ["see", { "__kind": "heading", "description": "{@link concatAll}" }],
          ["see", { "__kind": "heading", "description": "{@link concatMap}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeMapTo}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link switchMapTo}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{ObservableInput}",
              "description": "innerObservable An Observable to replace each value from",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An observable of values merged together by joining the\npassed observable with itself, one after the other, for each value emitted\nfrom the source."
            }
          ],
          ["name", { "__kind": "heading", "description": "concatMapTo\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "innerObservable",
              "description": "",
              "type": "O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concatMapTo.ts#L5-L5",
        "signature": "function concatMapTo<O extends ObservableInput<any>>(\n  observable: O\n): OperatorFunction<any, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observable",
              "description": "",
              "type": "O"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concatMapTo.ts#L7-L7",
        "signature": "function concatMapTo<O extends ObservableInput<any>>(\n  observable: O,\n  resultSelector: undefined\n): OperatorFunction<any, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observable",
              "description": "",
              "type": "O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "undefined"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concatMapTo.ts#L9-L9",
        "signature": "function concatMapTo<T, R, O extends ObservableInput<any>>(\n  observable: O,\n  resultSelector: (\n    outerValue: T,\n    innerValue: ObservedValueOf<O>,\n    outerIndex: number,\n    innerIndex: number\n  ) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observable",
              "description": "",
              "type": "O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "concatWith",
    "overloads": [
      {
        "file": "src/internal/operators/concatWith.ts#L47-L52",
        "signature": "function concatWith<T, A extends ObservableInput<any>[]>(\n  ...otherSources: A\n): OperatorFunction<T, ObservedValueUnionFromArray<A> | T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits all of the values from the source observable, then, once it completes, subscribes\nto each observable source provided, one at a time, emitting all of their values, and not subscribing\nto the next one until it completes.\n\n`concat(a$, b$, c$)` is the same as `a$.pipe(concatWith(b$, c$))`.\n\n## Example\n\nListen for one mouse click, then listen for all mouse moves.\n\n```ts\nimport { fromEvent } from 'rxjs';\nimport { concatWith } from 'rxjs/operators';\n\nconst clicks$ = fromEvent(document, 'click');\nconst moves$ = fromEvent(document, 'mousemove');\n\nclicks$.pipe(\nmap(() => 'click'),\ntake(1),\nconcatWith(\nmoves$.pipe(\nmap(() => 'move')\n)\n)\n)\n.subscribe(x => console.log(x));\n\n// 'click'\n// 'move'\n// 'move'\n// 'move'\n// ...\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "otherSources",
              "description": "Other observable sources to subscribe to, in sequence, after the original source is complete.",
              "type": "A"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/concatWith.ts#L6-L6",
        "signature": "function concatWith<T>(): OperatorFunction<T, T>;",
        "info": []
      },
      {
        "file": "src/internal/operators/concatWith.ts#L7-L7",
        "signature": "function concatWith<T, A extends ObservableInput<any>[]>(\n  ...otherSources: A\n): OperatorFunction<T, ObservedValueUnionFromArray<A> | T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "otherSources",
              "description": "",
              "type": "A"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "count",
    "overloads": [
      {
        "file": "src/internal/operators/count.ts#L65-L67",
        "signature": "function count<T>(\n  predicate?: (value: T, index: number, source: Observable<T>) => boolean\n): OperatorFunction<T, number>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Counts the number of emissions on the source and emits that number when the\nsource completes.\n\n<span class=\"informal\">Tells how many values were emitted, when the source\ncompletes.</span>\n\n![](count.png)\n\n`count` transforms an Observable that emits values into an Observable that\nemits a single value that represents the number of values emitted by the\nsource Observable. If the source Observable terminates with an error, `count`\nwill pass this error notification along without emitting a value first. If\nthe source Observable does not terminate at all, `count` will neither emit\na value nor terminate. This operator takes an optional `predicate` function\nas argument, in which case the output emission will represent the number of\nsource values that matched `true` with the `predicate`.\n\n## Examples\n\nCounts how many seconds have passed before the first click happened\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { count, takeUntil } from 'rxjs/operators';\n\nconst seconds = interval(1000);\nconst clicks = fromEvent(document, 'click');\nconst secondsBeforeClick = seconds.pipe(takeUntil(clicks));\nconst result = secondsBeforeClick.pipe(count());\nresult.subscribe(x => console.log(x));\n```\n\nCounts how many odd numbers are there between 1 and 7\n```ts\nimport { range } from 'rxjs';\nimport { count } from 'rxjs/operators';\n\nconst numbers = range(1, 7);\nconst result = numbers.pipe(count(i => i % 2 === 1));\nresult.subscribe(x => console.log(x));\n// Results in:\n// 4\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link max}" }],
          ["see", { "__kind": "heading", "description": "{@link min}" }],
          ["see", { "__kind": "heading", "description": "{@link reduce}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, i: number, source: Observable<T>): boolean} [predicate] A",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable of one number that represents the count as\ndescribed above."
            }
          ],
          ["name", { "__kind": "heading", "description": "count\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "debounce",
    "overloads": [
      {
        "file": "src/internal/operators/debounce.ts#L68-L70",
        "signature": "function debounce<T>(\n  durationSelector: (value: T) => SubscribableOrPromise<any>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits a notification from the source Observable only after a particular time span\ndetermined by another Observable has passed without another source emission.\n\n<span class=\"informal\">It's like {@link debounceTime}, but the time span of\nemission silence is determined by a second Observable.</span>\n\n![](debounce.png)\n\n`debounce` delays notifications emitted by the source Observable, but drops previous\npending delayed emissions if a new notification arrives on the source Observable.\nThis operator keeps track of the most recent notification from the source\nObservable, and spawns a duration Observable by calling the\n`durationSelector` function. The notification is emitted only when the duration\nObservable emits a notification or completes, and if no other notification was emitted on\nthe source Observable since the duration Observable was spawned. If a new\nnotification appears before the duration Observable emits, the previous notification will\nnot be emitted and a new duration is scheduled from `durationSelector` is scheduled.\nIf the completing event happens during the scheduled duration the last cached notification\nis emitted before the completion event is forwarded to the output observable.\nIf the error event happens during the scheduled duration or after it only the error event is\nforwarded to the output observable. The cache notification is not emitted in this case.\n\nLike {@link debounceTime}, this is a rate-limiting operator, and also a\ndelay-like operator since output emissions do not necessarily occur at the\nsame time as they did on the source Observable.\n\n## Example\nEmit the most recent click after a burst of clicks\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { scan, debounce } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(\nscan((i) => ++i, 1),\ndebounce((i) => interval(200 * i))\n);\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link audit}" }],
          ["see", { "__kind": "heading", "description": "{@link auditTime}" }],
          ["see", { "__kind": "heading", "description": "{@link debounce}" }],
          ["see", { "__kind": "heading", "description": "{@link delay}" }],
          ["see", { "__kind": "heading", "description": "{@link sample}" }],
          ["see", { "__kind": "heading", "description": "{@link sampleTime}" }],
          ["see", { "__kind": "heading", "description": "{@link throttle}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link throttleTime}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T): SubscribableOrPromise} durationSelector A function",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that delays the emissions of the source\nObservable by the specified duration Observable returned by\n`durationSelector`, and may drop some values if they occur too frequently."
            }
          ],
          ["name", { "__kind": "heading", "description": "debounce\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "durationSelector",
              "description": "",
              "type": "(value: T) => SubscribableOrPromise<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "debounceTime",
    "overloads": [
      {
        "file": "src/internal/operators/debounceTime.ts#L67-L69",
        "signature": "function debounceTime<T>(\n  dueTime: number,\n  scheduler: SchedulerLike = async\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits a notification from the source Observable only after a particular time span\nhas passed without another source emission.\n\n<span class=\"informal\">It's like {@link delay}, but passes only the most\nrecent notification from each burst of emissions.</span>\n\n![](debounceTime.png)\n\n`debounceTime` delays notifications emitted by the source Observable, but drops\nprevious pending delayed emissions if a new notification arrives on the source\nObservable. This operator keeps track of the most recent notification from the\nsource Observable, and emits that only when `dueTime` has passed\nwithout any other notification appearing on the source Observable. If a new value\nappears before `dueTime` silence occurs, the previous notification will be dropped\nand will not be emitted and a new `dueTime` is scheduled.\nIf the completing event happens during `dueTime` the last cached notification\nis emitted before the completion event is forwarded to the output observable.\nIf the error event happens during `dueTime` or after it only the error event is\nforwarded to the output observable. The cache notification is not emitted in this case.\n\nThis is a rate-limiting operator, because it is impossible for more than one\nnotification to be emitted in any time window of duration `dueTime`, but it is also\na delay-like operator since output emissions do not occur at the same time as\nthey did on the source Observable. Optionally takes a {@link SchedulerLike} for\nmanaging timers.\n\n## Example\nEmit the most recent click after a burst of clicks\n```ts\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(debounceTime(1000));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link audit}" }],
          ["see", { "__kind": "heading", "description": "{@link auditTime}" }],
          ["see", { "__kind": "heading", "description": "{@link debounce}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link debounceTime}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link sample}" }],
          ["see", { "__kind": "heading", "description": "{@link sampleTime}" }],
          ["see", { "__kind": "heading", "description": "{@link throttle}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link throttleTime}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "dueTime The timeout duration in milliseconds (or the time",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler=async] The {@link SchedulerLike} to use for",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that delays the emissions of the source\nObservable by the specified `dueTime`, and may drop some values if they occur\ntoo frequently."
            }
          ],
          ["name", { "__kind": "heading", "description": "debounceTime\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "dueTime",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "defaultIfEmpty",
    "overloads": [
      {
        "file": "src/internal/operators/defaultIfEmpty.ts#L46-L48",
        "signature": "function defaultIfEmpty<T, R>(\n  defaultValue: R | null = null\n): OperatorFunction<T, T | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits a given value if the source Observable completes without emitting any\n`next` value, otherwise mirrors the source Observable.\n\n<span class=\"informal\">If the source Observable turns out to be empty, then\nthis operator will emit a default value.</span>\n\n![](defaultIfEmpty.png)\n\n`defaultIfEmpty` emits the values emitted by the source Observable or a\nspecified default value if the source Observable is empty (completes without\nhaving emitted any `next` value).\n\n## Example\nIf no clicks happen in 5 seconds, then emit \"no clicks\"\n```ts\nimport { fromEvent } from 'rxjs';\nimport { defaultIfEmpty, takeUntil } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\nconst result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link empty}" }],
          ["see", { "__kind": "heading", "description": "{@link last}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{any}",
              "description": "[defaultValue=null] The default value used if the source",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits either the specified\n`defaultValue` if the source Observable emits no items, or the values emitted\nby the source Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "defaultIfEmpty\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/defaultIfEmpty.ts#L8-L8",
        "signature": "function defaultIfEmpty<T, R = T>(defaultValue?: R): OperatorFunction<T, T | R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "delay",
    "overloads": [
      {
        "file": "src/internal/operators/delay.ts#L62-L65",
        "signature": "function delay<T>(\n  delay: number | Date,\n  scheduler: SchedulerLike = async\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Delays the emission of items from the source Observable by a given timeout or\nuntil a given Date.\n\n<span class=\"informal\">Time shifts each item by some specified amount of\nmilliseconds.</span>\n\n![](delay.png)\n\nIf the delay argument is a Number, this operator time shifts the source\nObservable by that amount of time expressed in milliseconds. The relative\ntime intervals between the values are preserved.\n\nIf the delay argument is a Date, this operator time shifts the start of the\nObservable execution until the given date occurs.\n\n## Examples\nDelay each click by one second\n```ts\nimport { fromEvent } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\ndelayedClicks.subscribe(x => console.log(x));\n```\n\nDelay all clicks until a future date happens\n```ts\nimport { fromEvent } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst date = new Date('March 15, 2050 12:00:00'); // in the future\nconst delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\ndelayedClicks.subscribe(x => console.log(x));\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link debounceTime}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link delayWhen}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number|Date}",
              "description": "delay The delay duration in milliseconds (a `number`) or",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler=async] The {@link SchedulerLike} to use for",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that delays the emissions of the source\nObservable by the specified timeout or Date.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "delay",
              "description": "",
              "type": "number | Date"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "delayWhen",
    "overloads": [
      {
        "file": "src/internal/operators/delayWhen.ts#L74-L81",
        "signature": "function delayWhen<T>(\n  delayDurationSelector: (value: T, index: number) => Observable<any>,\n  subscriptionDelay?: Observable<any>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Delays the emission of items from the source Observable by a given time span\ndetermined by the emissions of another Observable.\n\n<span class=\"informal\">It's like {@link delay}, but the time span of the\ndelay duration is determined by a second Observable.</span>\n\n![](delayWhen.png)\n\n`delayWhen` time shifts each emitted value from the source Observable by a\ntime span determined by another Observable. When the source emits a value,\nthe `delayDurationSelector` function is called with the source value as\nargument, and should return an Observable, called the \"duration\" Observable.\nThe source value is emitted on the output Observable only when the duration\nObservable emits a value or completes.\nThe completion of the notifier triggering the emission of the source value\nis deprecated behavior and will be removed in future versions.\n\nOptionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\nis an Observable. When `subscriptionDelay` emits its first value or\ncompletes, the source Observable is subscribed to and starts behaving like\ndescribed in the previous paragraph. If `subscriptionDelay` is not provided,\n`delayWhen` will subscribe to the source Observable as soon as the output\nObservable is subscribed.\n\n## Example\nDelay each click by a random amount of time, between 0 and 5 seconds\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { delayWhen } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst delayedClicks = clicks.pipe(\ndelayWhen(event => interval(Math.random() * 5000)),\n);\ndelayedClicks.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link delay}" }],
          ["see", { "__kind": "heading", "description": "{@link throttle}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link throttleTime}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link debounce}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link debounceTime}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link sample}" }],
          ["see", { "__kind": "heading", "description": "{@link sampleTime}" }],
          ["see", { "__kind": "heading", "description": "{@link audit}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link auditTime}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, index: number): Observable} delayDurationSelector A function that",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable}",
              "description": "subscriptionDelay An Observable that triggers the",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that delays the emissions of the source\nObservable by an amount of time specified by the Observable returned by\n`delayDurationSelector`."
            }
          ],
          ["name", { "__kind": "heading", "description": "delayWhen\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "delayDurationSelector",
              "description": "",
              "type": "(value: T, index: number) => Observable<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "subscriptionDelay",
              "description": "",
              "type": "Observable<any>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/delayWhen.ts#L11-L11",
        "signature": "function delayWhen<T>(\n  delayDurationSelector: (value: T, index: number) => Observable<never>,\n  subscriptionDelay?: Observable<any>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "delayDurationSelector",
              "description": "",
              "type": "(value: T, index: number) => Observable<never>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "subscriptionDelay",
              "description": "",
              "type": "Observable<any>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/delayWhen.ts#L12-L12",
        "signature": "function delayWhen<T>(\n  delayDurationSelector: (value: T, index: number) => Observable<any>,\n  subscriptionDelay?: Observable<any>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "delayDurationSelector",
              "description": "",
              "type": "(value: T, index: number) => Observable<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "subscriptionDelay",
              "description": "",
              "type": "Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "dematerialize",
    "overloads": [
      {
        "file": "src/internal/operators/dematerialize.ts#L55-L59",
        "signature": "function dematerialize<\n  N extends ObservableNotification<any>\n>(): OperatorFunction<N, ValueFromNotification<N>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts an Observable of {@link ObservableNotification} objects into the emissions\nthat they represent.\n\n<span class=\"informal\">Unwraps {@link ObservableNotification} objects as actual `next`,\n`error` and `complete` emissions. The opposite of {@link materialize}.</span>\n\n![](dematerialize.png)\n\n`dematerialize` is assumed to operate an Observable that only emits\n{@link ObservableNotification} objects as `next` emissions, and does not emit any\n`error`. Such Observable is the output of a `materialize` operation. Those\nnotifications are then unwrapped using the metadata they contain, and emitted\nas `next`, `error`, and `complete` on the output Observable.\n\nUse this operator in conjunction with {@link materialize}.\n\n## Example\n\nConvert an Observable of Notifications to an actual Observable\n\n```ts\nimport { of } from 'rxjs';\nimport { dematerialize } from 'rxjs/operators';\n\nconst notifA = { kind: 'N', value: 'A' };\nconst notifB = { kind: 'N', value: 'B' };\nconst notifE = { kind: 'E', error: new TypeError('x.toUpperCase is not a function') }\n\nconst materialized = of(notifA, notifB, notifE);\n\nconst upperCase = materialized.pipe(dematerialize());\nupperCase.subscribe({\nnext: x => console.log(x),\nerror: e => console.error(e)\n});\n\n// Results in:\n// A\n// B\n// TypeError: x.toUpperCase is not a function\n```"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link materialize}\n" }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits items and notifications\nembedded in Notification objects emitted by the source Observable.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "distinct",
    "overloads": [
      {
        "file": "src/internal/operators/distinct.ts#L75-L78",
        "signature": "function distinct<T, K>(\n  keySelector?: (value: T) => K,\n  flushes?: Observable<any>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n\nIf a keySelector function is provided, then it will project each value from the source observable into a new value that it will\ncheck for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\nsource observable directly with an equality check against previous values.\n\nIn JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n\nIn other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\nhood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\nuse might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\nthat the internal `Set` can be \"flushed\", basically clearing it of values.\n\n## Examples\n\nA simple example with numbers\n\n```ts\nimport { of } from 'rxjs';\nimport { distinct } from 'rxjs/operators';\n\nof(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n.pipe(\ndistinct()\n)\n.subscribe(x => console.log(x));\n\n// Outputs\n// 1\n// 2\n// 3\n// 4\n```\n\nAn example using a keySelector function\n\n```ts\nimport { of } from 'rxjs';\nimport { distinct } from 'rxjs/operators';\n\ninterface Person {\nage: number,\nname: string\n}\n\nof(\n{ age: 4, name: 'Foo'},\n{ age: 7, name: 'Bar'},\n{ age: 5, name: 'Foo'}\n).pipe(\ndistinct((p: Person) => p.name)\n)\n.subscribe(x => console.log(x));\n\n// Outputs\n// { age: 4, name: 'Foo' }\n// { age: 7, name: 'Bar' }\n```"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link distinctUntilChanged}"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link distinctUntilKeyChanged}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "[keySelector] Optional function to select which value you want to check as distinct.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable}",
              "description": "[flushes] Optional Observable for flushing the internal HashSet of the operator.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits items from the source Observable with distinct values."
            }
          ],
          ["name", { "__kind": "heading", "description": "distinct\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "keySelector",
              "description": "",
              "type": "(value: T) => K"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "flushes",
              "description": "",
              "type": "Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "distinctUntilChanged",
    "overloads": [
      {
        "file": "src/internal/operators/distinctUntilChanged.ts#L66-L68",
        "signature": "function distinctUntilChanged<T, K>(\n  compare?: (x: K, y: K) => boolean,\n  keySelector?: (x: T) => K\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n\nIf a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\nThe comparator function shourld return true if the values are the same, and false if they are different.\n\nIf a comparator function is not provided, an equality check is used by default.\n\n## Example\nA simple example with numbers\n```ts\nimport { of } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nof(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4).pipe(\ndistinctUntilChanged(),\n)\n.subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n```\n\nAn example using a compare function\n```typescript\nimport { of } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\ninterface Person {\nage: number,\nname: string\n}\n\nf(\n{ age: 4, name: 'Foo'},\n{ age: 7, name: 'Bar'},\n{ age: 5, name: 'Foo'},\n{ age: 6, name: 'Foo'},\n).pipe(\ndistinctUntilChanged((p: Person, q: Person) => p.name === q.name),\n)\n.subscribe(x => console.log(x));\n\n// displays:\n// { age: 4, name: 'Foo' }\n// { age: 7, name: 'Bar' }\n// { age: 5, name: 'Foo' }\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link distinct}" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link distinctUntilKeyChanged}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "[compare] Optional comparison function called to test if an item is distinct from the previous item in the source.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits items from the source Observable with distinct values."
            }
          ],
          [
            "name",
            { "__kind": "heading", "description": "distinctUntilChanged\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "compare",
              "description": "",
              "type": "(x: K, y: K) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "keySelector",
              "description": "",
              "type": "(x: T) => K"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/distinctUntilChanged.ts#L8-L8",
        "signature": "function distinctUntilChanged<T>(\n  compare?: (x: T, y: T) => boolean\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "compare",
              "description": "",
              "type": "(x: T, y: T) => boolean"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/distinctUntilChanged.ts#L9-L9",
        "signature": "function distinctUntilChanged<T, K>(\n  compare: (x: K, y: K) => boolean,\n  keySelector: (x: T) => K\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "compare",
              "description": "",
              "type": "(x: K, y: K) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "keySelector",
              "description": "",
              "type": "(x: T) => K"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "distinctUntilKeyChanged",
    "overloads": [
      {
        "file": "src/internal/operators/distinctUntilKeyChanged.ts#L78-L80",
        "signature": "function distinctUntilKeyChanged<T, K extends keyof T>(\n  key: K,\n  compare?: (x: T[K], y: T[K]) => boolean\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\nusing a property accessed by using the key provided to check if the two items are distinct.\n\nIf a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n\nIf a comparator function is not provided, an equality check is used by default.\n\n## Examples\nAn example comparing the name of persons\n```typescript\nimport { of } from 'rxjs';\nimport { distinctUntilKeyChanged } from 'rxjs/operators';\n\ninterface Person {\nage: number,\nname: string\n}\n\nf(\n{ age: 4, name: 'Foo'},\n{ age: 7, name: 'Bar'},\n{ age: 5, name: 'Foo'},\n{ age: 6, name: 'Foo'},\n).pipe(\ndistinctUntilKeyChanged('name'),\n)\n.subscribe(x => console.log(x));\n\n// displays:\n// { age: 4, name: 'Foo' }\n// { age: 7, name: 'Bar' }\n// { age: 5, name: 'Foo' }\n```\n\nAn example comparing the first letters of the name\n```typescript\nimport { of } from 'rxjs';\nimport { distinctUntilKeyChanged } from 'rxjs/operators';\n\ninterface Person {\nage: number,\nname: string\n}\n\nf(\n{ age: 4, name: 'Foo1'},\n{ age: 7, name: 'Bar'},\n{ age: 5, name: 'Foo2'},\n{ age: 6, name: 'Foo3'},\n).pipe(\ndistinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3)),\n)\n.subscribe(x => console.log(x));\n\n// displays:\n// { age: 4, name: 'Foo1' }\n// { age: 7, name: 'Bar' }\n// { age: 5, name: 'Foo2' }\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link distinct}" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link distinctUntilChanged}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{string}",
              "description": "key String key for object property lookup on each item.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "[compare] Optional comparison function called to test if an item is distinct from the previous item in the source.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits items from the source Observable with distinct values based on the key specified."
            }
          ],
          [
            "name",
            { "__kind": "heading", "description": "distinctUntilKeyChanged\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "key",
              "description": "",
              "type": "K"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "compare",
              "description": "",
              "type": "(x: T[K], y: T[K]) => boolean"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/distinctUntilKeyChanged.ts#L5-L5",
        "signature": "function distinctUntilKeyChanged<T>(key: keyof T): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "key",
              "description": "",
              "type": "keyof T"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/distinctUntilKeyChanged.ts#L6-L6",
        "signature": "function distinctUntilKeyChanged<T, K extends keyof T>(\n  key: K,\n  compare: (x: T[K], y: T[K]) => boolean\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "key",
              "description": "",
              "type": "K"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "compare",
              "description": "",
              "type": "(x: T[K], y: T[K]) => boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "elementAt",
    "overloads": [
      {
        "file": "src/internal/operators/elementAt.ts#L56-L66",
        "signature": "function elementAt<T>(\n  index: number,\n  defaultValue?: T\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits the single value at the specified `index` in a sequence of emissions\nfrom the source Observable.\n\n<span class=\"informal\">Emits only the i-th value, then completes.</span>\n\n![](elementAt.png)\n\n`elementAt` returns an Observable that emits the item at the specified\n`index` in the source Observable, or a default value if that `index` is out\nof range and the `default` argument is provided. If the `default` argument is\nnot given and the `index` is out of range, the output Observable will emit an\n`ArgumentOutOfRangeError` error.\n\n## Example\nEmit only the third click event\n```ts\nimport { fromEvent } from 'rxjs';\nimport { elementAt } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(elementAt(2));\nresult.subscribe(x => console.log(x));\n\n// Results in:\n// click 1 = nothing\n// click 2 = nothing\n// click 3 = MouseEvent object logged to console\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link first}" }],
          ["see", { "__kind": "heading", "description": "{@link last}" }],
          ["see", { "__kind": "heading", "description": "{@link skip}" }],
          ["see", { "__kind": "heading", "description": "{@link single}" }],
          ["see", { "__kind": "heading", "description": "{@link take}\n" }],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "{ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\nArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\nObservable has completed before emitting the i-th `next` notification.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "index Is the number `i` for the i-th source emission that has",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{T}",
              "description": "[defaultValue] The default value returned for missing indices.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits a single item, if it is found.\nOtherwise, will emit the default value if given. If not, then emits an error."
            }
          ],
          ["name", { "__kind": "heading", "description": "elementAt\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "endWith",
    "overloads": [
      {
        "file": "src/internal/operators/endWith.ts#L76-L78",
        "signature": "function endWith<T>(\n  ...values: Array<T | SchedulerLike>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an observable that will emit all values from the source, then synchronously emit\nhe provided value(s) immediately after the source completes.\n\nNOTE: Passing a last argument of a Scheduler is _deprecated_, and may result in incorrect\ntypes in TypeScript.\n\nThis is useful for knowing when an observable ends. Particularly when paired with an\noperator like {@link takeUntil}\n\n![](endWith.png)\n\n## Example\n\nEmit values to know when an interval starts and stops. The interval will\nstop when a user clicks anywhere on the document.\n\n```ts\nimport { interval, fromEvent } from 'rxjs';\nimport { map, startWith, takeUntil, endWith } from 'rxjs/operators';\n\nconst ticker$ = interval(5000).pipe(\nmap(() => 'tick'),\n);\n\nconst documentClicks$ = fromEvent(document, 'click');\n\nticker$.pipe(\nstartWith('interval started'),\ntakeUntil(documentClicks$),\nendWith('interval ended by click'),\n)\n.subscribe(\nx = console.log(x);\n)\n\n// Result (assuming a user clicks after 15 seconds)\n// \"interval started\"\n// \"tick\"\n// \"tick\"\n// \"tick\"\n// \"interval ended by click\"\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "- Items you want the modified Observable to emit last.",
              "type": "(T | SchedulerLike)[]"
            }
          ],
          ["see", { "__kind": "heading", "description": "startWith" }],
          ["see", { "__kind": "heading", "description": "concat" }],
          ["see", { "__kind": "heading", "description": "takeUntil\n" }]
        ]
      },
      {
        "file": "src/internal/operators/endWith.ts#L8-L8",
        "signature": "function endWith<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/endWith.ts#L10-L10",
        "signature": "function endWith<T, A>(\n  v1: A,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | A>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "A" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/endWith.ts#L12-L12",
        "signature": "function endWith<T, A, B>(\n  v1: A,\n  v2: B,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | A | B>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "A" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v2", "description": "", "type": "B" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/endWith.ts#L14-L14",
        "signature": "function endWith<T, A, B, C>(\n  v1: A,\n  v2: B,\n  v3: C,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | A | B | C>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "A" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v2", "description": "", "type": "B" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v3", "description": "", "type": "C" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/endWith.ts#L16-L16",
        "signature": "function endWith<T, A, B, C, D>(\n  v1: A,\n  v2: B,\n  v3: C,\n  v4: D,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | A | B | C | D>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "A" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v2", "description": "", "type": "B" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v3", "description": "", "type": "C" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v4", "description": "", "type": "D" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/endWith.ts#L18-L18",
        "signature": "function endWith<T, A, B, C, D, E>(\n  v1: A,\n  v2: B,\n  v3: C,\n  v4: D,\n  v5: E,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | A | B | C | D | E>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "A" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v2", "description": "", "type": "B" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v3", "description": "", "type": "C" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v4", "description": "", "type": "D" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v5", "description": "", "type": "E" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/endWith.ts#L20-L20",
        "signature": "function endWith<T, A, B, C, D, E, F>(\n  v1: A,\n  v2: B,\n  v3: C,\n  v4: D,\n  v5: E,\n  v6: F,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | A | B | C | D | E | F>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "A" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v2", "description": "", "type": "B" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v3", "description": "", "type": "C" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v4", "description": "", "type": "D" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v5", "description": "", "type": "E" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v6", "description": "", "type": "F" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/endWith.ts#L22-L22",
        "signature": "function endWith<T, A extends any[] = T[]>(\n  ...args: A\n): OperatorFunction<T, T | ValueFromArray<A>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "args",
              "description": "",
              "type": "A"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "every",
    "overloads": [
      {
        "file": "src/internal/operators/every.ts#L32-L35",
        "signature": "function every<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg?: any\n): OperatorFunction<T, boolean>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n\n<span class=\"informal\">If all values pass predicate before the source completes, emits true before completion,\notherwise emit false, then complete.</span>\n\n![](every.png)\n\n## Example\nA simple example emitting true if all elements are less than 5, false otherwise\n```ts\nimport { of } from 'rxjs';\nimport { every } from 'rxjs/operators';\n\nof(1, 2, 3, 4, 5, 6).pipe(\nevery(x => x < 5),\n)\n.subscribe(x => console.log(x)); // -> false\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "predicate A function for determining if an item meets a specified condition.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{any}",
              "description": "[thisArg] Optional object to use for `this` in the callback.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified."
            }
          ],
          ["name", { "__kind": "heading", "description": "every\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "exhaust",
    "overloads": [
      {
        "file": "src/internal/operators/exhaust.ts#L55-L57",
        "signature": "function exhaust<T>(): OperatorFunction<any, T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts a higher-order Observable into a first-order Observable by dropping\ninner Observables while the previous inner Observable has not yet completed.\n\n<span class=\"informal\">Flattens an Observable-of-Observables by dropping the\nnext inner Observables while the current inner is still executing.</span>\n\n![](exhaust.png)\n\n`exhaust` subscribes to an Observable that emits Observables, also known as a\nhigher-order Observable. Each time it observes one of these emitted inner\nObservables, the output Observable begins emitting the items emitted by that\ninner Observable. So far, it behaves like {@link mergeAll}. However,\n`exhaust` ignores every new inner Observable if the previous Observable has\nnot yet completed. Once that one completes, it will accept and flatten the\nnext inner Observable and repeat this process.\n\n## Example\nRun a finite timer for each click, only if there is no currently active timer\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { exhaust, map, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst higherOrder = clicks.pipe(\nmap((ev) => interval(1000).pipe(take(5))),\n);\nconst result = higherOrder.pipe(exhaust());\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link combineAll}" }],
          ["see", { "__kind": "heading", "description": "{@link concatAll}" }],
          ["see", { "__kind": "heading", "description": "{@link switchAll}" }],
          ["see", { "__kind": "heading", "description": "{@link switchMap}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeAll}" }],
          ["see", { "__kind": "heading", "description": "{@link exhaustMap}" }],
          ["see", { "__kind": "heading", "description": "{@link zipAll}\n" }],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that takes a source of Observables and propagates the first observable\nexclusively until it completes before subscribing to the next."
            }
          ],
          ["name", { "__kind": "heading", "description": "exhaust\n" }]
        ]
      },
      {
        "file": "src/internal/operators/exhaust.ts#L9-L9",
        "signature": "function exhaust<T>(): OperatorFunction<ObservableInput<T>, T>;",
        "info": []
      },
      {
        "file": "src/internal/operators/exhaust.ts#L10-L10",
        "signature": "function exhaust<R>(): OperatorFunction<any, R>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "exhaustMap",
    "overloads": [
      {
        "file": "src/internal/operators/exhaustMap.ts#L63-L77",
        "signature": "function exhaustMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (\n    outerValue: T,\n    innerValue: ObservedValueOf<O>,\n    outerIndex: number,\n    innerIndex: number\n  ) => R\n): OperatorFunction<T, ObservedValueOf<O> | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Projects each source value to an Observable which is merged in the output\nObservable only if the previous projected Observable has completed.\n\n<span class=\"informal\">Maps each value to an Observable, then flattens all of\nthese inner Observables using {@link exhaust}.</span>\n\n![](exhaustMap.png)\n\nReturns an Observable that emits items based on applying a function that you\nsupply to each item emitted by the source Observable, where that function\nreturns an (so-called \"inner\") Observable. When it projects a source value to\nan Observable, the output Observable begins emitting the items emitted by\nthat projected Observable. However, `exhaustMap` ignores every new projected\nObservable if the previous projected Observable has not yet completed. Once\nthat one completes, it will accept and flatten the next projected Observable\nand repeat this process.\n\n## Example\nRun a finite timer for each click, only if there is no currently active timer\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { exhaustMap, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(\nexhaustMap(ev => interval(1000).pipe(take(5)))\n);\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link concatMap}" }],
          ["see", { "__kind": "heading", "description": "{@link exhaust}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeMap}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link switchMap}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, ?index: number): ObservableInput} project A function",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable containing projected Observables\nof each item of the source, ignoring projected Observables that start before\ntheir preceding Observable has completed."
            }
          ],
          ["name", { "__kind": "heading", "description": "exhaustMap\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/exhaustMap.ts#L12-L12",
        "signature": "function exhaustMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/exhaustMap.ts#L14-L14",
        "signature": "function exhaustMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "undefined"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/exhaustMap.ts#L16-L16",
        "signature": "function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector: (\n    outerValue: T,\n    innerValue: I,\n    outerIndex: number,\n    innerIndex: number\n  ) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => ObservableInput<I>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "expand",
    "overloads": [
      {
        "file": "src/internal/operators/expand.ts#L64-L70",
        "signature": "function expand<T, R>(\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number = Infinity,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Recursively projects each source value to an Observable which is merged in\nthe output Observable.\n\n<span class=\"informal\">It's similar to {@link mergeMap}, but applies the\nprojection function to every source value as well as every output value.\nIt's recursive.</span>\n\n![](expand.png)\n\nReturns an Observable that emits items based on applying a function that you\nsupply to each item emitted by the source Observable, where that function\nreturns an Observable, and then merging those resulting Observables and\nemitting the results of this merger. *Expand* will re-emit on the output\nObservable every source value. Then, each output value is given to the\n`project` function which returns an inner Observable to be merged on the\noutput Observable. Those output values resulting from the projection are also\ngiven to the `project` function to produce new output values. This is how\n*expand* behaves recursively.\n\n## Example\nStart emitting the powers of two on every click, at most 10 of them\n```ts\nimport { fromEvent, of } from 'rxjs';\nimport { expand, mapTo, delay, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst powersOfTwo = clicks.pipe(\nmapTo(1),\nexpand(x => of(2 * x).pipe(delay(1000))),\ntake(10),\n);\npowersOfTwo.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link mergeMap}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link mergeScan}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, index: number) => Observable} project A function",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[concurrent=Infinity] Maximum number of input",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler=null] The {@link SchedulerLike} to use for subscribing to",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits the source values and also\nresult of applying the projection function to each value emitted on the\noutput Observable and merging the results of the Observables obtained\nfrom this transformation."
            }
          ],
          ["name", { "__kind": "heading", "description": "expand\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => ObservableInput<R>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/expand.ts#L9-L9",
        "signature": "function expand<T, R>(\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent?: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => ObservableInput<R>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/expand.ts#L10-L10",
        "signature": "function expand<T>(\n  project: (value: T, index: number) => ObservableInput<T>,\n  concurrent?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => ObservableInput<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "filter",
    "overloads": [
      {
        "file": "src/internal/operators/filter.ts#L57-L62",
        "signature": "function filter<T>(\n  predicate: (value: T, index: number) => boolean,\n  thisArg?: any\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Filter items emitted by the source Observable by only emitting those that\nsatisfy a specified predicate.\n\n<span class=\"informal\">Like\n[Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nit only emits a value from the source if it passes a criterion function.</span>\n\n![](filter.png)\n\nSimilar to the well-known `Array.prototype.filter` method, this operator\ntakes values from the source Observable, passes them through a `predicate`\nfunction and only emits those values that yielded `true`.\n\n## Example\nEmit only click events whose target was a DIV element\n```ts\nimport { fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\nclicksOnDivs.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link distinct}" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link distinctUntilChanged}"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link distinctUntilKeyChanged}"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link ignoreElements}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link partition}" }],
          ["see", { "__kind": "heading", "description": "{@link skip}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "A function that",
              "type": "(value: T, index: number) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "An optional argument to determine the value of `this`",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/filter.ts#L8-L9",
        "signature": "function filter<T, S extends T>(\n  predicate: (value: T, index: number) => value is S,\n  thisArg?: any\n): OperatorFunction<T, S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number) => value is S"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/filter.ts#L11-L11",
        "signature": "function filter<T>(\n  predicate: BooleanConstructor\n): OperatorFunction<T | null | undefined, NonNullable<T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "BooleanConstructor"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/filter.ts#L12-L13",
        "signature": "function filter<T>(\n  predicate: (value: T, index: number) => boolean,\n  thisArg?: any\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "finalize",
    "overloads": [
      {
        "file": "src/internal/operators/finalize.ts#L62-L64",
        "signature": "function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that mirrors the source Observable, but will call a specified function when\nthe source terminates on complete or error.\nThe specified function will also be called when the subscriber explicitly unsubscribes.\n\n## Examples\nExecute callback function when the observable completes\n\n```ts\nimport { interval } from 'rxjs';\nimport { take, finalize } from 'rxjs/operators';\n\n// emit value in sequence every 1 second\nconst source = interval(1000);\nconst example = source.pipe(\ntake(5), //take only the first 5 values\nfinalize(() => console.log('Sequence complete')) // Execute when the observable completes\n)\nconst subscribe = example.subscribe(val => console.log(val));\n\n// results:\n//   0\n//   1\n//   2\n//   3\n//   4\n//   'Sequence complete'\n```\n\nExecute callback function when the subscriber explicitly unsubscribes\n\n```ts\nimport { interval, timer, noop } from 'rxjs';\nimport { finalize, tap } from 'rxjs/operators';\n\nconst source = interval(100).pipe(\nfinalize(() => console.log('[finalize] Called')),\ntap(() => console.log('[next] Called'),\n() => console.log('[error] Not called'),\n() => console.log('[tap] Not called')),\n);\n\nconst sub = source.subscribe(x => console.log(x), noop, () => console.log('[complete] Not called'));\n\ntimer(150).subscribe(() => sub.unsubscribe());\n\n// results:\n//   0\n//   '[finalize] Called'\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "callback Function to be called when source terminates.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that mirrors the source, but will call the specified function on termination."
            }
          ],
          ["name", { "__kind": "heading", "description": "finally\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "callback",
              "description": "",
              "type": "() => void"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "find",
    "overloads": [
      {
        "file": "src/internal/operators/find.ts#L49-L55",
        "signature": "function find<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg?: any\n): OperatorFunction<T, T | undefined>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits only the first value emitted by the source Observable that meets some\ncondition.\n\n<span class=\"informal\">Finds the first value that passes some test and emits\nthat.</span>\n\n![](find.png)\n\n`find` searches for the first item in the source Observable that matches the\nspecified condition embodied by the `predicate`, and returns the first\noccurrence in the source. Unlike {@link first}, the `predicate` is required\nin `find`, and does not emit an error if a valid value is not found.\n\n## Example\nFind and emit the first click that happens on a DIV element\n```ts\nimport { fromEvent } from 'rxjs';\nimport { find } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(find(ev => ev.target.tagName === 'DIV'));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link filter}" }],
          ["see", { "__kind": "heading", "description": "{@link first}" }],
          ["see", { "__kind": "heading", "description": "{@link findIndex}" }],
          ["see", { "__kind": "heading", "description": "{@link take}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, index: number, source: Observable<T>): boolean} predicate",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{any}",
              "description": "[thisArg] An optional argument to determine the value of `this`",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable of the first item that matches the\ncondition."
            }
          ],
          ["name", { "__kind": "heading", "description": "find\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/find.ts#L7-L8",
        "signature": "function find<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  thisArg?: any\n): OperatorFunction<T, S | undefined>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => value is S"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/find.ts#L9-L10",
        "signature": "function find<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg?: any\n): OperatorFunction<T, T | undefined>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "findIndex",
    "overloads": [
      {
        "file": "src/internal/operators/findIndex.ts#L44-L47",
        "signature": "function findIndex<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg?: any\n): OperatorFunction<T, number>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits only the index of the first value emitted by the source Observable that\nmeets some condition.\n\n<span class=\"informal\">It's like {@link find}, but emits the index of the\nfound value, not the value itself.</span>\n\n![](findIndex.png)\n\n`findIndex` searches for the first item in the source Observable that matches\nthe specified condition embodied by the `predicate`, and returns the\n(zero-based) index of the first occurrence in the source. Unlike\n{@link first}, the `predicate` is required in `findIndex`, and does not emit\nan error if a valid value is not found.\n\n## Example\nEmit the index of first click that happens on a DIV element\n```ts\nimport { fromEvent } from 'rxjs';\nimport { findIndex } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(findIndex(ev => ev.target.tagName === 'DIV'));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link filter}" }],
          ["see", { "__kind": "heading", "description": "{@link find}" }],
          ["see", { "__kind": "heading", "description": "{@link first}" }],
          ["see", { "__kind": "heading", "description": "{@link take}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, index: number, source: Observable<T>): boolean} predicate",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{any}",
              "description": "[thisArg] An optional argument to determine the value of `this`",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable of the index of the first item that\nmatches the condition."
            }
          ],
          ["name", { "__kind": "heading", "description": "find\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "first",
    "overloads": [
      {
        "file": "src/internal/operators/first.ts#L79-L89",
        "signature": "function first<T, D>(\n  predicate?:\n    | ((value: T, index: number, source: Observable<T>) => boolean)\n    | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits only the first value (or the first value that meets some condition)\nemitted by the source Observable.\n\n<span class=\"informal\">Emits only the first value. Or emits only the first\nvalue that passes some test.</span>\n\n![](first.png)\n\nIf called with no arguments, `first` emits the first value of the source\nObservable, then completes. If called with a `predicate` function, `first`\nemits the first value of the source that matches the specified condition. It\nmay also take a deprecated `resultSelector` function to produce the output\nvalue from the input value, and a `defaultValue` to emit in case the source\ncompletes before it is able to emit a valid value. Throws an error if\n`defaultValue` was not provided and a matching element is not found.\n\n## Examples\nEmit only the first click that happens on the DOM\n```ts\nimport { fromEvent } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(first());\nresult.subscribe(x => console.log(x));\n```\n\nEmits the first click that happens on a DIV\n```ts\nimport { fromEvent } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(first(ev => ev.target.tagName === 'DIV'));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link filter}" }],
          ["see", { "__kind": "heading", "description": "{@link find}" }],
          ["see", { "__kind": "heading", "description": "{@link take}\n" }],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "{EmptyError} Delivers an EmptyError to the Observer's `error`\ncallback if the Observable completes before any `next` notification was sent.\nThis is how `first()` is different from {@link take}(1) which completes instead.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, index: number, source: Observable<T>): boolean} [predicate]",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{R}",
              "description": "[defaultValue] The default value emitted in case no valid value",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T|R>} An Observable of the first item that matches the\ncondition."
            }
          ],
          ["name", { "__kind": "heading", "description": "first\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "D"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/first.ts#L11-L14",
        "signature": "function first<T, D = T>(\n  predicate?: null,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "null"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "D"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/first.ts#L15-L18",
        "signature": "function first<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => value is S"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "S"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/first.ts#L19-L22",
        "signature": "function first<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "D"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "groupBy",
    "overloads": [
      {
        "file": "src/internal/operators/groupBy.ts#L108-L114",
        "signature": "function groupBy<T, K, R>(\n  keySelector: (value: T) => K,\n  elementSelector?: ((value: T) => R) | void,\n  durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n  subjectSelector?: () => Subject<R>\n): OperatorFunction<T, GroupedObservable<K, R>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Groups the items emitted by an Observable according to a specified criterion,\nand emits these grouped items as `GroupedObservables`, one\n{@link GroupedObservable} per group.\n\n![](groupBy.png)\n\nWhen the Observable emits an item, a key is computed for this item with the keySelector function.\n\nIf a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Otherwise, a new\n{@link GroupedObservable} for this key is created and emits.\n\nA {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\nkey is available as the `key` field of a {@link GroupedObservable} instance.\n\nThe elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\nreturned by the elementSelector function.\n\n## Examples\n\n### Group objects by id and return as array\n\n```ts\nimport { of } from 'rxjs';\nimport { mergeMap, groupBy, reduce } from 'rxjs/operators';\n\nof(\n{id: 1, name: 'JavaScript'},\n{id: 2, name: 'Parcel'},\n{id: 2, name: 'webpack'},\n{id: 1, name: 'TypeScript'},\n{id: 3, name: 'TSLint'}\n).pipe(\ngroupBy(p => p.id),\nmergeMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], [])))\n)\n.subscribe(p => console.log(p));\n\n// displays:\n// [ { id: 1, name: 'JavaScript'},\n//   { id: 1, name: 'TypeScript'} ]\n//\n// [ { id: 2, name: 'Parcel'},\n//   { id: 2, name: 'webpack'} ]\n//\n// [ { id: 3, name: 'TSLint'} ]\n```\n\n### Pivot data on the id field\n\n```ts\nimport { of } from 'rxjs';\nimport { groupBy, map, mergeMap, reduce } from 'rxjs/operators';\n\nof(\n{ id: 1, name: 'JavaScript' },\n{ id: 2, name: 'Parcel' },\n{ id: 2, name: 'webpack' },\n{ id: 1, name: 'TypeScript' },\n{ id: 3, name: 'TSLint' }\n)\n.pipe(\ngroupBy(p => p.id, p => p.name),\nmergeMap(group$ =>\ngroup$.pipe(reduce((acc, cur) => [...acc, cur], [`${group$.key}`]))\n),\nmap(arr => ({ id: parseInt(arr[0], 10), values: arr.slice(1) }))\n)\n.subscribe(p => console.log(p));\n\n// displays:\n// { id: 1, values: [ 'JavaScript', 'TypeScript' ] }\n// { id: 2, values: [ 'Parcel', 'webpack' ] }\n// { id: 3, values: [ 'TSLint' ] }\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T): K} keySelector A function that extracts the key",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T): R} [elementSelector] A function that extracts the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(grouped:",
              "description": "GroupedObservable<K,R>): Observable<any>} [durationSelector]",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function():",
              "description": "Subject<R>} [subjectSelector] Factory function to create an",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<GroupedObservable<K,R>>} An Observable that emits\nGroupedObservables, each of which corresponds to a unique key value and each\nof which emits those items from the source Observable that share that key\nvalue."
            }
          ],
          ["name", { "__kind": "heading", "description": "groupBy\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "keySelector",
              "description": "",
              "type": "(value: T) => K"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "elementSelector",
              "description": "",
              "type": "void | ((value: T) => R)"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "durationSelector",
              "description": "",
              "type": "(grouped: GroupedObservable<K, R>) => Observable<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "subjectSelector",
              "description": "",
              "type": "() => Subject<R>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/groupBy.ts#L10-L10",
        "signature": "function groupBy<T, K extends T>(\n  keySelector: (value: T) => value is K\n): OperatorFunction<\n  T,\n  GroupedObservable<true, K> | GroupedObservable<false, Exclude<T, K>>\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "keySelector",
              "description": "",
              "type": "(value: T) => value is K"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/groupBy.ts#L11-L11",
        "signature": "function groupBy<T, K>(\n  keySelector: (value: T) => K\n): OperatorFunction<T, GroupedObservable<K, T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "keySelector",
              "description": "",
              "type": "(value: T) => K"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/groupBy.ts#L12-L12",
        "signature": "function groupBy<T, K>(\n  keySelector: (value: T) => K,\n  elementSelector: void,\n  durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>\n): OperatorFunction<T, GroupedObservable<K, T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "keySelector",
              "description": "",
              "type": "(value: T) => K"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "elementSelector",
              "description": "",
              "type": "void"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "durationSelector",
              "description": "",
              "type": "(grouped: GroupedObservable<K, T>) => Observable<any>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/groupBy.ts#L13-L13",
        "signature": "function groupBy<T, K, R>(\n  keySelector: (value: T) => K,\n  elementSelector?: (value: T) => R,\n  durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>\n): OperatorFunction<T, GroupedObservable<K, R>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "keySelector",
              "description": "",
              "type": "(value: T) => K"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "elementSelector",
              "description": "",
              "type": "(value: T) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "durationSelector",
              "description": "",
              "type": "(grouped: GroupedObservable<K, R>) => Observable<any>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/groupBy.ts#L14-L14",
        "signature": "function groupBy<T, K, R>(\n  keySelector: (value: T) => K,\n  elementSelector?: (value: T) => R,\n  durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n  subjectSelector?: () => Subject<R>\n): OperatorFunction<T, GroupedObservable<K, R>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "keySelector",
              "description": "",
              "type": "(value: T) => K"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "elementSelector",
              "description": "",
              "type": "(value: T) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "durationSelector",
              "description": "",
              "type": "(grouped: GroupedObservable<K, R>) => Observable<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "subjectSelector",
              "description": "",
              "type": "() => Subject<R>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "ignoreElements",
    "overloads": [
      {
        "file": "src/internal/operators/ignoreElements.ts#L39-L43",
        "signature": "function ignoreElements(): OperatorFunction<any, never>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n\n![](ignoreElements.png)\n\nThe _IgnoreElements_ operator suppresses all of the items emitted by the source Observable,\nbut allows its termination notification (either `error` or `complete`) to pass through unchanged.\n\nIf you do not care about the items being emitted by an Observable, but you do want to be notified\nwhen it completes or when it terminates with an error, you can apply the `ignoreElements` operator\nto the Observable, which will ensure that it will never call its observers’ `next` handlers.\n\n## Examples\n```ts\nimport { of } from 'rxjs';\nimport { ignoreElements } from 'rxjs/operators';\n\nof('you', 'talking', 'to', 'me').pipe(\nignoreElements(),\n)\n.subscribe(\nword => console.log(word),\nerr => console.log('error:', err),\n() => console.log('the end'),\n);\n// result:\n// 'the end'\n```"
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An empty Observable that only calls `complete`\nor `error`, based on which one is called by the source Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "ignoreElements\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "isEmpty",
    "overloads": [
      {
        "file": "src/internal/operators/isEmpty.ts#L71-L73",
        "signature": "function isEmpty<T>(): OperatorFunction<T, boolean>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits `false` if the input Observable emits any values, or emits `true` if the\ninput Observable completes without emitting any values.\n\n<span class=\"informal\">Tells whether any values are emitted by an Observable.</span>\n\n![](isEmpty.png)\n\n`isEmpty` transforms an Observable that emits values into an Observable that\nemits a single boolean value representing whether or not any values were\nemitted by the source Observable. As soon as the source Observable emits a\nvalue, `isEmpty` will emit a `false` and complete.  If the source Observable\ncompletes having not emitted anything, `isEmpty` will emit a `true` and\ncomplete.\n\nA similar effect could be achieved with {@link count}, but `isEmpty` can emit\na `false` value sooner.\n\n## Examples\n\nEmit `false` for a non-empty Observable.\n\n```ts\nimport { Subject } from 'rxjs';\nimport { isEmpty } from 'rxjs/operators';\n\nconst source = new Subject<string>();\nconst result = source.pipe(isEmpty());\n\nsource.subscribe(x => console.log(x));\nresult.subscribe(x => console.log(x));\n\nsource.next('a');\nsource.next('b');\nsource.next('c');\nsource.complete();\n\n// Outputs\n// a\n// false\n// b\n// c\n```\n\nEmit `true` for an empty Observable.\n\n```ts\nimport { EMPTY } from 'rxjs';\nimport { isEmpty } from 'rxjs/operators';\n\nconst result = EMPTY.pipe(isEmpty());\nresult.subscribe(x => console.log(x));\n\n// Outputs\n// true\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link count}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link index/EMPTY}\n" }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{OperatorFunction<T, boolean>} An Observable of a boolean value indicating whether observable was empty or not."
            }
          ],
          ["name", { "__kind": "heading", "description": "isEmpty\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "last",
    "overloads": [
      {
        "file": "src/internal/operators/last.ts#L42-L52",
        "signature": "function last<T, D>(\n  predicate?:\n    | ((value: T, index: number, source: Observable<T>) => boolean)\n    | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that emits only the last item emitted by the source Observable.\nIt optionally takes a predicate function as a parameter, in which case, rather than emitting\nthe last item from the source Observable, the resulting Observable will emit the last item\nfrom the source Observable that satisfies the predicate.\n\n![](last.png)\n"
            }
          ],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "{EmptyError} Delivers an EmptyError to the Observer's `error`\ncallback if the Observable completes before any `next` notification was sent."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "[predicate] - The condition any source emitted item has to satisfy.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{any}",
              "description": "[defaultValue] - An optional default value to provide if last",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits only the last item satisfying the given condition\nfrom the source, or an NoSuchElementException if no such items are emitted."
            }
          ],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "- Throws if no items that match the predicate are emitted by the source Observable.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "D"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/last.ts#L11-L14",
        "signature": "function last<T, D = T>(\n  predicate?: null,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "null"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "D"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/last.ts#L15-L18",
        "signature": "function last<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => value is S"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "S"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/last.ts#L19-L22",
        "signature": "function last<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultValue",
              "description": "",
              "type": "D"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "map",
    "overloads": [
      {
        "file": "src/internal/operators/map.ts#L45-L52",
        "signature": "function map<T, R>(\n  project: (value: T, index: number) => R,\n  thisArg?: any\n): OperatorFunction<T, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Applies a given `project` function to each value emitted by the source\nObservable, and emits the resulting values as an Observable.\n\n<span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\nit passes each source value through a transformation function to get\ncorresponding output values.</span>\n\n![](map.png)\n\nSimilar to the well known `Array.prototype.map` function, this operator\napplies a projection to each value and emits that projection in the output\nObservable.\n\n## Example\nMap every click to the clientX position of that click\n```ts\nimport { fromEvent } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst positions = clicks.pipe(map(ev => ev.clientX));\npositions.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link mapTo}" }],
          ["see", { "__kind": "heading", "description": "{@link pluck}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, index: number): R} project The function to apply",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{any}",
              "description": "[thisArg] An optional argument to define what `this` is in the",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<R>} An Observable that emits the values from the source\nObservable transformed by the given `project` function."
            }
          ],
          ["name", { "__kind": "heading", "description": "map\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "mapTo",
    "overloads": [
      {
        "file": "src/internal/operators/mapTo.ts#L42-L44",
        "signature": "function mapTo<R>(value: R): OperatorFunction<any, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits the given constant value on the output Observable every time the source\nObservable emits a value.\n\n<span class=\"informal\">Like {@link map}, but it maps every source value to\nthe same output value every time.</span>\n\n![](mapTo.png)\n\nTakes a constant `value` as argument, and emits that whenever the source\nObservable emits a value. In other words, ignores the actual source value,\nand simply uses the emission moment to know when to emit the given `value`.\n\n## Example\nMap every click to the string 'Hi'\n```ts\nimport { fromEvent } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst greetings = clicks.pipe(mapTo('Hi'));\ngreetings.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link map}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{any}",
              "description": "value The value to map each source value to.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits the given `value` every time\nthe source Observable emits something."
            }
          ],
          ["name", { "__kind": "heading", "description": "mapTo\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mapTo.ts#L7-L7",
        "signature": "function mapTo<R>(value: R): OperatorFunction<any, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mapTo.ts#L9-L9",
        "signature": "function mapTo<T, R>(value: R): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "materialize",
    "overloads": [
      {
        "file": "src/internal/operators/materialize.ts#L62-L66",
        "signature": "function materialize<T>(): OperatorFunction<\n  T,\n  Notification<T> & ObservableNotification<T>\n>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents all of the notifications from the source Observable as `next`\nemissions marked with their original types within {@link Notification}\nobjects.\n\n<span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n{@link Notification} objects, emitted as `next` on the output Observable.\n</span>\n\n![](materialize.png)\n\n`materialize` returns an Observable that emits a `next` notification for each\n`next`, `error`, or `complete` emission of the source Observable. When the\nsource Observable emits `complete`, the output Observable will emit `next` as\na Notification of type \"complete\", and then it will emit `complete` as well.\nWhen the source Observable emits `error`, the output will emit `next` as a\nNotification of type \"error\", and then `complete`.\n\nThis operator is useful for producing metadata of the source Observable, to\nbe consumed as `next` emissions. Use it in conjunction with\n{@link dematerialize}.\n\n## Example\n\nConvert a faulty Observable to an Observable of Notifications\n\n```ts\nimport { of } from 'rxjs';\nimport { materialize, map } from 'rxjs/operators';\n\nconst letters = of('a', 'b', 13, 'd');\nconst upperCase = letters.pipe(map(x => x.toUpperCase()));\nconst materialized = upperCase.pipe(materialize());\nmaterialized.subscribe(x => console.log(x));\n\n// Results in the following:\n// - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n// - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n// - Notification {kind: \"E\", value: undefined, error: TypeError:\n//   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n//   [as project] (http://1…, hasValue: false}\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link Notification}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link dematerialize}\n" }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<Notification<T>>} An Observable that emits\n{@link Notification} objects that wrap the original emissions from the source\nObservable with metadata.\n"
            }
          ],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "In version 8, materialize will start to emit {@link ObservableNotification} objects, and not\n{@link Notification} instances. This means that methods that are not commonly used, like `Notification.observe`\nwill not be available on the emitted values at that time.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "max",
    "overloads": [
      {
        "file": "src/internal/operators/max.ts#L48-L54",
        "signature": "function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\nand when source Observable completes it emits a single item: the item with the largest value.\n\n![](max.png)\n\n## Examples\nGet the maximal value of a series of numbers\n```ts\nimport { of } from 'rxjs';\nimport { max } from 'rxjs/operators';\n\nof(5, 4, 7, 2, 8).pipe(\nmax(),\n)\n.subscribe(x => console.log(x)); // -> 8\n```\n\nUse a comparer function to get the maximal item\n```typescript\nimport { of } from 'rxjs';\nimport { max } from 'rxjs/operators';\n\ninterface Person {\nage: number,\nname: string\n}\nf(\n{age: 7, name: 'Foo'},\n{age: 5, name: 'Bar'},\n{age: 9, name: 'Beer'},\n).pipe(\nmax<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1),\n)\n.subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link min}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Function}",
              "description": "[comparer] - Optional comparer function that it will use instead of its default to compare the",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits item with the largest value."
            }
          ],
          ["name", { "__kind": "heading", "description": "max\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "comparer",
              "description": "",
              "type": "(x: T, y: T) => number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "mergeWith",
    "overloads": [
      {
        "file": "src/internal/operators/mergeWith.ts#L109-L111",
        "signature": "function mergeWith<T, A extends ObservableInput<any>[]>(\n  ...otherSources: A\n): OperatorFunction<T, T | ObservedValueUnionFromArray<A>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Merge the values from all observables to an single observable result.\n\nCreates an observable, that when subscribed to, subscribes to the source\nobservable, and all other sources provided as arguments. All values from\nevery source are emitted from the resulting subscription.\n\nWhen all sources complete, the resulting observable will complete.\n\nWhen any one source errors, the resulting observable will error.\n\n\n### Example\n\nJoining all outputs from multiple user input event streams:\n\n```ts\nimport { fromEvent } from 'rxjs';\nimport { map, mergeWith } from 'rxjs/operators';\n\nconst clicks$ = fromEvent(document, 'click').pipe(map(() => 'click'));\nconst mousemoves$ = fromEvent(document, 'mousemove').pipe(map(() => 'mousemove'));\nconst dblclicks$ = fromEvent(document, 'dblclick').pipe(map(() => 'dblclick'));\n\nmousemoves$.pipe(\nmergeWith(clicks$, dblclicks$),\n)\n.subscribe(x => console.log(x));\n\n// result (assuming user interactions)\n// \"mousemove\"\n// \"mousemove\"\n// \"mousemove\"\n// \"click\"\n// \"click\"\n// \"dblclick\"\n```"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "otherSources",
              "description": "the sources to combine the current source with.",
              "type": "A"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L67-L67",
        "signature": "function mergeWith<T>(): OperatorFunction<T, T>;",
        "info": []
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L68-L68",
        "signature": "function mergeWith<T, A extends ObservableInput<any>[]>(\n  ...otherSources: A\n): OperatorFunction<T, T | ObservedValueUnionFromArray<A>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "otherSources",
              "description": "",
              "type": "A"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "merge",
    "overloads": [
      {
        "file": "src/internal/operators/mergeWith.ts#L60-L65",
        "signature": "function merge<T, R>(\n  ...observables: Array<\n    ObservableInput<any> | SchedulerLike | number | undefined\n  >\n): OperatorFunction<T, R>;",
        "info": [
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "use {@link mergeWith} or static {@link merge}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L9-L9",
        "signature": "function merge<T>(): MonoTypeOperatorFunction<T>;",
        "info": []
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L11-L11",
        "signature": "function merge<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, T | T2>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L13-L13",
        "signature": "function merge<T, T2, T3>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>\n): OperatorFunction<T, T | T2 | T3>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L15-L15",
        "signature": "function merge<T, T2, T3, T4>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>\n): OperatorFunction<T, T | T2 | T3 | T4>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L17-L17",
        "signature": "function merge<T, T2, T3, T4, T5>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>\n): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L19-L19",
        "signature": "function merge<T, T2, T3, T4, T5, T6>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>\n): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L28-L28",
        "signature": "function merge<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L30-L30",
        "signature": "function merge<T>(\n  concurrent: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L32-L32",
        "signature": "function merge<T, T2>(\n  v2: ObservableInput<T2>,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | T2>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L34-L34",
        "signature": "function merge<T, T2>(\n  v2: ObservableInput<T2>,\n  concurrent: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | T2>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L36-L36",
        "signature": "function merge<T, T2, T3>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | T2 | T3>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L38-L38",
        "signature": "function merge<T, T2, T3>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  concurrent: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | T2 | T3>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L40-L40",
        "signature": "function merge<T, T2, T3, T4>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | T2 | T3 | T4>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L42-L42",
        "signature": "function merge<T, T2, T3, T4>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  concurrent: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | T2 | T3 | T4>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L44-L44",
        "signature": "function merge<T, T2, T3, T4, T5>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L46-L46",
        "signature": "function merge<T, T2, T3, T4, T5>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  concurrent: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L48-L48",
        "signature": "function merge<T, T2, T3, T4, T5, T6>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L50-L50",
        "signature": "function merge<T, T2, T3, T4, T5, T6>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>,\n  concurrent: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L52-L52",
        "signature": "function merge<T>(\n  ...observables: Array<ObservableInput<T> | SchedulerLike | number>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeWith.ts#L54-L54",
        "signature": "function merge<T, R>(\n  ...observables: Array<ObservableInput<any> | SchedulerLike | number>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "mergeAll",
    "overloads": [
      {
        "file": "src/internal/operators/mergeAll.ts#L62-L64",
        "signature": "function mergeAll<T>(\n  concurrent: number = Infinity\n): OperatorFunction<ObservableInput<T>, T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts a higher-order Observable into a first-order Observable which\nconcurrently delivers all values that are emitted on the inner Observables.\n\n<span class=\"informal\">Flattens an Observable-of-Observables.</span>\n\n![](mergeAll.png)\n\n`mergeAll` subscribes to an Observable that emits Observables, also known as\na higher-order Observable. Each time it observes one of these emitted inner\nObservables, it subscribes to that and delivers all the values from the\ninner Observable on the output Observable. The output Observable only\ncompletes once all inner Observables have completed. Any error delivered by\na inner Observable will be immediately emitted on the output Observable.\n\n## Examples\nSpawn a new interval Observable for each click event, and blend their outputs as one Observable\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { map, mergeAll } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst higherOrder = clicks.pipe(map((ev) => interval(1000)));\nconst firstOrder = higherOrder.pipe(mergeAll());\nfirstOrder.subscribe(x => console.log(x));\n```\n\nCount from 0 to 9 every second for each click, but only allow 2 concurrent timers\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { take, map, mergeAll } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst higherOrder = clicks.pipe(\nmap((ev) => interval(1000).pipe(take(10))),\n);\nconst firstOrder = higherOrder.pipe(mergeAll(2));\nfirstOrder.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link combineAll}" }],
          ["see", { "__kind": "heading", "description": "{@link concatAll}" }],
          ["see", { "__kind": "heading", "description": "{@link exhaust}" }],
          ["see", { "__kind": "heading", "description": "{@link merge}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeMap}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeMapTo}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeScan}" }],
          ["see", { "__kind": "heading", "description": "{@link switchAll}" }],
          ["see", { "__kind": "heading", "description": "{@link switchMap}" }],
          ["see", { "__kind": "heading", "description": "{@link zipAll}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[concurrent=Infinity] Maximum number of inner",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits values coming from all the\ninner Observables emitted by the source Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "mergeAll\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "mergeMap",
    "overloads": [
      {
        "file": "src/internal/operators/mergeMap.ts#L73-L89",
        "signature": "function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?:\n    | ((\n        outerValue: T,\n        innerValue: ObservedValueOf<O>,\n        outerIndex: number,\n        innerIndex: number\n      ) => R)\n    | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Projects each source value to an Observable which is merged in the output\nObservable.\n\n<span class=\"informal\">Maps each value to an Observable, then flattens all of\nthese inner Observables using {@link mergeAll}.</span>\n\n![](mergeMap.png)\n\nReturns an Observable that emits items based on applying a function that you\nsupply to each item emitted by the source Observable, where that function\nreturns an Observable, and then merging those resulting Observables and\nemitting the results of this merger.\n\n## Example\nMap and flatten each letter to an Observable ticking every 1 second\n```ts\nimport { of, interval } from 'rxjs';\nimport { mergeMap, map } from 'rxjs/operators';\n\nconst letters = of('a', 'b', 'c');\nconst result = letters.pipe(\nmergeMap(x => interval(1000).pipe(map(i => x+i))),\n);\nresult.subscribe(x => console.log(x));\n\n// Results in the following:\n// a0\n// b0\n// c0\n// a1\n// b1\n// c1\n// continues to list a,b,c with respective ascending integers\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link concatMap}" }],
          ["see", { "__kind": "heading", "description": "{@link exhaustMap}" }],
          ["see", { "__kind": "heading", "description": "{@link merge}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeAll}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeMapTo}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeScan}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link switchMap}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, ?index: number): ObservableInput} project A function",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[concurrent=Infinity] Maximum number of input",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits the result of applying the\nprojection function (and the optional deprecated `resultSelector`) to each item\nemitted by the source Observable and merging the results of the Observables\nobtained from this transformation.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "number | ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R)"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeMap.ts#L12-L12",
        "signature": "function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeMap.ts#L14-L14",
        "signature": "function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "undefined"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeMap.ts#L16-L16",
        "signature": "function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (\n    outerValue: T,\n    innerValue: ObservedValueOf<O>,\n    outerIndex: number,\n    innerIndex: number\n  ) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "operators",
    "name": "flatMap",
    "overloads": [
      {
        "file": "src/internal/operators/mergeMap.ts#L166-L166",
        "signature": "const flatMap: typeof mergeMap;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "mergeMapTo",
    "overloads": [
      {
        "file": "src/internal/operators/mergeMapTo.ts#L50-L62",
        "signature": "function mergeMapTo<T, R, O extends ObservableInput<any>>(\n  innerObservable: O,\n  resultSelector?:\n    | ((\n        outerValue: T,\n        innerValue: ObservedValueOf<O>,\n        outerIndex: number,\n        innerIndex: number\n      ) => R)\n    | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Projects each source value to the same Observable which is merged multiple\ntimes in the output Observable.\n\n<span class=\"informal\">It's like {@link mergeMap}, but maps each value always\nto the same inner Observable.</span>\n\n![](mergeMapTo.png)\n\nMaps each source value to the given Observable `innerObservable` regardless\nof the source value, and then merges those resulting Observables into one\nsingle Observable, which is the output Observable.\n\n## Example\nFor each click event, start an interval Observable ticking every 1 second\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { mergeMapTo } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(mergeMapTo(interval(1000)));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link concatMapTo}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link merge}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeAll}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeMap}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeScan}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link switchMapTo}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{ObservableInput}",
              "description": "innerObservable An Observable to replace each value from",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[concurrent=Infinity] Maximum number of input",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits items from the given\n`innerObservable`"
            }
          ],
          ["name", { "__kind": "heading", "description": "mergeMapTo\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "innerObservable",
              "description": "",
              "type": "O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "number | ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R)"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeMapTo.ts#L6-L6",
        "signature": "function mergeMapTo<O extends ObservableInput<any>>(\n  innerObservable: O,\n  concurrent?: number\n): OperatorFunction<any, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "innerObservable",
              "description": "",
              "type": "O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/mergeMapTo.ts#L8-L8",
        "signature": "function mergeMapTo<T, R, O extends ObservableInput<any>>(\n  innerObservable: O,\n  resultSelector: (\n    outerValue: T,\n    innerValue: ObservedValueOf<O>,\n    outerIndex: number,\n    innerIndex: number\n  ) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "innerObservable",
              "description": "",
              "type": "O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "mergeScan",
    "overloads": [
      {
        "file": "src/internal/operators/mergeScan.ts#L46-L50",
        "signature": "function mergeScan<T, R>(\n  accumulator: (acc: R, value: T, index: number) => ObservableInput<R>,\n  seed: R,\n  concurrent: number = Infinity\n): OperatorFunction<T, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Applies an accumulator function over the source Observable where the\naccumulator function itself returns an Observable, then each intermediate\nObservable returned is merged into the output Observable.\n\n<span class=\"informal\">It's like {@link scan}, but the Observables returned\nby the accumulator are merged into the outer Observable.</span>\n\n## Example\nCount the number of click events\n```ts\nimport { fromEvent, of } from 'rxjs';\nimport { mapTo, mergeScan } from 'rxjs/operators';\n\nconst click$ = fromEvent(document, 'click');\nconst one$ = click$.pipe(mapTo(1));\nconst seed = 0;\nconst count$ = one$.pipe(\nmergeScan((acc, one) => of(acc + one), seed),\n);\ncount$.subscribe(x => console.log(x));\n\n// Results:\n// 1\n// 2\n// 3\n// 4\n// ...and so on for each click\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(acc:",
              "description": "R, value: T): Observable<R>} accumulator",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "seed",
              "description": "The initial accumulation value.",
              "type": "R"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[concurrent=Infinity] Maximum number of",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<R>} An observable of the accumulated values."
            }
          ],
          ["name", { "__kind": "heading", "description": "mergeScan\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "accumulator",
              "description": "",
              "type": "(acc: R, value: T, index: number) => ObservableInput<R>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "concurrent",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "min",
    "overloads": [
      {
        "file": "src/internal/operators/min.ts#L47-L52",
        "signature": "function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\nand when source Observable completes it emits a single item: the item with the smallest value.\n\n![](min.png)\n\n## Examples\nGet the minimal value of a series of numbers\n```ts\nimport { of } from 'rxjs';\nimport { min } from 'rxjs/operators';\n\nof(5, 4, 7, 2, 8).pipe(\nmin(),\n)\n.subscribe(x => console.log(x)); // -> 2\n```\n\nUse a comparer function to get the minimal item\n```typescript\nimport { of } from 'rxjs';\nimport { min } from 'rxjs/operators';\n\ninterface Person {\nage: number,\nname: string\n}\nf(\n{age: 7, name: 'Foo'},\n{age: 5, name: 'Bar'},\n{age: 9, name: 'Beer'},\n).pipe(\nmin<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1),\n)\n.subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n```"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link max}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Function}",
              "description": "[comparer] - Optional comparer function that it will use instead of its default to compare the",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<R>} An Observable that emits item with the smallest value."
            }
          ],
          ["name", { "__kind": "heading", "description": "min\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "comparer",
              "description": "",
              "type": "(x: T, y: T) => number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "multicast",
    "overloads": [
      {
        "file": "src/internal/operators/multicast.ts#L34-L56",
        "signature": "function multicast<T, R>(\n  subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n  selector?: (source: Observable<T>) => Observable<R>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that emits the results of invoking a specified selector on items\nemitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n\n![](multicast.png)\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Function|Subject}",
              "description": "subjectOrSubjectFactory - Factory function to create an intermediate subject through",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Function}",
              "description": "[selector] - Optional selector function that can use the multicasted source stream",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits the results of invoking the selector\non the items emitted by a `ConnectableObservable` that shares a single subscription to\nthe underlying stream."
            }
          ],
          ["name", { "__kind": "heading", "description": "multicast\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "subjectOrSubjectFactory",
              "description": "",
              "type": "Subject<T> | (() => Subject<T>)"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "(source: Observable<T>) => Observable<R>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/multicast.ts#L10-L10",
        "signature": "function multicast<T>(\n  subject: Subject<T>\n): UnaryFunction<Observable<T>, ConnectableObservable<T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "subject",
              "description": "",
              "type": "Subject<T>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/multicast.ts#L11-L11",
        "signature": "function multicast<T, O extends ObservableInput<any>>(\n  subject: Subject<T>,\n  selector: (shared: Observable<T>) => O\n): UnaryFunction<Observable<T>, ConnectableObservable<ObservedValueOf<O>>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "subject",
              "description": "",
              "type": "Subject<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "(shared: Observable<T>) => O"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/multicast.ts#L12-L12",
        "signature": "function multicast<T>(\n  subjectFactory: (this: Observable<T>) => Subject<T>\n): UnaryFunction<Observable<T>, ConnectableObservable<T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "subjectFactory",
              "description": "",
              "type": "(this: Observable<T>) => Subject<T>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/multicast.ts#L13-L13",
        "signature": "function multicast<T, O extends ObservableInput<any>>(\n  SubjectFactory: (this: Observable<T>) => Subject<T>,\n  selector: (shared: Observable<T>) => O\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "SubjectFactory",
              "description": "",
              "type": "(this: Observable<T>) => Subject<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "(shared: Observable<T>) => O"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "observeOn",
    "overloads": [
      {
        "file": "src/internal/operators/observeOn.ts#L66-L70",
        "signature": "function observeOn<T>(\n  scheduler: SchedulerLike,\n  delay: number = 0\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nRe-emits all notifications from source Observable with specified scheduler.\n\n<span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n\n`observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\nnotifications emitted by the source Observable. It might be useful, if you do not have control over\ninternal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n\nReturned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\nbut rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\nscheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\nnotification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\nAn anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\nthat emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\nObservable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\nlittle bit more, to ensure that they are emitted at expected moments.\n\nAs a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\nwill be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\nwill delay all notifications - including error notifications - while `delay` will pass through error\nfrom source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\nfor any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\nfor notification emissions in general.\n\n## Example\n\nEnsure values in subscribe are called just before browser repaint.\n\n```ts\nimport { interval, animationFrameScheduler } from 'rxjs';\nimport { observeOn } from 'rxjs/operators';\n\nconst someDiv = document.querySelector(\"#someDiv\");\nconst intervals = interval(10);                // Intervals are scheduled\n// with async scheduler by default...\nintervals.pipe(\nobserveOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n)                                              // scheduler to ensure smooth animation.\n.subscribe(val => {\nsomeDiv.style.height = val + 'px';\n});\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link delay}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "scheduler Scheduler that will be used to reschedule notifications from source Observable.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[delay] Number of milliseconds that states with what delay every notification should be rescheduled.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} Observable that emits the same notifications as the source Observable,\nbut with provided scheduler.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "delay",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "onErrorResumeNext",
    "overloads": [
      {
        "file": "src/internal/operators/onErrorResumeNext.ts#L90-L97",
        "signature": "function onErrorResumeNext<T, R>(\n  ...nextSources: Array<ObservableInput<any> | Array<ObservableInput<any>>>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\nthat was passed.\n\n<span class=\"informal\">Execute series of Observables, subscribes to next one on error or complete.</span>\n\n![](onErrorResumeNext.png)\n\n`onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\narguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\nas the source.\n\n`onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\nWhen its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\nwill subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\nits values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\nObservable in provided series, no matter if previous Observable completed or ended with an error. This will\nbe happening until there is no more Observables left in the series, at which point returned Observable will\ncomplete - even if the last subscribed stream ended with an error.\n\n`onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\nwhen it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\nin series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\nan error.\n\nNote that you do not get any access to errors emitted by the Observables. In particular do not\nexpect these errors to appear in error callback passed to {@link Observable#subscribe}. If you want to take\nspecific actions based on what error was emitted by an Observable, you should try out {@link catchError} instead.\n\n\n## Example\nSubscribe to the next Observable after map fails\n```ts\nimport { of } from 'rxjs';\nimport { onErrorResumeNext, map } from 'rxjs/operators';\n\nof(1, 2, 3, 0).pipe(\nmap(x => {\nif (x === 0) { throw Error(); }\nreturn 10 / x;\n}),\nonErrorResumeNext(of(1, 2, 3)),\n)\n.subscribe(\nval => console.log(val),\nerr => console.log(err),          // Will never be called.\n() => console.log('that\\'s it!')\n);\n\n// Logs:\n// 10\n// 5\n// 3.3333333333333335\n// 1\n// 2\n// 3\n// \"that's it!\"\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link concat}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link catchError}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{...ObservableInput}",
              "description": "observables Observables passed either directly or as an array.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\nto the next passed Observable and so on, until it completes or runs out of Observables."
            }
          ],
          [
            "name",
            { "__kind": "heading", "description": "onErrorResumeNext\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "nextSources",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/onErrorResumeNext.ts#L11-L11",
        "signature": "function onErrorResumeNext<T>(): OperatorFunction<T, T>;",
        "info": []
      },
      {
        "file": "src/internal/operators/onErrorResumeNext.ts#L12-L12",
        "signature": "function onErrorResumeNext<T, T2>(\n  v: ObservableInput<T2>\n): OperatorFunction<T, T | T2>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/onErrorResumeNext.ts#L13-L13",
        "signature": "function onErrorResumeNext<T, T2, T3>(\n  v: ObservableInput<T2>,\n  v2: ObservableInput<T3>\n): OperatorFunction<T, T | T2 | T3>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/onErrorResumeNext.ts#L14-L14",
        "signature": "function onErrorResumeNext<T, T2, T3, T4>(\n  v: ObservableInput<T2>,\n  v2: ObservableInput<T3>,\n  v3: ObservableInput<T4>\n): OperatorFunction<T, T | T2 | T3 | T4>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/onErrorResumeNext.ts#L15-L15",
        "signature": "function onErrorResumeNext<T, T2, T3, T4, T5>(\n  v: ObservableInput<T2>,\n  v2: ObservableInput<T3>,\n  v3: ObservableInput<T4>,\n  v4: ObservableInput<T5>\n): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/onErrorResumeNext.ts#L16-L16",
        "signature": "function onErrorResumeNext<T, T2, T3, T4, T5, T6>(\n  v: ObservableInput<T2>,\n  v2: ObservableInput<T3>,\n  v3: ObservableInput<T4>,\n  v4: ObservableInput<T5>,\n  v5: ObservableInput<T6>\n): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/onErrorResumeNext.ts#L17-L17",
        "signature": "function onErrorResumeNext<T, T2, T3, T4, T5, T6, T7>(\n  v: ObservableInput<T2>,\n  v2: ObservableInput<T3>,\n  v3: ObservableInput<T4>,\n  v4: ObservableInput<T5>,\n  v5: ObservableInput<T6>,\n  v6: ObservableInput<T7>\n): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6 | T7>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/onErrorResumeNext.ts#L18-L18",
        "signature": "function onErrorResumeNext<T, R>(\n  ...observables: Array<ObservableInput<any>>\n): OperatorFunction<T, T | R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/onErrorResumeNext.ts#L19-L19",
        "signature": "function onErrorResumeNext<T, R>(\n  array: ObservableInput<any>[]\n): OperatorFunction<T, T | R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "pairwise",
    "overloads": [
      {
        "file": "src/internal/operators/pairwise.ts#L49-L51",
        "signature": "function pairwise<T>(): OperatorFunction<T, [T, T]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Groups pairs of consecutive emissions together and emits them as an array of\ntwo values.\n\n<span class=\"informal\">Puts the current value and previous value together as\nan array, and emits that.</span>\n\n![](pairwise.png)\n\nThe Nth emission from the source Observable will cause the output Observable\nto emit an array [(N-1)th, Nth] of the previous and the current value, as a\npair. For this reason, `pairwise` emits on the second and subsequent\nemissions from the source Observable, but not on the first emission, because\nthere is no previous value in that case.\n\n## Example\nOn every click (starting from the second), emit the relative distance to the previous click\n```ts\nimport { fromEvent } from 'rxjs';\nimport { pairwise, map } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst pairs = clicks.pipe(pairwise());\nconst distance = pairs.pipe(\nmap(pair => {\nconst x0 = pair[0].clientX;\nconst y0 = pair[0].clientY;\nconst x1 = pair[1].clientX;\nconst y1 = pair[1].clientY;\nreturn Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n}),\n);\ndistance.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link buffer}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferCount}\n" }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<Array<T>>} An Observable of pairs (as arrays) of\nconsecutive values from the source Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "pairwise\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "partition",
    "overloads": [
      {
        "file": "src/internal/operators/partition.ts#L53-L59",
        "signature": "function partition<T>(\n  predicate: (value: T, index: number) => boolean,\n  thisArg?: any\n): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Splits the source Observable into two, one with values that satisfy a\npredicate, and another with values that don't satisfy the predicate.\n\n<span class=\"informal\">It's like {@link filter}, but returns two Observables:\none like the output of {@link filter}, and the other with values that did not\npass the condition.</span>\n\n![](partition.png)\n\n`partition` outputs an array with two Observables that partition the values\nfrom the source Observable through the given `predicate` function. The first\nObservable in that array emits source values for which the predicate argument\nreturns true. The second Observable emits source values for which the\npredicate returns false. The first behaves like {@link filter} and the second\nbehaves like {@link filter} with the predicate negated.\n\n## Example\nPartition click events into those on DIV elements and those elsewhere\n```ts\nimport { fromEvent } from 'rxjs';\nimport { partition } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst parts = clicks.pipe(partition(ev => ev.target.tagName === 'DIV'));\nconst clicksOnDivs = parts[0];\nconst clicksElsewhere = parts[1];\nclicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\nclicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link filter}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, index: number): boolean} predicate A function that",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{any}",
              "description": "[thisArg] An optional argument to determine the value of `this`",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{[Observable<T>, Observable<T>]} An array with two Observables: one\nwith values that passed the predicate, and another with values that did not\npass the predicate."
            }
          ],
          ["name", { "__kind": "heading", "description": "partition" }],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "use `partition` static creation function instead\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "pluck",
    "overloads": [
      {
        "file": "src/internal/operators/pluck.ts#L46-L63",
        "signature": "function pluck<T, R>(\n  ...properties: Array<string | number | symbol>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Maps each source value to its specified nested property.\n\n<span class=\"informal\">Like {@link map}, but meant only for picking one of\nthe nested properties of every emitted value.</span>\n\n![](pluck.png)\n\nGiven a list of strings or numbers describing a path to a property, retrieves\nthe value of a specified nested property from all values in the source\nObservable. If a property can't be resolved, it will return `undefined` for\nthat value.\n\n## Example\nMap every click to the tagName of the clicked target element\n```ts\nimport { fromEvent } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst tagNames = clicks.pipe(pluck('target', 'tagName'));\ntagNames.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link map}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "properties",
              "description": "The nested properties to pluck from each source",
              "type": "(string | number | symbol)[]"
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "A new Observable of property values from the source values."
            }
          ],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "Remove in v8. Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`.\n"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/pluck.ts#L5-L5",
        "signature": "function pluck<T, K1 extends keyof T>(k1: K1): OperatorFunction<T, T[K1]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "k1",
              "description": "",
              "type": "K1"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/pluck.ts#L6-L6",
        "signature": "function pluck<T, K1 extends keyof T, K2 extends keyof T[K1]>(\n  k1: K1,\n  k2: K2\n): OperatorFunction<T, T[K1][K2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "k1",
              "description": "",
              "type": "K1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k2",
              "description": "",
              "type": "K2"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/pluck.ts#L7-L7",
        "signature": "function pluck<\n  T,\n  K1 extends keyof T,\n  K2 extends keyof T[K1],\n  K3 extends keyof T[K1][K2]\n>(k1: K1, k2: K2, k3: K3): OperatorFunction<T, T[K1][K2][K3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "k1",
              "description": "",
              "type": "K1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k2",
              "description": "",
              "type": "K2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k3",
              "description": "",
              "type": "K3"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/pluck.ts#L8-L8",
        "signature": "function pluck<\n  T,\n  K1 extends keyof T,\n  K2 extends keyof T[K1],\n  K3 extends keyof T[K1][K2],\n  K4 extends keyof T[K1][K2][K3]\n>(k1: K1, k2: K2, k3: K3, k4: K4): OperatorFunction<T, T[K1][K2][K3][K4]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "k1",
              "description": "",
              "type": "K1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k2",
              "description": "",
              "type": "K2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k3",
              "description": "",
              "type": "K3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k4",
              "description": "",
              "type": "K4"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/pluck.ts#L9-L9",
        "signature": "function pluck<\n  T,\n  K1 extends keyof T,\n  K2 extends keyof T[K1],\n  K3 extends keyof T[K1][K2],\n  K4 extends keyof T[K1][K2][K3],\n  K5 extends keyof T[K1][K2][K3][K4]\n>(\n  k1: K1,\n  k2: K2,\n  k3: K3,\n  k4: K4,\n  k5: K5\n): OperatorFunction<T, T[K1][K2][K3][K4][K5]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "k1",
              "description": "",
              "type": "K1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k2",
              "description": "",
              "type": "K2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k3",
              "description": "",
              "type": "K3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k4",
              "description": "",
              "type": "K4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k5",
              "description": "",
              "type": "K5"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/pluck.ts#L10-L10",
        "signature": "function pluck<\n  T,\n  K1 extends keyof T,\n  K2 extends keyof T[K1],\n  K3 extends keyof T[K1][K2],\n  K4 extends keyof T[K1][K2][K3],\n  K5 extends keyof T[K1][K2][K3][K4],\n  K6 extends keyof T[K1][K2][K3][K4][K5]\n>(\n  k1: K1,\n  k2: K2,\n  k3: K3,\n  k4: K4,\n  k5: K5,\n  k6: K6\n): OperatorFunction<T, T[K1][K2][K3][K4][K5][K6]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "k1",
              "description": "",
              "type": "K1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k2",
              "description": "",
              "type": "K2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k3",
              "description": "",
              "type": "K3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k4",
              "description": "",
              "type": "K4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k5",
              "description": "",
              "type": "K5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k6",
              "description": "",
              "type": "K6"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/pluck.ts#L11-L11",
        "signature": "function pluck<\n  T,\n  K1 extends keyof T,\n  K2 extends keyof T[K1],\n  K3 extends keyof T[K1][K2],\n  K4 extends keyof T[K1][K2][K3],\n  K5 extends keyof T[K1][K2][K3][K4],\n  K6 extends keyof T[K1][K2][K3][K4][K5]\n>(\n  k1: K1,\n  k2: K2,\n  k3: K3,\n  k4: K4,\n  k5: K5,\n  k6: K6,\n  ...rest: string[]\n): OperatorFunction<T, unknown>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "k1",
              "description": "",
              "type": "K1"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k2",
              "description": "",
              "type": "K2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k3",
              "description": "",
              "type": "K3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k4",
              "description": "",
              "type": "K4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k5",
              "description": "",
              "type": "K5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "k6",
              "description": "",
              "type": "K6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "rest",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/pluck.ts#L12-L12",
        "signature": "function pluck<T>(...properties: string[]): OperatorFunction<T, unknown>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "properties",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "publish",
    "overloads": [
      {
        "file": "src/internal/operators/publish.ts#L60-L64",
        "signature": "function publish<T, R>(\n  selector?: OperatorFunction<T, R>\n): MonoTypeOperatorFunction<T> | OperatorFunction<T, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\nbefore it begins emitting items to those Observers that have subscribed to it.\n\n<span class=\"informal\">Makes a cold Observable hot</span>\n\n![](publish.png)\n\n## Examples\nMake source$ hot by applying publish operator, then merge each inner observable into a single one\nand subscribe.\n```ts\nimport { of, zip, interval, merge } from \"rxjs\";\nimport { map, publish, tap } from \"rxjs/operators\";\n\nconst source$ = zip(interval(2000), of(1, 2, 3, 4, 5, 6, 7, 8, 9)).pipe(\nmap(values => values[1])\n);\n\nsource$\n.pipe(\npublish(multicasted$ =>\nmerge(\nmulticasted$.pipe(tap(x => console.log('Stream 1:', x))),\nmulticasted$.pipe(tap(x => console.log('Stream 2:', x))),\nmulticasted$.pipe(tap(x => console.log('Stream 3:', x))),\n)\n)\n)\n.subscribe();\n\n// Results every two seconds\n// Stream 1: 1\n// Stream 2: 1\n// Stream 3: 1\n// ...\n// Stream 1: 9\n// Stream 2: 9\n// Stream 3: 9\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Function}",
              "description": "[selector] - Optional selector function which can use the multicasted source sequence as many times",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers."
            }
          ],
          ["name", { "__kind": "heading", "description": "publish\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "OperatorFunction<T, R>"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/publish.ts#L8-L8",
        "signature": "function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;",
        "info": []
      },
      {
        "file": "src/internal/operators/publish.ts#L9-L9",
        "signature": "function publish<T, O extends ObservableInput<any>>(\n  selector: (shared: Observable<T>) => O\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "(shared: Observable<T>) => O"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/publish.ts#L10-L10",
        "signature": "function publish<T>(\n  selector: MonoTypeOperatorFunction<T>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "MonoTypeOperatorFunction<T>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "publishBehavior",
    "overloads": [
      {
        "file": "src/internal/operators/publishBehavior.ts#L12-L14",
        "signature": "function publishBehavior<T>(\n  value: T\n): UnaryFunction<Observable<T>, ConnectableObservable<T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "T"
            }
          ],
          [
            "return",
            { "__kind": "heading", "description": "{ConnectableObservable<T>}" }
          ],
          ["name", { "__kind": "heading", "description": "publishBehavior\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "publishLast",
    "overloads": [
      {
        "file": "src/internal/operators/publishLast.ts#L64-L66",
        "signature": "function publishLast<T>(): UnaryFunction<\n  Observable<T>,\n  ConnectableObservable<T>\n>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns a connectable observable sequence that shares a single subscription to the\nunderlying sequence containing only the last notification.\n\n![](publishLast.png)\n\nSimilar to {@link publish}, but it waits until the source observable completes and stores\nthe last emitted value.\nSimilarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last\nvalue even if it has no more subscribers. If subsequent subscriptions happen, they will\nimmediately get that last stored value and complete.\n\n## Example\n\n```ts\nimport { interval } from 'rxjs';\nimport { publishLast, tap, take } from 'rxjs/operators';\n\nconst connectable =\ninterval(1000)\n.pipe(\ntap(x => console.log(\"side effect\", x)),\ntake(3),\npublishLast());\n\nconnectable.subscribe(\nx => console.log(  \"Sub. A\", x),\nerr => console.log(\"Sub. A Error\", err),\n() => console.log( \"Sub. A Complete\"));\n\nconnectable.subscribe(\nx => console.log(  \"Sub. B\", x),\nerr => console.log(\"Sub. B Error\", err),\n() => console.log( \"Sub. B Complete\"));\n\nconnectable.connect();\n\n// Results:\n//    \"side effect 0\"\n//    \"side effect 1\"\n//    \"side effect 2\"\n//    \"Sub. A 2\"\n//    \"Sub. B 2\"\n//    \"Sub. A Complete\"\n//    \"Sub. B Complete\"\n```\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link ConnectableObservable}"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link publish}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link publishReplay}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link publishBehavior}\n" }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{ConnectableObservable} An observable sequence that contains the elements of a\nsequence produced by multicasting the source sequence."
            }
          ],
          ["name", { "__kind": "heading", "description": "publishLast\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "publishReplay",
    "overloads": [
      {
        "file": "src/internal/operators/publishReplay.ts#L12-L25",
        "signature": "function publishReplay<T, R>(\n  bufferSize?: number,\n  windowTime?: number,\n  selectorOrScheduler?: SchedulerLike | OperatorFunction<T, R>,\n  scheduler?: SchedulerLike\n): UnaryFunction<Observable<T>, ConnectableObservable<R>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferSize",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowTime",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "selectorOrScheduler",
              "description": "",
              "type": "SchedulerLike | OperatorFunction<T, R>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/publishReplay.ts#L8-L8",
        "signature": "function publishReplay<T>(\n  bufferSize?: number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferSize",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowTime",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/publishReplay.ts#L9-L9",
        "signature": "function publishReplay<T, O extends ObservableInput<any>>(\n  bufferSize?: number,\n  windowTime?: number,\n  selector?: (shared: Observable<T>) => O,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferSize",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowTime",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "(shared: Observable<T>) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "race",
    "overloads": [
      {
        "file": "src/internal/operators/raceWith.ts#L26-L34",
        "signature": "function race<T, R>(\n  ...observables: ObservableInput<R>[]\n): OperatorFunction<T, (T | R)[]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that mirrors the first source Observable to emit a next,\nerror or complete notification from the combination of this Observable and supplied Observables."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{...Observables}",
              "description": "...observables Sources used to race for which Observable emits first.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that mirrors the output of the first Observable to emit an item."
            }
          ],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "Deprecated use {@link raceWith}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/raceWith.ts#L10-L10",
        "signature": "function race<T>(\n  observables: Array<Observable<T>>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "Observable<T>[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/raceWith.ts#L12-L12",
        "signature": "function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "Observable<T>[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/raceWith.ts#L14-L14",
        "signature": "function race<T>(\n  ...observables: Array<Observable<T> | Array<Observable<T>>>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "(Observable<T> | Observable<T>[])[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/raceWith.ts#L16-L16",
        "signature": "function race<T, R>(\n  ...observables: Array<Observable<any> | Array<Observable<any>>>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "(Observable<any> | Observable<any>[])[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "raceWith",
    "overloads": [
      {
        "file": "src/internal/operators/raceWith.ts#L64-L77",
        "signature": "function raceWith<T, A extends ObservableInput<any>[]>(\n  ...otherSources: A\n): OperatorFunction<T, T | ObservedValueUnionFromArray<A>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an Observable that mirrors the first source Observable to emit a next,\nerror or complete notification from the combination of the Observable to which\nthe operator is applied and supplied Observables.\n\n## Example\n\n```ts\nimport { interval } from 'rxjs';\nimport { mapTo, raceWith } from 'rxjs/operators';\n\nconst obs1 = interval(1000).pipe(mapTo('fast one'));\nconst obs2 = interval(3000).pipe(mapTo('medium one'));\nconst obs3 = interval(5000).pipe(mapTo('slow one'));\n\nobs2.pipe(\nraceWith(obs3, obs1)\n).subscribe(\nwinner => console.log(winner)\n);\n\n// Outputs\n// a series of 'fast one'\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "otherSources",
              "description": "Sources used to race for which Observable emits first.",
              "type": "A"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "reduce",
    "overloads": [
      {
        "file": "src/internal/operators/reduce.ts#L64-L85",
        "signature": "function reduce<V, A>(\n  accumulator: (acc: V | A, value: V, index: number) => A,\n  seed?: any\n): OperatorFunction<V, V | A>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Applies an accumulator function over the source Observable, and returns the\naccumulated result when the source completes, given an optional seed value.\n\n<span class=\"informal\">Combines together all values emitted on the source,\nusing an accumulator function that knows how to join a new source value into\nthe accumulation from the past.</span>\n\n![](reduce.png)\n\nLike\n[Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n`reduce` applies an `accumulator` function against an accumulation and each\nvalue of the source Observable (from the past) to reduce it to a single\nvalue, emitted on the output Observable. Note that `reduce` will only emit\none value, only when the source Observable completes. It is equivalent to\napplying operator {@link scan} followed by operator {@link last}.\n\nReturns an Observable that applies a specified `accumulator` function to each\nitem emitted by the source Observable. If a `seed` value is specified, then\nthat value will be used as the initial value for the accumulator. If no seed\nvalue is specified, the first item of the source is used as the seed.\n\n## Example\nCount the number of click events that happened in 5 seconds\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { reduce, takeUntil, mapTo } from 'rxjs/operators';\n\nconst clicksInFiveSeconds = fromEvent(document, 'click').pipe(\ntakeUntil(interval(5000)),\n);\nconst ones = clicksInFiveSeconds.pipe(mapTo(1));\nconst seed = 0;\nconst count = ones.pipe(reduce((acc, one) => acc + one, seed));\ncount.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link count}" }],
          ["see", { "__kind": "heading", "description": "{@link expand}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeScan}" }],
          ["see", { "__kind": "heading", "description": "{@link scan}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(acc:",
              "description": "A, value: V, index: number): A} accumulator The accumulator function",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{A}",
              "description": "[seed] The initial accumulation value.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<A>} An Observable that emits a single value that is the\nresult of accumulating the values emitted by the source Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "reduce\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "accumulator",
              "description": "",
              "type": "(acc: V | A, value: V, index: number) => A"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "seed",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/reduce.ts#L9-L9",
        "signature": "function reduce<V, A = V>(\n  accumulator: (acc: A | V, value: V, index: number) => A\n): OperatorFunction<V, V | A>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "accumulator",
              "description": "",
              "type": "(acc: A | V, value: V, index: number) => A"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/reduce.ts#L10-L10",
        "signature": "function reduce<V, A>(\n  accumulator: (acc: A, value: V, index: number) => A,\n  seed: A\n): OperatorFunction<V, A>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "accumulator",
              "description": "",
              "type": "(acc: A, value: V, index: number) => A"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "seed",
              "description": "",
              "type": "A"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/reduce.ts#L11-L11",
        "signature": "function reduce<V, A, S = A>(\n  accumulator: (acc: A | S, value: V, index: number) => A,\n  seed: S\n): OperatorFunction<V, A>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "accumulator",
              "description": "",
              "type": "(acc: A | S, value: V, index: number) => A"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "seed",
              "description": "",
              "type": "S"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "repeat",
    "overloads": [
      {
        "file": "src/internal/operators/repeat.ts#L66-L105",
        "signature": "function repeat<T>(count = Infinity): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that will resubscribe to the source stream when the source stream completes, at most count times.\n\n<span class=\"informal\">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\n\n![](repeat.png)\n\nSimilar to {@link retry}, this operator repeats the stream of items emitted by the source for non error cases.\nRepeat can be useful for creating observables that are meant to have some repeated pattern or rhythm.\n\nNote: `repeat(0)` returns an empty observable and `repeat()` will repeat forever\n\n## Example\nRepeat a message stream\n```ts\nimport { of } from 'rxjs';\nimport { repeat, delay } from 'rxjs/operators';\n\nconst source = of('Repeat message');\nconst example = source.pipe(repeat(3));\nexample.subscribe(x => console.log(x));\n\n// Results\n// Repeat message\n// Repeat message\n// Repeat message\n```\n\nRepeat 3 values, 2 times\n```ts\nimport { interval } from 'rxjs';\nimport { repeat, take } from 'rxjs/operators';\n\nconst source = interval(1000);\nconst example = source.pipe(take(3), repeat(2));\nexample.subscribe(x => console.log(x));\n\n// Results every second\n// 0\n// 1\n// 2\n// 0\n// 1\n// 2\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link repeatWhen}" }],
          ["see", { "__kind": "heading", "description": "{@link retry}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[count] The number of times the source Observable items are repeated, a count of 0 will yield",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that will resubscribe to the source stream when the source stream completes\n, at most count times."
            }
          ],
          ["name", { "__kind": "heading", "description": "repeat\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "count",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "repeatWhen",
    "overloads": [
      {
        "file": "src/internal/operators/repeatWhen.ts#L40-L133",
        "signature": "function repeatWhen<T>(\n  notifier: (notifications: Observable<void>) => Observable<any>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\nObservable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\ncalls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\nthis method will resubscribe to the source Observable.\n\n![](repeatWhen.png)\n\n## Example\nRepeat a message stream on click\n```ts\nimport { of, fromEvent } from 'rxjs';\nimport { repeatWhen } from 'rxjs/operators';\n\nconst source = of('Repeat message');\nconst documentClick$ = fromEvent(document, 'click');\n\nsource.pipe(repeatWhen(() => documentClick$)\n).subscribe(data => console.log(data))\n```"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link repeat}" }],
          ["see", { "__kind": "heading", "description": "{@link retry}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link retryWhen}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(notifications:",
              "description": "Observable): Observable} notifier - Receives an Observable of notifications with",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} The source Observable modified with repeat logic."
            }
          ],
          ["name", { "__kind": "heading", "description": "repeatWhen\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "notifier",
              "description": "",
              "type": "(notifications: Observable<void>) => Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "retry",
    "overloads": [
      {
        "file": "src/internal/operators/retry.ts#L62-L113",
        "signature": "function retry<T>(\n  configOrCount: number | RetryConfig = Infinity\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "configOrCount",
              "description": "",
              "type": "number | RetryConfig"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/retry.ts#L60-L60",
        "signature": "function retry<T>(count?: number): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\ncalls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\nas a number parameter) rather than propagating the `error` call.\n\n![](retry.png)\n\nAny and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\nduring failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\ntime and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\nwould be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n\n## Example\n```ts\nimport { interval, of, throwError } from 'rxjs';\nimport { mergeMap, retry } from 'rxjs/operators';\n\nconst source = interval(1000);\nconst example = source.pipe(\nmergeMap(val => {\nif(val > 5){\nreturn throwError('Error!');\n}\nreturn of(val);\n}),\n//retry 2 times on error\nretry(2)\n);\n\nconst subscribe = example.subscribe({\nnext: val => console.log(val),\nerror: val => console.log(`${val}: Retried 2 times then quit!`)\n});\n\n// Output:\n// 0..1..2..3..4..5..\n// 0..1..2..3..4..5..\n// 0..1..2..3..4..5..\n// \"Error!: Retried 2 times then quit!\"\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "count - Number of retry attempts before failing.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{boolean}",
              "description": "resetOnSuccess - When set to `true` every successful emission will reset the error count",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} The source Observable modified with the retry logic."
            }
          ],
          ["name", { "__kind": "heading", "description": "retry\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "count",
              "description": "",
              "type": "number"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/retry.ts#L61-L61",
        "signature": "function retry<T>(config: RetryConfig): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "",
              "type": "RetryConfig"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "retryWhen",
    "overloads": [
      {
        "file": "src/internal/operators/retryWhen.ts#L62-L143",
        "signature": "function retryWhen<T>(\n  notifier: (errors: Observable<any>) => Observable<any>\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\ncalls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\nIf that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\nsubscription. Otherwise this method will resubscribe to the source Observable.\n\n![](retryWhen.png)\n\nRetry an observable sequence on error based on custom criteria.\n\n## Example\n```ts\nimport { timer, interval } from 'rxjs';\nimport { map, tap, retryWhen, delayWhen } from 'rxjs/operators';\n\nconst source = interval(1000);\nconst example = source.pipe(\nmap(val => {\nif (val > 5) {\n// error will be picked up by retryWhen\nthrow val;\n}\nreturn val;\n}),\nretryWhen(errors =>\nerrors.pipe(\n// log error message\ntap(val => console.log(`Value ${val} was too high!`)),\n// restart in 5 seconds\ndelayWhen(val => timer(val * 1000))\n)\n)\n);\n\nconst subscribe = example.subscribe(val => console.log(val));\n\n// results:\n//   0\n//   1\n//   2\n//   3\n//   4\n//   5\n//   \"Value 6 was too high!\"\n//  --Wait 5 seconds then repeat\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(errors:",
              "description": "Observable): Observable} notifier - Receives an Observable of notifications with which a",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} The source Observable modified with retry logic."
            }
          ],
          ["name", { "__kind": "heading", "description": "retryWhen\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "notifier",
              "description": "",
              "type": "(errors: Observable<any>) => Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "refCount",
    "overloads": [
      {
        "file": "src/internal/operators/refCount.ts#L62-L66",
        "signature": "function refCount<T>(): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\nyou can connect to it.\n\nInternally it counts the subscriptions to the observable and subscribes (only once) to the source if\nthe number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\nunsubscribes from the source. This way you can make sure that everything before the *published*\nrefCount has only a single subscription independently of the number of subscribers to the target\nobservable.\n\nNote that using the {@link share} operator is exactly the same as using the *publish* operator\n(making the observable hot) and the *refCount* operator in a sequence.\n\n![](refCount.png)\n\n## Example\n\nIn the following example there are two intervals turned into connectable observables\nby using the *publish* operator. The first one uses the *refCount* operator, the\nsecond one does not use it. You will notice that a connectable observable does nothing\nuntil you call its connect function.\n\n```ts\nimport { interval } from 'rxjs';\nimport { tap, publish, refCount } from 'rxjs/operators';\n\n// Turn the interval observable into a ConnectableObservable (hot)\nconst refCountInterval = interval(400).pipe(\ntap((num) => console.log(`refCount ${num}`)),\npublish(),\nrefCount()\n);\n\nconst publishedInterval = interval(400).pipe(\ntap((num) => console.log(`publish ${num}`)),\npublish()\n);\n\nrefCountInterval.subscribe();\nrefCountInterval.subscribe();\n// 'refCount 0' -----> 'refCount 1' -----> etc\n// All subscriptions will receive the same value and the tap (and\n// every other operator) before the publish operator will be executed\n// only once per event independently of the number of subscriptions.\n\npublishedInterval.subscribe();\n// Nothing happens until you call .connect() on the observable.\n```\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link ConnectableObservable}"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link share}" }],
          ["see", { "__kind": "heading", "description": "{@link publish}\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "sample",
    "overloads": [
      {
        "file": "src/internal/operators/sample.ts#L48-L50",
        "signature": "function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits the most recently emitted value from the source Observable whenever\nanother Observable, the `notifier`, emits.\n\n<span class=\"informal\">It's like {@link sampleTime}, but samples whenever\nthe `notifier` Observable emits something.</span>\n\n![](sample.png)\n\nWhenever the `notifier` Observable emits a value or completes, `sample`\nlooks at the source Observable and emits whichever value it has most recently\nemitted since the previous sampling, unless the source has not emitted\nanything since the previous sampling. The `notifier` is subscribed to as soon\nas the output Observable is subscribed.\n\n## Example\nOn every click, sample the most recent \"seconds\" timer\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { sample } from 'rxjs/operators';\n\nconst seconds = interval(1000);\nconst clicks = fromEvent(document, 'click');\nconst result = seconds.pipe(sample(clicks));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link audit}" }],
          ["see", { "__kind": "heading", "description": "{@link debounce}" }],
          ["see", { "__kind": "heading", "description": "{@link sampleTime}" }],
          ["see", { "__kind": "heading", "description": "{@link throttle}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable<any>}",
              "description": "notifier The Observable to use for sampling the",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that emits the results of sampling the\nvalues emitted by the source Observable whenever the notifier Observable\nemits value or completes."
            }
          ],
          ["name", { "__kind": "heading", "description": "sample\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "notifier",
              "description": "",
              "type": "Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "sampleTime",
    "overloads": [
      {
        "file": "src/internal/operators/sampleTime.ts#L49-L51",
        "signature": "function sampleTime<T>(\n  period: number,\n  scheduler: SchedulerLike = async\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits the most recently emitted value from the source Observable within\nperiodic time intervals.\n\n<span class=\"informal\">Samples the source Observable at periodic time\nintervals, emitting what it samples.</span>\n\n![](sampleTime.png)\n\n`sampleTime` periodically looks at the source Observable and emits whichever\nvalue it has most recently emitted since the previous sampling, unless the\nsource has not emitted anything since the previous sampling. The sampling\nhappens periodically in time every `period` milliseconds (or the time unit\ndefined by the optional `scheduler` argument). The sampling starts as soon as\nthe output Observable is subscribed.\n\n## Example\nEvery second, emit the most recent click at most once\n```ts\nimport { fromEvent } from 'rxjs';\nimport { sampleTime } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(sampleTime(1000));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link auditTime}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link debounceTime}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link delay}" }],
          ["see", { "__kind": "heading", "description": "{@link sample}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link throttleTime}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "period The sampling period expressed in milliseconds or the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler=async] The {@link SchedulerLike} to use for",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that emits the results of sampling the\nvalues emitted by the source Observable at the specified time interval."
            }
          ],
          ["name", { "__kind": "heading", "description": "sampleTime\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "period",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "scan",
    "overloads": [
      {
        "file": "src/internal/operators/scan.ts#L55-L69",
        "signature": "function scan<V, A, S>(\n  accumulator: (acc: V | A | S, value: V, index: number) => A,\n  seed?: S\n): OperatorFunction<V, V | A>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Applies an accumulator function over the source Observable, and returns each\nintermediate result, with an optional seed value.\n\n<span class=\"informal\">It's like {@link reduce}, but emits the current\naccumulation whenever the source emits a value.</span>\n\n![](scan.png)\n\nCombines together all values emitted on the source, using an accumulator\nfunction that knows how to join a new source value into the accumulation from\nthe past. Is similar to {@link reduce}, but emits the intermediate\naccumulations.\n\nReturns an Observable that applies a specified `accumulator` function to each\nitem emitted by the source Observable. If a `seed` value is specified, then\nthat value will be used as the initial value for the accumulator. If no seed\nvalue is specified, the first item of the source is used as the seed.\n\n## Example\nCount the number of click events\n```ts\nimport { fromEvent } from 'rxjs';\nimport { scan, mapTo } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst ones = clicks.pipe(mapTo(1));\nconst seed = 0;\nconst count = ones.pipe(scan((acc, one) => acc + one, seed));\ncount.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link expand}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeScan}" }],
          ["see", { "__kind": "heading", "description": "{@link reduce}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(acc:",
              "description": "A, value: V, index: number): A} accumulator",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{V|A}",
              "description": "[seed] The initial accumulation value.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<A>} An observable of the accumulated values."
            }
          ],
          ["name", { "__kind": "heading", "description": "scan\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "accumulator",
              "description": "",
              "type": "(acc: V | A | S, value: V, index: number) => A"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "seed",
              "description": "",
              "type": "S"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/scan.ts#L8-L8",
        "signature": "function scan<V, A = V>(\n  accumulator: (acc: A | V, value: V, index: number) => A\n): OperatorFunction<V, V | A>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "accumulator",
              "description": "",
              "type": "(acc: A | V, value: V, index: number) => A"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/scan.ts#L9-L9",
        "signature": "function scan<V, A>(\n  accumulator: (acc: A, value: V, index: number) => A,\n  seed: A\n): OperatorFunction<V, A>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "accumulator",
              "description": "",
              "type": "(acc: A, value: V, index: number) => A"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "seed",
              "description": "",
              "type": "A"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/scan.ts#L10-L10",
        "signature": "function scan<V, A, S>(\n  accumulator: (acc: A | S, value: V, index: number) => A,\n  seed: S\n): OperatorFunction<V, A>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "accumulator",
              "description": "",
              "type": "(acc: A | S, value: V, index: number) => A"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "seed",
              "description": "",
              "type": "S"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "sequenceEqual",
    "overloads": [
      {
        "file": "src/internal/operators/sequenceEqual.ts#L65-L68",
        "signature": "function sequenceEqual<T>(\n  compareTo: Observable<T>,\n  comparator?: (a: T, b: T) => boolean\n): OperatorFunction<T, boolean>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Compares all values of two observables in sequence using an optional comparator function\nand returns an observable of a single boolean value representing whether or not the two sequences\nare equal.\n\n<span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n\n![](sequenceEqual.png)\n\n`sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\nobservable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\nup; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\nobservables completes, the operator will wait for the other observable to complete; If the other\nobservable emits before completing, the returned observable will emit `false` and complete. If one observable never\ncompletes or emits after the other completes, the returned observable will never complete.\n\n## Example\nfigure out if the Konami code matches\n```ts\nimport { from, fromEvent } from 'rxjs';\nimport { sequenceEqual, bufferCount, mergeMap, map } from 'rxjs/operators';\n\nconst codes = from([\n'ArrowUp',\n'ArrowUp',\n'ArrowDown',\n'ArrowDown',\n'ArrowLeft',\n'ArrowRight',\n'ArrowLeft',\n'ArrowRight',\n'KeyB',\n'KeyA',\n'Enter', // no start key, clearly.\n]);\n\nconst keys = fromEvent(document, 'keyup').pipe(map(e => e.code));\nconst matches = keys.pipe(\nbufferCount(11, 1),\nmergeMap(\nlast11 => from(last11).pipe(sequenceEqual(codes)),\n),\n);\nmatches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link combineLatest}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link zip}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link withLatestFrom}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable}",
              "description": "compareTo The observable sequence to compare the source sequence to.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "[comparator] An optional function to compare each value pair",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable of a single boolean value representing whether or not\nthe values emitted by both observables were equal in sequence."
            }
          ],
          ["name", { "__kind": "heading", "description": "sequenceEqual\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "compareTo",
              "description": "",
              "type": "Observable<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "comparator",
              "description": "",
              "type": "(a: T, b: T) => boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "share",
    "overloads": [
      {
        "file": "src/internal/operators/share.ts#L60-L62",
        "signature": "function share<T>(): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\nSubscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\nunsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\nThis is an alias for `multicast(() => new Subject()), refCount()`.\n\n![](share.png)\n\n## Example\nGenerate new multicast Observable from the source Observable value\n```typescript\nimport { interval } from 'rxjs';\nimport { share, map } from 'rxjs/operators';\n\nconst source = interval(1000)\n.pipe(\nmap((x: number) => {\nconsole.log('Processing: ', x);\nreturn x*x;\n}),\nshare()\n);\n\nsource.subscribe(x => console.log('subscription 1: ', x));\nsource.subscribe(x => console.log('subscription 1: ', x));\n\n// Logs:\n// Processing:  0\n// subscription 1:  0\n// subscription 1:  0\n// Processing:  1\n// subscription 1:  1\n// subscription 1:  1\n// Processing:  2\n// subscription 1:  4\n// subscription 1:  4\n// Processing:  3\n// subscription 1:  9\n// subscription 1:  9\n// ... and so on\n```\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link api/index/function/interval}"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link map}\n" }],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers."
            }
          ],
          ["name", { "__kind": "heading", "description": "share\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "shareReplay",
    "overloads": [
      {
        "file": "src/internal/operators/shareReplay.ts#L127-L144",
        "signature": "function shareReplay<T>(\n  configOrBufferSize?: ShareReplayConfig | number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Share source and replay specified number of emissions on subscription.\n\nThis operator is a specialization of `replay` that connects to a source observable\nand multicasts through a `ReplaySubject` constructed with the specified arguments.\nA successfully completed source will stay cached in the `shareReplayed observable` forever,\nbut an errored source can be retried.\n\n## Why use shareReplay?\nYou generally want to use `shareReplay` when you have side-effects or taxing computations\nthat you do not wish to be executed amongst multiple subscribers.\nIt may also be valuable in situations where you know you will have late subscribers to\na stream that need access to previously emitted values.\nThis ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\n\n![](shareReplay.png)\n\n## Reference counting\nAs of RXJS version 6.4.0 a new overload signature was added to allow for manual control over what\nhappens when the operators internal reference counter drops to zero.\nIf `refCount` is true, the source will be unsubscribed from once the reference count drops to zero, i.e.\nthe inner `ReplaySubject` will be unsubscribed. All new subscribers will receive value emissions from a\nnew `ReplaySubject` which in turn will cause a new subscription to the source observable.\nIf `refCount` is false on the other hand, the source will not be unsubscribed meaning that the inner\n`ReplaySubject` will still be subscribed to the source (and potentially run for ever).\n\n## Example\n```ts\nimport { interval } from 'rxjs';\nimport { shareReplay, take } from 'rxjs/operators';\n\nconst obs$ = interval(1000);\nconst shared$ = obs$.pipe(\ntake(4),\nshareReplay(3)\n);\nshared$.subscribe(x => console.log('sub A: ', x));\nshared$.subscribe(y => console.log('sub B: ', y));\n\n```\n\n## Example for refCount usage\n```ts\n// Code take from https://blog.angularindepth.com/rxjs-whats-changed-with-sharereplay-65c098843e95\n// and adapted to showcase the refCount property.\nimport { interval, Observable, defer } from 'rxjs';\nimport { shareReplay, take, tap, finalize } from 'rxjs/operators';\n\nconst log = <T>(source: Observable<T>, name: string) => defer(() => {\nconsole.log(`${name}: subscribed`);\nreturn source.pipe(\ntap({\nnext: value => console.log(`${name}: ${value}`),\ncomplete: () => console.log(`${name}: complete`)\n}),\nfinalize(() => console.log(`${name}: unsubscribed`))\n);\n});\n\nconst obs$ = log(interval(1000), 'source');\n\nconst shared$ = log(obs$.pipe(\nshareReplay({bufferSize: 1, refCount: true }),\ntake(2),\n), 'shared');\n\nshared$.subscribe(x => console.log('sub A: ', x));\nshared$.subscribe(y => console.log('sub B: ', y));\n\n// PRINTS:\n// shared: subscribed <-- reference count = 1\n// source: subscribed\n// shared: subscribed <-- reference count = 2\n// source: 0\n// shared: 0\n// sub A: 0\n// shared: 0\n// sub B: 0\n// source: 1\n// shared: 1\n// sub A: 1\n// shared: complete <-- take(2) completes the subscription for sub A\n// shared: unsubscribed <-- reference count = 1\n// shared: 1\n// sub B: 1\n// shared: complete <-- take(2) completes the subscription for sub B\n// shared: unsubscribed <-- reference count = 0\n// source: unsubscribed <-- replaySubject unsubscribes from source observable because the reference count dropped to 0 and refCount is true\n\n// In case of refCount being false, the unsubscribe is never called on the source and the source would keep on emitting, even if no subscribers\n// are listening.\n// source: 2\n// source: 3\n// source: 4\n// ...\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link publish}" }],
          ["see", { "__kind": "heading", "description": "{@link share}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link publishReplay}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Number}",
              "description": "[bufferSize=Infinity] Maximum element count of the replay buffer.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Number}",
              "description": "[windowTime=Infinity] Maximum time length of the replay buffer in milliseconds.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Scheduler}",
              "description": "[scheduler] Scheduler where connected observers within the selector function",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An observable sequence that contains the elements of a sequence produced\nby multicasting the source sequence within a selector function."
            }
          ],
          ["name", { "__kind": "heading", "description": "shareReplay\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "configOrBufferSize",
              "description": "",
              "type": "number | ShareReplayConfig"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowTime",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/shareReplay.ts#L15-L15",
        "signature": "function shareReplay<T>(config: ShareReplayConfig): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "",
              "type": "ShareReplayConfig"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/shareReplay.ts#L16-L16",
        "signature": "function shareReplay<T>(\n  bufferSize?: number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "bufferSize",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowTime",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "single",
    "overloads": [
      {
        "file": "src/internal/operators/single.ts#L92-L96",
        "signature": "function single<T>(\n  predicate: (\n    value: T,\n    index: number,\n    source: Observable<T>\n  ) => boolean = defaultPredicate\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an observable that asserts that only one value is\nemitted from the observable that matches the predicate. If no\npredicate is provided, then it will assert that the observable\nonly emits one value.\n\nIn the event that the observable is empty, it will throw an\n{@link EmptyError}.\n\nIn the event that two values are found that match the predicate,\nor when there are two values emitted and no predicate, it will\nthrow a {@link SequenceError}\n\nIn the event that no values match the predicate, if one is provided,\nit will throw a {@link NotFoundError}\n\n## Example\n\nExpect only name beginning with 'B':\n\n```ts\nimport { of } from 'rxjs';\nimport { single } from 'rxjs/operators';\n\nconst source1 = of(\n{ name: 'Ben' },\n{ name: 'Tracy' },\n{ name: 'Laney' },\n{ name: 'Lily' }\n);\n\nsource1.pipe(\nsingle(x => x.name.startsWith('B'))\n)\n.subscribe(x => console.log(x));\n// Emits \"Ben\"\n\n\nconst source2 = of(\n{ name: 'Ben' },\n{ name: 'Tracy' },\n{ name: 'Bradley' },\n{ name: 'Lincoln' }\n);\n\nsource2.pipe(\nsingle(x => x.name.startsWith('B'))\n)\n.subscribe(x => console.log(x));\n// Error emitted: SequenceError('Too many values match')\n\n\nconst source3 = of(\n{ name: 'Laney' },\n{ name: 'Tracy' },\n{ name: 'Lily' },\n{ name: 'Lincoln' }\n);\n\nsource3.pipe(\nsingle(x => x.name.startsWith('B'))\n)\n.subscribe(x => console.log(x));\n// Error emitted: NotFoundError('No values match')\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link first}" }],
          ["see", { "__kind": "heading", "description": "{@link find}" }],
          ["see", { "__kind": "heading", "description": "{@link findIndex}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link elementAt}\n" }
          ],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "{NotFoundError} Delivers an NotFoundError to the Observer's `error`\ncallback if the Observable completes before any `next` notification was sent."
            }
          ],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "{SequenceError} Delivers a SequenceError if more than one value is emitted that matches the\nprovided predicate. If no predicate is provided, will deliver a SequenceError if more\nthat one value comes from the source"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Function}",
              "description": "predicate - A predicate function to evaluate items emitted by the source Observable.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\nthe predicate or `undefined` when no items match.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number, source: Observable<T>) => boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "skip",
    "overloads": [
      {
        "file": "src/internal/operators/skip.ts#L16-L18",
        "signature": "function skip<T>(count: number): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that skips the first `count` items emitted by the source Observable.\n\n![](skip.png)\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Number}",
              "description": "count - The number of times, items emitted by source Observable should be skipped.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that skips values emitted by the source Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "skip\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "count",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "skipLast",
    "overloads": [
      {
        "file": "src/internal/operators/skipLast.ts#L45-L47",
        "signature": "function skipLast<T>(count: number): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Skip the last `count` values emitted by the source Observable.\n\n![](skipLast.png)\n\n`skipLast` returns an Observable that accumulates a queue with a length\nenough to store the first `count` values. As more values are received,\nvalues are taken from the front of the queue and produced on the result\nsequence. This causes values to be delayed.\n\n## Example\nSkip the last 2 values of an Observable with many values\n```ts\nimport { range } from 'rxjs';\nimport { skipLast } from 'rxjs/operators';\n\nconst many = range(1, 5);\nconst skipLastTwo = many.pipe(skipLast(2));\nskipLastTwo.subscribe(x => console.log(x));\n\n// Results in:\n// 1 2 3\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link skip}" }],
          ["see", { "__kind": "heading", "description": "{@link skipUntil}" }],
          ["see", { "__kind": "heading", "description": "{@link skipWhile}" }],
          ["see", { "__kind": "heading", "description": "{@link take}\n" }],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "{ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\nArgumentOutOrRangeError if `i < 0`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "count Number of elements to skip from the end of the source Observable.",
              "type": ""
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that skips the last count values\nemitted by the source Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "skipLast\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "count",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "skipUntil",
    "overloads": [
      {
        "file": "src/internal/operators/skipUntil.ts#L47-L49",
        "signature": "function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n\nThe `skipUntil` operator causes the observable stream to skip the emission of values ​​until the passed in observable emits the first value.\nThis can be particularly useful in combination with user interactions, responses of http requests or waiting for specific times to pass by.\n\n![](skipUntil.png)\n\nInternally the `skipUntil` operator subscribes to the passed in observable (in the following called *notifier*) in order to recognize the emission\nof its first value. When this happens, the operator unsubscribes from the *notifier* and starts emitting the values of the *source*\nobservable. It will never let the *source* observable emit any values if the *notifier* completes or throws an error without emitting\na value before.\n\n## Example\n\nIn the following example, all emitted values ​​of the interval observable are skipped until the user clicks anywhere within the page.\n\n```ts\nimport { interval, fromEvent } from 'rxjs';\nimport { skipUntil } from 'rxjs/operators';\n\nconst intervalObservable = interval(1000);\nconst click = fromEvent(document, 'click');\n\nconst emitAfterClick = intervalObservable.pipe(\nskipUntil(click)\n);\n// clicked at 4.6s. output: 5...6...7...8........ or\n// clicked at 7.3s. output: 8...9...10..11.......\nconst subscribe = emitAfterClick.subscribe(value => console.log(value));\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable}",
              "description": "notifier - The second Observable that has to emit an item before the source Observable's elements begin to",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\nan item, then emits the remaining items."
            }
          ],
          ["name", { "__kind": "heading", "description": "skipUntil\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "notifier",
              "description": "",
              "type": "Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "skipWhile",
    "overloads": [
      {
        "file": "src/internal/operators/skipWhile.ts#L18-L20",
        "signature": "function skipWhile<T>(\n  predicate: (value: T, index: number) => boolean\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\ntrue, but emits all further source items as soon as the condition becomes false.\n\n![](skipWhile.png)\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Function}",
              "description": "predicate - A function to test each item emitted from the source Observable.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\nspecified predicate becomes false."
            }
          ],
          ["name", { "__kind": "heading", "description": "skipWhile\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number) => boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "startWith",
    "overloads": [
      {
        "file": "src/internal/operators/startWith.ts#L62-L71",
        "signature": "function startWith<T, D>(...values: D[]): OperatorFunction<T, T | D>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an observable that, at the moment of subscription, will synchronously emit all\nvalues provided to this operator, then subscribe to the source and mirror all of its emissions\nto subscribers.\n\nThis is a useful way to know when subscription has occurred on an existing observable.\n\n<span class=\"informal\">First emits its arguments in order, and then any\nemissions from the source.</span>\n\n![](startWith.png)\n\n## Examples\n\nEmit a value when a timer starts.\n\n```ts\nimport { timer } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\ntimer(1000)\n.pipe(\nmap(() => 'timer emit'),\nstartWith('timer start')\n)\n.subscribe(x => console.log(x));\n\n// results:\n// \"timer start\"\n// \"timer emit\"\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "Items you want the modified Observable to emit first.",
              "type": "D[]"
            }
          ],
          ["see", { "__kind": "heading", "description": "endWith" }],
          ["see", { "__kind": "heading", "description": "finalize" }],
          ["see", { "__kind": "heading", "description": "concat\n" }]
        ]
      },
      {
        "file": "src/internal/operators/startWith.ts#L8-L8",
        "signature": "function startWith<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/startWith.ts#L10-L10",
        "signature": "function startWith<T, D>(\n  v1: D,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | D>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "D" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/startWith.ts#L12-L12",
        "signature": "function startWith<T, D, E>(\n  v1: D,\n  v2: E,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | D | E>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "D" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v2", "description": "", "type": "E" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/startWith.ts#L14-L14",
        "signature": "function startWith<T, D, E, F>(\n  v1: D,\n  v2: E,\n  v3: F,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | D | E | F>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "D" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v2", "description": "", "type": "E" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v3", "description": "", "type": "F" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/startWith.ts#L16-L16",
        "signature": "function startWith<T, D, E, F, G>(\n  v1: D,\n  v2: E,\n  v3: F,\n  v4: G,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | D | E | F | G>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "D" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v2", "description": "", "type": "E" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v3", "description": "", "type": "F" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v4", "description": "", "type": "G" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/startWith.ts#L18-L18",
        "signature": "function startWith<T, D, E, F, G, H>(\n  v1: D,\n  v2: E,\n  v3: F,\n  v4: G,\n  v5: H,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | D | E | F | G | H>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "D" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v2", "description": "", "type": "E" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v3", "description": "", "type": "F" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v4", "description": "", "type": "G" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v5", "description": "", "type": "H" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/startWith.ts#L20-L20",
        "signature": "function startWith<T, D, E, F, G, H, I>(\n  v1: D,\n  v2: E,\n  v3: F,\n  v4: G,\n  v5: H,\n  v6: I,\n  scheduler: SchedulerLike\n): OperatorFunction<T, T | D | E | F | G | H | I>;",
        "info": [
          [
            "param",
            { "__kind": "table", "label": "v1", "description": "", "type": "D" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v2", "description": "", "type": "E" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v3", "description": "", "type": "F" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v4", "description": "", "type": "G" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v5", "description": "", "type": "H" }
          ],
          [
            "param",
            { "__kind": "table", "label": "v6", "description": "", "type": "I" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/startWith.ts#L22-L22",
        "signature": "function startWith<T, A extends any[] = T[]>(\n  ...values: A\n): OperatorFunction<T, T | ValueFromArray<A>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "",
              "type": "A"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "subscribeOn",
    "overloads": [
      {
        "file": "src/internal/operators/subscribeOn.ts#L108-L112",
        "signature": "function subscribeOn<T>(\n  scheduler: SchedulerLike,\n  delay: number = 0\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n\nWith `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n\nSchedulers control the speed and order of emissions to observers from an Observable stream.\n\n![](subscribeOn.png)\n\n## Example\n\nGiven the following code:\n\n```ts\nimport { of, merge } from 'rxjs';\n\nconst a = of(1, 2, 3);\nconst b = of(4, 5, 6);\n\nmerge(a, b).subscribe(console.log);\n\n// Outputs\n// 1\n// 2\n// 3\n// 4\n// 5\n// 6\n```\n\nBoth Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n\nIf we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emited by Observable `a`:\n\n```ts\nimport { of, merge, asyncScheduler } from 'rxjs';\nimport { subscribeOn } from 'rxjs/operators';\n\nconst a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\nconst b = of(4, 5, 6);\n\nmerge(a, b).subscribe(console.log);\n\n// Outputs\n// 4\n// 5\n// 6\n// 1\n// 2\n// 3\n```\n\nThe reason for this is that Observable `b` emits its values directly and synchronously like before\nbut the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "The {@link SchedulerLike} to perform subscription actions on.",
              "type": "SchedulerLike"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "delay",
              "description": "A delay to pass to the scheduler to delay subscriptions",
              "type": "number"
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "The source Observable modified so that its subscriptions happen on the specified {@link SchedulerLike}.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "switchAll",
    "overloads": [
      {
        "file": "src/internal/operators/switchAll.ts#L63-L65",
        "signature": "function switchAll<T>(): OperatorFunction<ObservableInput<T>, T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts a higher-order Observable into a first-order Observable\nproducing values only from the most recent observable sequence\n\n<span class=\"informal\">Flattens an Observable-of-Observables.</span>\n\n![](switchAll.png)\n\n`switchAll` subscribes to a source that is an observable of observables, also known as a\n\"higher-order observable\" (or `Observable<Observable<T>>`). It subscribes to the most recently\nprovided \"inner observable\" emitted by the source, unsubscribing from any previously subscribed\nto inner observable, such that only the most recent inner observable may be subscribed to at\nany point in time. The resulting observable returned by `switchAll` will only complete if the\nsource observable completes, *and* any currently subscribed to inner observable also has completed,\nif there are any.\n\n## Examples\nSpawn a new interval observable for each click event, but for every new\nclick, cancel the previous interval and subscribe to the new one.\n\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { switchAll, map, tap } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click').pipe(tap(() => console.log('click')));\nconst source = clicks.pipe(map((ev) => interval(1000)));\n\nsource.pipe(\nswitchAll()\n).subscribe(x => console.log(x));\n\n// Output\n// click\n// 1\n// 2\n// 3\n// 4\n// ...\n// click\n// 1\n// 2\n// 3\n// ...\n// click\n// ...\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link combineAll}" }],
          ["see", { "__kind": "heading", "description": "{@link concatAll}" }],
          ["see", { "__kind": "heading", "description": "{@link exhaust}" }],
          ["see", { "__kind": "heading", "description": "{@link switchMap}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link switchMapTo}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link mergeAll}\n" }]
        ]
      },
      {
        "file": "src/internal/operators/switchAll.ts#L5-L5",
        "signature": "function switchAll<T>(): OperatorFunction<ObservableInput<T>, T>;",
        "info": []
      },
      {
        "file": "src/internal/operators/switchAll.ts#L6-L6",
        "signature": "function switchAll<R>(): OperatorFunction<any, R>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "switchMap",
    "overloads": [
      {
        "file": "src/internal/operators/switchMap.ts#L80-L92",
        "signature": "function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (\n    outerValue: T,\n    innerValue: ObservedValueOf<O>,\n    outerIndex: number,\n    innerIndex: number\n  ) => R\n): OperatorFunction<T, ObservedValueOf<O> | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Projects each source value to an Observable which is merged in the output\nObservable, emitting values only from the most recently projected Observable.\n\n<span class=\"informal\">Maps each value to an Observable, then flattens all of\nthese inner Observables.</span>\n\n![](switchMap.png)\n\nReturns an Observable that emits items based on applying a function that you\nsupply to each item emitted by the source Observable, where that function\nreturns an (so-called \"inner\") Observable. Each time it observes one of these\ninner Observables, the output Observable begins emitting the items emitted by\nthat inner Observable. When a new inner Observable is emitted, `switchMap`\nstops emitting items from the earlier-emitted inner Observable and begins\nemitting items from the new one. It continues to behave like this for\nsubsequent inner Observables.\n\n## Example\nGenerate new Observable according to source Observable values\n```typescript\nimport { of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nconst switched = of(1, 2, 3).pipe(switchMap((x: number) => of(x, x ** 2, x ** 3)));\nswitched.subscribe(x => console.log(x));\n// outputs\n// 1\n// 1\n// 1\n// 2\n// 4\n// 8\n// ... and so on\n```\n\nRerun an interval Observable on every click event\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(switchMap((ev) => interval(1000)));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link concatMap}" }],
          ["see", { "__kind": "heading", "description": "{@link exhaustMap}" }],
          ["see", { "__kind": "heading", "description": "{@link mergeMap}" }],
          ["see", { "__kind": "heading", "description": "{@link switchAll}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link switchMapTo}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, ?index: number): ObservableInput} project A function",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits the result of applying the\nprojection function (and the optional deprecated `resultSelector`) to each item\nemitted by the source Observable and taking only the values from the most recently\nprojected inner Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "switchMap\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/switchMap.ts#L12-L12",
        "signature": "function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/switchMap.ts#L14-L14",
        "signature": "function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "undefined"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/switchMap.ts#L16-L16",
        "signature": "function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (\n    outerValue: T,\n    innerValue: ObservedValueOf<O>,\n    outerIndex: number,\n    innerIndex: number\n  ) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(value: T, index: number) => O"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "switchMapTo",
    "overloads": [
      {
        "file": "src/internal/operators/switchMapTo.ts#L51-L56",
        "signature": "function switchMapTo<T, I, R>(\n  innerObservable: ObservableInput<I>,\n  resultSelector?: (\n    outerValue: T,\n    innerValue: I,\n    outerIndex: number,\n    innerIndex: number\n  ) => R\n): OperatorFunction<T, I | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Projects each source value to the same Observable which is flattened multiple\ntimes with {@link switchMap} in the output Observable.\n\n<span class=\"informal\">It's like {@link switchMap}, but maps each value\nalways to the same inner Observable.</span>\n\n![](switchMapTo.png)\n\nMaps each source value to the given Observable `innerObservable` regardless\nof the source value, and then flattens those resulting Observables into one\nsingle Observable, which is the output Observable. The output Observables\nemits values only from the most recently emitted instance of\n`innerObservable`.\n\n## Example\nRerun an interval Observable on every click event\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { switchMapTo } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(switchMapTo(interval(1000)));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link concatMapTo}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link switchAll}" }],
          ["see", { "__kind": "heading", "description": "{@link switchMap}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link mergeMapTo}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{ObservableInput}",
              "description": "innerObservable An Observable to replace each value from",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable that emits items from the given\n`innerObservable` (and optionally transformed through the deprecated `resultSelector`)\nevery time a value is emitted on the source Observable, and taking only the values\nfrom the most recently projected inner Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "switchMapTo\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "innerObservable",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/switchMapTo.ts#L5-L5",
        "signature": "function switchMapTo<R>(\n  observable: ObservableInput<R>\n): OperatorFunction<any, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observable",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/switchMapTo.ts#L7-L7",
        "signature": "function switchMapTo<R>(\n  observable: ObservableInput<R>,\n  resultSelector: undefined\n): OperatorFunction<any, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observable",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "undefined"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/switchMapTo.ts#L9-L9",
        "signature": "function switchMapTo<T, I, R>(\n  observable: ObservableInput<I>,\n  resultSelector: (\n    outerValue: T,\n    innerValue: I,\n    outerIndex: number,\n    innerIndex: number\n  ) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observable",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resultSelector",
              "description": "",
              "type": "(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "take",
    "overloads": [
      {
        "file": "src/internal/operators/take.ts#L53-L62",
        "signature": "function take<T>(count: number): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits only the first `count` values emitted by the source Observable.\n\n<span class=\"informal\">Takes the first `count` values from the source, then\ncompletes.</span>\n\n![](take.png)\n\n`take` returns an Observable that emits only the first `count` values emitted\nby the source Observable. If the source emits fewer than `count` values then\nall of its values are emitted. After that, it completes, regardless if the\nsource completes.\n\n## Example\nTake the first 5 seconds of an infinite 1-second interval Observable\n```ts\nimport { interval } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst intervalCount = interval(1000);\nconst takeFive = intervalCount.pipe(take(5));\ntakeFive.subscribe(x => console.log(x));\n\n// Logs:\n// 0\n// 1\n// 2\n// 3\n// 4\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link takeLast}" }],
          ["see", { "__kind": "heading", "description": "{@link takeUntil}" }],
          ["see", { "__kind": "heading", "description": "{@link takeWhile}" }],
          ["see", { "__kind": "heading", "description": "{@link skip}\n" }],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "{ArgumentOutOfRangeError} When using `take(i)`, it delivers an\nArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`."
            }
          ],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "{TypeError} when no numeric argument is passed."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "count",
              "description": "The maximum number of `next` values to emit.",
              "type": "number"
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "An Observable that emits only the first `count`\nvalues emitted by the source Observable, or all of the values from the source\nif the source emits fewer than `count` values.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "takeLast",
    "overloads": [
      {
        "file": "src/internal/operators/takeLast.ts#L50-L65",
        "signature": "function takeLast<T>(count: number): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits only the last `count` values emitted by the source Observable.\n\n<span class=\"informal\">Remembers the latest `count` values, then emits those\nonly when the source completes.</span>\n\n![](takeLast.png)\n\n`takeLast` returns an Observable that emits at most the last `count` values\nemitted by the source Observable. If the source emits fewer than `count`\nvalues then all of its values are emitted. This operator must wait until the\n`complete` notification emission from the source in order to emit the `next`\nvalues on the output Observable, because otherwise it is impossible to know\nwhether or not more values will be emitted on the source. For this reason,\nall values are emitted synchronously, followed by the complete notification.\n\n## Example\nTake the last 3 values of an Observable with many values\n```ts\nimport { range } from 'rxjs';\nimport { takeLast } from 'rxjs/operators';\n\nconst many = range(1, 100);\nconst lastThree = many.pipe(takeLast(3));\nlastThree.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link take}" }],
          ["see", { "__kind": "heading", "description": "{@link takeUntil}" }],
          ["see", { "__kind": "heading", "description": "{@link takeWhile}" }],
          ["see", { "__kind": "heading", "description": "{@link skip}\n" }],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "{ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\nArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`."
            }
          ],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "{TypeError} If the count is not provided or is not a number.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "count",
              "description": "The maximum number of values to emit from the end of",
              "type": "number"
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "An Observable that emits at most the last count\nvalues emitted by the source Observable.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "takeUntil",
    "overloads": [
      {
        "file": "src/internal/operators/takeUntil.ts#L49-L51",
        "signature": "function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits the values emitted by the source Observable until a `notifier`\nObservable emits a value.\n\n<span class=\"informal\">Lets values pass until a second Observable,\n`notifier`, emits a value. Then, it completes.</span>\n\n![](takeUntil.png)\n\n`takeUntil` subscribes and begins mirroring the source Observable. It also\nmonitors a second Observable, `notifier` that you provide. If the `notifier`\nemits a value, the output Observable stops mirroring the source Observable\nand completes. If the `notifier` doesn't emit any value and completes\nthen `takeUntil` will pass all values.\n\n## Example\nTick every second until the first click happens\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nconst source = interval(1000);\nconst clicks = fromEvent(document, 'click');\nconst result = source.pipe(takeUntil(clicks));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link take}" }],
          ["see", { "__kind": "heading", "description": "{@link takeLast}" }],
          ["see", { "__kind": "heading", "description": "{@link takeWhile}" }],
          ["see", { "__kind": "heading", "description": "{@link skip}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable}",
              "description": "notifier The Observable whose first emitted value will",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that emits the values from the source\nObservable until such time as `notifier` emits its first value."
            }
          ],
          ["name", { "__kind": "heading", "description": "takeUntil\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "notifier",
              "description": "",
              "type": "Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "takeWhile",
    "overloads": [
      {
        "file": "src/internal/operators/takeWhile.ts#L54-L59",
        "signature": "function takeWhile<T>(\n  predicate: (value: T, index: number) => boolean,\n  inclusive = false\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits values emitted by the source Observable so long as each value satisfies\nthe given `predicate`, and then completes as soon as this `predicate` is not\nsatisfied.\n\n<span class=\"informal\">Takes values from the source only while they pass the\ncondition given. When the first value does not satisfy, it completes.</span>\n\n![](takeWhile.png)\n\n`takeWhile` subscribes and begins mirroring the source Observable. Each value\nemitted on the source is given to the `predicate` function which returns a\nboolean, representing a condition to be satisfied by the source values. The\noutput Observable emits the source values until such time as the `predicate`\nreturns false, at which point `takeWhile` stops mirroring the source\nObservable and completes the output Observable.\n\n## Example\nEmit click events only while the clientX property is greater than 200\n```ts\nimport { fromEvent } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link take}" }],
          ["see", { "__kind": "heading", "description": "{@link takeLast}" }],
          ["see", { "__kind": "heading", "description": "{@link takeUntil}" }],
          ["see", { "__kind": "heading", "description": "{@link skip}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T, index: number): boolean} predicate A function that",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{boolean}",
              "description": "inclusive When set to `true` the value that caused",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that emits the values from the source\nObservable so long as each value satisfies the condition defined by the\n`predicate`, then completes."
            }
          ],
          ["name", { "__kind": "heading", "description": "takeWhile\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "inclusive",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/takeWhile.ts#L7-L7",
        "signature": "function takeWhile<T, S extends T>(\n  predicate: (value: T, index: number) => value is S\n): OperatorFunction<T, S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number) => value is S"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/takeWhile.ts#L8-L8",
        "signature": "function takeWhile<T, S extends T>(\n  predicate: (value: T, index: number) => value is S,\n  inclusive: false\n): OperatorFunction<T, S>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number) => value is S"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "inclusive",
              "description": "",
              "type": "false"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/takeWhile.ts#L9-L9",
        "signature": "function takeWhile<T>(\n  predicate: (value: T, index: number) => boolean,\n  inclusive?: boolean\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "",
              "type": "(value: T, index: number) => boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "inclusive",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "tap",
    "overloads": [
      {
        "file": "src/internal/operators/tap.ts#L68-L74",
        "signature": "function tap<T>(\n  nextOrObserver?: PartialObserver<T> | ((x: T) => void) | null,\n  error?: ((e: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Perform a side effect for every emission on the source Observable, but return\nan Observable that is identical to the source.\n\n<span class=\"informal\">Intercepts each emission on the source and runs a\nfunction, but returns an output which is identical to the source as long as errors don't occur.</span>\n\n![](tap.png)\n\nReturns a mirrored Observable of the source Observable, but modified so that\nthe provided Observer is called to perform a side effect for every value,\nerror, and completion emitted by the source. Any errors that are thrown in\nthe aforementioned Observer or handlers are safely sent down the error path\nof the output Observable.\n\nThis operator is useful for debugging your Observables for the correct values\nor performing other side effects.\n\nNote: this is different to a `subscribe` on the Observable. If the Observable\nreturned by `tap` is not subscribed, the side effects specified by the\nObserver will never happen. `tap` therefore simply spies on existing\nexecution, it does not trigger an execution to happen like `subscribe` does.\n\n## Example\nMap every click to the clientX position of that click, while also logging the click event\n```ts\nimport { fromEvent } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst positions = clicks.pipe(\ntap(ev => console.log(ev)),\nmap(ev => ev.clientX),\n);\npositions.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link map}" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link Observable#subscribe}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observer|function}",
              "description": "[nextOrObserver] A normal Observer object or a",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "[error] Callback for errors in the source.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function}",
              "description": "[complete] Callback for the completion of the source.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable identical to the source, but runs the\nspecified Observer or callback(s) for each item."
            }
          ],
          ["name", { "__kind": "heading", "description": "tap\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "nextOrObserver",
              "description": "",
              "type": "import(\"C:/Users/tdeschryver/dev/forks/rxjs/src/internal/types\").NextObserver<T> | import(\"C:/Users/tdeschryver/dev/forks/rxjs/src/internal/types\").ErrorObserver<T> | import(\"C:/Users/tdeschryver/dev/forks/rxjs/src/internal/types\").CompletionObserver<T> | ((x: T) => void)"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "",
              "type": "(e: any) => void"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "complete",
              "description": "",
              "type": "() => void"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/tap.ts#L11-L11",
        "signature": "function tap<T>(\n  next: null | undefined,\n  error: null | undefined,\n  complete: () => void\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "next",
              "description": "",
              "type": "null"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "",
              "type": "null"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "complete",
              "description": "",
              "type": "() => void"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/tap.ts#L13-L13",
        "signature": "function tap<T>(\n  next: null | undefined,\n  error: (error: any) => void,\n  complete?: () => void\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "next",
              "description": "",
              "type": "null"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "",
              "type": "(error: any) => void"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "complete",
              "description": "",
              "type": "() => void"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/tap.ts#L15-L15",
        "signature": "function tap<T>(\n  next: (value: T) => void,\n  error: null | undefined,\n  complete: () => void\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "next",
              "description": "",
              "type": "(value: T) => void"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "",
              "type": "null"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "complete",
              "description": "",
              "type": "() => void"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/tap.ts#L16-L16",
        "signature": "function tap<T>(\n  next?: (x: T) => void,\n  error?: (e: any) => void,\n  complete?: () => void\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "next",
              "description": "",
              "type": "(x: T) => void"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "",
              "type": "(e: any) => void"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "complete",
              "description": "",
              "type": "() => void"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/tap.ts#L17-L17",
        "signature": "function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observer",
              "description": "",
              "type": "PartialObserver<T>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "throttle",
    "overloads": [
      {
        "file": "src/internal/operators/throttle.ts#L66-L69",
        "signature": "function throttle<T>(\n  durationSelector: (value: T) => SubscribableOrPromise<any>,\n  config: ThrottleConfig = defaultThrottleConfig\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits a value from the source Observable, then ignores subsequent source\nvalues for a duration determined by another Observable, then repeats this\nprocess.\n\n<span class=\"informal\">It's like {@link throttleTime}, but the silencing\nduration is determined by a second Observable.</span>\n\n![](throttle.png)\n\n`throttle` emits the source Observable values on the output Observable\nwhen its internal timer is disabled, and ignores source values when the timer\nis enabled. Initially, the timer is disabled. As soon as the first source\nvalue arrives, it is forwarded to the output Observable, and then the timer\nis enabled by calling the `durationSelector` function with the source value,\nwhich returns the \"duration\" Observable. When the duration Observable emits a\nvalue or completes, the timer is disabled, and this process repeats for the\nnext source value.\n\n## Example\nEmit clicks at a rate of at most one click per second\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { throttle } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(throttle(ev => interval(1000)));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link audit}" }],
          ["see", { "__kind": "heading", "description": "{@link debounce}" }],
          ["see", { "__kind": "heading", "description": "{@link delayWhen}" }],
          ["see", { "__kind": "heading", "description": "{@link sample}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link throttleTime}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "T): SubscribableOrPromise} durationSelector A function",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Object}",
              "description": "config a configuration object to define `leading` and `trailing` behavior. Defaults",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that performs the throttle operation to\nlimit the rate of emissions from the source."
            }
          ],
          ["name", { "__kind": "heading", "description": "throttle\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "durationSelector",
              "description": "",
              "type": "(value: T) => SubscribableOrPromise<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "",
              "type": "ThrottleConfig"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "throttleTime",
    "overloads": [
      {
        "file": "src/internal/operators/throttleTime.ts#L88-L92",
        "signature": "function throttleTime<T>(\n  duration: number,\n  scheduler: SchedulerLike = async,\n  config: ThrottleConfig = defaultThrottleConfig\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Emits a value from the source Observable, then ignores subsequent source\nvalues for `duration` milliseconds, then repeats this process.\n\n<span class=\"informal\">Lets a value pass, then ignores source values for the\nnext `duration` milliseconds.</span>\n\n![](throttleTime.png)\n\n`throttleTime` emits the source Observable values on the output Observable\nwhen its internal timer is disabled, and ignores source values when the timer\nis enabled. Initially, the timer is disabled. As soon as the first source\nvalue arrives, it is forwarded to the output Observable, and then the timer\nis enabled. After `duration` milliseconds (or the time unit determined\ninternally by the optional `scheduler`) has passed, the timer is disabled,\nand this process repeats for the next source value. Optionally takes a\n{@link SchedulerLike} for managing timers.\n\n## Examples\n\n#### Limit click rate\n\nEmit clicks at a rate of at most one click per second\n```ts\nimport { fromEvent } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(throttleTime(1000));\nresult.subscribe(x => console.log(x));\n```\n\n#### Double Click\n\nThe following example only emits clicks which happen within a subsequent\ndelay of 400ms of the previous click. This for example can emulate a double\nclick. It makes use of the `trailing` parameter of the throttle configuration.\n\n```ts\nimport { fromEvent, asyncScheduler } from 'rxjs';\nimport { throttleTime, withLatestFrom } from 'rxjs/operators';\n\n// defaultThottleConfig = { leading: true, trailing: false }\nconst throttleConfig = {\nleading: false,\ntrailing: true\n}\n\nconst click = fromEvent(document, 'click');\nconst doubleClick = click.pipe(\nthrottleTime(400, asyncScheduler, throttleConfig)\n);\n\ndoubleClick.subscribe((throttleValue: Event) => {\nconsole.log(`Double-clicked! Timestamp: ${throttleValue.timeStamp}`);\n});\n```\n\nIf you enable the `leading` parameter in this example, the output would be the primary click and\nthe double click, but restricts additional clicks within 400ms.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link auditTime}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link debounceTime}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link delay}" }],
          ["see", { "__kind": "heading", "description": "{@link sampleTime}" }],
          ["see", { "__kind": "heading", "description": "{@link throttle}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "duration Time to wait before emitting another value after",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler=async] The {@link SchedulerLike} to use for",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Object}",
              "description": "config a configuration object to define `leading` and",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<T>} An Observable that performs the throttle operation to\nlimit the rate of emissions from the source."
            }
          ],
          ["name", { "__kind": "heading", "description": "throttleTime\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "duration",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "",
              "type": "ThrottleConfig"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "throwIfEmpty",
    "overloads": [
      {
        "file": "src/internal/operators/throwIfEmpty.ts#L38-L42",
        "signature": "function throwIfEmpty<T>(\n  errorFactory: () => any = defaultErrorFactory\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the source observable completes without emitting a value, it will emit\nan error. The error will be created at that time by the optional\n`errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n\n![](throwIfEmpty.png)\n\n## Example\n```ts\nimport { fromEvent, timer } from 'rxjs';\nimport { throwIfEmpty, takeUntil } from 'rxjs/operators';\n\nconst click$ = fromEvent(document, 'click');\n\nclick$.pipe(\ntakeUntil(timer(1000)),\nthrowIfEmpty(\n() => new Error('the document was not clicked within 1 second')\n),\n)\n.subscribe({\nnext() { console.log('The button was clicked'); },\nerror(err) { console.error(err); }\n});\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "errorFactory",
              "description": "A factory function called to produce the",
              "type": "() => any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "timeInterval",
    "overloads": [
      {
        "file": "src/internal/operators/timeInterval.ts#L53-L64",
        "signature": "function timeInterval<T>(\n  scheduler: SchedulerLike = async\n): OperatorFunction<T, TimeInterval<T>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nEmits an object containing the current value, and the time that has\npassed between emitting the current value and the previous value, which is\ncalculated by using the provided `scheduler`'s `now()` method to retrieve\nthe current time at each emission, then calculating the difference. The `scheduler`\ndefaults to {@link asyncScheduler}, so by default, the `interval` will be in\nmilliseconds.\n\n<span class=\"informal\">Convert an Observable that emits items into one that\nemits indications of the amount of time elapsed between those emissions.</span>\n\n![](timeinterval.png)\n\n## Examples\nEmit interval between current value with the last value\n\n```ts\nconst seconds = interval(1000);\n\nseconds.pipe(timeInterval())\n.subscribe(\nvalue => console.log(value),\nerr => console.log(err),\n);\n\nseconds.pipe(timeout(900))\n.subscribe(\nvalue => console.log(value),\nerr => console.log(err),\n);\n\n// NOTE: The values will never be this precise,\n// intervals created with `interval` or `setInterval`\n// are non-deterministic.\n\n// {value: 0, interval: 1000}\n// {value: 1, interval: 1000}\n// {value: 2, interval: 1000}\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{SchedulerLike}",
              "description": "[scheduler] Scheduler used to get the current time.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<{ interval: number, value: T }>} Observable that emit infomation about value and interval"
            }
          ],
          ["name", { "__kind": "heading", "description": "timeInterval\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "timeout",
    "overloads": [
      {
        "file": "src/internal/operators/timeout.ts#L308-L398",
        "signature": "function timeout<T, R, M>(\n  dueOrConfig: number | Date | TimeoutConfig<T, R, M>,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nErrors if Observable does not emit a value in given time span.\n\n<span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n\n![](timeout.png)\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "dueOrConfig",
              "description": "",
              "type": "number | Date | TimeoutConfig<T, R, M>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/timeout.ts#L173-L175",
        "signature": "function timeout<T, R, M = unknown>(\n  config: TimeoutConfig<T, R, M> & {\n    with: (info: TimeoutInfo<T, M>) => ObservableInput<R>;\n  }\n): OperatorFunction<T, T | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If `with` is provided, this will return an observable that will switch to a different observable if the source\ndoes not push values within the specified time parameters.\n\n<span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n\nThe first thing to know about the configuration is if you do not provide a `with` property to the configuration,\nwhen timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\nfunction provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\nthe settings in `first` and `each`.\n\nThe `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\npoint of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\nthe first value from the source _only_. The timings of all subsequent values  from the source will be checked\nagainst the time period provided by `each`, if it was provided.\n\nThe `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\ntime the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n`first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\nvalue and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n\n### Example\n\nEmit a custom error if there is too much time between values\n\n```ts\nimport { interval, throwError } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\nclass CustomTimeoutError extends Error {\nconstructor() {\nsuper('It was too slow');\nthis.name = 'CustomTimeoutError';\n}\n}\n\nconst slow$ = interval(900);\n\nslow$.pipe(\ntimeout({\neach: 1000,\nwith: () => throwError(new CustomTimeoutError())\n})\n)\n.subscribe({\nerror: console.error\n})\n```\n\n### Example\n\nSwitch to a faster observable if your source is slow.\n\n```ts\nimport { interval, throwError } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\nconst slow$ = interval(900);\nconst fast$ = interval(500);\n\nslow$.pipe(\ntimeout({\neach: 1000,\nwith: () => fast$,\n})\n)\n.subscribe(console.log)\n```"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "The configuration for the timeout.",
              "type": "TimeoutConfig<T, R, M> & { with: (info: TimeoutInfo<T, M>) => ObservableInput<R>; }"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/timeout.ts#L270-L270",
        "signature": "function timeout<T, M = unknown>(\n  config: Omit<TimeoutConfig<T, any, M>, \"with\">\n): OperatorFunction<T, T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an observable that will error or switch to a different observable if the source does not push values\nwithin the specified time parameters.\n\n<span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n\nThe first thing to know about the configuration is if you do not provide a `with` property to the configuration,\nwhen timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\nfunction provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\nthe settings in `first` and `each`.\n\nThe `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\npoint of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\nthe first value from the source _only_. The timings of all subsequent values  from the source will be checked\nagainst the time period provided by `each`, if it was provided.\n\nThe `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\ntime the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n`first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\nvalue and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n\n### Handling TimeoutErrors\n\nIf no `with` property was provided, subscriptions to the resulting observable may emit an error of {@link TimeoutError}.\nThe timeout error provides useful information you can examine when you're handling the error. The most common way to handle\nthe error would be with {@link catchError}, although you could use {@link tap} or just the error handler in your `subscribe` call\ndirectly, if your error handling is only a side effect (such as notifying the user, or logging).\n\nIn this case, you would check the error for `instanceof TimeoutError` to validate that the error was indeed from `timeout`, and\nnot from some other source. If it's not from `timeout`, you should probably rethrow it if you're in a `catchError`.\n\n\n### Example\n\nEmit a {@link TimeoutError} if the first value, and _only_ the first value, does not arrive within 5 seconds\n\n```ts\nimport { interval } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\n// A random interval that lasts between 0 and 10 seconds per tick\nconst source$ = interval(Math.round(Math.random() * 10000));\n\nsource$.pipe(\ntimeout({ first: 5000 })\n)\n.subscribe(console.log);\n```\n\n### Example\n\nEmit a {@link TimeoutError} if the source waits longer than 5 seconds between any two values or the first value\nand subscription.\n\n```ts\nimport { timer } from 'rxjs';\nimport { timeout, expand } from 'rxjs/operators';\n\nconst getRandomTime = () => Math.round(Math.random() * 10000);\n\n// An observable that waits a random amount of time between each delivered value\nconst source$ = timer(getRandomTime()).pipe(\nexpand(() => timer(getRandomTime()))\n)\n\nsource$.pipe(\ntimeout({ each: 5000 })\n)\n.subscribe(console.log);\n```\n\n### Example\n\nEmit a {@link TimeoutError} if the the source does not emit before 7 seconds, _or_ if the source waits longer than\n5 seconds between any two values after the first.\n\n```ts\nimport { timer } from 'rxjs';\nimport { timeout, expand } from 'rxjs/operators';\n\nconst getRandomTime = () => Math.round(Math.random() * 10000);\n\n// An observable that waits a random amount of time between each delivered value\nconst source$ = timer(getRandomTime()).pipe(\nexpand(() => timer(getRandomTime()))\n)\n\nsource$.pipe(\ntimeout({ first: 7000, each: 5000 })\n)\n.subscribe(console.log);\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "",
              "type": "Pick<TimeoutConfig<T, any, M>, \"each\" | \"first\" | \"scheduler\" | \"meta\">"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/timeout.ts#L284-L284",
        "signature": "function timeout<T>(\n  first: Date,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an observable that will error if the source does not push its first value before the specified time passed as a `Date`.\nThis is functionally the same as `timeout({ first: someDate })`.\n\n<span class=\"informal\">Errors if the first value doesn't show up before the given date and time</span>\n\n![](timeout.png)\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "first",
              "description": "The date to at which the resulting observable will timeout if the source observable",
              "type": "Date"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "The scheduler to use. Defaults to {@link asyncScheduler}.",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/timeout.ts#L298-L298",
        "signature": "function timeout<T>(\n  each: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns an observable that will error if the source does not push a value within the specified time in milliseconds.\nThis is functionally the same as `timeout({ each: milliseconds })`.\n\n<span class=\"informal\">Errors if it waits too long between any value</span>\n\n![](timeout.png)\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "each",
              "description": "The time allowed between each pushed value from the source before the resulting observable",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "The scheduler to use. Defaults to {@link asyncScheduler}.",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "timeoutWith",
    "overloads": [
      {
        "file": "src/internal/operators/timeoutWith.ts#L84-L117",
        "signature": "function timeoutWith<T, R>(\n  due: number | Date,\n  withObservable: ObservableInput<R>,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "due",
              "description": "",
              "type": "number | Date"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "withObservable",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/timeoutWith.ts#L21-L21",
        "signature": "function timeoutWith<T, R>(\n  dueBy: Date,\n  switchTo: ObservableInput<R>,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the time of the Date object passed arrives before the first value arrives from the source, it will unsubscribe\nfrom the source and switch the subscription to another observable.\n\n<span class=\"informal\">Use to switch to a different observable if the first value doesn't arrive by a specific time</span>\n\nCan be used to set a timeout only for the first value, however it's recommended to use the {@link timeout} operator with\nthe `first` configuration to get that effect.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "dueBy",
              "description": "The exact time, as a `Date`, at which the timeout will be triggered if the first value does not arrive.",
              "type": "Date"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "switchTo",
              "description": "The observable to switch to when timeout occurs.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}",
              "type": "SchedulerLike"
            }
          ],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "This will be removed in v8. Use the configuration object with {@link timeout} instead: `timeoutWith(someDate, a$, scheduler)` -> `timeout({ first: someDate, with: () => a$, scheduler })`\n"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/timeoutWith.ts#L82-L82",
        "signature": "function timeoutWith<T, R>(\n  waitFor: number,\n  switchTo: ObservableInput<R>,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "When the passed timespan ellapses before the source emits any given value, it will unsubscribe from the source,\nand switch the subscription to another observable.\n\n<span class=\"informal\">Used to switch to a different observable if your source is being slow</span>\n\nUseful in cases where:\n\n- You want to switch to a different source that may be faster\n- You want to notify a user that the data stream is slow\n- You want to emit a custom error rather than the {@link TimeoutError} emitted\nby the default usage of {@link timeout}.\n\n## Example\n\nFallback to a faster observable\n\n```ts\nimport { interval } from 'rxjs';\nimport { timeoutWith } from 'rxjs/operators';\n\nconst slow$ = interval(1000);\nconst faster$ = interval(500);\n\nslow$.pipe(\ntimeoutWith(900, faster$)\n)\n.subscribe(console.log)\n```\n\n### Example\n\nEmit your own custom timeout error\n\n```ts\nimport { interval, throwError } from 'rxjs';\nimport { timeoutWith } from 'rxjs/operators';\n\nclass CustomTimeoutError extends Error {\nconstructor() {\nsuper('It was too slow');\nthis.name = 'CustomTimeoutError';\n}\n}\n\nconst slow = interval(1000);\n\nslow$.pipe(\ntimeoutWith(900, throwError(new CustomTimeoutError()))\n)\n.subscribe({\nerror: console.error\n})\n```"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "waitFor",
              "description": "The time allowed between values from the source before timeout is triggered.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "switchTo",
              "description": "The observable to switch to when timeout occurs.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}",
              "type": "SchedulerLike"
            }
          ],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "This will be removed in v8. Use the configuration object with {@link timeout} instead: `timeoutWith(100, a$, scheduler)` -> `timeout({ each: 100, with: () => a$, scheduler })`\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "timestamp",
    "overloads": [
      {
        "file": "src/internal/operators/timestamp.ts#L36-L38",
        "signature": "function timestamp<T>(\n  timestampProvider: TimestampProvider = dateTimestampProvider\n): OperatorFunction<T, Timestamp<T>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Attaches a timestamp to each item emitted by an observable indicating when it was emitted\n\nThe `timestamp` operator maps the *source* observable stream to an object of type\n`{value: T, timestamp: R}`. The properties are generically typed. The `value` property contains the value\nand type of the *source* observable. The `timestamp` is generated by the schedulers `now` function. By\ndefault it uses the *async* scheduler which simply returns `Date.now()` (milliseconds since 1970/01/01\n00:00:00:000) and therefore is of type `number`.\n\n![](timestamp.png)\n\n## Example\n\nIn this example there is a timestamp attached to the documents click event.\n\n```ts\nimport { fromEvent } from 'rxjs';\nimport { timestamp } from 'rxjs/operators';\n\nconst clickWithTimestamp = fromEvent(document, 'click').pipe(\ntimestamp()\n);\n\n// Emits data of type {value: MouseEvent, timestamp: number}\nclickWithTimestamp.subscribe(data => {\nconsole.log(data);\n});\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "timestampProvider",
              "description": "An object with a `now()` method used to get the current timestamp.",
              "type": "TimestampProvider"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "toArray",
    "overloads": [
      {
        "file": "src/internal/operators/toArray.ts#L42-L44",
        "signature": "function toArray<T>(): OperatorFunction<T, T[]>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Collects all source emissions and emits them as an array when the source completes.\n\n<span class=\"informal\">Get all values inside an array when the source completes</span>\n\n![](toArray.png)\n\n`toArray` will wait until the source Observable completes before emitting\nthe array containing all emissions. When the source Observable errors no\narray will be emitted.\n\n## Example\n```ts\nimport { interval } from 'rxjs';\nimport { toArray, take } from 'rxjs/operators';\n\nconst source = interval(1000);\nconst example = source.pipe(\ntake(10),\ntoArray()\n);\n\nconst subscribe = example.subscribe(val => console.log(val));\n\n// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n```"
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "An array from an observable sequence."
            }
          ],
          ["name", { "__kind": "heading", "description": "toArray\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "window",
    "overloads": [
      {
        "file": "src/internal/operators/window.ts#L51-L55",
        "signature": "function window<T>(\n  windowBoundaries: Observable<any>\n): OperatorFunction<T, Observable<T>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Branch out the source Observable values as a nested Observable whenever\n`windowBoundaries` emits.\n\n<span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\ninstead of an array.</span>\n\n![](window.png)\n\nReturns an Observable that emits windows of items it collects from the source\nObservable. The output Observable emits connected, non-overlapping\nwindows. It emits the current window and opens a new one whenever the\nObservable `windowBoundaries` emits an item. Because each window is an\nObservable, the output is a higher-order Observable.\n\n## Example\nIn every window of 1 second each, emit at most 2 click events\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { window, mergeAll, map, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst sec = interval(1000);\nconst result = clicks.pipe(\nwindow(sec),\nmap(win => win.pipe(take(2))), // each window has at most 2 emissions\nmergeAll(),              // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n```"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowCount}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link windowTime}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowToggle}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link windowWhen}" }],
          ["see", { "__kind": "heading", "description": "{@link buffer}\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable<any>}",
              "description": "windowBoundaries An Observable that completes the",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<Observable<T>>} An Observable of windows, which are\nObservables emitting values of the source Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "window\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowBoundaries",
              "description": "",
              "type": "Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "windowCount",
    "overloads": [
      {
        "file": "src/internal/operators/windowCount.ts#L70-L75",
        "signature": "function windowCount<T>(\n  windowSize: number,\n  startWindowEvery: number = 0\n): OperatorFunction<T, Observable<T>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Branch out the source Observable values as a nested Observable with each\nnested Observable emitting at most `windowSize` values.\n\n<span class=\"informal\">It's like {@link bufferCount}, but emits a nested\nObservable instead of an array.</span>\n\n![](windowCount.png)\n\nReturns an Observable that emits windows of items it collects from the source\nObservable. The output Observable emits windows every `startWindowEvery`\nitems, each containing no more than `windowSize` items. When the source\nObservable completes or encounters an error, the output Observable emits\nthe current window and propagates the notification from the source\nObservable. If `startWindowEvery` is not provided, then new windows are\nstarted immediately at the start of the source and when each window completes\nwith size `windowSize`.\n\n## Examples\nIgnore every 3rd click event, starting from the first one\n```ts\nimport { fromEvent } from 'rxjs';\nimport { windowCount, map, mergeAll, skip } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(\nwindowCount(3),\nmap(win => win.pipe(skip(1))), // skip first of every 3 clicks\nmergeAll()                     // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n```\n\nIgnore every 3rd click event, starting from the third one\n```ts\nimport { fromEvent } from 'rxjs';\nimport { windowCount, mergeAll } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(\nwindowCount(2, 3),\nmergeAll(),              // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link window}" }],
          ["see", { "__kind": "heading", "description": "{@link windowTime}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowToggle}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link windowWhen}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferCount}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "windowSize The maximum number of values emitted by each",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{number}",
              "description": "[startWindowEvery] Interval at which to start a new window.",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<Observable<T>>} An Observable of windows, which in turn\nare Observable of values."
            }
          ],
          ["name", { "__kind": "heading", "description": "windowCount\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowSize",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "startWindowEvery",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "windowTime",
    "overloads": [
      {
        "file": "src/internal/operators/windowTime.ts#L100-L124",
        "signature": "function windowTime<T>(\n  windowTimeSpan: number\n): OperatorFunction<T, Observable<T>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Branch out the source Observable values as a nested Observable periodically\nin time.\n\n<span class=\"informal\">It's like {@link bufferTime}, but emits a nested\nObservable instead of an array.</span>\n\n![](windowTime.png)\n\nReturns an Observable that emits windows of items it collects from the source\nObservable. The output Observable starts a new window periodically, as\ndetermined by the `windowCreationInterval` argument. It emits each window\nafter a fixed timespan, specified by the `windowTimeSpan` argument. When the\nsource Observable completes or encounters an error, the output Observable\nemits the current window and propagates the notification from the source\nObservable. If `windowCreationInterval` is not provided, the output\nObservable starts a new window when the previous window of duration\n`windowTimeSpan` completes. If `maxWindowCount` is provided, each window\nwill emit at most fixed number of values. Window will complete immediately\nafter emitting last value and next one still will open as specified by\n`windowTimeSpan` and `windowCreationInterval` arguments.\n\n## Examples\nIn every window of 1 second each, emit at most 2 click events\n```ts\nimport { fromEvent } from 'rxjs';\nimport { windowTime, map, mergeAll, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(\nwindowTime(1000),\nmap(win => win.pipe(take(2))), // each window has at most 2 emissions\nmergeAll(),                    // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n```\n\nEvery 5 seconds start a window 1 second long, and emit at most 2 click events per window\n```ts\nimport { fromEvent } from 'rxjs';\nimport { windowTime, map, mergeAll, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(\nwindowTime(1000, 5000),\nmap(win => win.pipe(take(2))), // each window has at most 2 emissions\nmergeAll(),                    // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n```\n\nSame as example above but with maxWindowCount instead of take\n```ts\nimport { fromEvent } from 'rxjs';\nimport { windowTime, mergeAll } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(\nwindowTime(1000, 5000, 2), // each window has still at most 2 emissions\nmergeAll(),                // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link window}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowCount}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowToggle}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link windowWhen}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferTime}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowTimeSpan",
              "description": "The amount of time to fill each window.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowCreationInterval",
              "description": "The interval at which to start new",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "maxWindowSize",
              "description": "Max number of",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "The scheduler on which to schedule the",
              "type": ""
            }
          ],
          [
            "returnAn",
            {
              "__kind": "heading",
              "description": "observable of windows, which in turn are Observables.\n"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/windowTime.ts#L12-L13",
        "signature": "function windowTime<T>(\n  windowTimeSpan: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, Observable<T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "windowTimeSpan",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/windowTime.ts#L14-L16",
        "signature": "function windowTime<T>(\n  windowTimeSpan: number,\n  windowCreationInterval: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, Observable<T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "windowTimeSpan",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowCreationInterval",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/windowTime.ts#L17-L20",
        "signature": "function windowTime<T>(\n  windowTimeSpan: number,\n  windowCreationInterval: number,\n  maxWindowSize: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, Observable<T>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "windowTimeSpan",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "windowCreationInterval",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "maxWindowSize",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scheduler",
              "description": "",
              "type": "SchedulerLike"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "windowToggle",
    "overloads": [
      {
        "file": "src/internal/operators/windowToggle.ts#L57-L60",
        "signature": "function windowToggle<T, O>(\n  openings: Observable<O>,\n  closingSelector: (openValue: O) => Observable<any>\n): OperatorFunction<T, Observable<T>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Branch out the source Observable values as a nested Observable starting from\nan emission from `openings` and ending when the output of `closingSelector`\nemits.\n\n<span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\nObservable instead of an array.</span>\n\n![](windowToggle.png)\n\nReturns an Observable that emits windows of items it collects from the source\nObservable. The output Observable emits windows that contain those items\nemitted by the source Observable between the time when the `openings`\nObservable emits an item and when the Observable returned by\n`closingSelector` emits an item.\n\n## Example\nEvery other second, emit the click events from the next 500ms\n```ts\nimport { fromEvent, interval, EMPTY } from 'rxjs';\nimport { windowToggle, mergeAll } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst openings = interval(1000);\nconst result = clicks.pipe(\nwindowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\nmergeAll()\n);\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link window}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowCount}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link windowTime}" }],
          ["see", { "__kind": "heading", "description": "{@link windowWhen}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferToggle}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Observable<O>}",
              "description": "openings An observable of notifications to start new",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function(value:",
              "description": "O): Observable} closingSelector A function that takes",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<Observable<T>>} An observable of windows, which in turn\nare Observables."
            }
          ],
          ["name", { "__kind": "heading", "description": "windowToggle\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "openings",
              "description": "",
              "type": "Observable<O>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "closingSelector",
              "description": "",
              "type": "(openValue: O) => Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "windowWhen",
    "overloads": [
      {
        "file": "src/internal/operators/windowWhen.ts#L53-L57",
        "signature": "function windowWhen<T>(\n  closingSelector: () => Observable<any>\n): OperatorFunction<T, Observable<T>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Branch out the source Observable values as a nested Observable using a\nfactory function of closing Observables to determine when to start a new\nwindow.\n\n<span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\nObservable instead of an array.</span>\n\n![](windowWhen.png)\n\nReturns an Observable that emits windows of items it collects from the source\nObservable. The output Observable emits connected, non-overlapping windows.\nIt emits the current window and opens a new one whenever the Observable\nproduced by the specified `closingSelector` function emits an item. The first\nwindow is opened immediately when subscribing to the output Observable.\n\n## Example\nEmit only the first two clicks events in every window of [1-5] random seconds\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { windowWhen, map, mergeAll, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst result = clicks.pipe(\nwindowWhen(() => interval(1000 + Math.random() * 4000)),\nmap(win => win.pipe(take(2))),     // each window has at most 2 emissions\nmergeAll()                         // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "{@link window}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowCount}" }
          ],
          ["see", { "__kind": "heading", "description": "{@link windowTime}" }],
          [
            "see",
            { "__kind": "heading", "description": "{@link windowToggle}" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link bufferWhen}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{function():",
              "description": "Observable} closingSelector A function that takes no",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable<Observable<T>>} An observable of windows, which in turn\nare Observables."
            }
          ],
          ["name", { "__kind": "heading", "description": "windowWhen\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "closingSelector",
              "description": "",
              "type": "() => Observable<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "withLatestFrom",
    "overloads": [
      {
        "file": "src/internal/operators/withLatestFrom.ts#L69-L78",
        "signature": "function withLatestFrom<T, R>(\n  ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Combines the source Observable with other Observables to create an Observable\nwhose values are calculated from the latest values of each, only when the\nsource emits.\n\n<span class=\"informal\">Whenever the source Observable emits a value, it\ncomputes a formula using that value plus the latest values from other input\nObservables, then emits the output of that formula.</span>\n\n![](withLatestFrom.png)\n\n`withLatestFrom` combines each value from the source Observable (the\ninstance) with the latest values from the other input Observables only when\nthe source emits a value, optionally using a `project` function to determine\nthe value to be emitted on the output Observable. All input Observables must\nemit at least one value before the output Observable will emit a value.\n\n## Example\nOn every click event, emit an array with the latest timer event plus the click event\n```ts\nimport { fromEvent, interval } from 'rxjs';\nimport { withLatestFrom } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst timer = interval(1000);\nconst result = clicks.pipe(withLatestFrom(timer));\nresult.subscribe(x => console.log(x));\n```\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "{@link combineLatest}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{ObservableInput}",
              "description": "other An input Observable to combine with the source",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "{Function}",
              "description": "[project] Projection function for combining values",
              "type": ""
            }
          ],
          [
            "return",
            {
              "__kind": "heading",
              "description": "{Observable} An Observable of projected values from the most recent\nvalues from each input Observable, or an array of the most recent values from\neach input Observable."
            }
          ],
          ["name", { "__kind": "heading", "description": "withLatestFrom\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "args",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L9-L9",
        "signature": "function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L10-L10",
        "signature": "function withLatestFrom<T, O2 extends ObservableInput<any>, R>(\n  source2: O2,\n  project: (v1: T, v2: ObservedValueOf<O2>) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "source2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: ObservedValueOf<O2>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L11-L11",
        "signature": "function withLatestFrom<\n  T,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  R\n>(\n  v2: O2,\n  v3: O3,\n  project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L12-L12",
        "signature": "function withLatestFrom<\n  T,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  R\n>(\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  project: (\n    v1: T,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>\n  ) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L13-L13",
        "signature": "function withLatestFrom<\n  T,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  R\n>(\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  project: (\n    v1: T,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>,\n    v5: ObservedValueOf<O5>\n  ) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L14-L14",
        "signature": "function withLatestFrom<\n  T,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  O6 extends ObservableInput<any>,\n  R\n>(\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  v6: O6,\n  project: (\n    v1: T,\n    v2: ObservedValueOf<O2>,\n    v3: ObservedValueOf<O3>,\n    v4: ObservedValueOf<O4>,\n    v5: ObservedValueOf<O5>,\n    v6: ObservedValueOf<O6>\n  ) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "O6"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L15-L15",
        "signature": "function withLatestFrom<T, O2 extends ObservableInput<any>>(\n  source2: O2\n): OperatorFunction<T, [T, ObservedValueOf<O2>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "source2",
              "description": "",
              "type": "O2"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L16-L16",
        "signature": "function withLatestFrom<\n  T,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>\n>(\n  v2: O2,\n  v3: O3\n): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L17-L17",
        "signature": "function withLatestFrom<\n  T,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>\n>(\n  v2: O2,\n  v3: O3,\n  v4: O4\n): OperatorFunction<\n  T,\n  [T, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L18-L18",
        "signature": "function withLatestFrom<\n  T,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>\n>(\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5\n): OperatorFunction<\n  T,\n  [\n    T,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>,\n    ObservedValueOf<O5>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L19-L19",
        "signature": "function withLatestFrom<\n  T,\n  O2 extends ObservableInput<any>,\n  O3 extends ObservableInput<any>,\n  O4 extends ObservableInput<any>,\n  O5 extends ObservableInput<any>,\n  O6 extends ObservableInput<any>\n>(\n  v2: O2,\n  v3: O3,\n  v4: O4,\n  v5: O5,\n  v6: O6\n): OperatorFunction<\n  T,\n  [\n    T,\n    ObservedValueOf<O2>,\n    ObservedValueOf<O3>,\n    ObservedValueOf<O4>,\n    ObservedValueOf<O5>,\n    ObservedValueOf<O6>\n  ]\n>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "O2"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "O3"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "O4"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "O5"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "O6"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L20-L20",
        "signature": "function withLatestFrom<T, R>(\n  ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L21-L21",
        "signature": "function withLatestFrom<T, R>(\n  array: ObservableInput<any>[]\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/withLatestFrom.ts#L22-L22",
        "signature": "function withLatestFrom<T, R>(\n  array: ObservableInput<any>[],\n  project: (...values: Array<any>) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(...values: Array<any>) => R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "zip",
    "overloads": [
      {
        "file": "src/internal/operators/zipWith.ts#L40-L47",
        "signature": "function zip<T, R>(\n  ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "Deprecated. Use {@link zipWith}.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L8-L8",
        "signature": "function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L10-L10",
        "signature": "function zip<T, T2, R>(\n  v2: ObservableInput<T2>,\n  project: (v1: T, v2: T2) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: T2) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L12-L12",
        "signature": "function zip<T, T2, T3, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  project: (v1: T, v2: T2, v3: T3) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: T2, v3: T3) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L14-L14",
        "signature": "function zip<T, T2, T3, T4, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  project: (v1: T, v2: T2, v3: T3, v4: T4) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: T2, v3: T3, v4: T4) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L16-L16",
        "signature": "function zip<T, T2, T3, T4, T5, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L18-L18",
        "signature": "function zip<T, T2, T3, T4, T5, T6, R>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>,\n  project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L20-L20",
        "signature": "function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L22-L22",
        "signature": "function zip<T, T2, T3>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>\n): OperatorFunction<T, [T, T2, T3]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L24-L24",
        "signature": "function zip<T, T2, T3, T4>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>\n): OperatorFunction<T, [T, T2, T3, T4]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L26-L26",
        "signature": "function zip<T, T2, T3, T4, T5>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>\n): OperatorFunction<T, [T, T2, T3, T4, T5]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L28-L28",
        "signature": "function zip<T, T2, T3, T4, T5, T6>(\n  v2: ObservableInput<T2>,\n  v3: ObservableInput<T3>,\n  v4: ObservableInput<T4>,\n  v5: ObservableInput<T5>,\n  v6: ObservableInput<T6>\n): OperatorFunction<T, [T, T2, T3, T4, T5, T6]>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L30-L30",
        "signature": "function zip<T, R>(\n  ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "observables",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L32-L32",
        "signature": "function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipWith.ts#L34-L34",
        "signature": "function zip<T, TOther, R>(\n  array: Array<ObservableInput<TOther>>,\n  project: (v1: T, ...values: Array<TOther>) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "array",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(v1: T, ...values: Array<TOther>) => R"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "zipWith",
    "overloads": [
      {
        "file": "src/internal/operators/zipWith.ts#L69-L73",
        "signature": "function zipWith<T, A extends ObservableInput<any>[]>(\n  ...otherInputs: A\n): OperatorFunction<T, Cons<T, ObservedValueTupleFromArray<A>>>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Subscribes to the source, and the observable inputs provided as arguments, and combines their values, by index, into arrays.\n\nWhat is meant by \"combine by index\": The first value from each will be made into a single array, then emitted,\nthen the second value from each will be combined into a single array and emitted, then the third value\nfrom each will be combined into a single array and emitted, and so on.\n\nThis will continue until it is no longer able to combine values of the same index into an array.\n\nAfter the last value from any one completed source is emitted in an array, the resulting observable will complete,\nas there is no way to continue \"zipping\" values together by index.\n\nUse-cases for this operator are limited. There are memory concerns if one of the streams is emitting\nvalues at a much faster rate than the others. Usage should likely be limited to streams that emit\nat a similar pace, or finite streams of known length.\n\nIn many cases, authors want `combineLatestWith` and not `zipWith`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "otherInputs",
              "description": "other observable inputs to collate values from.",
              "type": "A"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "operators",
    "name": "zipAll",
    "overloads": [
      {
        "file": "src/internal/operators/zipAll.ts#L11-L13",
        "signature": "function zipAll<T, R>(\n  project?: (...values: Array<any>) => R\n): OperatorFunction<T, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(...values: Array<any>) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipAll.ts#L6-L6",
        "signature": "function zipAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;",
        "info": []
      },
      {
        "file": "src/internal/operators/zipAll.ts#L7-L7",
        "signature": "function zipAll<T>(): OperatorFunction<any, T[]>;",
        "info": []
      },
      {
        "file": "src/internal/operators/zipAll.ts#L8-L8",
        "signature": "function zipAll<T, R>(\n  project: (...values: T[]) => R\n): OperatorFunction<ObservableInput<T>, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(...values: T[]) => R"
            }
          ]
        ]
      },
      {
        "file": "src/internal/operators/zipAll.ts#L9-L9",
        "signature": "function zipAll<R>(\n  project: (...values: Array<any>) => R\n): OperatorFunction<any, R>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "",
              "type": "(...values: Array<any>) => R"
            }
          ]
        ]
      }
    ]
  }
]
