[
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "formatDate",
    "overloads": [
      {
        "file": "packages/common/src/i18n/format_date.ts#L64-L102",
        "signature": "function formatDate(\n  value: string | number | Date,\n  format: string,\n  locale: string,\n  timezone?: string\n): string;",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nFormats a date according to locale rules.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "The date to format, as a Date, or a number (milliseconds since UTC epoch)",
              "type": "string | number | Date"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "format",
              "description": "The date-time components to include. See `DatePipe` for details.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "timezone",
              "description": "The time zone. A time zone offset from GMT (such as `'+0430'`),",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The formatted date string.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`DatePipe`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "formatCurrency",
    "overloads": [
      {
        "file": "packages/common/src/i18n/format_number.ts#L150-L170",
        "signature": "function formatCurrency(\n  value: number,\n  locale: string,\n  currency: string,\n  currencyCode?: string,\n  digitsInfo?: string\n): string;",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nFormats a number as currency using locale rules.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "The number to format.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "currency",
              "description": "A string containing the currency symbol or its name,",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "currencyCode",
              "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "digitInfo",
              "description": "Decimal representation options, specified by a string in the following format:",
              "type": ""
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The formatted currency value.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`formatNumber()`" }],
          ["see", { "__kind": "heading", "description": "`DecimalPipe`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "digitsInfo",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "formatNumber",
    "overloads": [
      {
        "file": "packages/common/src/i18n/format_number.ts#L217-L222",
        "signature": "function formatNumber(\n  value: number,\n  locale: string,\n  digitsInfo?: string\n): string;",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nFormats a number as text, with group sizing, separator, and other\nparameters based on the locale.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "The number to format.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "digitInfo",
              "description": "Decimal representation options, specified by a string in the following format:",
              "type": ""
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "The formatted text string." }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "digitsInfo",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "formatPercent",
    "overloads": [
      {
        "file": "packages/common/src/i18n/format_number.ts#L191-L198",
        "signature": "function formatPercent(\n  value: number,\n  locale: string,\n  digitsInfo?: string\n): string;",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nFormats a number as a percentage according to locale rules.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "The number to format.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "digitInfo",
              "description": "Decimal representation options, specified by a string in the following format:",
              "type": ""
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The formatted percentage value.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`formatNumber()`" }],
          ["see", { "__kind": "heading", "description": "`DecimalPipe`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "digitsInfo",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgLocaleLocalization",
    "overloads": [
      {
        "file": "packages/common/src/i18n/localization.ts#L53-L77",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns the plural case based on the locale\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "getPluralCategory",
              "info": {
                "file": "packages/common/src/i18n/localization.ts#L59-L76",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getPluralCategory(value: any, locale?: string): string;"
              }
            }
          ]
        ],
        "signature": "class NgLocaleLocalization extends NgLocalization {\n  getPluralCategory(value: any, locale?: string): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgLocalization",
    "overloads": [
      {
        "file": "packages/common/src/i18n/localization.ts#L17-L19",
        "info": [
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "getPluralCategory",
              "info": {
                "file": "packages/common/src/i18n/localization.ts#L18-L18",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract getPluralCategory(value: any, locale?: string): string;"
              }
            }
          ]
        ],
        "signature": "class NgLocalization {\n  abstract getPluralCategory(value: any, locale?: string): string;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "registerLocaleData",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data.ts#L19-L21",
        "signature": "function registerLocaleData(\n  data: any,\n  localeId?: string | any,\n  extraData?: any\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Register global data to be used internally by Angular. See the\n[\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n\nThe signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "data",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "localeId",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "extraData",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "common",
    "name": "Plural",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L37-L44",
        "signature": "export enum Plural {\n  Zero = 0,\n  One = 1,\n  Two = 2,\n  Few = 3,\n  Many = 4,\n  Other = 5,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Plurality cases used for translating plurals to different languages.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`NgPlural`" }],
          ["see", { "__kind": "heading", "description": "`NgPluralCase`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "common",
    "name": "NumberFormatStyle",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L21-L26",
        "signature": "export enum NumberFormatStyle {\n  Decimal,\n  Percent,\n  Currency,\n  Scientific,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Format styles that can be used to represent numbers."
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`getLocaleNumberFormat()`." }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "common",
    "name": "FormStyle",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L55-L58",
        "signature": "export enum FormStyle {\n  Format,\n  Standalone,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Context-dependant translation forms for strings.\nTypically the standalone version is for the nominative form of the word,\nand the format version is used for the genitive case."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "common",
    "name": "Time",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L620-L623",
        "signature": "export type Time = {\n  hours: number;\n  minutes: number;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents a time value with hours and minutes.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "common",
    "name": "TranslationWidth",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L67-L76",
        "signature": "export enum TranslationWidth {\n  /** 1 character for `en-US`. For example: 'S' */\n  Narrow,\n  /** 3 characters for `en-US`. For example: 'Sun' */\n  Abbreviated,\n  /** Full length for `en-US`. For example: \"Sunday\" */\n  Wide,\n  /** 2 characters for `en-US`, For example: \"Su\" */\n  Short,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "String widths available for translations.\nThe specific character widths are locale-specific.\nExamples are given for the word \"Sunday\" in English.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "common",
    "name": "FormatWidth",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L89-L110",
        "signature": "export enum FormatWidth {\n  /**\n   * For `en-US`, 'M/d/yy, h:mm a'`\n   * (Example: `6/15/15, 9:03 AM`)\n   */\n  Short,\n  /**\n   * For `en-US`, `'MMM d, y, h:mm:ss a'`\n   * (Example: `Jun 15, 2015, 9:03:01 AM`)\n   */\n  Medium,\n  /**\n   * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n   * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n   */\n  Long,\n  /**\n   * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n   * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n   */\n  Full,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "String widths available for date-time formats.\nThe specific character widths are locale-specific.\nExamples are given for `en-US`.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`getLocaleDateFormat()`" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`getLocaleTimeFormat()``" }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`getLocaleDateTimeFormat()`"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "common",
    "name": "NumberSymbol",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L121-L194",
        "signature": "export enum NumberSymbol {\n  /**\n   * Decimal separator.\n   * For `en-US`, the dot character.\n   * Example : 2,345`.`67\n   */\n  Decimal,\n  /**\n   * Grouping separator, typically for thousands.\n   * For `en-US`, the comma character.\n   * Example: 2`,`345.67\n   */\n  Group,\n  /**\n   * List-item separator.\n   * Example: \"one, two, and three\"\n   */\n  List,\n  /**\n   * Sign for percentage (out of 100).\n   * Example: 23.4%\n   */\n  PercentSign,\n  /**\n   * Sign for positive numbers.\n   * Example: +23\n   */\n  PlusSign,\n  /**\n   * Sign for negative numbers.\n   * Example: -23\n   */\n  MinusSign,\n  /**\n   * Computer notation for exponential value (n times a power of 10).\n   * Example: 1.2E3\n   */\n  Exponential,\n  /**\n   * Human-readable format of exponential.\n   * Example: 1.2x103\n   */\n  SuperscriptingExponent,\n  /**\n   * Sign for permille (out of 1000).\n   * Example: 23.4‰\n   */\n  PerMille,\n  /**\n   * Infinity, can be used with plus and minus.\n   * Example: ∞, +∞, -∞\n   */\n  Infinity,\n  /**\n   * Not a number.\n   * Example: NaN\n   */\n  NaN,\n  /**\n   * Symbol used between time units.\n   * Example: 10:52\n   */\n  TimeSeparator,\n  /**\n   * Decimal separator for currency values (fallback to `Decimal`).\n   * Example: $2,345.67\n   */\n  CurrencyDecimal,\n  /**\n   * Group separator for currency values (fallback to `Group`).\n   * Example: $2,345.67\n   */\n  CurrencyGroup,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Symbols that can be used to replace placeholders in number patterns.\nExamples are based on `en-US` values.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`getLocaleNumberSymbol()`" }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "common",
    "name": "WeekDay",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L201-L209",
        "signature": "export enum WeekDay {\n  Sunday = 0,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The value for each day of the week, based on the `en-US` locale\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getNumberOfCurrencyDigits",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L674-L681",
        "signature": "function getNumberOfCurrencyDigits(code: string): number;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Reports the number of decimal digits for a given currency.\nThe value depends upon the presence of cents in that particular currency.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "code",
              "description": "The currency code.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The number of decimal digits, typically 0 or 2."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getCurrencySymbol",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L650-L659",
        "signature": "function getCurrencySymbol(\n  code: string,\n  format: \"wide\" | \"narrow\",\n  locale = \"en\"\n): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves the currency symbol for a given currency code.\n\nFor example, for the default `en-US` locale, the code `USD` can\nbe represented by the narrow symbol `$` or the wide symbol `US$`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "code",
              "description": "The currency code.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "format",
              "description": "The format, `wide` or `narrow`.",
              "type": "\"wide\" | \"narrow\""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The symbol, or the currency code if no symbol is available."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleDayPeriods",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L235-L243",
        "signature": "function getLocaleDayPeriods(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth\n): [string, string];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves day period strings for the given locale.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "formStyle",
              "description": "The required grammatical form.",
              "type": "FormStyle"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "width",
              "description": "The required character width.",
              "type": "TranslationWidth"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "An array of localized period strings. For example, `[AM, PM]` for `en-US`."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleDayNames",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L257-L264",
        "signature": "function getLocaleDayNames(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth\n): string[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves days of the week for the given locale, using the Gregorian calendar.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "formStyle",
              "description": "The required grammatical form.",
              "type": "FormStyle"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "width",
              "description": "The required character width.",
              "type": "TranslationWidth"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "An array of localized name strings.\nFor example,`[Sunday, Monday, ... Saturday]` for `en-US`."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleMonthNames",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L278-L285",
        "signature": "function getLocaleMonthNames(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth\n): string[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves months of the year for the given locale, using the Gregorian calendar.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "formStyle",
              "description": "The required grammatical form.",
              "type": "FormStyle"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "width",
              "description": "The required character width.",
              "type": "TranslationWidth"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "An array of localized name strings.\nFor example,  `[January, February, ...]` for `en-US`."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleId",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L220-L222",
        "signature": "function getLocaleId(locale: string): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves the locale ID from the currently loaded locale.\nThe loaded locale could be, for example, a global one rather than a regional one."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code, such as `fr-FR`.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The locale code. For example, `fr`."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleEraNames",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L299-L303",
        "signature": "function getLocaleEraNames(\n  locale: string,\n  width: TranslationWidth\n): [string, string];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves Gregorian-calendar eras for the given locale."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "formStyle",
              "description": "The required grammatical form.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "width",
              "description": "The required character width.",
              "type": "TranslationWidth"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "An array of localized era strings.\nFor example, `[AD, BC]` for `en-US`."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleWeekEndRange",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L330-L333",
        "signature": "function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Range of week days that are considered the week-end for the given locale.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The range of day values, `[startDay, endDay]`."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleFirstDayOfWeek",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L316-L319",
        "signature": "function getLocaleFirstDayOfWeek(locale: string): WeekDay;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves the first day of the week for the given locale.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "A day index number, using the 0-based week-day index for `en-US`\n(Sunday = 0, Monday = 1, ...).\nFor example, for `fr-FR`, returns 1 to indicate that the first day is Monday."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleDateFormat",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L346-L349",
        "signature": "function getLocaleDateFormat(locale: string, width: FormatWidth): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves a localized date-value formating string.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "width",
              "description": "The format type.",
              "type": "FormatWidth"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The localized formating string."
            }
          ],
          ["see", { "__kind": "heading", "description": "`FormatWidth`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleDateTimeFormat",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L378-L382",
        "signature": "function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves a localized date-time formatting string.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "width",
              "description": "The format type.",
              "type": "FormatWidth"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The localized formatting string."
            }
          ],
          ["see", { "__kind": "heading", "description": "`FormatWidth`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleExtraDayPeriodRules",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L540-L550",
        "signature": "function getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves locale-specific rules used to determine which day period to use\nwhen more than one period is defined for a locale.\n\nThere is a rule for each defined day period. The\nfirst rule is applied to the first day period and so on.\nFall back to AM/PM when no rules are available.\n\nA rule can specify a period as time range, or as a single time value.\n\nThis functionality is only available when you have loaded the full locale data.\nSee the [\"I18n guide\"](guide/i18n#i18n-pipes).\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The rules for the locale, a single time value or array of *from-time, to-time*,\nor null if no periods are available.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`getLocaleExtraDayPeriods()`"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleExtraDayPeriods",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L569-L579",
        "signature": "function getLocaleExtraDayPeriods(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth\n): string[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves locale-specific day periods, which indicate roughly how a day is broken up\nin different languages.\nFor example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n\nThis functionality is only available when you have loaded the full locale data.\nSee the [\"I18n guide\"](guide/i18n#i18n-pipes).\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "formStyle",
              "description": "The required grammatical form.",
              "type": "FormStyle"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "width",
              "description": "The required character width.",
              "type": "TranslationWidth"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The translated day-period strings."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`getLocaleExtraDayPeriodRules()`"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "common",
    "name": "getLocalePluralCase",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L507-L508",
        "signature": "const getLocalePluralCase: (locale: string) => (value: number) => Plural;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleTimeFormat",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L362-L365",
        "signature": "function getLocaleTimeFormat(locale: string, width: FormatWidth): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves a localized time-value formatting string.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "width",
              "description": "The format type.",
              "type": "FormatWidth"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The localized formatting string."
            }
          ],
          ["see", { "__kind": "heading", "description": "`FormatWidth`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleNumberSymbol",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L394-L405",
        "signature": "function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves a localized number symbol that can be used to replace placeholders in number formats."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "The locale code.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "symbol",
              "description": "The symbol to localize.",
              "type": "NumberSymbol"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The character for the localized symbol."
            }
          ],
          ["see", { "__kind": "heading", "description": "`NumberSymbol`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleNumberFormat",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L442-L445",
        "signature": "function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves a number format for a given locale.\n\nNumbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\nwhen used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\ngrouping separator for your language is an apostrophe, and the decimal separator is a comma.\n\n<b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\nthat stand for the decimal separator, and so on, and are NOT real characters.\nYou must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\nyour language the decimal point is written with a comma. The symbols should be replaced by the\nlocal equivalents, using the appropriate `NumberSymbol` for your language.\n\nHere are the special characters used in number patterns:\n\n| Symbol | Meaning |\n|--------|---------|\n| . | Replaced automatically by the character used for the decimal point. |\n| , | Replaced by the \"grouping\" (thousands) separator. |\n| 0 | Replaced by a digit (or zero if there aren't enough digits). |\n| # | Replaced by a digit (or nothing if there aren't enough). |\n| ¤ | Replaced by a currency symbol, such as $ or USD. |\n| % | Marks a percent format. The % symbol may change position, but must be retained. |\n| E | Marks a scientific format. The E symbol may change position, but must be retained. |\n| ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "The type of numeric value to be formatted (such as `Decimal` or `Currency`.)",
              "type": "NumberFormatStyle"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The localized format string."
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`NumberFormatStyle`" }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[CLDR website](http://cldr.unicode.org/translation/number-patterns)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleCurrencyCode",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L488-L490",
        "signature": "function getLocaleCurrencyCode(locale: string): string | null;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves the default currency code for the given locale.\n\nThe default is defined as the first currency which is still in use.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "The code of the locale whose currency code we want.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The code of the default currency for the given locale.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleCurrencyName",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L473-L476",
        "signature": "function getLocaleCurrencyName(locale: string): string | null;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves the name of the currency for the main country corresponding\nto a given locale. For example, 'US Dollar' for `en-US`."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The currency name,\nor `null` if the main country cannot be determined."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleCurrencySymbol",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L458-L461",
        "signature": "function getLocaleCurrencySymbol(locale: string): string | null;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves the symbol used to represent the currency for the main country\ncorresponding to a given locale. For example, '$' for `en-US`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The localized symbol character,\nor `null` if the main country cannot be determined."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "getLocaleDirection",
    "overloads": [
      {
        "file": "packages/common/src/i18n/locale_data_api.ts#L588-L591",
        "signature": "function getLocaleDirection(locale: string): \"ltr\" | \"rtl\";",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves the writing direction of a specified locale"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          ["returns", { "__kind": "heading", "description": "'rtl' or 'ltr'" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "ɵparseCookieValue",
    "overloads": [
      {
        "file": "packages/common/src/cookie.ts#L9-L20",
        "signature": "function parseCookieValue(cookieStr: string, name: string): string | null;",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "cookieStr",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "CommonModule",
    "overloads": [
      {
        "file": "packages/common/src/common_module.ts#L30-L38",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Exports all the basic Angular directives and pipes,\nsuch as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\nRe-exported by `BrowserModule`, which is included automatically in the root\n`AppModule` when you create a new app with the CLI `new` command.\n\n* The `providers` options configure the NgModule's injector to provide\nlocalization dependencies to members.\n* The `exports` options make the declared directives and pipes available for import\nby other NgModules.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class CommonModule {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgClass",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_class.ts#L40-L160",
        "info": [
          [
            "ngModule",
            { "__kind": "heading", "description": "CommonModule\n" }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n```\n<some-element [ngClass]=\"'first second'\">...</some-element>\n\n<some-element [ngClass]=\"['first', 'second']\">...</some-element>\n\n<some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n\n<some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n\n<some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n```\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nAdds and removes CSS classes on an HTML element.\n\nThe CSS classes are updated as follows, depending on the type of the expression evaluation:\n- `string` - the CSS classes listed in the string (space delimited) are added,\n- `Array` - the CSS classes declared as Array elements are added,\n- `Object` - keys are CSS classes that get added when the expression given in the value\nevaluates to a truthy value, otherwise they are removed.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngDoCheck",
              "info": {
                "file": "packages/common/src/directives/ng_class.ts#L79-L91",
                "info": [],
                "signature": "ngDoCheck();"
              }
            }
          ]
        ],
        "signature": "class NgClass implements DoCheck {\n  ngDoCheck();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgForOf",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_for_of.ts#L132-L282",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A [structural directive](guide/structural-directives) that renders\na template for each item in a collection.\nThe directive is placed on an element, which becomes the parent\nof the cloned templates.\n\nThe `ngForOf` directive is generally used in the\n[shorthand form](guide/structural-directives#the-asterisk--prefix) `*ngFor`.\nIn this form, the template to be rendered for each iteration is the content\nof an anchor element containing the directive.\n\nThe following example shows the shorthand syntax with some options,\ncontained in an `<li>` element.\n\n```\n<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>\n```\n\nThe shorthand form expands into a long form that uses the `ngForOf` selector\non an `<ng-template>` element.\nThe content of the `<ng-template>` element is the `<li>` element that held the\nshort-form directive.\n\nHere is the expanded version of the short-form example.\n\n```\n<ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n<li>...</li>\n</ng-template>\n```\n\nAngular automatically expands the shorthand syntax as it compiles the template.\nThe context for each embedded view is logically merged to the current component\ncontext according to its lexical position.\n\nWhen using the shorthand syntax, Angular allows only [one structural directive\non an element](guide/structural-directives#one-structural-directive-per-host-element).\nIf you want to iterate conditionally, for example,\nput the `*ngIf` on a container element that wraps the `*ngFor` element.\nFor futher discussion, see\n[Structural Directives](guide/structural-directives#one-per-element).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Local variables\n\n`NgForOf` provides exported values that can be aliased to local variables.\nFor example:\n\n```\n<li *ngFor=\"let user of users; index as i; first as isFirst\">\n{{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n</li>\n```\n\nThe following exported values can be aliased to local variables:\n\n- `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n- `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\nmore complex then a property access, for example when using the async pipe (`userStreams |\nasync`).\n- `index: number`: The index of the current item in the iterable.\n- `count: number`: The length of the iterable.\n- `first: boolean`: True when the item is the first item in the iterable.\n- `last: boolean`: True when the item is the last item in the iterable.\n- `even: boolean`: True when the item has an even index in the iterable.\n- `odd: boolean`: True when the item has an odd index in the iterable.\n\n### Change propagation\n\nWhen the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n\n* When an item is added, a new instance of the template is added to the DOM.\n* When an item is removed, its template instance is removed from the DOM.\n* When items are reordered, their respective templates are reordered in the DOM.\n\nAngular uses object identity to track insertions and deletions within the iterator and reproduce\nthose changes in the DOM. This has important implications for animations and any stateful\ncontrols that are present, such as `<input>` elements that accept user input. Inserted rows can\nbe animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\nsuch as user input.\nFor more on animations, see [Transitions and Triggers](guide/transition-and-triggers).\n\nThe identities of elements in the iterator can change while the data does not.\nThis can happen, for example, if the iterator is produced from an RPC to the server, and that\nRPC is re-run. Even if the data hasn't changed, the second response produces objects with\ndifferent identities, and Angular must tear down the entire DOM and rebuild it (as if all old\nelements were deleted and all new elements inserted).\n\nTo avoid this expensive operation, you can customize the default tracking algorithm.\nby supplying the `trackBy` option to `NgForOf`.\n`trackBy` takes a function that has two arguments: `index` and `item`.\nIf `trackBy` is given, Angular tracks changes by the return value of the function.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Structural Directives](guide/structural-directives)"
            }
          ],
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngDoCheck",
              "info": {
                "file": "packages/common/src/directives/ng_for_of.ts#L204-L222",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Applies the changes when needed.\n"
                    }
                  ]
                ],
                "signature": "ngDoCheck(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngTemplateContextGuard",
              "info": {
                "file": "packages/common/src/directives/ng_for_of.ts#L278-L281",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Asserts the correct type of the context for the template that `NgForOf` will render.\n\nThe presence of this method is a signal to the Ivy template type-check compiler that the\n`NgForOf` structural directive renders its template with a specific context type.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "",
                      "type": "NgForOf<T, U>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ctx",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "static ngTemplateContextGuard<T, U extends NgIterable<T>>(dir: NgForOf<T, U>, ctx: any):   ctx is NgForOfContext<T, U>;"
              }
            }
          ]
        ],
        "signature": "class NgForOf<T, U extends NgIterable<T> = NgIterable<T>> implements DoCheck {\n  ngDoCheck(): void;\n  static ngTemplateContextGuard<T, U extends NgIterable<T>>(\n    dir: NgForOf<T, U>,\n    ctx: any\n  ): ctx is NgForOfContext<T, U>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgForOfContext",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_for_of.ts#L14-L32",
        "info": [["publicApi", { "__kind": "heading", "description": "\n" }]],
        "signature": "class NgForOfContext<T, U extends NgIterable<T> = NgIterable<T>> {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgIf",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_if.ts#L151-L238",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A structural directive that conditionally includes a template based on the value of\nan expression coerced to Boolean.\nWhen the expression evaluates to true, Angular renders the template\nprovided in a `then` clause, and when  false or null,\nAngular renders the template provided in an optional `else` clause. The default\ntemplate for the `else` clause is blank.\n\nA [shorthand form](guide/structural-directives#the-asterisk--prefix) of the directive,\n`*ngIf=\"condition\"`, is generally used, provided\nas an attribute of the anchor element for the inserted template.\nAngular expands this into a more explicit version, in which the anchor element\nis contained in an `<ng-template>` element.\n\nSimple form with shorthand syntax:\n\n```\n<div *ngIf=\"condition\">Content to render when condition is true.</div>\n```\n\nSimple form with expanded syntax:\n\n```\n<ng-template [ngIf]=\"condition\"><div>Content to render when condition is\ntrue.</div></ng-template>\n```\n\nForm with an \"else\" block:\n\n```\n<div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n<ng-template #elseBlock>Content to render when condition is false.</ng-template>\n```\n\nShorthand form with \"then\" and \"else\" blocks:\n\n```\n<div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n<ng-template #thenBlock>Content to render when condition is true.</ng-template>\n<ng-template #elseBlock>Content to render when condition is false.</ng-template>\n```\n\nForm with storing the value locally:\n\n```\n<div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n<ng-template #elseBlock>Content to render when value is null.</ng-template>\n```\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nThe `*ngIf` directive is most commonly used to conditionally show an inline template,\nas seen in the following  example.\nThe default `else` template is blank.\n\n{@example common/ngIf/ts/module.ts region='NgIfSimple'}\n\n### Showing an alternative template using `else`\n\nTo display a template when `expression` evaluates to false, use an `else` template\nbinding as shown in the following example.\nThe `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\nThe template can be defined anywhere in the component view, but is typically placed right after\n`ngIf` for readability.\n\n{@example common/ngIf/ts/module.ts region='NgIfElse'}\n\n### Using an external `then` template\n\nIn the previous example, the then-clause template is specified inline, as the content of the\ntag that contains the `ngIf` directive. You can also specify a template that is defined\nexternally, by referencing a labeled `<ng-template>` element. When you do this, you can\nchange which template to use at runtime, as shown in the following example.\n\n{@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n\n### Storing a conditional result in a variable\n\nYou might want to show a set of properties from the same object. If you are waiting\nfor asynchronous data, the object can be undefined.\nIn this case, you can use `ngIf` and store the result of the condition in a local\nvariable as shown in the the following example.\n\n{@example common/ngIf/ts/module.ts region='NgIfAs'}\n\nThis code uses only one `AsyncPipe`, so only one subscription is created.\nThe conditional statement stores the result of `userStream|async` in the local variable `user`.\nYou can then bind the local `user` repeatedly.\n\nThe conditional displays the data only if `userStream` returns a value,\nso you don't need to use the\n[safe-navigation-operator](guide/template-expression-operators#safe-navigation-operator) (`?.`)\nto guard against null values when accessing properties.\nYou can display an alternative template while waiting for the data.\n\n### Shorthand syntax\n\nThe shorthand syntax `*ngIf` expands into two separate template specifications\nfor the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\nthat is meant to show a loading page while waiting for data to be loaded.\n\n```\n<div class=\"hero-list\" *ngIf=\"heroes else loading\">\n...\n</div>\n\n<ng-template #loading>\n<div>Loading...</div>\n</ng-template>\n```\n\nYou can see that the \"else\" clause references the `<ng-template>`\nwith the `#loading` label, and the template for the \"then\" clause\nis provided as the content of the anchor element.\n\nHowever, when Angular expands the shorthand syntax, it creates\nanother `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\nThe anchor element containing the template for the \"then\" clause becomes\nthe content of this unlabeled `<ng-template>` tag.\n\n```\n<ng-template [ngIf]=\"heroes\" [ngIfElse]=\"loading\">\n<div class=\"hero-list\">\n...\n</div>\n</ng-template>\n\n<ng-template #loading>\n<div>Loading...</div>\n</ng-template>\n```\n\nThe presence of the implicit template object has implications for the nesting of\nstructural directives. For more on this subject, see\n[Structural Directives](https://angular.io/guide/structural-directives#one-per-element).\n"
            }
          ],
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngIfUseIfTypeGuard",
              "description": "",
              "type": "void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngTemplateGuard_ngIf",
              "description": "Assert the correct type of the expression bound to the `ngIf` input within the template.\n\nThe presence of this static field is a signal to the Ivy template type check compiler that\nwhen the `NgIf` structural directive renders its template, the type of the expression bound\nto `ngIf` should be narrowed in some way. For `NgIf`, the binding expression itself is used to\nnarrow its type, which allows the strictNullChecks feature of TypeScript to work with `NgIf`.",
              "type": "\"binding\""
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngTemplateContextGuard",
              "info": {
                "file": "packages/common/src/directives/ng_if.ts#L235-L237",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Asserts the correct type of the context for the template that `NgIf` will render.\n\nThe presence of this method is a signal to the Ivy template type-check compiler that the\n`NgIf` structural directive renders its template with a specific context type.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "",
                      "type": "NgIf<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ctx",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "static ngTemplateContextGuard<T>(dir: NgIf<T>, ctx: any): ctx is NgIfContext<NonNullable<T>>;"
              }
            }
          ]
        ],
        "signature": "class NgIf<T = unknown> {\n  public static ngIfUseIfTypeGuard: void;\n  static ngTemplateGuard_ngIf: \"binding\";\n\n  static ngTemplateContextGuard<T>(\n    dir: NgIf<T>,\n    ctx: any\n  ): ctx is NgIfContext<NonNullable<T>>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgIfContext",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_if.ts#L243-L246",
        "info": [
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "$implicit",
              "description": "",
              "type": "T"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngIf",
              "description": "",
              "type": "T"
            }
          ]
        ],
        "signature": "class NgIfContext<T = unknown> {\n  public $implicit: T = null!;\n  public ngIf: T = null!;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgPlural",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_plural.ts#L47-L85",
        "info": [
          [
            "ngModule",
            { "__kind": "heading", "description": "CommonModule\n" }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n```\n<some-element [ngPlural]=\"value\">\n<ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n<ng-template ngPluralCase=\"=1\">there is one</ng-template>\n<ng-template ngPluralCase=\"few\">there are a few</ng-template>\n</some-element>\n```\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nAdds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n\nDisplays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\nthat match the switch expression's pluralization category.\n\nTo use this directive you must provide a container element that sets the `[ngPlural]` attribute\nto a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\nexpression:\n- if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\nmatches the switch expression exactly,\n- otherwise, the view will be treated as a \"category match\", and will only display if exact\nvalue matches aren't found and the value maps to its category for the defined locale.\n\nSee http://cldr.unicode.org/index/cldr-spec/plural-rules\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "addCase",
              "info": {
                "file": "packages/common/src/directives/ng_plural.ts#L63-L65",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "switchView",
                      "description": "",
                      "type": "SwitchView"
                    }
                  ]
                ],
                "signature": "addCase(value: string, switchView: SwitchView): void;"
              }
            }
          ]
        ],
        "signature": "class NgPlural {\n  addCase(value: string, switchView: SwitchView): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgPluralCase",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_plural.ts#L107-L115",
        "info": [
          [
            "ngModule",
            { "__kind": "heading", "description": "CommonModule\n" }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nCreates a view that will be added/removed from the parent {@link NgPlural} when the\ngiven expression matches the plural expression according to CLDR rules.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n```\n<some-element [ngPlural]=\"value\">\n<ng-template ngPluralCase=\"=0\">...</ng-template>\n<ng-template ngPluralCase=\"other\">...</ng-template>\n</some-element>\n``\n\nSee {@link NgPlural} for more details and example.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class NgPluralCase {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgStyle",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_style.ts#L47-L88",
        "info": [
          [
            "ngModule",
            { "__kind": "heading", "description": "CommonModule\n" }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nSet the font of the containing element to the result of an expression.\n\n```\n<some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n```\n\nSet the width of the containing element to a pixel value returned by an expression.\n\n```\n<some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n```\n\nSet a collection of style values using an expression that returns key-value pairs.\n\n```\n<some-element [ngStyle]=\"objExp\">...</some-element>\n```\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nAn attribute directive that updates styles for the containing HTML element.\nSets one or more style properties, specified as colon-separated key-value pairs.\nThe key is a style name, with an optional `.<unit>` suffix\n(such as 'top.px', 'font-style.em').\nThe value is an expression to be evaluated.\nThe resulting non-null value, expressed in the given unit,\nis assigned to the given style property.\nIf the result of evaluation is null, the corresponding style is removed.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngDoCheck",
              "info": {
                "file": "packages/common/src/directives/ng_style.ts#L63-L70",
                "info": [],
                "signature": "ngDoCheck();"
              }
            }
          ]
        ],
        "signature": "class NgStyle implements DoCheck {\n  ngDoCheck();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgSwitch",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_switch.ts#L102-L155",
        "info": [
          [
            "ngModule",
            { "__kind": "heading", "description": "CommonModule\n" }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nThe `[ngSwitch]` directive on a container specifies an expression to match against.\nThe expressions to match are provided by `ngSwitchCase` directives on views within the container.\n- Every view that matches is rendered.\n- If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n- Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\nor `ngSwitchDefault` directive are preserved at the location.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nDefine a container element for the directive, and specify the switch expression\nto match against as an attribute:\n\n```\n<container-element [ngSwitch]=\"switch_expression\">\n```\n\nWithin the container, `*ngSwitchCase` statements specify the match expressions\nas attributes. Include `*ngSwitchDefault` as the final case.\n\n```\n<container-element [ngSwitch]=\"switch_expression\">\n<some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n...\n<some-element *ngSwitchDefault>...</some-element>\n</container-element>\n```\n\n### Usage Examples\n\nThe following example shows how to use more than one case to display the same view:\n\n```\n<container-element [ngSwitch]=\"switch_expression\">\n<!-- the same view can be shown in more than one case -->\n<some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n<some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n<some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n<!--default case when there are no matches -->\n<some-element *ngSwitchDefault>...</some-element>\n</container-element>\n```\n\nThe following example shows how cases can be nested:\n```\n<container-element [ngSwitch]=\"switch_expression\">\n<some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n<some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n<some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n<ng-container *ngSwitchCase=\"match_expression_3\">\n<!-- use a ng-container to group multiple root nodes -->\n<inner-element></inner-element>\n<inner-other-element></inner-other-element>\n</ng-container>\n<some-element *ngSwitchDefault>...</some-element>\n</container-element>\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          ["see", { "__kind": "heading", "description": "`NgSwitchCase`" }],
          ["see", { "__kind": "heading", "description": "`NgSwitchDefault`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Structural Directives](guide/structural-directives)\n\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_addCase",
              "info": {
                "file": "packages/common/src/directives/ng_switch.ts#L121-L123",
                "info": [],
                "signature": "_addCase(): number;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_addDefault",
              "info": {
                "file": "packages/common/src/directives/ng_switch.ts#L126-L131",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "view",
                      "description": "",
                      "type": "SwitchView"
                    }
                  ]
                ],
                "signature": "_addDefault(view: SwitchView);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_matchCase",
              "info": {
                "file": "packages/common/src/directives/ng_switch.ts#L134-L144",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "_matchCase(value: any): boolean;"
              }
            }
          ]
        ],
        "signature": "class NgSwitch {\n  _addCase(): number;\n  _addDefault(view: SwitchView);\n  _matchCase(value: any): boolean;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgSwitchCase",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_switch.ts#L190-L211",
        "info": [
          [
            "ngModule",
            { "__kind": "heading", "description": "CommonModule\n" }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nProvides a switch case expression to match against an enclosing `ngSwitch` expression.\nWhen the expressions match, the given `NgSwitchCase` template is rendered.\nIf multiple match expressions match the switch expression value, all of them are displayed.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nWithin a switch container, `*ngSwitchCase` statements specify the match expressions\nas attributes. Include `*ngSwitchDefault` as the final case.\n\n```\n<container-element [ngSwitch]=\"switch_expression\">\n<some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n...\n<some-element *ngSwitchDefault>...</some-element>\n</container-element>\n```\n\nEach switch-case statement contains an in-line HTML template or template reference\nthat defines the subtree to be selected if the value of the match expression\nmatches the value of the switch expression.\n\nUnlike JavaScript, which uses strict equality, Angular uses loose equality.\nThis means that the empty string, `\"\"` matches 0.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          ["see", { "__kind": "heading", "description": "`NgSwitch`" }],
          [
            "see",
            { "__kind": "heading", "description": "`NgSwitchDefault`\n\n" }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngSwitchCase",
              "description": "Stores the HTML template to be selected on match.",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngDoCheck",
              "info": {
                "file": "packages/common/src/directives/ng_switch.ts#L208-L210",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Performs case matching. For internal use only.\n"
                    }
                  ]
                ],
                "signature": "ngDoCheck();"
              }
            }
          ]
        ],
        "signature": "class NgSwitchCase implements DoCheck {\n  @Input() ngSwitchCase: any;\n\n  ngDoCheck();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgSwitchDefault",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_switch.ts#L227-L234",
        "info": [
          [
            "ngModule",
            { "__kind": "heading", "description": "CommonModule\n" }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nCreates a view that is rendered when no `NgSwitchCase` expressions\nmatch the `NgSwitch` expression.\nThis statement should be the final case in an `NgSwitch`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          ["see", { "__kind": "heading", "description": "`NgSwitch`" }],
          ["see", { "__kind": "heading", "description": "`NgSwitchCase`\n\n" }]
        ],
        "signature": "class NgSwitchDefault {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgTemplateOutlet",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_template_outlet.ts#L35-L107",
        "info": [
          [
            "ngModule",
            { "__kind": "heading", "description": "CommonModule\n" }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nInserts an embedded view from a prepared `TemplateRef`.\n\nYou can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n`[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\nby the local template `let` declarations.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n```\n<ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n```\n\nUsing the key `$implicit` in the context object will set its value as default.\n\n### Example\n\n{@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngTemplateOutletContext",
              "description": "A context object to attach to the {@link EmbeddedViewRef}. This should be an\nobject, the object's keys will be available for binding by the local template `let`\ndeclarations.\nUsing the key `$implicit` in the context object will set its value as default.",
              "type": "Object"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngTemplateOutlet",
              "description": "A string defining the template reference and optionally the context object for the template.",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/common/src/directives/ng_template_outlet.ts#L54-L70",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: SimpleChanges);"
              }
            }
          ]
        ],
        "signature": "class NgTemplateOutlet implements OnChanges {\n  @Input() public ngTemplateOutletContext: Object | null = null;\n  @Input() public ngTemplateOutlet: TemplateRef<any> | null = null;\n\n  ngOnChanges(changes: SimpleChanges);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "NgComponentOutlet",
    "overloads": [
      {
        "file": "packages/common/src/directives/ng_component_outlet.ts#L67-L116",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Instantiates a single {@link Component} type and inserts its Host View into current View.\n`NgComponentOutlet` provides a declarative approach for dynamic component creation.\n\n`NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\nany existing component will get destroyed.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Fine tune control\n\nYou can control the component creation process by using the following optional attributes:\n\n* `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for\nthe Component. Defaults to the injector of the current view container.\n\n* `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\nsection of the component, if exists.\n\n* `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\nmodule, then load a component from that module.\n\n### Syntax\n\nSimple\n```\n<ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n```\n\nCustomized injector/content\n```\n<ng-container *ngComponentOutlet=\"componentTypeExpression;\ninjector: injectorExpression;\ncontent: contentNodesExpression;\">\n</ng-container>\n```\n\nCustomized ngModuleFactory\n```\n<ng-container *ngComponentOutlet=\"componentTypeExpression;\nngModuleFactory: moduleFactory;\">\n</ng-container>\n```\n\n### A simple example\n\n{@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n\nA more complete example with additional options:\n\n{@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          [
            "ngModule",
            { "__kind": "heading", "description": "CommonModule\n" }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngComponentOutlet",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngComponentOutletInjector",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngComponentOutletContent",
              "description": "",
              "type": "any[][]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngComponentOutletNgModuleFactory",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/common/src/directives/ng_component_outlet.ts#L83-L111",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: SimpleChanges);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/common/src/directives/ng_component_outlet.ts#L113-L115",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ]
        ],
        "signature": "class NgComponentOutlet implements OnChanges, OnDestroy {\n  @Input() ngComponentOutlet!: Type<any>;\n  @Input() ngComponentOutletInjector!: Injector;\n  @Input() ngComponentOutletContent!: any[][];\n  @Input() ngComponentOutletNgModuleFactory!: NgModuleFactory<any>;\n\n  ngOnChanges(changes: SimpleChanges);\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "common",
    "name": "DOCUMENT",
    "overloads": [
      {
        "file": "packages/common/src/dom_tokens.ts#L19-L19",
        "signature": "const DOCUMENT: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "AsyncPipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/async_pipe.ts#L81-L149",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nUnwraps a value from an asynchronous primitive.\n\nThe `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\nemitted. When a new value is emitted, the `async` pipe marks the component to be checked for\nchanges. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\npotential memory leaks.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Examples\n\nThis example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\npromise.\n\n{@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n\nIt's also possible to use `async` with Observables. The example below binds the `time` Observable\nto the view. The Observable continuously updates the view with the current time.\n\n{@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/common/src/pipes/async_pipe.ts#L91-L95",
                "info": [],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/async_pipe.ts#L101-L115",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "obj",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "transform(obj: Observable<any>|Promise<any>|null|undefined): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/async_pipe.ts#L97-L97",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "obj",
                      "description": "",
                      "type": "null"
                    }
                  ]
                ],
                "signature": "transform<T>(obj: null): null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/async_pipe.ts#L98-L98",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "obj",
                      "description": "",
                      "type": "undefined"
                    }
                  ]
                ],
                "signature": "transform<T>(obj: undefined): undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/async_pipe.ts#L99-L99",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "obj",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "transform<T>(obj: Observable<T>|null|undefined): T|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/async_pipe.ts#L100-L100",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "obj",
                      "description": "",
                      "type": "Promise<T>"
                    }
                  ]
                ],
                "signature": "transform<T>(obj: Promise<T>|null|undefined): T|null;"
              }
            }
          ]
        ],
        "signature": "class AsyncPipe implements OnDestroy, PipeTransform {\n  ngOnDestroy(): void;\n  transform(obj: Observable<any> | Promise<any> | null | undefined): any;\n  transform<T>(obj: null): null;\n  transform<T>(obj: undefined): undefined;\n  transform<T>(obj: Observable<T> | null | undefined): T | null;\n  transform<T>(obj: Promise<T> | null | undefined): T | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "DatePipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/date_pipe.ts#L153-L179",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nFormats a date value according to locale rules.\n\nOnly the `en-US` locale data comes with Angular. To localize dates\nin another language, you must import the corresponding locale data.\nSee the [I18n guide](guide/i18n#i18n-pipes) for more information.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`formatDate()`\n\n" }],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nThe result of this pipe is not reevaluated when the input is mutated. To avoid the need to\nreformat the date on every change-detection cycle, treat the date as an immutable object\nand change the reference when the pipe needs to run again.\n\n### Pre-defined format options\n\nExamples are given in `en-US` locale.\n\n- `'short'`: equivalent to `'M/d/yy, h:mm a'` (`6/15/15, 9:03 AM`).\n- `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (`Jun 15, 2015, 9:03:01 AM`).\n- `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (`June 15, 2015 at 9:03:01 AM\nGMT+1`).\n- `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (`Monday, June 15, 2015 at\n9:03:01 AM GMT+01:00`).\n- `'shortDate'`: equivalent to `'M/d/yy'` (`6/15/15`).\n- `'mediumDate'`: equivalent to `'MMM d, y'` (`Jun 15, 2015`).\n- `'longDate'`: equivalent to `'MMMM d, y'` (`June 15, 2015`).\n- `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (`Monday, June 15, 2015`).\n- `'shortTime'`: equivalent to `'h:mm a'` (`9:03 AM`).\n- `'mediumTime'`: equivalent to `'h:mm:ss a'` (`9:03:01 AM`).\n- `'longTime'`: equivalent to `'h:mm:ss a z'` (`9:03:01 AM GMT+1`).\n- `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (`9:03:01 AM GMT+01:00`).\n\n### Custom format options\n\nYou can construct a format string using symbols to specify the components\nof a date-time value, as described in the following table.\nFormat details depend on the locale.\nFields marked with (*) are only available in the extra data set for the given locale.\n\n| Field type         | Format      | Description                                                   | Example Value                                              |\n|--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\n| Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n|                    | GGGG        | Wide                                                          | Anno Domini                                                |\n|                    | GGGGG       | Narrow                                                        | A                                                          |\n| Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n|                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n|                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n|                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n| Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n|                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n|                    | MMM         | Abbreviated                                                   | Sep                                                        |\n|                    | MMMM        | Wide                                                          | September                                                  |\n|                    | MMMMM       | Narrow                                                        | S                                                          |\n| Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n|                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n|                    | LLL         | Abbreviated                                                   | Sep                                                        |\n|                    | LLLL        | Wide                                                          | September                                                  |\n|                    | LLLLL       | Narrow                                                        | S                                                          |\n| Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n|                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n| Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n| Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |\n|                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |\n| Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n|                    | EEEE        | Wide                                                          | Tuesday                                                    |\n|                    | EEEEE       | Narrow                                                        | T                                                          |\n|                    | EEEEEE      | Short                                                         | Tu                                                         |\n| Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n|                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n|                    | aaaaa       | Narrow                                                        | a/p                                                        |\n| Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n|                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n|                    | BBBBB       | Narrow                                                        | md                                                         |\n| Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n|                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n|                    | bbbbb       | Narrow                                                        | md                                                         |\n| Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n|                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n| Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n|                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n| Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n|                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n| Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n|                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n| Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n|                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n|                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n| Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n|                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n|                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n|                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n|                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n|                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n|                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n\nNote that timezone correction is not applied to an ISO string that has no time component, such as \"2016-09-19\"\n\n### Format examples\n\nThese examples transform a date into various formats,\nassuming that `dateObj` is a JavaScript `Date` object for\nyear: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\ngiven in the local time for the `en-US` locale.\n\n```\n{{ dateObj | date }}               // output is 'Jun 15, 2015'\n{{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n{{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n{{ dateObj | date:'mm:ss' }}       // output is '43:11'\n```\n\n### Usage example\n\nThe following component uses a date pipe to display the current date in different formats.\n\n```"
            }
          ],
          [
            "Component({",
            {
              "__kind": "heading",
              "description": "\nselector: 'date-pipe',\ntemplate: `<div>\n<p>Today is {{today | date}}</p>\n<p>Or if you prefer, {{today | date:'fullDate'}}</p>\n<p>The time is {{today | date:'h:mm a z'}}</p>\n</div>`\n})\n// Get the current date and time as a date-time value.\nexport class DatePipeComponent {\ntoday: number = Date.now();\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/date_pipe.ts#L170-L178",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The date expression: a `Date` object,  a number",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "format",
                      "description": "The date/time components to include, using predefined options or a",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "timezone",
                      "description": "A timezone offset (such as `'+0430'`), or a standard",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "A locale code for the locale format rules to use.",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A date string in the desired format.\n"
                    }
                  ]
                ],
                "signature": "transform(value: any, format = 'mediumDate', timezone?: string, locale?: string): string|null;"
              }
            }
          ]
        ],
        "signature": "class DatePipe implements PipeTransform {\n  transform(\n    value: any,\n    format = \"mediumDate\",\n    timezone?: string,\n    locale?: string\n  ): string | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "I18nPluralPipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/i18n_plural_pipe.ts#L31-L53",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nMaps a value to a string that pluralizes the value according to locale rules.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Example\n\n{@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/i18n_plural_pipe.ts#L42-L52",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "the number to be formatted",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pluralMap",
                      "description": "an object that mimics the ICU format, see",
                      "type": "{ [count: string]: string; }"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "a `string` defining the locale to use (uses the current {@link LOCALE_ID} by",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "transform(value: number, pluralMap: {[count: string]: string}, locale?: string): string;"
              }
            }
          ]
        ],
        "signature": "class I18nPluralPipe implements PipeTransform {\n  transform(\n    value: number,\n    pluralMap: { [count: string]: string },\n    locale?: string\n  ): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "I18nSelectPipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/i18n_select_pipe.ts#L29-L53",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nGeneric selector that displays the string that matches the current value.\n\nIf none of the keys of the `mapping` match the `value`, then the content\nof the `other` key is returned when present, otherwise an empty string is returned.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Example\n\n{@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/i18n_select_pipe.ts#L36-L52",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "a string to be internationalized.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mapping",
                      "description": "an object that indicates the text that should be displayed",
                      "type": "{ [key: string]: string; }"
                    }
                  ]
                ],
                "signature": "transform(value: string|null|undefined, mapping: {[key: string]: string}): string;"
              }
            }
          ]
        ],
        "signature": "class I18nSelectPipe implements PipeTransform {\n  transform(\n    value: string | null | undefined,\n    mapping: { [key: string]: string }\n  ): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "JsonPipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/json_pipe.ts#L26-L34",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nConverts a value into its JSON-format representation.  Useful for debugging.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nThe following component uses a JSON pipe to convert an object\nto JSON format, and displays the string in both formats for comparison.\n\n{@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/json_pipe.ts#L31-L33",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "A value of any type to convert into a JSON-format string.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "transform(value: any): string;"
              }
            }
          ]
        ],
        "signature": "class JsonPipe implements PipeTransform {\n  transform(value: any): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "LowerCasePipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/case_conversion_pipes.ts#L27-L39",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Transforms text to all lower case.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`UpperCasePipe`" }],
          ["see", { "__kind": "heading", "description": "`TitleCasePipe`" }],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nThe following example defines a view that allows the user to enter\ntext, and then uses the pipe to convert the input text to all lower case.\n\n<code-example path=\"common/pipes/ts/lowerupper_pipe.ts\" region='LowerUpperPipe'></code-example>\n"
            }
          ],
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/case_conversion_pipes.ts#L32-L38",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The string to transform to lower case.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "transform(value: string): string;"
              }
            }
          ]
        ],
        "signature": "class LowerCasePipe implements PipeTransform {\n  transform(value: string): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "CurrencyPipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/number_pipe.ts#L176-L247",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nTransforms a number to a currency string, formatted according to locale rules\nthat determine group sizing and separator, decimal-point character,\nand other locale-specific configurations.\n\n{@a currency-code-deprecation}\n<div class=\"alert is-helpful\">\n\n**Deprecation notice:**\n\nThe default currency code is currently always `USD` but this is deprecated from v9.\n\n**In v11 the default currency code will be taken from the current locale identified by\nthe `LOCAL_ID` token. See the [i18n guide](guide/i18n#setting-up-the-locale-of-your-app) for\nmore information.**\n\nIf you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\nyour application `NgModule`:\n\n```ts\n{provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n```\n\n</div>\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`getCurrencySymbol()`" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`formatCurrency()`\n" }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following code shows how the pipe transforms numbers\ninto text strings, according to various format specifications,\nwhere the caller's default locale is `en-US`.\n\n<code-example path=\"common/pipes/ts/currency_pipe.ts\" region='CurrencyPipe'></code-example>\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/number_pipe.ts#L215-L246",
                "info": [
                  ["description", { "__kind": "heading", "description": "" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The number to be formatted as currency.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "currencyCode",
                      "description": "The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "display",
                      "description": "The format for the currency indicator. One of the following:",
                      "type": "string | boolean"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "digitsInfo",
                      "description": "Decimal representation options, specified by a string",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "A locale code for the locale format rules to use.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "transform(   value: any, currencyCode?: string,   display: 'code'|'symbol'|'symbol-narrow'|string|boolean = 'symbol', digitsInfo?: string,   locale?: string): string|null;"
              }
            }
          ]
        ],
        "signature": "class CurrencyPipe implements PipeTransform {\n  transform(\n    value: any,\n    currencyCode?: string,\n    display: \"code\" | \"symbol\" | \"symbol-narrow\" | string | boolean = \"symbol\",\n    digitsInfo?: string,\n    locale?: string\n  ): string | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "DecimalPipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/number_pipe.ts#L51-L82",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nTransforms a number into a string,\nformatted according to locale rules that determine group sizing and\nseparator, decimal-point character, and other locale-specific\nconfigurations.\n\nIf no parameters are specified, the function rounds off to the nearest value using this\n[rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).\nThe behavior differs from that of the JavaScript ```Math.round()``` function.\nIn the following case for example, the pipe rounds down where\n```Math.round()``` rounds up:\n\n```html\n-2.5 | number:'1.0-0'\n> -3\nMath.round(-2.5)\n> -2\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`formatNumber()`\n" }],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following code shows how the pipe transforms numbers\ninto text strings, according to various format specifications,\nwhere the caller's default locale is `en-US`.\n\n### Example\n\n<code-example path=\"common/pipes/ts/number_pipe.ts\" region='NumberPipe'></code-example>\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/number_pipe.ts#L70-L81",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The number to be formatted.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "digitsInfo",
                      "description": "Decimal representation options, specified by a string",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "A locale code for the locale format rules to use.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "transform(value: any, digitsInfo?: string, locale?: string): string|null;"
              }
            }
          ]
        ],
        "signature": "class DecimalPipe implements PipeTransform {\n  transform(value: any, digitsInfo?: string, locale?: string): string | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "PercentPipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/number_pipe.ts#L104-L134",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nTransforms a number to a percentage\nstring, formatted according to locale rules that determine group sizing and\nseparator, decimal-point character, and other locale-specific\nconfigurations.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`formatPercent()`\n" }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following code shows how the pipe transforms numbers\ninto text strings, according to various format specifications,\nwhere the caller's default locale is `en-US`.\n\n<code-example path=\"common/pipes/ts/percent_pipe.ts\" region='PercentPipe'></code-example>\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/number_pipe.ts#L124-L133",
                "info": [
                  ["description", { "__kind": "heading", "description": "" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The number to be formatted as a percentage.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "digitsInfo",
                      "description": "Decimal representation options, specified by a string",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "A locale code for the locale format rules to use.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "transform(value: any, digitsInfo?: string, locale?: string): string|null;"
              }
            }
          ]
        ],
        "signature": "class PercentPipe implements PipeTransform {\n  transform(value: any, digitsInfo?: string, locale?: string): string | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "SlicePipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/slice_pipe.ts#L47-L81",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nCreates a new `Array` or `String` containing a subset (slice) of the elements.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nAll behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\nand `String.prototype.slice()`.\n\nWhen operating on an `Array`, the returned `Array` is always a copy even when all\nthe elements are being returned.\n\nWhen operating on a blank value, the pipe returns the blank value.\n\n### List Example\n\nThis `ngFor` example:\n\n{@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n\nproduces the following:\n\n```html\n<li>b</li>\n<li>c</li>\n```\n\n### String Examples\n\n{@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/slice_pipe.ts#L68-L76",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "start",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "end",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "transform(value: any, start: number, end?: number): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/slice_pipe.ts#L64-L64",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "a list or a string to be sliced.",
                      "type": "readonly T[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "start",
                      "description": "the starting index of the subset to return:",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "end",
                      "description": "the ending index of the subset to return:",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "transform<T>(value: ReadonlyArray<T>, start: number, end?: number): Array<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/slice_pipe.ts#L65-L65",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "start",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "end",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "transform(value: string, start: number, end?: number): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/slice_pipe.ts#L66-L66",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "null"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "start",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "end",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "transform(value: null, start: number, end?: number): null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/slice_pipe.ts#L67-L67",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "undefined"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "start",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "end",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "transform(value: undefined, start: number, end?: number): undefined;"
              }
            }
          ]
        ],
        "signature": "class SlicePipe implements PipeTransform {\n  transform(value: any, start: number, end?: number): any;\n  transform<T>(value: ReadonlyArray<T>, start: number, end?: number): Array<T>;\n  transform(value: string, start: number, end?: number): string;\n  transform(value: null, start: number, end?: number): null;\n  transform(value: undefined, start: number, end?: number): undefined;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "UpperCasePipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/case_conversion_pipes.ts#L94-L106",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Transforms text to all upper case."
            }
          ],
          ["see", { "__kind": "heading", "description": "`LowerCasePipe`" }],
          ["see", { "__kind": "heading", "description": "`TitleCasePipe`\n" }],
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/case_conversion_pipes.ts#L99-L105",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The string to transform to upper case.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "transform(value: string): string;"
              }
            }
          ]
        ],
        "signature": "class UpperCasePipe implements PipeTransform {\n  transform(value: string): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "TitleCasePipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/case_conversion_pipes.ts#L70-L84",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Transforms text to title case.\nCapitalizes the first letter of each word and transforms the\nrest of the word to lower case.\nWords are delimited by any whitespace character, such as a space, tab, or line-feed character.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`LowerCasePipe`" }],
          ["see", { "__kind": "heading", "description": "`UpperCasePipe`\n" }],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following example shows the result of transforming various strings into title case.\n\n<code-example path=\"common/pipes/ts/titlecase_pipe.ts\" region='TitleCasePipe'></code-example>\n"
            }
          ],
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/case_conversion_pipes.ts#L75-L83",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The string to transform to title case.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "transform(value: string): string;"
              }
            }
          ]
        ],
        "signature": "class TitleCasePipe implements PipeTransform {\n  transform(value: string): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "KeyValuePipe",
    "overloads": [
      {
        "file": "packages/common/src/pipes/keyvalue_pipe.ts#L46-L100",
        "info": [
          ["ngModule", { "__kind": "heading", "description": "CommonModule" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nTransforms Object or Map into an array of key value pairs.\n\nThe output array will be ordered by keys.\nBy default the comparator will be by Unicode point value.\nYou can optionally pass a compareFn if your keys are complex types.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Examples\n\nThis examples show how an Object or a Map can be iterated by ngFor with the use of this\nkeyvalue pipe.\n\n{@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/keyvalue_pipe.ts#L76-L99",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "compareFn",
                      "description": "",
                      "type": "(a: KeyValue<K, V>, b: KeyValue<K, V>) => number"
                    }
                  ]
                ],
                "signature": "transform<K, V>(   input: null|{[key: string]: V, [key: number]: V}|ReadonlyMap<K, V>,   compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):   Array<KeyValue<K, V>>|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/keyvalue_pipe.ts#L53-L53",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "null"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "compareFn",
                      "description": "",
                      "type": "(a: KeyValue<K, V>, b: KeyValue<K, V>) => number"
                    }
                  ]
                ],
                "signature": "transform<K, V>(input: null, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/keyvalue_pipe.ts#L54-L57",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "compareFn",
                      "description": "",
                      "type": "(a: KeyValue<string, V>, b: KeyValue<string, V>) => number"
                    }
                  ]
                ],
                "signature": "transform<V>(   input: {[key: string]: V}|ReadonlyMap<string, V>,   compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):   Array<KeyValue<string, V>>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/keyvalue_pipe.ts#L58-L61",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "compareFn",
                      "description": "",
                      "type": "(a: KeyValue<string, V>, b: KeyValue<string, V>) => number"
                    }
                  ]
                ],
                "signature": "transform<V>(   input: {[key: string]: V}|ReadonlyMap<string, V>|null,   compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):   Array<KeyValue<string, V>>|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/keyvalue_pipe.ts#L62-L65",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "compareFn",
                      "description": "",
                      "type": "(a: KeyValue<number, V>, b: KeyValue<number, V>) => number"
                    }
                  ]
                ],
                "signature": "transform<V>(   input: {[key: number]: V}|ReadonlyMap<number, V>,   compareFn?: (a: KeyValue<number, V>, b: KeyValue<number, V>) => number):   Array<KeyValue<number, V>>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/keyvalue_pipe.ts#L66-L69",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "compareFn",
                      "description": "",
                      "type": "(a: KeyValue<number, V>, b: KeyValue<number, V>) => number"
                    }
                  ]
                ],
                "signature": "transform<V>(   input: {[key: number]: V}|ReadonlyMap<number, V>|null,   compareFn?: (a: KeyValue<number, V>, b: KeyValue<number, V>) => number):   Array<KeyValue<number, V>>|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/keyvalue_pipe.ts#L70-L72",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "compareFn",
                      "description": "",
                      "type": "(a: KeyValue<K, V>, b: KeyValue<K, V>) => number"
                    }
                  ]
                ],
                "signature": "transform<K, V>(   input: ReadonlyMap<K, V>,   compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "transform",
              "info": {
                "file": "packages/common/src/pipes/keyvalue_pipe.ts#L73-L75",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "compareFn",
                      "description": "",
                      "type": "(a: KeyValue<K, V>, b: KeyValue<K, V>) => number"
                    }
                  ]
                ],
                "signature": "transform<K, V>(   input: ReadonlyMap<K, V>|null,   compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;"
              }
            }
          ]
        ],
        "signature": "class KeyValuePipe implements PipeTransform {\n  transform<K, V>(\n    input: null | { [key: string]: V; [key: number]: V } | ReadonlyMap<K, V>,\n    compareFn: (\n      a: KeyValue<K, V>,\n      b: KeyValue<K, V>\n    ) => number = defaultComparator\n  ): Array<KeyValue<K, V>> | null;\n  transform<K, V>(\n    input: null,\n    compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number\n  ): null;\n  transform<V>(\n    input: { [key: string]: V } | ReadonlyMap<string, V>,\n    compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number\n  ): Array<KeyValue<string, V>>;\n  transform<V>(\n    input: { [key: string]: V } | ReadonlyMap<string, V> | null,\n    compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number\n  ): Array<KeyValue<string, V>> | null;\n  transform<V>(\n    input: { [key: number]: V } | ReadonlyMap<number, V>,\n    compareFn?: (a: KeyValue<number, V>, b: KeyValue<number, V>) => number\n  ): Array<KeyValue<number, V>>;\n  transform<V>(\n    input: { [key: number]: V } | ReadonlyMap<number, V> | null,\n    compareFn?: (a: KeyValue<number, V>, b: KeyValue<number, V>) => number\n  ): Array<KeyValue<number, V>> | null;\n  transform<K, V>(\n    input: ReadonlyMap<K, V>,\n    compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number\n  ): Array<KeyValue<K, V>>;\n  transform<K, V>(\n    input: ReadonlyMap<K, V> | null,\n    compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number\n  ): Array<KeyValue<K, V>> | null;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "common",
    "name": "KeyValue",
    "overloads": [
      {
        "file": "packages/common/src/pipes/keyvalue_pipe.ts#L21-L24",
        "signature": "interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A key value pair.\nUsually used to represent the key value pairs from a Map or Object.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "key",
              "description": "",
              "type": "K"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "V"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "common",
    "name": "ɵPLATFORM_BROWSER_ID",
    "overloads": [
      {
        "file": "packages/common/src/platform_id.ts#L9-L9",
        "signature": "const PLATFORM_BROWSER_ID: \"browser\";",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "common",
    "name": "ɵPLATFORM_SERVER_ID",
    "overloads": [
      {
        "file": "packages/common/src/platform_id.ts#L10-L10",
        "signature": "const PLATFORM_SERVER_ID: \"server\";",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "common",
    "name": "ɵPLATFORM_WORKER_APP_ID",
    "overloads": [
      {
        "file": "packages/common/src/platform_id.ts#L11-L11",
        "signature": "const PLATFORM_WORKER_APP_ID: \"browserWorkerApp\";",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "common",
    "name": "ɵPLATFORM_WORKER_UI_ID",
    "overloads": [
      {
        "file": "packages/common/src/platform_id.ts#L12-L12",
        "signature": "const PLATFORM_WORKER_UI_ID: \"browserWorkerUi\";",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "isPlatformBrowser",
    "overloads": [
      {
        "file": "packages/common/src/platform_id.ts#L18-L20",
        "signature": "function isPlatformBrowser(platformId: Object): boolean;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns whether a platform id represents a browser platform."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "platformId",
              "description": "",
              "type": "Object"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "isPlatformServer",
    "overloads": [
      {
        "file": "packages/common/src/platform_id.ts#L26-L28",
        "signature": "function isPlatformServer(platformId: Object): boolean;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns whether a platform id represents a server platform."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "platformId",
              "description": "",
              "type": "Object"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "isPlatformWorkerApp",
    "overloads": [
      {
        "file": "packages/common/src/platform_id.ts#L34-L36",
        "signature": "function isPlatformWorkerApp(platformId: Object): boolean;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns whether a platform id represents a web worker app platform."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "platformId",
              "description": "",
              "type": "Object"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "isPlatformWorkerUi",
    "overloads": [
      {
        "file": "packages/common/src/platform_id.ts#L42-L44",
        "signature": "function isPlatformWorkerUi(platformId: Object): boolean;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns whether a platform id represents a web worker UI platform."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "platformId",
              "description": "",
              "type": "Object"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "common",
    "name": "VERSION",
    "overloads": [
      {
        "file": "packages/common/src/version.ts#L20-L20",
        "signature": "const VERSION: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "ViewportScroller",
    "overloads": [
      {
        "file": "packages/common/src/viewport_scroller.ts#L20-L62",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Defines a scroll position manager. Implemented by `BrowserViewportScroller`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵprov",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setOffset",
              "info": {
                "file": "packages/common/src/viewport_scroller.ts#L36-L36",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Configures the top offset used when scrolling to an anchor."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "offset",
                      "description": "A position in screen coordinates (a tuple with x and y values)",
                      "type": "[number, number] | (() => [number, number])"
                    }
                  ]
                ],
                "signature": "abstract setOffset(offset: [number, number]|(() => [number, number])): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getScrollPosition",
              "info": {
                "file": "packages/common/src/viewport_scroller.ts#L42-L42",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves the current scroll position."
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A position in screen coordinates (a tuple with x and y values).\n"
                    }
                  ]
                ],
                "signature": "abstract getScrollPosition(): [number, number];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "scrollToPosition",
              "info": {
                "file": "packages/common/src/viewport_scroller.ts#L48-L48",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Scrolls to a specified position."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "position",
                      "description": "A position in screen coordinates (a tuple with x and y values).",
                      "type": "[number, number]"
                    }
                  ]
                ],
                "signature": "abstract scrollToPosition(position: [number, number]): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "scrollToAnchor",
              "info": {
                "file": "packages/common/src/viewport_scroller.ts#L54-L54",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Scrolls to an anchor element."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "anchor",
                      "description": "The ID of the anchor element.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract scrollToAnchor(anchor: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setHistoryScrollRestoration",
              "info": {
                "file": "packages/common/src/viewport_scroller.ts#L61-L61",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Disables automatic scroll restoration provided by the browser.\nSee also [window.history.scrollRestoration\ninfo](https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration).\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "scrollRestoration",
                      "description": "",
                      "type": "\"auto\" | \"manual\""
                    }
                  ]
                ],
                "signature": "abstract setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void;"
              }
            }
          ]
        ],
        "signature": "class ViewportScroller {\n  static ɵprov = ɵɵdefineInjectable({\n    token: ViewportScroller,\n    providedIn: \"root\",\n    factory: () =>\n      new BrowserViewportScroller(\n        ɵɵinject(DOCUMENT),\n        window,\n        ɵɵinject(ErrorHandler)\n      ),\n  });\n\n  abstract setOffset(offset: [number, number] | (() => [number, number])): void;\n  abstract getScrollPosition(): [number, number];\n  abstract scrollToPosition(position: [number, number]): void;\n  abstract scrollToAnchor(anchor: string): void;\n  abstract setHistoryScrollRestoration(\n    scrollRestoration: \"auto\" | \"manual\"\n  ): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "ɵNullViewportScroller",
    "overloads": [
      {
        "file": "packages/common/src/viewport_scroller.ts#L180-L207",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Provides an empty implementation of the viewport scroller. This will\nlive in @angular/common as it will be used by both platform-server and platform-webworker.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setOffset",
              "info": {
                "file": "packages/common/src/viewport_scroller.ts#L184-L184",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Empty implementation\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "offset",
                      "description": "",
                      "type": "[number, number] | (() => [number, number])"
                    }
                  ]
                ],
                "signature": "setOffset(offset: [number, number]|(() => [number, number])): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getScrollPosition",
              "info": {
                "file": "packages/common/src/viewport_scroller.ts#L189-L191",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Empty implementation\n"
                    }
                  ]
                ],
                "signature": "getScrollPosition(): [number, number];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "scrollToPosition",
              "info": {
                "file": "packages/common/src/viewport_scroller.ts#L196-L196",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Empty implementation\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "position",
                      "description": "",
                      "type": "[number, number]"
                    }
                  ]
                ],
                "signature": "scrollToPosition(position: [number, number]): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "scrollToAnchor",
              "info": {
                "file": "packages/common/src/viewport_scroller.ts#L201-L201",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Empty implementation\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "anchor",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "scrollToAnchor(anchor: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setHistoryScrollRestoration",
              "info": {
                "file": "packages/common/src/viewport_scroller.ts#L206-L206",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Empty implementation\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "scrollRestoration",
                      "description": "",
                      "type": "\"auto\" | \"manual\""
                    }
                  ]
                ],
                "signature": "setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void;"
              }
            }
          ]
        ],
        "signature": "class NullViewportScroller implements ViewportScroller {\n  getScrollPosition(): [number, number];\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "ɵDomAdapter",
    "overloads": [
      {
        "file": "packages/common/src/dom_adapter.ts#L32-L77",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Provides DOM operations in an environment-agnostic way.\n"
            }
          ],
          [
            "security",
            {
              "__kind": "heading",
              "description": "Tread carefully! Interacting with the DOM directly is dangerous and\ncan introduce XSS risks.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getProperty",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L34-L34",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "",
                      "type": "Element"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract getProperty(el: Element, name: string): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "dispatchEvent",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L35-L35",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "evt",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract dispatchEvent(el: any, evt: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "log",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L38-L38",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract log(error: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "logGroup",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L39-L39",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract logGroup(error: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "logGroupEnd",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L40-L40",
                "info": [],
                "signature": "abstract logGroupEnd(): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "remove",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L43-L43",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract remove(el: any): Node;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createElement",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L44-L44",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tagName",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "doc",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract createElement(tagName: any, doc?: any): HTMLElement;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createHtmlDocument",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L45-L45",
                "info": [],
                "signature": "abstract createHtmlDocument(): HTMLDocument;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getDefaultDocument",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L46-L46",
                "info": [],
                "signature": "abstract getDefaultDocument(): Document;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isElementNode",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L49-L49",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract isElementNode(node: any): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isShadowRoot",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L52-L52",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract isShadowRoot(node: any): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onAndCancel",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L55-L55",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "evt",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "listener",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract onAndCancel(el: any, evt: any, listener: any): Function;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "supportsDOMEvents",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L56-L56",
                "info": [],
                "signature": "abstract supportsDOMEvents(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getGlobalEventTarget",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L59-L59",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "doc",
                      "description": "",
                      "type": "Document"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "target",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract getGlobalEventTarget(doc: Document, target: string): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getHistory",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L62-L62",
                "info": [],
                "signature": "abstract getHistory(): History;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getLocation",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L63-L64",
                "info": [],
                "signature": "abstract getLocation():   any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getBaseHref",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L65-L65",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "doc",
                      "description": "",
                      "type": "Document"
                    }
                  ]
                ],
                "signature": "abstract getBaseHref(doc: Document): string|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resetBaseElement",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L66-L66",
                "info": [],
                "signature": "abstract resetBaseElement(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getUserAgent",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L69-L69",
                "info": [],
                "signature": "abstract getUserAgent(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "performanceNow",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L72-L72",
                "info": [],
                "signature": "abstract performanceNow(): number;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "supportsCookies",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L75-L75",
                "info": [],
                "signature": "abstract supportsCookies(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getCookie",
              "info": {
                "file": "packages/common/src/dom_adapter.ts#L76-L76",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract getCookie(name: string): string|null;"
              }
            }
          ]
        ],
        "signature": "class DomAdapter {\n  abstract getProperty(el: Element, name: string): any;\n  abstract dispatchEvent(el: any, evt: any): any;\n  abstract log(error: any): any;\n  abstract logGroup(error: any): any;\n  abstract logGroupEnd(): any;\n  abstract remove(el: any): Node;\n  abstract createElement(tagName: any, doc?: any): HTMLElement;\n  abstract createHtmlDocument(): HTMLDocument;\n  abstract getDefaultDocument(): Document;\n  abstract isElementNode(node: any): boolean;\n  abstract isShadowRoot(node: any): boolean;\n  abstract onAndCancel(el: any, evt: any, listener: any): Function;\n  abstract supportsDOMEvents(): boolean;\n  abstract getGlobalEventTarget(doc: Document, target: string): any;\n  abstract getHistory(): History;\n  abstract getLocation(): any;\n  abstract getBaseHref(doc: Document): string | null;\n  abstract resetBaseElement(): void;\n  abstract getUserAgent(): string;\n  abstract performanceNow(): number;\n  abstract supportsCookies(): boolean;\n  abstract getCookie(name: string): string | null;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "ɵgetDOM",
    "overloads": [
      {
        "file": "packages/common/src/dom_adapter.ts#L11-L13",
        "signature": "function getDOM(): DomAdapter;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "common",
    "name": "ɵsetRootDomAdapter",
    "overloads": [
      {
        "file": "packages/common/src/dom_adapter.ts#L19-L23",
        "signature": "function setRootDomAdapter(adapter: DomAdapter);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "adapter",
              "description": "",
              "type": "DomAdapter"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "ɵBrowserPlatformLocation",
    "overloads": [
      {
        "file": "packages/common/src/location/platform_location.ts#L100-L185",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "`PlatformLocation` encapsulates all of the direct calls to platform APIs.\nThis class should not be used directly by an application developer. Instead, use\n{@link Location}.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "location",
              "description": "",
              "type": "Location"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_init",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L116-L119",
                "info": [],
                "signature": "_init();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getBaseHrefFromDOM",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L121-L123",
                "info": [],
                "signature": "getBaseHrefFromDOM(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onPopState",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L125-L127",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "LocationChangeListener"
                    }
                  ]
                ],
                "signature": "onPopState(fn: LocationChangeListener): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onHashChange",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L129-L131",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "LocationChangeListener"
                    }
                  ]
                ],
                "signature": "onHashChange(fn: LocationChangeListener): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pushState",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L158-L164",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "title",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "pushState(state: any, title: string, url: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "replaceState",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L166-L172",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "title",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "replaceState(state: any, title: string, url: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forward",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L174-L176",
                "info": [],
                "signature": "forward(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "back",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L178-L180",
                "info": [],
                "signature": "back(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getState",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L182-L184",
                "info": [],
                "signature": "getState(): unknown;"
              }
            }
          ]
        ],
        "signature": "class BrowserPlatformLocation extends PlatformLocation {\n  public readonly location!: Location;\n\n  _init();\n  getBaseHrefFromDOM(): string;\n  onPopState(fn: LocationChangeListener): void;\n  onHashChange(fn: LocationChangeListener): void;\n  pushState(state: any, title: string, url: string): void;\n  replaceState(state: any, title: string, url: string): void;\n  forward(): void;\n  back(): void;\n  getState(): unknown;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "HashLocationStrategy",
    "overloads": [
      {
        "file": "packages/common/src/location/hash_location_strategy.ts#L34-L92",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA {@link LocationStrategy} used to configure the {@link Location} service to\nrepresent its state in the\n[hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\nof the browser's URL.\n\nFor instance, if you call `location.go('/foo')`, the browser's URL will become\n`example.com#/foo`.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Example\n\n{@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "onPopState",
              "info": {
                "file": "packages/common/src/location/hash_location_strategy.ts#L46-L49",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "LocationChangeListener"
                    }
                  ]
                ],
                "signature": "onPopState(fn: LocationChangeListener): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getBaseHref",
              "info": {
                "file": "packages/common/src/location/hash_location_strategy.ts#L51-L53",
                "info": [],
                "signature": "getBaseHref(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "path",
              "info": {
                "file": "packages/common/src/location/hash_location_strategy.ts#L55-L62",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "includeHash",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "path(includeHash: boolean = false): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "prepareExternalUrl",
              "info": {
                "file": "packages/common/src/location/hash_location_strategy.ts#L64-L67",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "internal",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "prepareExternalUrl(internal: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pushState",
              "info": {
                "file": "packages/common/src/location/hash_location_strategy.ts#L69-L75",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "title",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "queryParams",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "pushState(state: any, title: string, path: string, queryParams: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "replaceState",
              "info": {
                "file": "packages/common/src/location/hash_location_strategy.ts#L77-L83",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "title",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "queryParams",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "replaceState(state: any, title: string, path: string, queryParams: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forward",
              "info": {
                "file": "packages/common/src/location/hash_location_strategy.ts#L85-L87",
                "info": [],
                "signature": "forward(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "back",
              "info": {
                "file": "packages/common/src/location/hash_location_strategy.ts#L89-L91",
                "info": [],
                "signature": "back(): void;"
              }
            }
          ]
        ],
        "signature": "class HashLocationStrategy extends LocationStrategy {\n  onPopState(fn: LocationChangeListener): void;\n  getBaseHref(): string;\n  path(includeHash: boolean = false): string;\n  prepareExternalUrl(internal: string): string;\n  pushState(state: any, title: string, path: string, queryParams: string);\n  replaceState(state: any, title: string, path: string, queryParams: string);\n  forward(): void;\n  back(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "Location",
    "overloads": [
      {
        "file": "packages/common/src/location/location.ts#L51-L256",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nA service that applications can use to interact with a browser's URL.\n\nDepending on the `LocationStrategy` used, `Location` persists\nto the URL's path or the URL's hash segment.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nIt's better to use the `Router#navigate` service to trigger route changes. Use\n`Location` only if you need to interact with or create normalized URLs outside of\nrouting.\n\n`Location` is responsible for normalizing the URL against the application's base href.\nA normalized URL is absolute from the URL host, includes the application's base href, and has no\ntrailing slash:\n- `/my/app/user/123` is normalized\n- `my/app/user/123` **is not** normalized\n- `/my/app/user/123/` **is not** normalized\n\n### Example\n\n<code-example path='common/location/ts/path_location_component.ts'\nregion='LocationComponent'></code-example>\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_subject",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_baseHref",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_platformStrategy",
              "description": "",
              "type": "LocationStrategy"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_platformLocation",
              "description": "",
              "type": "PlatformLocation"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_urlChangeListeners",
              "description": "",
              "type": "((url: string, state: unknown) => void)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_urlChangeSubscription",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "normalizeQueryParams",
              "description": "Normalizes URL parameters by prepending with `?` if needed.",
              "type": "(params: string) => string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "joinWithSlash",
              "description": "Joins two parts of a URL with a slash if needed.",
              "type": "(start: string, end: string) => string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stripTrailingSlash",
              "description": "Removes a trailing slash from a URL string if needed.\nLooks for the first occurrence of either `#`, `?`, or the end of the\nline as `/` characters and removes the trailing slash if one exists.",
              "type": "(url: string) => string"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "path",
              "info": {
                "file": "packages/common/src/location/location.ts#L94-L96",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Normalizes the URL path for this location.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "includeHash",
                      "description": "True to include an anchor fragment in the path.",
                      "type": "boolean"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The normalized URL path.\n"
                    }
                  ]
                ],
                "signature": "path(includeHash: boolean = false): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getState",
              "info": {
                "file": "packages/common/src/location/location.ts#L102-L104",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Reports the current state of the location history."
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The current value of the `history.state` object.\n"
                    }
                  ]
                ],
                "signature": "getState(): unknown;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isCurrentPathEqualTo",
              "info": {
                "file": "packages/common/src/location/location.ts#L115-L117",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Normalizes the given path and compares to the current normalized path.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "The given URL path.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "query",
                      "description": "Query parameters.",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "True if the given URL path is equal to the current normalized path, false\notherwise.\n"
                    }
                  ]
                ],
                "signature": "isCurrentPathEqualTo(path: string, query: string = ''): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "normalize",
              "info": {
                "file": "packages/common/src/location/location.ts#L126-L128",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Normalizes a URL path by stripping any trailing slashes.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "String representing a URL.",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The normalized URL string.\n"
                    }
                  ]
                ],
                "signature": "normalize(url: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "prepareExternalUrl",
              "info": {
                "file": "packages/common/src/location/location.ts#L140-L145",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Normalizes an external URL path.\nIf the given URL doesn't begin with a leading slash (`'/'`), adds one\nbefore normalizing. Adds a hash if `HashLocationStrategy` is\nin use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "String representing a URL.",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A normalized platform-specific URL.\n"
                    }
                  ]
                ],
                "signature": "prepareExternalUrl(url: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "go",
              "info": {
                "file": "packages/common/src/location/location.ts#L157-L161",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Changes the browser's URL to a normalized version of a given URL, and pushes a\nnew item onto the platform's history.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "URL path to normalize.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "query",
                      "description": "Query parameters.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "Location history state.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "go(path: string, query: string = '', state: any = null): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "replaceState",
              "info": {
                "file": "packages/common/src/location/location.ts#L171-L175",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Changes the browser's URL to a normalized version of the given URL, and replaces\nthe top item on the platform's history stack.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "URL path to normalize.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "query",
                      "description": "Query parameters.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "Location history state.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "replaceState(path: string, query: string = '', state: any = null): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forward",
              "info": {
                "file": "packages/common/src/location/location.ts#L180-L182",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Navigates forward in the platform's history.\n"
                    }
                  ]
                ],
                "signature": "forward(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "back",
              "info": {
                "file": "packages/common/src/location/location.ts#L187-L189",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Navigates back in the platform's history.\n"
                    }
                  ]
                ],
                "signature": "back(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onUrlChange",
              "info": {
                "file": "packages/common/src/location/location.ts#L197-L205",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Registers a URL change listener. Use to catch updates performed by the Angular\nframework that are not detectible through \"popstate\" or \"hashchange\" events.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The change handler function, which take a URL and a location history state.",
                      "type": "(url: string, state: unknown) => void"
                    }
                  ]
                ],
                "signature": "onUrlChange(fn: (url: string, state: unknown) => void);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_notifyUrlChangeListeners",
              "info": {
                "file": "packages/common/src/location/location.ts#L208-L210",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "unknown"
                    }
                  ]
                ],
                "signature": "_notifyUrlChangeListeners(url: string = '', state: unknown);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "subscribe",
              "info": {
                "file": "packages/common/src/location/location.ts#L220-L224",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Subscribes to the platform's `popState` events.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "Event that is triggered when the state history changes.",
                      "type": ""
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "exception",
                      "description": "The exception to throw.",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "Subscribed events.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "onNext",
                      "description": "",
                      "type": "(value: PopStateEvent) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "onThrow",
                      "description": "",
                      "type": "(exception: any) => void"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "onReturn",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "subscribe(   onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void)|null,   onReturn?: (() => void)|null): SubscriptionLike;"
              }
            }
          ]
        ],
        "signature": "class Location {\n  _subject: EventEmitter<any> = new EventEmitter();\n  _baseHref: string;\n  _platformStrategy: LocationStrategy;\n  _platformLocation: PlatformLocation;\n  _urlChangeListeners: ((url: string, state: unknown) => void)[] = [];\n  _urlChangeSubscription?: SubscriptionLike;\n  public static normalizeQueryParams: (\n    params: string\n  ) => string = normalizeQueryParams;\n  public static joinWithSlash: (\n    start: string,\n    end: string\n  ) => string = joinWithSlash;\n  public static stripTrailingSlash: (\n    url: string\n  ) => string = stripTrailingSlash;\n\n  path(includeHash: boolean = false): string;\n  getState(): unknown;\n  isCurrentPathEqualTo(path: string, query: string = \"\"): boolean;\n  normalize(url: string): string;\n  prepareExternalUrl(url: string): string;\n  go(path: string, query: string = \"\", state: any = null): void;\n  replaceState(path: string, query: string = \"\", state: any = null): void;\n  forward(): void;\n  back(): void;\n  onUrlChange(fn: (url: string, state: unknown) => void);\n  _notifyUrlChangeListeners(url: string = \"\", state: unknown);\n  subscribe(\n    onNext: (value: PopStateEvent) => void,\n    onThrow?: ((exception: any) => void) | null,\n    onReturn?: (() => void) | null\n  ): SubscriptionLike;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "common",
    "name": "PopStateEvent",
    "overloads": [
      {
        "file": "packages/common/src/location/location.ts#L16-L21",
        "signature": "interface PopStateEvent {\n  pop?: boolean;\n  state?: any;\n  type?: string;\n  url?: string;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "pop",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "state",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "url",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "common",
    "name": "APP_BASE_HREF",
    "overloads": [
      {
        "file": "packages/common/src/location/location_strategy.ts#L74-L74",
        "signature": "const APP_BASE_HREF: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "LocationStrategy",
    "overloads": [
      {
        "file": "packages/common/src/location/location_strategy.ts#L31-L41",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Enables the `Location` service to read route state from the browser's URL.\nAngular provides two strategies:\n`HashLocationStrategy` and `PathLocationStrategy`.\n\nApplications should use the `Router` or `Location` services to\ninteract with application route state.\n\nFor instance, `HashLocationStrategy` produces URLs like\n<code class=\"no-auto-link\">http://example.com#/foo</code>,\nand `PathLocationStrategy` produces\n<code class=\"no-auto-link\">http://example.com/foo</code> as an equivalent URL.\n\nSee these two classes for more.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "path",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L33-L33",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "includeHash",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "abstract path(includeHash?: boolean): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "prepareExternalUrl",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L34-L34",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "internal",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract prepareExternalUrl(internal: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pushState",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L35-L35",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "title",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "queryParams",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract pushState(state: any, title: string, url: string, queryParams: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "replaceState",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L36-L36",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "title",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "queryParams",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract replaceState(state: any, title: string, url: string, queryParams: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forward",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L37-L37",
                "info": [],
                "signature": "abstract forward(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "back",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L38-L38",
                "info": [],
                "signature": "abstract back(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onPopState",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L39-L39",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "LocationChangeListener"
                    }
                  ]
                ],
                "signature": "abstract onPopState(fn: LocationChangeListener): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getBaseHref",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L40-L40",
                "info": [],
                "signature": "abstract getBaseHref(): string;"
              }
            }
          ]
        ],
        "signature": "class LocationStrategy {\n  abstract path(includeHash?: boolean): string;\n  abstract prepareExternalUrl(internal: string): string;\n  abstract pushState(\n    state: any,\n    title: string,\n    url: string,\n    queryParams: string\n  ): void;\n  abstract replaceState(\n    state: any,\n    title: string,\n    url: string,\n    queryParams: string\n  ): void;\n  abstract forward(): void;\n  abstract back(): void;\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract getBaseHref(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "PathLocationStrategy",
    "overloads": [
      {
        "file": "packages/common/src/location/location_strategy.ts#L103-L161",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA {@link LocationStrategy} used to configure the {@link Location} service to\nrepresent its state in the\n[path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\nbrowser's URL.\n\nIf you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}\nor add a base element to the document. This URL prefix that will be preserved\nwhen generating and recognizing URLs.\n\nFor instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n`location.go('/foo')`, the browser's URL will become\n`example.com/my/app/foo`.\n\nSimilarly, if you add `<base href='/my/app'/>` to the document and call\n`location.go('/foo')`, the browser's URL will become\n`example.com/my/app/foo`.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Example\n\n{@example common/location/ts/path_location_component.ts region='LocationComponent'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "onPopState",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L124-L127",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "LocationChangeListener"
                    }
                  ]
                ],
                "signature": "onPopState(fn: LocationChangeListener): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getBaseHref",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L129-L131",
                "info": [],
                "signature": "getBaseHref(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "prepareExternalUrl",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L133-L135",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "internal",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "prepareExternalUrl(internal: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "path",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L137-L142",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "includeHash",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "path(includeHash: boolean = false): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pushState",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L144-L147",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "title",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "queryParams",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "pushState(state: any, title: string, url: string, queryParams: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "replaceState",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L149-L152",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "title",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "queryParams",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "replaceState(state: any, title: string, url: string, queryParams: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forward",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L154-L156",
                "info": [],
                "signature": "forward(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "back",
              "info": {
                "file": "packages/common/src/location/location_strategy.ts#L158-L160",
                "info": [],
                "signature": "back(): void;"
              }
            }
          ]
        ],
        "signature": "class PathLocationStrategy extends LocationStrategy {\n  onPopState(fn: LocationChangeListener): void;\n  getBaseHref(): string;\n  prepareExternalUrl(internal: string): string;\n  path(includeHash: boolean = false): string;\n  pushState(state: any, title: string, url: string, queryParams: string);\n  replaceState(state: any, title: string, url: string, queryParams: string);\n  forward(): void;\n  back(): void;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "common",
    "name": "LOCATION_INITIALIZED",
    "overloads": [
      {
        "file": "packages/common/src/location/platform_location.ts#L73-L73",
        "signature": "const LOCATION_INITIALIZED: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "common",
    "name": "LocationChangeEvent",
    "overloads": [
      {
        "file": "packages/common/src/location/platform_location.ts#L81-L84",
        "signature": "interface LocationChangeEvent {\n  type: string;\n  state: any;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA serializable version of the event from `onPopState` or `onHashChange`\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "state",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "common",
    "name": "LocationChangeListener",
    "overloads": [
      {
        "file": "packages/common/src/location/platform_location.ts#L89-L91",
        "signature": "interface LocationChangeListener {}",
        "info": [["publicApi", { "__kind": "heading", "description": "\n" }]]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "common",
    "name": "PlatformLocation",
    "overloads": [
      {
        "file": "packages/common/src/location/platform_location.ts#L35-L61",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "This class should not be used directly by an application developer. Instead, use\n{@link Location}.\n\n`PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be\nplatform-agnostic.\nThis means that we can have different implementation of `PlatformLocation` for the different\nplatforms that Angular supports. For example, `@angular/platform-browser` provides an\nimplementation specific to the browser environment, while `@angular/platform-server` provides\none suitable for use with server-side rendering.\n\nThe `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\nwhen they need to interact with the DOM APIs like pushState, popState, etc.\n\n{@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\nby the {@link Router} in order to navigate between routes. Since all interactions between {@link\nRouter} /\n{@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`\nclass, they are all platform-agnostic.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "getBaseHrefFromDOM",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L41-L41",
                "info": [],
                "signature": "abstract getBaseHrefFromDOM(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getState",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L42-L42",
                "info": [],
                "signature": "abstract getState(): unknown;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onPopState",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L43-L43",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "LocationChangeListener"
                    }
                  ]
                ],
                "signature": "abstract onPopState(fn: LocationChangeListener): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onHashChange",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L44-L44",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "LocationChangeListener"
                    }
                  ]
                ],
                "signature": "abstract onHashChange(fn: LocationChangeListener): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "replaceState",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L54-L54",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "title",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract replaceState(state: any, title: string, url: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pushState",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L56-L56",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "state",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "title",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract pushState(state: any, title: string, url: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forward",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L58-L58",
                "info": [],
                "signature": "abstract forward(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "back",
              "info": {
                "file": "packages/common/src/location/platform_location.ts#L60-L60",
                "info": [],
                "signature": "abstract back(): void;"
              }
            }
          ]
        ],
        "signature": "class PlatformLocation {\n  abstract getBaseHrefFromDOM(): string;\n  abstract getState(): unknown;\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract onHashChange(fn: LocationChangeListener): void;\n  abstract replaceState(state: any, title: string, url: string): void;\n  abstract pushState(state: any, title: string, url: string): void;\n  abstract forward(): void;\n  abstract back(): void;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "CUSTOM_ELEMENTS_SCHEMA",
    "overloads": [
      {
        "file": "packages/compiler/src/core.ts#L160-L162",
        "signature": "const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "NO_ERRORS_SCHEMA",
    "overloads": [
      {
        "file": "packages/compiler/src/core.ts#L164-L166",
        "signature": "const NO_ERRORS_SCHEMA: SchemaMetadata;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "SchemaMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/core.ts#L156-L158",
        "signature": "interface SchemaMetadata {\n  name: string;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CompilerConfig",
    "overloads": [
      {
        "file": "packages/compiler/src/config.ts#L12-L42",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "defaultEncapsulation",
              "description": "",
              "type": "ViewEncapsulation"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useJit",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "jitDevMode",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "missingTranslation",
              "description": "",
              "type": "MissingTranslationStrategy"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preserveWhitespaces",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "strictInjectionParameters",
              "description": "",
              "type": "boolean"
            }
          ]
        ],
        "signature": "class CompilerConfig {\n  public defaultEncapsulation: ViewEncapsulation | null;\n  public useJit: boolean;\n  public jitDevMode: boolean;\n  public missingTranslation: MissingTranslationStrategy | null;\n  public preserveWhitespaces: boolean;\n  public strictInjectionParameters: boolean;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "preserveWhitespacesDefault",
    "overloads": [
      {
        "file": "packages/compiler/src/config.ts#L44-L47",
        "signature": "function preserveWhitespacesDefault(\n  preserveWhitespacesOption: boolean | null,\n  defaultSetting = false\n): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "preserveWhitespacesOption",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultSetting",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "isLoweredSymbol",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/util.ts#L69-L71",
        "signature": "function isLoweredSymbol(name: string);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "createLoweredSymbol",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/util.ts#L73-L75",
        "signature": "function createLoweredSymbol(id: number): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "id",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "LazyRoute",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/lazy_routes.ts#L15-L19",
        "signature": "interface LazyRoute {\n  module: StaticSymbol;\n  route: string;\n  referencedModule: StaticSymbol;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "module",
              "description": "",
              "type": "StaticSymbol"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "route",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "referencedModule",
              "description": "",
              "type": "StaticSymbol"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Identifiers",
    "overloads": [
      {
        "file": "packages/compiler/src/identifiers.ts#L15-L128",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "ANALYZE_FOR_ENTRY_COMPONENTS",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ElementRef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "NgModuleRef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ViewContainerRef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ChangeDetectorRef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "QueryList",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "TemplateRef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "Renderer2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "CodegenComponentFactoryResolver",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ComponentFactoryResolver",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ComponentFactory",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ComponentRef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "NgModuleFactory",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "createModuleFactory",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "moduleDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "moduleProviderDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "RegisterModuleFactoryFn",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "inject",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "directiveInject",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "INJECTOR",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "Injector",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵɵdefineInjectable",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "InjectableDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ViewEncapsulation",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ChangeDetectionStrategy",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "SecurityContext",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "LOCALE_ID",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "TRANSLATIONS_FORMAT",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "inlineInterpolate",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "interpolate",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "EMPTY_ARRAY",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "EMPTY_MAP",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "Renderer",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "elementDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "anchorDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "directiveDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providerDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queryDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureArrayDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureObjectDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "purePipeDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipeDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "nodeValue",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngContentDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "unwrapValue",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "createRendererType2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "RendererType2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ViewDefinition",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "createComponentFactory",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "setClassMetadata",
              "description": "",
              "type": "o.ExternalReference"
            }
          ]
        ],
        "signature": "class Identifiers {\n  static ANALYZE_FOR_ENTRY_COMPONENTS: o.ExternalReference = {\n    name: \"ANALYZE_FOR_ENTRY_COMPONENTS\",\n    moduleName: CORE,\n  };\n  static ElementRef: o.ExternalReference = {\n    name: \"ElementRef\",\n    moduleName: CORE,\n  };\n  static NgModuleRef: o.ExternalReference = {\n    name: \"NgModuleRef\",\n    moduleName: CORE,\n  };\n  static ViewContainerRef: o.ExternalReference = {\n    name: \"ViewContainerRef\",\n    moduleName: CORE,\n  };\n  static ChangeDetectorRef: o.ExternalReference = {\n    name: \"ChangeDetectorRef\",\n    moduleName: CORE,\n  };\n  static QueryList: o.ExternalReference = {\n    name: \"QueryList\",\n    moduleName: CORE,\n  };\n  static TemplateRef: o.ExternalReference = {\n    name: \"TemplateRef\",\n    moduleName: CORE,\n  };\n  static Renderer2: o.ExternalReference = {\n    name: \"Renderer2\",\n    moduleName: CORE,\n  };\n  static CodegenComponentFactoryResolver: o.ExternalReference = {\n    name: \"ɵCodegenComponentFactoryResolver\",\n    moduleName: CORE,\n  };\n  static ComponentFactoryResolver: o.ExternalReference = {\n    name: \"ComponentFactoryResolver\",\n    moduleName: CORE,\n  };\n  static ComponentFactory: o.ExternalReference = {\n    name: \"ComponentFactory\",\n    moduleName: CORE,\n  };\n  static ComponentRef: o.ExternalReference = {\n    name: \"ComponentRef\",\n    moduleName: CORE,\n  };\n  static NgModuleFactory: o.ExternalReference = {\n    name: \"NgModuleFactory\",\n    moduleName: CORE,\n  };\n  static createModuleFactory: o.ExternalReference = {\n    name: \"ɵcmf\",\n    moduleName: CORE,\n  };\n  static moduleDef: o.ExternalReference = {\n    name: \"ɵmod\",\n    moduleName: CORE,\n  };\n  static moduleProviderDef: o.ExternalReference = {\n    name: \"ɵmpd\",\n    moduleName: CORE,\n  };\n  static RegisterModuleFactoryFn: o.ExternalReference = {\n    name: \"ɵregisterModuleFactory\",\n    moduleName: CORE,\n  };\n  static inject: o.ExternalReference = { name: \"ɵɵinject\", moduleName: CORE };\n  static directiveInject: o.ExternalReference = {\n    name: \"ɵɵdirectiveInject\",\n    moduleName: CORE,\n  };\n  static INJECTOR: o.ExternalReference = { name: \"INJECTOR\", moduleName: CORE };\n  static Injector: o.ExternalReference = { name: \"Injector\", moduleName: CORE };\n  static ɵɵdefineInjectable: o.ExternalReference = {\n    name: \"ɵɵdefineInjectable\",\n    moduleName: CORE,\n  };\n  static InjectableDef: o.ExternalReference = {\n    name: \"ɵɵInjectableDef\",\n    moduleName: CORE,\n  };\n  static ViewEncapsulation: o.ExternalReference = {\n    name: \"ViewEncapsulation\",\n    moduleName: CORE,\n  };\n  static ChangeDetectionStrategy: o.ExternalReference = {\n    name: \"ChangeDetectionStrategy\",\n    moduleName: CORE,\n  };\n  static SecurityContext: o.ExternalReference = {\n    name: \"SecurityContext\",\n    moduleName: CORE,\n  };\n  static LOCALE_ID: o.ExternalReference = {\n    name: \"LOCALE_ID\",\n    moduleName: CORE,\n  };\n  static TRANSLATIONS_FORMAT: o.ExternalReference = {\n    name: \"TRANSLATIONS_FORMAT\",\n    moduleName: CORE,\n  };\n  static inlineInterpolate: o.ExternalReference = {\n    name: \"ɵinlineInterpolate\",\n    moduleName: CORE,\n  };\n  static interpolate: o.ExternalReference = {\n    name: \"ɵinterpolate\",\n    moduleName: CORE,\n  };\n  static EMPTY_ARRAY: o.ExternalReference = {\n    name: \"ɵEMPTY_ARRAY\",\n    moduleName: CORE,\n  };\n  static EMPTY_MAP: o.ExternalReference = {\n    name: \"ɵEMPTY_MAP\",\n    moduleName: CORE,\n  };\n  static Renderer: o.ExternalReference = { name: \"Renderer\", moduleName: CORE };\n  static viewDef: o.ExternalReference = { name: \"ɵvid\", moduleName: CORE };\n  static elementDef: o.ExternalReference = { name: \"ɵeld\", moduleName: CORE };\n  static anchorDef: o.ExternalReference = { name: \"ɵand\", moduleName: CORE };\n  static textDef: o.ExternalReference = { name: \"ɵted\", moduleName: CORE };\n  static directiveDef: o.ExternalReference = { name: \"ɵdid\", moduleName: CORE };\n  static providerDef: o.ExternalReference = { name: \"ɵprd\", moduleName: CORE };\n  static queryDef: o.ExternalReference = { name: \"ɵqud\", moduleName: CORE };\n  static pureArrayDef: o.ExternalReference = { name: \"ɵpad\", moduleName: CORE };\n  static pureObjectDef: o.ExternalReference = {\n    name: \"ɵpod\",\n    moduleName: CORE,\n  };\n  static purePipeDef: o.ExternalReference = { name: \"ɵppd\", moduleName: CORE };\n  static pipeDef: o.ExternalReference = { name: \"ɵpid\", moduleName: CORE };\n  static nodeValue: o.ExternalReference = { name: \"ɵnov\", moduleName: CORE };\n  static ngContentDef: o.ExternalReference = { name: \"ɵncd\", moduleName: CORE };\n  static unwrapValue: o.ExternalReference = { name: \"ɵunv\", moduleName: CORE };\n  static createRendererType2: o.ExternalReference = {\n    name: \"ɵcrt\",\n    moduleName: CORE,\n  };\n  static RendererType2: o.ExternalReference = {\n    name: \"RendererType2\",\n    moduleName: CORE,\n  };\n  static ViewDefinition: o.ExternalReference = {\n    name: \"ɵViewDefinition\",\n    moduleName: CORE,\n  };\n  static createComponentFactory: o.ExternalReference = {\n    name: \"ɵccf\",\n    moduleName: CORE,\n  };\n  static setClassMetadata: o.ExternalReference = {\n    name: \"ɵsetClassMetadata\",\n    moduleName: CORE,\n  };\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "JitCompiler",
    "overloads": [
      {
        "file": "packages/compiler/src/jit/compiler.ts#L40-L332",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An internal module of the Angular compiler that begins with component types,\nextracts templates, and eventually produces a compiled version of the component\nready for linking into an application.\n"
            }
          ],
          [
            "security",
            {
              "__kind": "heading",
              "description": "When compiling templates at runtime, you must ensure that the entire template comes\nfrom a trusted source. Attacker-controlled data introduced by a template could expose your\napplication to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compileModuleSync",
              "info": {
                "file": "packages/compiler/src/jit/compiler.ts#L56-L58",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "compileModuleSync(moduleType: Type): object;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compileModuleAsync",
              "info": {
                "file": "packages/compiler/src/jit/compiler.ts#L60-L62",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "compileModuleAsync(moduleType: Type): Promise<object>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compileModuleAndAllComponentsSync",
              "info": {
                "file": "packages/compiler/src/jit/compiler.ts#L64-L66",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "compileModuleAndAllComponentsSync(moduleType: Type): ModuleWithComponentFactories;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compileModuleAndAllComponentsAsync",
              "info": {
                "file": "packages/compiler/src/jit/compiler.ts#L68-L70",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "compileModuleAndAllComponentsAsync(moduleType: Type): Promise<ModuleWithComponentFactories>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getComponentFactory",
              "info": {
                "file": "packages/compiler/src/jit/compiler.ts#L72-L75",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "component",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "getComponentFactory(component: Type): object;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "loadAotSummaries",
              "info": {
                "file": "packages/compiler/src/jit/compiler.ts#L77-L80",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "summaries",
                      "description": "",
                      "type": "() => any[]"
                    }
                  ]
                ],
                "signature": "loadAotSummaries(summaries: () => any[]);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasAotSummary",
              "info": {
                "file": "packages/compiler/src/jit/compiler.ts#L100-L102",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ref",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "hasAotSummary(ref: Type);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_compileComponents",
              "info": {
                "file": "packages/compiler/src/jit/compiler.ts#L166-L209",
                "info": [
                  ["internal", { "__kind": "heading", "description": "\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "mainModule",
                      "description": "",
                      "type": "Type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "allComponentFactories",
                      "description": "",
                      "type": "object[]"
                    }
                  ]
                ],
                "signature": "_compileComponents(mainModule: Type, allComponentFactories: object[]|null);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCacheFor",
              "info": {
                "file": "packages/compiler/src/jit/compiler.ts#L211-L219",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "clearCacheFor(type: Type);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCache",
              "info": {
                "file": "packages/compiler/src/jit/compiler.ts#L221-L227",
                "info": [],
                "signature": "clearCache(): void;"
              }
            }
          ]
        ],
        "signature": "class JitCompiler {\n  compileModuleSync(moduleType: Type): object;\n  compileModuleAsync(moduleType: Type): Promise<object>;\n  compileModuleAndAllComponentsSync(\n    moduleType: Type\n  ): ModuleWithComponentFactories;\n  compileModuleAndAllComponentsAsync(\n    moduleType: Type\n  ): Promise<ModuleWithComponentFactories>;\n  getComponentFactory(component: Type): object;\n  loadAotSummaries(summaries: () => any[]);\n  hasAotSummary(ref: Type);\n  _compileComponents(mainModule: Type, allComponentFactories: object[] | null);\n  clearCacheFor(type: Type);\n  clearCache(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ConstantPool",
    "overloads": [
      {
        "file": "packages/compiler/src/constant_pool.ts#L87-L241",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A constant pool allows a code emitter to share constant in an output context.\n\nThe constant pool also supports sharing access to ivy definitions references.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "statements",
              "description": "",
              "type": "o.Statement[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getConstLiteral",
              "info": {
                "file": "packages/compiler/src/constant_pool.ts#L98-L122",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "literal",
                      "description": "",
                      "type": "o.Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "forceShared",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "getConstLiteral(literal: o.Expression, forceShared?: boolean): o.Expression;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getDefinition",
              "info": {
                "file": "packages/compiler/src/constant_pool.ts#L124-L143",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "kind",
                      "description": "",
                      "type": "DefinitionKind"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ctx",
                      "description": "",
                      "type": "OutputContext"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "forceShared",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "getDefinition(type: any, kind: DefinitionKind, ctx: OutputContext, forceShared: boolean = false):   o.Expression;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getLiteralFactory",
              "info": {
                "file": "packages/compiler/src/constant_pool.ts#L145-L168",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "literal",
                      "description": "",
                      "type": "o.LiteralArrayExpr | o.LiteralMapExpr"
                    }
                  ]
                ],
                "signature": "getLiteralFactory(literal: o.LiteralArrayExpr|o.LiteralMapExpr):   {literalFactory: o.Expression, literalFactoryArguments: o.Expression[]};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "uniqueName",
              "info": {
                "file": "packages/compiler/src/constant_pool.ts#L200-L202",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Produce a unique name.\n\nThe name might be unique among different prefixes if any of the prefixes end in\na digit so the prefix should be a constant string (not based on user input) and\nmust not end in a digit.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "prefix",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "uniqueName(prefix: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "propertyNameOf",
              "info": {
                "file": "packages/compiler/src/constant_pool.ts#L219-L232",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "kind",
                      "description": "",
                      "type": "DefinitionKind"
                    }
                  ]
                ],
                "signature": "public propertyNameOf(kind: DefinitionKind): string;"
              }
            }
          ]
        ],
        "signature": "class ConstantPool {\n  statements: o.Statement[] = [];\n\n  getConstLiteral(literal: o.Expression, forceShared?: boolean): o.Expression;\n  getDefinition(\n    type: any,\n    kind: DefinitionKind,\n    ctx: OutputContext,\n    forceShared: boolean = false\n  ): o.Expression;\n  getLiteralFactory(\n    literal: o.LiteralArrayExpr | o.LiteralMapExpr\n  ): { literalFactory: o.Expression; literalFactoryArguments: o.Expression[] };\n  uniqueName(prefix: string): string;\n  public propertyNameOf(kind: DefinitionKind): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "DirectiveResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/directive_resolver.ts#L27-L178",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isDirective",
              "info": {
                "file": "packages/compiler/src/directive_resolver.ts#L30-L33",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "isDirective(type: Type);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolve",
              "info": {
                "file": "packages/compiler/src/directive_resolver.ts#L41-L57",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "throwIfNotFound",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "resolve(type: Type, throwIfNotFound = true): Directive|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolve",
              "info": {
                "file": "packages/compiler/src/directive_resolver.ts#L38-L38",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Return {@link Directive} for a given `Type`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "resolve(type: Type): Directive;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolve",
              "info": {
                "file": "packages/compiler/src/directive_resolver.ts#L39-L39",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "throwIfNotFound",
                      "description": "",
                      "type": "true"
                    }
                  ]
                ],
                "signature": "resolve(type: Type, throwIfNotFound: true): Directive;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolve",
              "info": {
                "file": "packages/compiler/src/directive_resolver.ts#L40-L40",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "throwIfNotFound",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "resolve(type: Type, throwIfNotFound: boolean): Directive|null;"
              }
            }
          ]
        ],
        "signature": "class DirectiveResolver {\n  isDirective(type: Type);\n  resolve(type: Type, throwIfNotFound = true): Directive | null;\n  resolve(type: Type): Directive;\n  resolve(type: Type, throwIfNotFound: true): Directive;\n  resolve(type: Type, throwIfNotFound: boolean): Directive | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "PipeResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/pipe_resolver.ts#L21-L45",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Resolve a `Type` for {@link Pipe}.\n\nThis interface can be overridden by the application developer to create custom behavior.\n\nSee {@link Compiler}\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isPipe",
              "info": {
                "file": "packages/compiler/src/pipe_resolver.ts#L24-L27",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "isPipe(type: Type);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolve",
              "info": {
                "file": "packages/compiler/src/pipe_resolver.ts#L32-L44",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Return {@link Pipe} for a given `Type`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "throwIfNotFound",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "resolve(type: Type, throwIfNotFound = true): Pipe|null;"
              }
            }
          ]
        ],
        "signature": "class PipeResolver {\n  isPipe(type: Type);\n  resolve(type: Type, throwIfNotFound = true): Pipe | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "NgModuleResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/ng_module_resolver.ts#L18-L38",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Resolves types to {@link NgModule}.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isNgModule",
              "info": {
                "file": "packages/compiler/src/ng_module_resolver.ts#L21-L23",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "isNgModule(type: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolve",
              "info": {
                "file": "packages/compiler/src/ng_module_resolver.ts#L25-L37",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "throwIfNotFound",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "resolve(type: Type, throwIfNotFound = true): NgModule|null;"
              }
            }
          ]
        ],
        "signature": "class NgModuleResolver {\n  isNgModule(type: any);\n  resolve(type: Type, throwIfNotFound = true): NgModule | null;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "DEFAULT_INTERPOLATION_CONFIG",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/interpolation_config.ts#L24-L25",
        "signature": "const DEFAULT_INTERPOLATION_CONFIG: InterpolationConfig;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "InterpolationConfig",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/interpolation_config.ts#L11-L22",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "fromArray",
              "info": {
                "file": "packages/compiler/src/ml_parser/interpolation_config.ts#L12-L19",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "markers",
                      "description": "",
                      "type": "[string, string]"
                    }
                  ]
                ],
                "signature": "static fromArray(markers: [string, string]|null): InterpolationConfig;"
              }
            }
          ]
        ],
        "signature": "class InterpolationConfig {\n  static fromArray(markers: [string, string] | null): InterpolationConfig;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "LexerRange",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/lexer.ts#L56-L61",
        "signature": "interface LexerRange {\n  startPos: number;\n  startLine: number;\n  startCol: number;\n  endPos: number;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "startPos",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "startLine",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "startCol",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "endPos",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "NgModuleCompiler",
    "overloads": [
      {
        "file": "packages/compiler/src/ng_module_compiler.ts#L25-L86",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "compile",
              "info": {
                "file": "packages/compiler/src/ng_module_compiler.ts#L27-L67",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ctx",
                      "description": "",
                      "type": "OutputContext"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ngModuleMeta",
                      "description": "",
                      "type": "CompileNgModuleMetadata"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "extraProviders",
                      "description": "",
                      "type": "CompileProviderMetadata[]"
                    }
                  ]
                ],
                "signature": "compile(   ctx: OutputContext, ngModuleMeta: CompileNgModuleMetadata,   extraProviders: CompileProviderMetadata[]): NgModuleCompileResult;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createStub",
              "info": {
                "file": "packages/compiler/src/ng_module_compiler.ts#L69-L71",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ctx",
                      "description": "",
                      "type": "OutputContext"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ngModuleReference",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "createStub(ctx: OutputContext, ngModuleReference: any);"
              }
            }
          ]
        ],
        "signature": "class NgModuleCompiler {\n  compile(\n    ctx: OutputContext,\n    ngModuleMeta: CompileNgModuleMetadata,\n    extraProviders: CompileProviderMetadata[]\n  ): NgModuleCompileResult;\n  createStub(ctx: OutputContext, ngModuleReference: any);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ArrayType",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L64-L71",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visitType",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L68-L70",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TypeVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitType(visitor: TypeVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ArrayType extends Type {\n  visitType(visitor: TypeVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "AssertNotNull",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L682-L698",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L687-L689",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L691-L693",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L695-L697",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class AssertNotNull extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "DYNAMIC_TYPE",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L85-L85",
        "signature": "const DYNAMIC_TYPE: BuiltinType;",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "BinaryOperator",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L103-L120",
        "signature": "export enum BinaryOperator {\n  Equals,\n  NotEquals,\n  Identical,\n  NotIdentical,\n  Minus,\n  Plus,\n  Divide,\n  Multiply,\n  Modulo,\n  And,\n  Or,\n  BitwiseAnd,\n  Lower,\n  LowerEquals,\n  Bigger,\n  BiggerEquals,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "BinaryOperatorExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L755-L776",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "lhs",
              "description": "",
              "type": "Expression"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L764-L767",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L769-L771",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L773-L775",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class BinaryOperatorExpr extends Expression {\n  public lhs: Expression;\n\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "BuiltinMethod",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L412-L416",
        "signature": "export enum BuiltinMethod {\n  ConcatArray,\n  SubscribeObservable,\n  Bind,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "BuiltinType",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L43-L50",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visitType",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L47-L49",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TypeVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitType(visitor: TypeVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class BuiltinType extends Type {\n  visitType(visitor: TypeVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "BuiltinTypeName",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L32-L41",
        "signature": "export enum BuiltinTypeName {\n  Dynamic,\n  Bool,\n  String,\n  Int,\n  Number,\n  Function,\n  Inferred,\n  None,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "BuiltinVar",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L257-L262",
        "signature": "export enum BuiltinVar {\n  This,\n  Super,\n  CatchError,\n  CatchStack,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CastExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L700-L716",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L705-L707",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L709-L711",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L713-L715",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class CastExpr extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ClassField",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1034-L1043",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1040-L1042",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "f",
                      "description": "",
                      "type": "ClassField"
                    }
                  ]
                ],
                "signature": "isEquivalent(f: ClassField);"
              }
            }
          ]
        ],
        "signature": "class ClassField extends AbstractClassPart {\n  isEquivalent(f: ClassField);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ClassMethod",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1046-L1055",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1052-L1054",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "m",
                      "description": "",
                      "type": "ClassMethod"
                    }
                  ]
                ],
                "signature": "isEquivalent(m: ClassMethod);"
              }
            }
          ]
        ],
        "signature": "class ClassMethod extends AbstractClassPart {\n  isEquivalent(m: ClassMethod);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ClassStmt",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1070-L1089",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1078-L1085",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "Statement"
                    }
                  ]
                ],
                "signature": "isEquivalent(stmt: Statement): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1086-L1088",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ClassStmt extends Statement {\n  isEquivalent(stmt: Statement): boolean;\n  visitStatement(visitor: StatementVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CommaExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L880-L896",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L885-L887",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L889-L891",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L893-L895",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class CommaExpr extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CommentStmt",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1108-L1118",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1112-L1114",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "Statement"
                    }
                  ]
                ],
                "signature": "isEquivalent(stmt: Statement): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1115-L1117",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class CommentStmt extends Statement {\n  isEquivalent(stmt: Statement): boolean;\n  visitStatement(visitor: StatementVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ConditionalExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L639-L661",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "trueCase",
              "description": "",
              "type": "Expression"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L649-L652",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L654-L656",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L658-L660",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ConditionalExpr extends Expression {\n  public trueCase: Expression;\n\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "DeclareFunctionStmt",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L977-L993",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "Type"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L985-L988",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "Statement"
                    }
                  ]
                ],
                "signature": "isEquivalent(stmt: Statement): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L990-L992",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class DeclareFunctionStmt extends Statement {\n  public type: Type | null;\n\n  isEquivalent(stmt: Statement): boolean;\n  visitStatement(visitor: StatementVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "DeclareVarStmt",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L960-L975",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "Type"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L968-L971",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "Statement"
                    }
                  ]
                ],
                "signature": "isEquivalent(stmt: Statement): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L972-L974",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class DeclareVarStmt extends Statement {\n  public type: Type | null;\n\n  isEquivalent(stmt: Statement): boolean;\n  visitStatement(visitor: StatementVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Expression",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L144-L255",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "Type"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "sourceSpan",
              "description": "",
              "type": "ParseSourceSpan"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L153-L153",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L159-L159",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Calculates whether this expression produces the same value as the given expression.\nNote: We don't check Types nor ParseSourceSpans nor function arguments.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "abstract isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L164-L164",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Return true if the expression is constant.\n"
                    }
                  ]
                ],
                "signature": "abstract isConstant(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "prop",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L166-L168",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "prop(name: string, sourceSpan?: ParseSourceSpan|null): ReadPropExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "key",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L170-L172",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "key(index: Expression, type?: Type|null, sourceSpan?: ParseSourceSpan|null): ReadKeyExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "callMethod",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L174-L177",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string | BuiltinMethod"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "params",
                      "description": "",
                      "type": "Expression[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "callMethod(name: string|BuiltinMethod, params: Expression[], sourceSpan?: ParseSourceSpan|null):   InvokeMethodExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "callFn",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L179-L181",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "params",
                      "description": "",
                      "type": "Expression[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "callFn(params: Expression[], sourceSpan?: ParseSourceSpan|null): InvokeFunctionExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "instantiate",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L183-L186",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "params",
                      "description": "",
                      "type": "Expression[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "instantiate(params: Expression[], type?: Type|null, sourceSpan?: ParseSourceSpan|null):   InstantiateExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "conditional",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L188-L192",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "trueCase",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "falseCase",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "conditional(   trueCase: Expression, falseCase: Expression|null = null,   sourceSpan?: ParseSourceSpan|null): ConditionalExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "equals",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L194-L196",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "equals(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "notEquals",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L197-L199",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "notEquals(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "identical",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L200-L202",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "identical(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "notIdentical",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L203-L205",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "notIdentical(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "minus",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L206-L208",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "minus(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "plus",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L209-L211",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "plus(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "divide",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L212-L214",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "divide(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "multiply",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L215-L217",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "multiply(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "modulo",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L218-L220",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "modulo(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "and",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L221-L223",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "and(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bitwiseAnd",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L224-L227",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parens",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "bitwiseAnd(rhs: Expression, sourceSpan?: ParseSourceSpan|null, parens: boolean = true):   BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "or",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L228-L230",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "or(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "lower",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L231-L233",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "lower(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "lowerEquals",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L234-L236",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "lowerEquals(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bigger",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L237-L239",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "bigger(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "biggerEquals",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L240-L242",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rhs",
                      "description": "",
                      "type": "Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "biggerEquals(rhs: Expression, sourceSpan?: ParseSourceSpan|null): BinaryOperatorExpr;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isBlank",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L243-L247",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "isBlank(sourceSpan?: ParseSourceSpan|null): Expression;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "cast",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L248-L250",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSpan",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ]
                ],
                "signature": "cast(type: Type, sourceSpan?: ParseSourceSpan|null): Expression;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toStmt",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L252-L254",
                "info": [],
                "signature": "toStmt(): Statement;"
              }
            }
          ]
        ],
        "signature": "class Expression {\n  public type: Type | null;\n  public sourceSpan: ParseSourceSpan | null;\n\n  abstract visitExpression(visitor: ExpressionVisitor, context: any): any;\n  abstract isEquivalent(e: Expression): boolean;\n  abstract isConstant(): boolean;\n  prop(name: string, sourceSpan?: ParseSourceSpan | null): ReadPropExpr;\n  key(\n    index: Expression,\n    type?: Type | null,\n    sourceSpan?: ParseSourceSpan | null\n  ): ReadKeyExpr;\n  callMethod(\n    name: string | BuiltinMethod,\n    params: Expression[],\n    sourceSpan?: ParseSourceSpan | null\n  ): InvokeMethodExpr;\n  callFn(\n    params: Expression[],\n    sourceSpan?: ParseSourceSpan | null\n  ): InvokeFunctionExpr;\n  instantiate(\n    params: Expression[],\n    type?: Type | null,\n    sourceSpan?: ParseSourceSpan | null\n  ): InstantiateExpr;\n  conditional(\n    trueCase: Expression,\n    falseCase: Expression | null = null,\n    sourceSpan?: ParseSourceSpan | null\n  ): ConditionalExpr;\n  equals(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  notEquals(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  identical(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  notIdentical(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  minus(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  plus(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  divide(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  multiply(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  modulo(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  and(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n  bitwiseAnd(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null,\n    parens: boolean = true\n  ): BinaryOperatorExpr;\n  or(rhs: Expression, sourceSpan?: ParseSourceSpan | null): BinaryOperatorExpr;\n  lower(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  lowerEquals(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  bigger(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  biggerEquals(\n    rhs: Expression,\n    sourceSpan?: ParseSourceSpan | null\n  ): BinaryOperatorExpr;\n  isBlank(sourceSpan?: ParseSourceSpan | null): Expression;\n  cast(type: Type, sourceSpan?: ParseSourceSpan | null): Expression;\n  toStmt(): Statement;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ExpressionStatement",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L995-L1006",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L999-L1001",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "Statement"
                    }
                  ]
                ],
                "signature": "isEquivalent(stmt: Statement): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1003-L1005",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ExpressionStatement extends Statement {\n  isEquivalent(stmt: Statement): boolean;\n  visitStatement(visitor: StatementVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ExpressionType",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L52-L61",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visitType",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L58-L60",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TypeVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitType(visitor: TypeVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ExpressionType extends Type {\n  visitType(visitor: TypeVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "ExpressionVisitor",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L898-L922",
        "signature": "interface ExpressionVisitor {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ExternalExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L612-L631",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L619-L622",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L624-L626",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L628-L630",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ExternalExpr extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ExternalReference",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L633-L637",
        "info": [],
        "signature": "class ExternalReference {}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "literalMap",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1725-L1730",
        "signature": "function literalMap(\n  values: { key: string; quoted: boolean; value: Expression }[],\n  type: MapType | null = null\n): LiteralMapExpr;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "",
              "type": "{ key: string; quoted: boolean; value: Expression; }[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "MapType"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "FunctionExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L728-L752",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L735-L738",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L740-L742",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L744-L746",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toDeclStmt",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L748-L751",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "modifiers",
                      "description": "",
                      "type": "StmtModifier[]"
                    }
                  ]
                ],
                "signature": "toDeclStmt(name: string, modifiers: StmtModifier[]|null = null): DeclareFunctionStmt;"
              }
            }
          ]
        ],
        "signature": "class FunctionExpr extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n  toDeclStmt(\n    name: string,\n    modifiers: StmtModifier[] | null = null\n  ): DeclareFunctionStmt;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "IfStmt",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1092-L1106",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1098-L1102",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "Statement"
                    }
                  ]
                ],
                "signature": "isEquivalent(stmt: Statement): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1103-L1105",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class IfStmt extends Statement {\n  isEquivalent(stmt: Statement): boolean;\n  visitStatement(visitor: StatementVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "InstantiateExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L471-L490",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L478-L481",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L483-L485",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L487-L489",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class InstantiateExpr extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "InvokeFunctionExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L449-L468",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L456-L459",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L461-L463",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L465-L467",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class InvokeFunctionExpr extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "InvokeMethodExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L418-L446",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "builtin",
              "description": "",
              "type": "BuiltinMethod"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L434-L437",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L439-L441",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L443-L445",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class InvokeMethodExpr extends Expression {\n  public name: string | null;\n  public builtin: BuiltinMethod | null;\n\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "JSDocCommentStmt",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1120-L1133",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1124-L1126",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "Statement"
                    }
                  ]
                ],
                "signature": "isEquivalent(stmt: Statement): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1127-L1129",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1130-L1132",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class JSDocCommentStmt extends Statement {\n  isEquivalent(stmt: Statement): boolean;\n  visitStatement(visitor: StatementVisitor, context: any): any;\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "LiteralArrayExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L831-L848",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "entries",
              "description": "",
              "type": "Expression[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L838-L840",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L842-L844",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L845-L847",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class LiteralArrayExpr extends Expression {\n  public entries: Expression[];\n\n  isConstant();\n  isEquivalent(e: Expression): boolean;\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "LiteralExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L493-L511",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L500-L502",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L504-L506",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L508-L510",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class LiteralExpr extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "LiteralMapExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L857-L878",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "valueType",
              "description": "",
              "type": "Type"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L867-L869",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L871-L873",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L875-L877",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class LiteralMapExpr extends Expression {\n  public valueType: Type | null = null;\n\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "MapType",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L74-L83",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "valueType",
              "description": "",
              "type": "Type"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitType",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L80-L82",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TypeVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitType(visitor: TypeVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class MapType extends Type {\n  public valueType: Type | null;\n\n  visitType(visitor: TypeVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "NotExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L664-L680",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L669-L671",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L673-L675",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L677-L679",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class NotExpr extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "NONE_TYPE",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L92-L92",
        "signature": "const NONE_TYPE: BuiltinType;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ReadKeyExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L805-L828",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L812-L815",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L817-L819",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L821-L823",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "set",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L825-L827",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "set(value: Expression): WriteKeyExpr;"
              }
            }
          ]
        ],
        "signature": "class ReadKeyExpr extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n  set(value: Expression): WriteKeyExpr;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ReadPropExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L779-L802",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L786-L789",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L791-L793",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L795-L797",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "set",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L799-L801",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "set(value: Expression): WritePropExpr;"
              }
            }
          ]
        ],
        "signature": "class ReadPropExpr extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n  set(value: Expression): WritePropExpr;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ReadVarExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L264-L297",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "builtin",
              "description": "",
              "type": "BuiltinVar"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L279-L281",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L283-L285",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L287-L289",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "set",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L291-L296",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "set(value: Expression): WriteVarExpr;"
              }
            }
          ]
        ],
        "signature": "class ReadVarExpr extends Expression {\n  public name: string | null;\n  public builtin: BuiltinVar | null;\n\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n  set(value: Expression): WriteVarExpr;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ReturnStatement",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1009-L1019",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1013-L1015",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "Statement"
                    }
                  ]
                ],
                "signature": "isEquivalent(stmt: Statement): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1016-L1018",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ReturnStatement extends Statement {\n  isEquivalent(stmt: Statement): boolean;\n  visitStatement(visitor: StatementVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "StatementVisitor",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1163-L1174",
        "signature": "interface StatementVisitor {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ThrowStmt",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1151-L1161",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1155-L1157",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "ThrowStmt"
                    }
                  ]
                ],
                "signature": "isEquivalent(stmt: ThrowStmt): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1158-L1160",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ThrowStmt extends Statement {\n  isEquivalent(stmt: ThrowStmt): boolean;\n  visitStatement(visitor: StatementVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TryCatchStmt",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1135-L1148",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1141-L1144",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "Statement"
                    }
                  ]
                ],
                "signature": "isEquivalent(stmt: Statement): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L1145-L1147",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class TryCatchStmt extends Statement {\n  isEquivalent(stmt: Statement): boolean;\n  visitStatement(visitor: StatementVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Type",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L19-L30",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visitType",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L25-L25",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TypeVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract visitType(visitor: TypeVisitor, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasModifier",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L27-L29",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "modifier",
                      "description": "",
                      "type": "TypeModifier"
                    }
                  ]
                ],
                "signature": "hasModifier(modifier: TypeModifier): boolean;"
              }
            }
          ]
        ],
        "signature": "class Type {\n  abstract visitType(visitor: TypeVisitor, context: any): any;\n  hasModifier(modifier: TypeModifier): boolean;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "TypeVisitor",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L94-L99",
        "signature": "interface TypeVisitor {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "WrappedNodeExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L317-L333",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L322-L324",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L326-L328",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L330-L332",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class WrappedNodeExpr<T> extends Expression {\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "WriteKeyExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L365-L386",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "Expression"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L374-L377",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L379-L381",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L383-L385",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class WriteKeyExpr extends Expression {\n  public value: Expression;\n\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "WritePropExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L389-L410",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "Expression"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L398-L401",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L403-L405",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L407-L409",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class WritePropExpr extends Expression {\n  public value: Expression;\n\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "WriteVarExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L335-L362",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "Expression"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L343-L345",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L347-L349",
                "info": [],
                "signature": "isConstant();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L351-L353",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toDeclStmt",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L355-L357",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "modifiers",
                      "description": "",
                      "type": "StmtModifier[]"
                    }
                  ]
                ],
                "signature": "toDeclStmt(type?: Type|null, modifiers?: StmtModifier[]|null): DeclareVarStmt;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toConstDecl",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L359-L361",
                "info": [],
                "signature": "toConstDecl(): DeclareVarStmt;"
              }
            }
          ]
        ],
        "signature": "class WriteVarExpr extends Expression {\n  public value: Expression;\n\n  isEquivalent(e: Expression): boolean;\n  isConstant();\n  visitExpression(visitor: ExpressionVisitor, context: any): any;\n  toDeclStmt(\n    type?: Type | null,\n    modifiers?: StmtModifier[] | null\n  ): DeclareVarStmt;\n  toConstDecl(): DeclareVarStmt;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "StmtModifier",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L932-L937",
        "signature": "export enum StmtModifier {\n  Final,\n  Private,\n  Exported,\n  Static,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Statement",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L939-L957",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "modifiers",
              "description": "",
              "type": "StmtModifier[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "sourceSpan",
              "description": "",
              "type": "ParseSourceSpan"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L950-L950",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Calculates whether this statement produces the same value as the given statement.\nNote: We don't check Types nor ParseSourceSpans nor function arguments.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmt",
                      "description": "",
                      "type": "Statement"
                    }
                  ]
                ],
                "signature": "abstract isEquivalent(stmt: Statement): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitStatement",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L952-L952",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "StatementVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract visitStatement(visitor: StatementVisitor, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasModifier",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L954-L956",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "modifier",
                      "description": "",
                      "type": "StmtModifier"
                    }
                  ]
                ],
                "signature": "hasModifier(modifier: StmtModifier): boolean;"
              }
            }
          ]
        ],
        "signature": "class Statement {\n  public modifiers: StmtModifier[];\n  public sourceSpan: ParseSourceSpan | null;\n\n  abstract isEquivalent(stmt: Statement): boolean;\n  abstract visitStatement(visitor: StatementVisitor, context: any): any;\n  hasModifier(modifier: StmtModifier): boolean;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "STRING_TYPE",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L90-L90",
        "signature": "const STRING_TYPE: BuiltinType;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TypeofExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L299-L315",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpression",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L304-L306",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "ExpressionVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpression(visitor: ExpressionVisitor, context: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L308-L310",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "e",
                      "description": "",
                      "type": "Expression"
                    }
                  ]
                ],
                "signature": "isEquivalent(e: Expression): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isConstant",
              "info": {
                "file": "packages/compiler/src/output/output_ast.ts#L312-L314",
                "info": [],
                "signature": "isConstant(): boolean;"
              }
            }
          ]
        ],
        "signature": "class TypeofExpr extends Expression {\n  visitExpression(visitor: ExpressionVisitor, context: any);\n  isEquivalent(e: Expression): boolean;\n  isConstant(): boolean;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "collectExternalReferences",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_ast.ts#L1632-L1636",
        "signature": "function collectExternalReferences(stmts: Statement[]): ExternalReference[];",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "stmts",
              "description": "",
              "type": "Statement[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "EmitterVisitorContext",
    "overloads": [
      {
        "file": "packages/compiler/src/output/abstract_emitter.ts#L30-L200",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "createRoot",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L31-L33",
                "info": [],
                "signature": "static createRoot(): EmitterVisitorContext;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "println",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L51-L53",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "from",
                      "description": "",
                      "type": "{ sourceSpan: ParseSourceSpan | null; }"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "lastPart",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "println(from?: {sourceSpan: ParseSourceSpan|null}|null, lastPart: string = ''): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "lineIsEmpty",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L55-L57",
                "info": [],
                "signature": "lineIsEmpty(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "lineLength",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L59-L61",
                "info": [],
                "signature": "lineLength(): number;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "print",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L63-L72",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "from",
                      "description": "",
                      "type": "{ sourceSpan: ParseSourceSpan | null; }"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "part",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newLine",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "print(from: {sourceSpan: ParseSourceSpan|null}|null, part: string, newLine: boolean = false);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeEmptyLastLine",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L74-L78",
                "info": [],
                "signature": "removeEmptyLastLine();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "incIndent",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L80-L85",
                "info": [],
                "signature": "incIndent();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "decIndent",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L87-L92",
                "info": [],
                "signature": "decIndent();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pushClass",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L94-L96",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "clazz",
                      "description": "",
                      "type": "o.ClassStmt"
                    }
                  ]
                ],
                "signature": "pushClass(clazz: o.ClassStmt);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "popClass",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L98-L100",
                "info": [],
                "signature": "popClass(): o.ClassStmt;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toSource",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L106-L110",
                "info": [],
                "signature": "toSource(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toSourceMapGenerator",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L112-L169",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "genFilePath",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "startsAtLine",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "toSourceMapGenerator(genFilePath: string, startsAtLine: number = 0): SourceMapGenerator;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setPreambleLineCount",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L171-L173",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "count",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "setPreambleLineCount(count: number);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "spanOf",
              "info": {
                "file": "packages/compiler/src/output/abstract_emitter.ts#L175-L188",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "line",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "column",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "spanOf(line: number, column: number): ParseSourceSpan|null;"
              }
            }
          ]
        ],
        "signature": "class EmitterVisitorContext {\n  static createRoot(): EmitterVisitorContext;\n  println(\n    from?: { sourceSpan: ParseSourceSpan | null } | null,\n    lastPart: string = \"\"\n  ): void;\n  lineIsEmpty(): boolean;\n  lineLength(): number;\n  print(\n    from: { sourceSpan: ParseSourceSpan | null } | null,\n    part: string,\n    newLine: boolean = false\n  );\n  removeEmptyLastLine();\n  incIndent();\n  decIndent();\n  pushClass(clazz: o.ClassStmt);\n  popClass(): o.ClassStmt;\n  toSource(): string;\n  toSourceMapGenerator(\n    genFilePath: string,\n    startsAtLine: number = 0\n  ): SourceMapGenerator;\n  setPreambleLineCount(count: number);\n  spanOf(line: number, column: number): ParseSourceSpan | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "JitEvaluator",
    "overloads": [
      {
        "file": "packages/compiler/src/output/output_jit.ts#L19-L93",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A helper class to manage the evaluation of JIT generated code.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "evaluateStatements",
              "info": {
                "file": "packages/compiler/src/output/output_jit.ts#L29-L44",
                "info": [
                  ["description", { "__kind": "heading", "description": "" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceUrl",
                      "description": "The URL of the generated code.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "statements",
                      "description": "An array of Angular statement AST nodes to be evaluated.",
                      "type": "o.Statement[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reflector",
                      "description": "A helper used when converting the statements to executable code.",
                      "type": "CompileReflector"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "createSourceMaps",
                      "description": "If true then create a source-map for the generated code and include it",
                      "type": "boolean"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A map of all the variables in the generated code.\n"
                    }
                  ]
                ],
                "signature": "evaluateStatements(   sourceUrl: string, statements: o.Statement[], reflector: CompileReflector,   createSourceMaps: boolean): {[key: string]: any};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "evaluateCode",
              "info": {
                "file": "packages/compiler/src/output/output_jit.ts#L56-L78",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Evaluate a piece of JIT generated code."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceUrl",
                      "description": "The URL of this generated code.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ctx",
                      "description": "A context object that contains an AST of the code to be evaluated.",
                      "type": "EmitterVisitorContext"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "vars",
                      "description": "A map containing the names and values of variables that the evaluated code might",
                      "type": "{ [key: string]: any; }"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "createSourceMap",
                      "description": "If true then create a source-map for the generated code and include it",
                      "type": "boolean"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The result of evaluating the code.\n"
                    }
                  ]
                ],
                "signature": "evaluateCode(   sourceUrl: string, ctx: EmitterVisitorContext, vars: {[key: string]: any},   createSourceMap: boolean): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "executeFunction",
              "info": {
                "file": "packages/compiler/src/output/output_jit.ts#L90-L92",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Execute a JIT generated function by calling it.\n\nThis method can be overridden in tests to capture the functions that are generated\nby this `JitEvaluator` class.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "A function to execute.",
                      "type": "Function"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "args",
                      "description": "The arguments to pass to the function being executed.",
                      "type": "any[]"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The return value of the executed function.\n"
                    }
                  ]
                ],
                "signature": "executeFunction(fn: Function, args: any[]);"
              }
            }
          ]
        ],
        "signature": "class JitEvaluator {\n  evaluateStatements(\n    sourceUrl: string,\n    statements: o.Statement[],\n    reflector: CompileReflector,\n    createSourceMaps: boolean\n  ): { [key: string]: any };\n  evaluateCode(\n    sourceUrl: string,\n    ctx: EmitterVisitorContext,\n    vars: { [key: string]: any },\n    createSourceMap: boolean\n  ): any;\n  executeFunction(fn: Function, args: any[]);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ViewCompiler",
    "overloads": [
      {
        "file": "packages/compiler/src/view_compiler/view_compiler.ts#L33-L78",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "compileComponent",
              "info": {
                "file": "packages/compiler/src/view_compiler/view_compiler.ts#L36-L77",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "outputCtx",
                      "description": "",
                      "type": "OutputContext"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "component",
                      "description": "",
                      "type": "CompileDirectiveMetadata"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "template",
                      "description": "",
                      "type": "TemplateAst[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "styles",
                      "description": "",
                      "type": "o.Expression"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "usedPipes",
                      "description": "",
                      "type": "CompilePipeSummary[]"
                    }
                  ]
                ],
                "signature": "compileComponent(   outputCtx: OutputContext, component: CompileDirectiveMetadata, template: TemplateAst[],   styles: o.Expression, usedPipes: CompilePipeSummary[]): ViewCompileResult;"
              }
            }
          ]
        ],
        "signature": "class ViewCompiler {\n  compileComponent(\n    outputCtx: OutputContext,\n    component: CompileDirectiveMetadata,\n    template: TemplateAst[],\n    styles: o.Expression,\n    usedPipes: CompilePipeSummary[]\n  ): ViewCompileResult;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "getParseErrors",
    "overloads": [
      {
        "file": "packages/compiler/src/util.ts#L121-L123",
        "signature": "function getParseErrors(error: Error): ParseError[];",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "",
              "type": "Error"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "isSyntaxError",
    "overloads": [
      {
        "file": "packages/compiler/src/util.ts#L117-L119",
        "signature": "function isSyntaxError(error: Error): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "",
              "type": "Error"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "syntaxError",
    "overloads": [
      {
        "file": "packages/compiler/src/util.ts#L107-L112",
        "signature": "function syntaxError(msg: string, parseErrors?: ParseError[]): Error;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "msg",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "parseErrors",
              "description": "",
              "type": "ParseError[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Version",
    "overloads": [
      {
        "file": "packages/compiler/src/util.ts#L231-L242",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "major",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "minor",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "patch",
              "description": "",
              "type": "string"
            }
          ]
        ],
        "signature": "class Version {\n  public readonly major: string;\n  public readonly minor: string;\n  public readonly patch: string;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "compiler",
    "name": "SourceMap",
    "overloads": [
      {
        "file": "packages/compiler/src/output/source_map.ts#L23-L30",
        "signature": "export type SourceMap = {\n  version: number;\n  file?: string;\n  sourceRoot: string;\n  sources: string[];\n  sourcesContent: (string | null)[];\n  mappings: string;\n};",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstBoundAttribute",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L42-L57",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "fromBoundElementProperty",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L48-L52",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "prop",
                      "description": "",
                      "type": "BoundElementProperty"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "i18n",
                      "description": "",
                      "type": "I18nMeta"
                    }
                  ]
                ],
                "signature": "static fromBoundElementProperty(prop: BoundElementProperty, i18n?: I18nMeta);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L54-L56",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor<Result>"
                    }
                  ]
                ],
                "signature": "visit<Result>(visitor: Visitor<Result>): Result;"
              }
            }
          ]
        ],
        "signature": "class BoundAttribute implements Node {\n  static fromBoundElementProperty(prop: BoundElementProperty, i18n?: I18nMeta);\n  visit<Result>(visitor: Visitor<Result>): Result;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstBoundEvent",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L59-L76",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "fromParsedEvent",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L65-L71",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "event",
                      "description": "",
                      "type": "ParsedEvent"
                    }
                  ]
                ],
                "signature": "static fromParsedEvent(event: ParsedEvent);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L73-L75",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor<Result>"
                    }
                  ]
                ],
                "signature": "visit<Result>(visitor: Visitor<Result>): Result;"
              }
            }
          ]
        ],
        "signature": "class BoundEvent implements Node {\n  static fromParsedEvent(event: ParsedEvent);\n  visit<Result>(visitor: Visitor<Result>): Result;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstBoundText",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L26-L31",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L28-L30",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor<Result>"
                    }
                  ]
                ],
                "signature": "visit<Result>(visitor: Visitor<Result>): Result;"
              }
            }
          ]
        ],
        "signature": "class BoundText implements Node {\n  visit<Result>(visitor: Visitor<Result>): Result;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstContent",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L106-L115",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "\"ng-content\""
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L112-L114",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor<Result>"
                    }
                  ]
                ],
                "signature": "visit<Result>(visitor: Visitor<Result>): Result;"
              }
            }
          ]
        ],
        "signature": "class Content implements Node {\n  readonly name = \"ng-content\";\n\n  visit<Result>(visitor: Visitor<Result>): Result;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstElement",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L78-L92",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L89-L91",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor<Result>"
                    }
                  ]
                ],
                "signature": "visit<Result>(visitor: Visitor<Result>): Result;"
              }
            }
          ]
        ],
        "signature": "class Element implements Node {\n  visit<Result>(visitor: Visitor<Result>): Result;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "TmplAstNode",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L14-L17",
        "signature": "interface Node {\n  sourceSpan: ParseSourceSpan;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "sourceSpan",
              "description": "",
              "type": "ParseSourceSpan"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstRecursiveVisitor",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L177-L198",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visitElement",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L178-L182",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "element",
                      "description": "",
                      "type": "Element"
                    }
                  ]
                ],
                "signature": "visitElement(element: Element): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitTemplate",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L183-L188",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "template",
                      "description": "",
                      "type": "Template"
                    }
                  ]
                ],
                "signature": "visitTemplate(template: Template): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitContent",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L189-L189",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "content",
                      "description": "",
                      "type": "Content"
                    }
                  ]
                ],
                "signature": "visitContent(content: Content): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitVariable",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L190-L190",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "variable",
                      "description": "",
                      "type": "Variable"
                    }
                  ]
                ],
                "signature": "visitVariable(variable: Variable): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitReference",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L191-L191",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reference",
                      "description": "",
                      "type": "Reference"
                    }
                  ]
                ],
                "signature": "visitReference(reference: Reference): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitTextAttribute",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L192-L192",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "attribute",
                      "description": "",
                      "type": "TextAttribute"
                    }
                  ]
                ],
                "signature": "visitTextAttribute(attribute: TextAttribute): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitBoundAttribute",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L193-L193",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "attribute",
                      "description": "",
                      "type": "BoundAttribute"
                    }
                  ]
                ],
                "signature": "visitBoundAttribute(attribute: BoundAttribute): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitBoundEvent",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L194-L194",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "attribute",
                      "description": "",
                      "type": "BoundEvent"
                    }
                  ]
                ],
                "signature": "visitBoundEvent(attribute: BoundEvent): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitText",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L195-L195",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "text",
                      "description": "",
                      "type": "Text"
                    }
                  ]
                ],
                "signature": "visitText(text: Text): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitBoundText",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L196-L196",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "text",
                      "description": "",
                      "type": "BoundText"
                    }
                  ]
                ],
                "signature": "visitBoundText(text: BoundText): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitIcu",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L197-L197",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "icu",
                      "description": "",
                      "type": "Icu"
                    }
                  ]
                ],
                "signature": "visitIcu(icu: Icu): void;"
              }
            }
          ]
        ],
        "signature": "class RecursiveVisitor implements Visitor<void> {\n  visitElement(element: Element): void;\n  visitTemplate(template: Template): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstReference",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L126-L133",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L130-L132",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor<Result>"
                    }
                  ]
                ],
                "signature": "visit<Result>(visitor: Visitor<Result>): Result;"
              }
            }
          ]
        ],
        "signature": "class Reference implements Node {\n  visit<Result>(visitor: Visitor<Result>): Result;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstTemplate",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L94-L104",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L101-L103",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor<Result>"
                    }
                  ]
                ],
                "signature": "visit<Result>(visitor: Visitor<Result>): Result;"
              }
            }
          ]
        ],
        "signature": "class Template implements Node {\n  visit<Result>(visitor: Visitor<Result>): Result;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstText",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L19-L24",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L21-L23",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor<Result>"
                    }
                  ]
                ],
                "signature": "visit<Result>(visitor: Visitor<Result>): Result;"
              }
            }
          ]
        ],
        "signature": "class Text implements Node {\n  visit<Result>(visitor: Visitor<Result>): Result;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstTextAttribute",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L33-L40",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L37-L39",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor<Result>"
                    }
                  ]
                ],
                "signature": "visit<Result>(visitor: Visitor<Result>): Result;"
              }
            }
          ]
        ],
        "signature": "class TextAttribute implements Node {\n  visit<Result>(visitor: Visitor<Result>): Result;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TmplAstVariable",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_ast.ts#L117-L124",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/render3/r3_ast.ts#L121-L123",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor<Result>"
                    }
                  ]
                ],
                "signature": "visit<Result>(visitor: Visitor<Result>): Result;"
              }
            }
          ]
        ],
        "signature": "class Variable implements Node {\n  visit<Result>(visitor: Visitor<Result>): Result;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "R3Identifiers",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_identifiers.ts#L13-L324",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "NEW_METHOD",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "TRANSFORM_METHOD",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "PATCH_DEPS",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "namespaceHTML",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "namespaceMathML",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "namespaceSVG",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "element",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "elementStart",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "elementEnd",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "select",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "advance",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "syntheticHostProperty",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "syntheticHostListener",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attribute",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributeInterpolate1",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributeInterpolate2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributeInterpolate3",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributeInterpolate4",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributeInterpolate5",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributeInterpolate6",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributeInterpolate7",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributeInterpolate8",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributeInterpolateV",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classProp",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "elementContainerStart",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "elementContainerEnd",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "elementContainer",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleMap",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleMapInterpolate1",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleMapInterpolate2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleMapInterpolate3",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleMapInterpolate4",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleMapInterpolate5",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleMapInterpolate6",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleMapInterpolate7",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleMapInterpolate8",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleMapInterpolateV",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classMap",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classMapInterpolate1",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classMapInterpolate2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classMapInterpolate3",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classMapInterpolate4",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classMapInterpolate5",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classMapInterpolate6",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classMapInterpolate7",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classMapInterpolate8",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classMapInterpolateV",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleProp",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stylePropInterpolate1",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stylePropInterpolate2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stylePropInterpolate3",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stylePropInterpolate4",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stylePropInterpolate5",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stylePropInterpolate6",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stylePropInterpolate7",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stylePropInterpolate8",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stylePropInterpolateV",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "nextContext",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "templateCreate",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "text",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "enableBindings",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "disableBindings",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "getCurrentView",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textInterpolate",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textInterpolate1",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textInterpolate2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textInterpolate3",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textInterpolate4",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textInterpolate5",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textInterpolate6",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textInterpolate7",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textInterpolate8",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "textInterpolateV",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "restoreView",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureFunction0",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureFunction1",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureFunction2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureFunction3",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureFunction4",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureFunction5",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureFunction6",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureFunction7",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureFunction8",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pureFunctionV",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipeBind1",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipeBind2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipeBind3",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipeBind4",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipeBindV",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostProperty",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "property",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyInterpolate",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyInterpolate1",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyInterpolate2",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyInterpolate3",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyInterpolate4",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyInterpolate5",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyInterpolate6",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyInterpolate7",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyInterpolate8",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyInterpolateV",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18n",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18nAttributes",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18nExp",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18nStart",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18nEnd",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18nApply",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18nPostprocess",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipe",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "projection",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "projectionDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "reference",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "inject",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "injectAttribute",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "injectPipeChangeDetectorRef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "directiveInject",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "invalidFactory",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "invalidFactoryDep",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "templateRefExtractor",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "resolveWindow",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "resolveDocument",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "resolveBody",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "defineComponent",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "setComponentScope",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ComponentDefWithMeta",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "FactoryDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "defineDirective",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "DirectiveDefWithMeta",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "InjectorDef",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "defineInjector",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "NgModuleDefWithMeta",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ModuleWithProviders",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "defineNgModule",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "setNgModuleScope",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "PipeDefWithMeta",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "definePipe",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queryRefresh",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewQuery",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "staticViewQuery",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "staticContentQuery",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "loadQuery",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "contentQuery",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "NgOnChangesFeature",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "InheritDefinitionFeature",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "CopyDefinitionFeature",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ProvidersFeature",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "listener",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "getFactoryOf",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "getInheritedFactory",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "sanitizeHtml",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "sanitizeStyle",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "sanitizeResourceUrl",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "sanitizeScript",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "sanitizeUrl",
              "description": "",
              "type": "o.ExternalReference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "sanitizeUrlOrResourceUrl",
              "description": "",
              "type": "o.ExternalReference"
            }
          ]
        ],
        "signature": "class Identifiers {\n  static NEW_METHOD = \"factory\";\n  static TRANSFORM_METHOD = \"transform\";\n  static PATCH_DEPS = \"patchedDeps\";\n  static namespaceHTML: o.ExternalReference = {\n    name: \"ɵɵnamespaceHTML\",\n    moduleName: CORE,\n  };\n  static namespaceMathML: o.ExternalReference = {\n    name: \"ɵɵnamespaceMathML\",\n    moduleName: CORE,\n  };\n  static namespaceSVG: o.ExternalReference = {\n    name: \"ɵɵnamespaceSVG\",\n    moduleName: CORE,\n  };\n  static element: o.ExternalReference = { name: \"ɵɵelement\", moduleName: CORE };\n  static elementStart: o.ExternalReference = {\n    name: \"ɵɵelementStart\",\n    moduleName: CORE,\n  };\n  static elementEnd: o.ExternalReference = {\n    name: \"ɵɵelementEnd\",\n    moduleName: CORE,\n  };\n  static select: o.ExternalReference = { name: \"ɵɵselect\", moduleName: CORE };\n  static advance: o.ExternalReference = { name: \"ɵɵadvance\", moduleName: CORE };\n  static syntheticHostProperty: o.ExternalReference = {\n    name: \"ɵɵsyntheticHostProperty\",\n    moduleName: CORE,\n  };\n  static syntheticHostListener: o.ExternalReference = {\n    name: \"ɵɵsyntheticHostListener\",\n    moduleName: CORE,\n  };\n  static attribute: o.ExternalReference = {\n    name: \"ɵɵattribute\",\n    moduleName: CORE,\n  };\n  static attributeInterpolate1: o.ExternalReference = {\n    name: \"ɵɵattributeInterpolate1\",\n    moduleName: CORE,\n  };\n  static attributeInterpolate2: o.ExternalReference = {\n    name: \"ɵɵattributeInterpolate2\",\n    moduleName: CORE,\n  };\n  static attributeInterpolate3: o.ExternalReference = {\n    name: \"ɵɵattributeInterpolate3\",\n    moduleName: CORE,\n  };\n  static attributeInterpolate4: o.ExternalReference = {\n    name: \"ɵɵattributeInterpolate4\",\n    moduleName: CORE,\n  };\n  static attributeInterpolate5: o.ExternalReference = {\n    name: \"ɵɵattributeInterpolate5\",\n    moduleName: CORE,\n  };\n  static attributeInterpolate6: o.ExternalReference = {\n    name: \"ɵɵattributeInterpolate6\",\n    moduleName: CORE,\n  };\n  static attributeInterpolate7: o.ExternalReference = {\n    name: \"ɵɵattributeInterpolate7\",\n    moduleName: CORE,\n  };\n  static attributeInterpolate8: o.ExternalReference = {\n    name: \"ɵɵattributeInterpolate8\",\n    moduleName: CORE,\n  };\n  static attributeInterpolateV: o.ExternalReference = {\n    name: \"ɵɵattributeInterpolateV\",\n    moduleName: CORE,\n  };\n  static classProp: o.ExternalReference = {\n    name: \"ɵɵclassProp\",\n    moduleName: CORE,\n  };\n  static elementContainerStart: o.ExternalReference = {\n    name: \"ɵɵelementContainerStart\",\n    moduleName: CORE,\n  };\n  static elementContainerEnd: o.ExternalReference = {\n    name: \"ɵɵelementContainerEnd\",\n    moduleName: CORE,\n  };\n  static elementContainer: o.ExternalReference = {\n    name: \"ɵɵelementContainer\",\n    moduleName: CORE,\n  };\n  static styleMap: o.ExternalReference = {\n    name: \"ɵɵstyleMap\",\n    moduleName: CORE,\n  };\n  static styleMapInterpolate1: o.ExternalReference = {\n    name: \"ɵɵstyleMapInterpolate1\",\n    moduleName: CORE,\n  };\n  static styleMapInterpolate2: o.ExternalReference = {\n    name: \"ɵɵstyleMapInterpolate2\",\n    moduleName: CORE,\n  };\n  static styleMapInterpolate3: o.ExternalReference = {\n    name: \"ɵɵstyleMapInterpolate3\",\n    moduleName: CORE,\n  };\n  static styleMapInterpolate4: o.ExternalReference = {\n    name: \"ɵɵstyleMapInterpolate4\",\n    moduleName: CORE,\n  };\n  static styleMapInterpolate5: o.ExternalReference = {\n    name: \"ɵɵstyleMapInterpolate5\",\n    moduleName: CORE,\n  };\n  static styleMapInterpolate6: o.ExternalReference = {\n    name: \"ɵɵstyleMapInterpolate6\",\n    moduleName: CORE,\n  };\n  static styleMapInterpolate7: o.ExternalReference = {\n    name: \"ɵɵstyleMapInterpolate7\",\n    moduleName: CORE,\n  };\n  static styleMapInterpolate8: o.ExternalReference = {\n    name: \"ɵɵstyleMapInterpolate8\",\n    moduleName: CORE,\n  };\n  static styleMapInterpolateV: o.ExternalReference = {\n    name: \"ɵɵstyleMapInterpolateV\",\n    moduleName: CORE,\n  };\n  static classMap: o.ExternalReference = {\n    name: \"ɵɵclassMap\",\n    moduleName: CORE,\n  };\n  static classMapInterpolate1: o.ExternalReference = {\n    name: \"ɵɵclassMapInterpolate1\",\n    moduleName: CORE,\n  };\n  static classMapInterpolate2: o.ExternalReference = {\n    name: \"ɵɵclassMapInterpolate2\",\n    moduleName: CORE,\n  };\n  static classMapInterpolate3: o.ExternalReference = {\n    name: \"ɵɵclassMapInterpolate3\",\n    moduleName: CORE,\n  };\n  static classMapInterpolate4: o.ExternalReference = {\n    name: \"ɵɵclassMapInterpolate4\",\n    moduleName: CORE,\n  };\n  static classMapInterpolate5: o.ExternalReference = {\n    name: \"ɵɵclassMapInterpolate5\",\n    moduleName: CORE,\n  };\n  static classMapInterpolate6: o.ExternalReference = {\n    name: \"ɵɵclassMapInterpolate6\",\n    moduleName: CORE,\n  };\n  static classMapInterpolate7: o.ExternalReference = {\n    name: \"ɵɵclassMapInterpolate7\",\n    moduleName: CORE,\n  };\n  static classMapInterpolate8: o.ExternalReference = {\n    name: \"ɵɵclassMapInterpolate8\",\n    moduleName: CORE,\n  };\n  static classMapInterpolateV: o.ExternalReference = {\n    name: \"ɵɵclassMapInterpolateV\",\n    moduleName: CORE,\n  };\n  static styleProp: o.ExternalReference = {\n    name: \"ɵɵstyleProp\",\n    moduleName: CORE,\n  };\n  static stylePropInterpolate1: o.ExternalReference = {\n    name: \"ɵɵstylePropInterpolate1\",\n    moduleName: CORE,\n  };\n  static stylePropInterpolate2: o.ExternalReference = {\n    name: \"ɵɵstylePropInterpolate2\",\n    moduleName: CORE,\n  };\n  static stylePropInterpolate3: o.ExternalReference = {\n    name: \"ɵɵstylePropInterpolate3\",\n    moduleName: CORE,\n  };\n  static stylePropInterpolate4: o.ExternalReference = {\n    name: \"ɵɵstylePropInterpolate4\",\n    moduleName: CORE,\n  };\n  static stylePropInterpolate5: o.ExternalReference = {\n    name: \"ɵɵstylePropInterpolate5\",\n    moduleName: CORE,\n  };\n  static stylePropInterpolate6: o.ExternalReference = {\n    name: \"ɵɵstylePropInterpolate6\",\n    moduleName: CORE,\n  };\n  static stylePropInterpolate7: o.ExternalReference = {\n    name: \"ɵɵstylePropInterpolate7\",\n    moduleName: CORE,\n  };\n  static stylePropInterpolate8: o.ExternalReference = {\n    name: \"ɵɵstylePropInterpolate8\",\n    moduleName: CORE,\n  };\n  static stylePropInterpolateV: o.ExternalReference = {\n    name: \"ɵɵstylePropInterpolateV\",\n    moduleName: CORE,\n  };\n  static nextContext: o.ExternalReference = {\n    name: \"ɵɵnextContext\",\n    moduleName: CORE,\n  };\n  static templateCreate: o.ExternalReference = {\n    name: \"ɵɵtemplate\",\n    moduleName: CORE,\n  };\n  static text: o.ExternalReference = { name: \"ɵɵtext\", moduleName: CORE };\n  static enableBindings: o.ExternalReference = {\n    name: \"ɵɵenableBindings\",\n    moduleName: CORE,\n  };\n  static disableBindings: o.ExternalReference = {\n    name: \"ɵɵdisableBindings\",\n    moduleName: CORE,\n  };\n  static getCurrentView: o.ExternalReference = {\n    name: \"ɵɵgetCurrentView\",\n    moduleName: CORE,\n  };\n  static textInterpolate: o.ExternalReference = {\n    name: \"ɵɵtextInterpolate\",\n    moduleName: CORE,\n  };\n  static textInterpolate1: o.ExternalReference = {\n    name: \"ɵɵtextInterpolate1\",\n    moduleName: CORE,\n  };\n  static textInterpolate2: o.ExternalReference = {\n    name: \"ɵɵtextInterpolate2\",\n    moduleName: CORE,\n  };\n  static textInterpolate3: o.ExternalReference = {\n    name: \"ɵɵtextInterpolate3\",\n    moduleName: CORE,\n  };\n  static textInterpolate4: o.ExternalReference = {\n    name: \"ɵɵtextInterpolate4\",\n    moduleName: CORE,\n  };\n  static textInterpolate5: o.ExternalReference = {\n    name: \"ɵɵtextInterpolate5\",\n    moduleName: CORE,\n  };\n  static textInterpolate6: o.ExternalReference = {\n    name: \"ɵɵtextInterpolate6\",\n    moduleName: CORE,\n  };\n  static textInterpolate7: o.ExternalReference = {\n    name: \"ɵɵtextInterpolate7\",\n    moduleName: CORE,\n  };\n  static textInterpolate8: o.ExternalReference = {\n    name: \"ɵɵtextInterpolate8\",\n    moduleName: CORE,\n  };\n  static textInterpolateV: o.ExternalReference = {\n    name: \"ɵɵtextInterpolateV\",\n    moduleName: CORE,\n  };\n  static restoreView: o.ExternalReference = {\n    name: \"ɵɵrestoreView\",\n    moduleName: CORE,\n  };\n  static pureFunction0: o.ExternalReference = {\n    name: \"ɵɵpureFunction0\",\n    moduleName: CORE,\n  };\n  static pureFunction1: o.ExternalReference = {\n    name: \"ɵɵpureFunction1\",\n    moduleName: CORE,\n  };\n  static pureFunction2: o.ExternalReference = {\n    name: \"ɵɵpureFunction2\",\n    moduleName: CORE,\n  };\n  static pureFunction3: o.ExternalReference = {\n    name: \"ɵɵpureFunction3\",\n    moduleName: CORE,\n  };\n  static pureFunction4: o.ExternalReference = {\n    name: \"ɵɵpureFunction4\",\n    moduleName: CORE,\n  };\n  static pureFunction5: o.ExternalReference = {\n    name: \"ɵɵpureFunction5\",\n    moduleName: CORE,\n  };\n  static pureFunction6: o.ExternalReference = {\n    name: \"ɵɵpureFunction6\",\n    moduleName: CORE,\n  };\n  static pureFunction7: o.ExternalReference = {\n    name: \"ɵɵpureFunction7\",\n    moduleName: CORE,\n  };\n  static pureFunction8: o.ExternalReference = {\n    name: \"ɵɵpureFunction8\",\n    moduleName: CORE,\n  };\n  static pureFunctionV: o.ExternalReference = {\n    name: \"ɵɵpureFunctionV\",\n    moduleName: CORE,\n  };\n  static pipeBind1: o.ExternalReference = {\n    name: \"ɵɵpipeBind1\",\n    moduleName: CORE,\n  };\n  static pipeBind2: o.ExternalReference = {\n    name: \"ɵɵpipeBind2\",\n    moduleName: CORE,\n  };\n  static pipeBind3: o.ExternalReference = {\n    name: \"ɵɵpipeBind3\",\n    moduleName: CORE,\n  };\n  static pipeBind4: o.ExternalReference = {\n    name: \"ɵɵpipeBind4\",\n    moduleName: CORE,\n  };\n  static pipeBindV: o.ExternalReference = {\n    name: \"ɵɵpipeBindV\",\n    moduleName: CORE,\n  };\n  static hostProperty: o.ExternalReference = {\n    name: \"ɵɵhostProperty\",\n    moduleName: CORE,\n  };\n  static property: o.ExternalReference = {\n    name: \"ɵɵproperty\",\n    moduleName: CORE,\n  };\n  static propertyInterpolate: o.ExternalReference = {\n    name: \"ɵɵpropertyInterpolate\",\n    moduleName: CORE,\n  };\n  static propertyInterpolate1: o.ExternalReference = {\n    name: \"ɵɵpropertyInterpolate1\",\n    moduleName: CORE,\n  };\n  static propertyInterpolate2: o.ExternalReference = {\n    name: \"ɵɵpropertyInterpolate2\",\n    moduleName: CORE,\n  };\n  static propertyInterpolate3: o.ExternalReference = {\n    name: \"ɵɵpropertyInterpolate3\",\n    moduleName: CORE,\n  };\n  static propertyInterpolate4: o.ExternalReference = {\n    name: \"ɵɵpropertyInterpolate4\",\n    moduleName: CORE,\n  };\n  static propertyInterpolate5: o.ExternalReference = {\n    name: \"ɵɵpropertyInterpolate5\",\n    moduleName: CORE,\n  };\n  static propertyInterpolate6: o.ExternalReference = {\n    name: \"ɵɵpropertyInterpolate6\",\n    moduleName: CORE,\n  };\n  static propertyInterpolate7: o.ExternalReference = {\n    name: \"ɵɵpropertyInterpolate7\",\n    moduleName: CORE,\n  };\n  static propertyInterpolate8: o.ExternalReference = {\n    name: \"ɵɵpropertyInterpolate8\",\n    moduleName: CORE,\n  };\n  static propertyInterpolateV: o.ExternalReference = {\n    name: \"ɵɵpropertyInterpolateV\",\n    moduleName: CORE,\n  };\n  static i18n: o.ExternalReference = { name: \"ɵɵi18n\", moduleName: CORE };\n  static i18nAttributes: o.ExternalReference = {\n    name: \"ɵɵi18nAttributes\",\n    moduleName: CORE,\n  };\n  static i18nExp: o.ExternalReference = { name: \"ɵɵi18nExp\", moduleName: CORE };\n  static i18nStart: o.ExternalReference = {\n    name: \"ɵɵi18nStart\",\n    moduleName: CORE,\n  };\n  static i18nEnd: o.ExternalReference = { name: \"ɵɵi18nEnd\", moduleName: CORE };\n  static i18nApply: o.ExternalReference = {\n    name: \"ɵɵi18nApply\",\n    moduleName: CORE,\n  };\n  static i18nPostprocess: o.ExternalReference = {\n    name: \"ɵɵi18nPostprocess\",\n    moduleName: CORE,\n  };\n  static pipe: o.ExternalReference = { name: \"ɵɵpipe\", moduleName: CORE };\n  static projection: o.ExternalReference = {\n    name: \"ɵɵprojection\",\n    moduleName: CORE,\n  };\n  static projectionDef: o.ExternalReference = {\n    name: \"ɵɵprojectionDef\",\n    moduleName: CORE,\n  };\n  static reference: o.ExternalReference = {\n    name: \"ɵɵreference\",\n    moduleName: CORE,\n  };\n  static inject: o.ExternalReference = { name: \"ɵɵinject\", moduleName: CORE };\n  static injectAttribute: o.ExternalReference = {\n    name: \"ɵɵinjectAttribute\",\n    moduleName: CORE,\n  };\n  static injectPipeChangeDetectorRef: o.ExternalReference = {\n    name: \"ɵɵinjectPipeChangeDetectorRef\",\n    moduleName: CORE,\n  };\n  static directiveInject: o.ExternalReference = {\n    name: \"ɵɵdirectiveInject\",\n    moduleName: CORE,\n  };\n  static invalidFactory: o.ExternalReference = {\n    name: \"ɵɵinvalidFactory\",\n    moduleName: CORE,\n  };\n  static invalidFactoryDep: o.ExternalReference = {\n    name: \"ɵɵinvalidFactoryDep\",\n    moduleName: CORE,\n  };\n  static templateRefExtractor: o.ExternalReference = {\n    name: \"ɵɵtemplateRefExtractor\",\n    moduleName: CORE,\n  };\n  static resolveWindow: o.ExternalReference = {\n    name: \"ɵɵresolveWindow\",\n    moduleName: CORE,\n  };\n  static resolveDocument: o.ExternalReference = {\n    name: \"ɵɵresolveDocument\",\n    moduleName: CORE,\n  };\n  static resolveBody: o.ExternalReference = {\n    name: \"ɵɵresolveBody\",\n    moduleName: CORE,\n  };\n  static defineComponent: o.ExternalReference = {\n    name: \"ɵɵdefineComponent\",\n    moduleName: CORE,\n  };\n  static setComponentScope: o.ExternalReference = {\n    name: \"ɵɵsetComponentScope\",\n    moduleName: CORE,\n  };\n  static ComponentDefWithMeta: o.ExternalReference = {\n    name: \"ɵɵComponentDefWithMeta\",\n    moduleName: CORE,\n  };\n  static FactoryDef: o.ExternalReference = {\n    name: \"ɵɵFactoryDef\",\n    moduleName: CORE,\n  };\n  static defineDirective: o.ExternalReference = {\n    name: \"ɵɵdefineDirective\",\n    moduleName: CORE,\n  };\n  static DirectiveDefWithMeta: o.ExternalReference = {\n    name: \"ɵɵDirectiveDefWithMeta\",\n    moduleName: CORE,\n  };\n  static InjectorDef: o.ExternalReference = {\n    name: \"ɵɵInjectorDef\",\n    moduleName: CORE,\n  };\n  static defineInjector: o.ExternalReference = {\n    name: \"ɵɵdefineInjector\",\n    moduleName: CORE,\n  };\n  static NgModuleDefWithMeta: o.ExternalReference = {\n    name: \"ɵɵNgModuleDefWithMeta\",\n    moduleName: CORE,\n  };\n  static ModuleWithProviders: o.ExternalReference = {\n    name: \"ModuleWithProviders\",\n    moduleName: CORE,\n  };\n  static defineNgModule: o.ExternalReference = {\n    name: \"ɵɵdefineNgModule\",\n    moduleName: CORE,\n  };\n  static setNgModuleScope: o.ExternalReference = {\n    name: \"ɵɵsetNgModuleScope\",\n    moduleName: CORE,\n  };\n  static PipeDefWithMeta: o.ExternalReference = {\n    name: \"ɵɵPipeDefWithMeta\",\n    moduleName: CORE,\n  };\n  static definePipe: o.ExternalReference = {\n    name: \"ɵɵdefinePipe\",\n    moduleName: CORE,\n  };\n  static queryRefresh: o.ExternalReference = {\n    name: \"ɵɵqueryRefresh\",\n    moduleName: CORE,\n  };\n  static viewQuery: o.ExternalReference = {\n    name: \"ɵɵviewQuery\",\n    moduleName: CORE,\n  };\n  static staticViewQuery: o.ExternalReference = {\n    name: \"ɵɵstaticViewQuery\",\n    moduleName: CORE,\n  };\n  static staticContentQuery: o.ExternalReference = {\n    name: \"ɵɵstaticContentQuery\",\n    moduleName: CORE,\n  };\n  static loadQuery: o.ExternalReference = {\n    name: \"ɵɵloadQuery\",\n    moduleName: CORE,\n  };\n  static contentQuery: o.ExternalReference = {\n    name: \"ɵɵcontentQuery\",\n    moduleName: CORE,\n  };\n  static NgOnChangesFeature: o.ExternalReference = {\n    name: \"ɵɵNgOnChangesFeature\",\n    moduleName: CORE,\n  };\n  static InheritDefinitionFeature: o.ExternalReference = {\n    name: \"ɵɵInheritDefinitionFeature\",\n    moduleName: CORE,\n  };\n  static CopyDefinitionFeature: o.ExternalReference = {\n    name: \"ɵɵCopyDefinitionFeature\",\n    moduleName: CORE,\n  };\n  static ProvidersFeature: o.ExternalReference = {\n    name: \"ɵɵProvidersFeature\",\n    moduleName: CORE,\n  };\n  static listener: o.ExternalReference = {\n    name: \"ɵɵlistener\",\n    moduleName: CORE,\n  };\n  static getFactoryOf: o.ExternalReference = {\n    name: \"ɵɵgetFactoryOf\",\n    moduleName: CORE,\n  };\n  static getInheritedFactory: o.ExternalReference = {\n    name: \"ɵɵgetInheritedFactory\",\n    moduleName: CORE,\n  };\n  static sanitizeHtml: o.ExternalReference = {\n    name: \"ɵɵsanitizeHtml\",\n    moduleName: CORE,\n  };\n  static sanitizeStyle: o.ExternalReference = {\n    name: \"ɵɵsanitizeStyle\",\n    moduleName: CORE,\n  };\n  static sanitizeResourceUrl: o.ExternalReference = {\n    name: \"ɵɵsanitizeResourceUrl\",\n    moduleName: CORE,\n  };\n  static sanitizeScript: o.ExternalReference = {\n    name: \"ɵɵsanitizeScript\",\n    moduleName: CORE,\n  };\n  static sanitizeUrl: o.ExternalReference = {\n    name: \"ɵɵsanitizeUrl\",\n    moduleName: CORE,\n  };\n  static sanitizeUrlOrResourceUrl: o.ExternalReference = {\n    name: \"ɵɵsanitizeUrlOrResourceUrl\",\n    moduleName: CORE,\n  };\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3DependencyMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_factory.ts#L138-L176",
        "signature": "interface R3DependencyMetadata {\n  token: o.Expression;\n  attribute: o.Expression | null;\n  resolved: R3ResolvedDependencyType;\n  host: boolean;\n  optional: boolean;\n  self: boolean;\n  skipSelf: boolean;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Metadata representing a single dependency to be injected into a constructor or function call.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "token",
              "description": "An expression representing the token or value to be injected.",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attribute",
              "description": "If an @Attribute decorator is present, this is the literal type of the attribute name, or\nthe unknown type if no literal type is available (e.g. the attribute name is an expression).\nWill be null otherwise.",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "resolved",
              "description": "An enum indicating whether this dependency has special meaning to Angular and needs to be\ninjected specially.",
              "type": "R3ResolvedDependencyType"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "host",
              "description": "Whether the dependency has an @Host qualifier.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "optional",
              "description": "Whether the dependency has an @Optional qualifier.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "self",
              "description": "Whether the dependency has an @Self qualifier.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "skipSelf",
              "description": "Whether the dependency has an @SkipSelf qualifier.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "R3ResolvedDependencyType",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_factory.ts#L111-L133",
        "signature": "export enum R3ResolvedDependencyType {\n  /**\n   * A normal token dependency.\n   */\n  Token = 0,\n\n  /**\n   * The dependency is for an attribute.\n   *\n   * The token expression is a string representing the attribute name.\n   */\n  Attribute = 1,\n\n  /**\n   * Injecting the `ChangeDetectorRef` token. Needs special handling when injected into a pipe.\n   */\n  ChangeDetectorRef = 2,\n\n  /**\n   * An invalid dependency (no token could be determined). An error should be thrown at runtime.\n   */\n  Invalid = 3,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Resolved type of a dependency.\n\nOccasionally, dependencies will have special significance which is known statically. In that\ncase the `R3ResolvedDependencyType` informs the factory generator that a particular dependency\nshould be generated specially (usually by calling a special injection function instead of the\nstandard one).\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "compileFactoryFunction",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_factory.ts#L187-L285",
        "signature": "function compileFactoryFunction(meta: R3FactoryMetadata): R3FactoryFn;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Construct a factory function expression for the given `R3FactoryMetadata`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "meta",
              "description": "",
              "type": "R3FactoryMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "compiler",
    "name": "R3FactoryMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_factory.ts#L92-L93",
        "signature": "export type R3FactoryMetadata =\n  | R3ConstructorFactoryMetadata\n  | R3DelegatedFactoryMetadata\n  | R3DelegatedFnOrClassMetadata\n  | R3ExpressionFactoryMetadata;",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "R3FactoryTarget",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_factory.ts#L95-L101",
        "signature": "export enum R3FactoryTarget {\n  Directive = 0,\n  Component = 1,\n  Injectable = 2,\n  Pipe = 3,\n  NgModule = 4,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "compileInjector",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_module_compiler.ts#L236-L262",
        "signature": "function compileInjector(meta: R3InjectorMetadata): R3InjectorDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "meta",
              "description": "",
              "type": "R3InjectorMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "compileNgModule",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_module_compiler.ts#L96-L167",
        "signature": "function compileNgModule(meta: R3NgModuleMetadata): R3NgModuleDef;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "meta",
              "description": "",
              "type": "R3NgModuleMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3InjectorMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_module_compiler.ts#L227-L234",
        "signature": "interface R3InjectorMetadata {\n  name: string;\n  type: R3Reference;\n  internalType: o.Expression;\n  deps: R3DependencyMetadata[] | null;\n  providers: o.Expression | null;\n  imports: o.Expression[];\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "R3Reference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "internalType",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "deps",
              "description": "",
              "type": "R3DependencyMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "imports",
              "description": "",
              "type": "o.Expression[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3NgModuleMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_module_compiler.ts#L28-L91",
        "signature": "interface R3NgModuleMetadata {\n  type: R3Reference;\n  internalType: o.Expression;\n  adjacentType: o.Expression;\n  bootstrap: R3Reference[];\n  declarations: R3Reference[];\n  imports: R3Reference[];\n  exports: R3Reference[];\n  emitInline: boolean;\n  containsForwardDecls: boolean;\n  schemas: R3Reference[] | null;\n  id: o.Expression | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Metadata required by the module compiler to generate a module def (`ɵmod`) for a type.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "An expression representing the module type being compiled.",
              "type": "R3Reference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "internalType",
              "description": "An expression representing the module type being compiled, intended for use within a class\ndefinition itself.\n\nThis can differ from the outer `type` if the class is being compiled by ngcc and is inside\nan IIFE structure that uses a different name internally.",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "adjacentType",
              "description": "An expression intended for use by statements that are adjacent (i.e. tightly coupled) to but\nnot internal to a class definition.\n\nThis can differ from the outer `type` if the class is being compiled by ngcc and is inside\nan IIFE structure that uses a different name internally.",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "bootstrap",
              "description": "An array of expressions representing the bootstrap components specified by the module.",
              "type": "R3Reference[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "declarations",
              "description": "An array of expressions representing the directives and pipes declared by the module.",
              "type": "R3Reference[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "imports",
              "description": "An array of expressions representing the imports of the module.",
              "type": "R3Reference[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exports",
              "description": "An array of expressions representing the exports of the module.",
              "type": "R3Reference[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "emitInline",
              "description": "Whether to emit the selector scope values (declarations, imports, exports) inline into the\nmodule definition, or to generate additional statements which patch them on. Inline emission\ndoes not allow components to be tree-shaken, but is useful for JIT mode.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "containsForwardDecls",
              "description": "Whether to generate closure wrappers for bootstrap, declarations, imports, and exports.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "schemas",
              "description": "The set of schemas that declare elements to be allowed in the NgModule.",
              "type": "R3Reference[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "id",
              "description": "Unique ID or expression representing the unique ID of an NgModule.",
              "type": "o.Expression"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "compilePipeFromMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_pipe_compiler.ts#L60-L79",
        "signature": "function compilePipeFromMetadata(metadata: R3PipeMetadata);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "metadata",
              "description": "",
              "type": "R3PipeMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3PipeMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/r3_pipe_compiler.ts#L19-L58",
        "signature": "interface R3PipeMetadata {\n  name: string;\n  type: R3Reference;\n  internalType: o.Expression;\n  typeArgumentCount: number;\n  pipeName: string;\n  deps: R3DependencyMetadata[] | null;\n  pure: boolean;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "Name of the pipe type.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "An expression representing a reference to the pipe itself.",
              "type": "R3Reference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "internalType",
              "description": "An expression representing the pipe being compiled, intended for use within a class definition\nitself.\n\nThis can differ from the outer `type` if the class is being compiled by ngcc and is inside an\nIIFE structure that uses a different name internally.",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "typeArgumentCount",
              "description": "Number of generic type parameters of the type itself.",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipeName",
              "description": "Name of the pipe.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "deps",
              "description": "Dependencies of the pipe's constructor.",
              "type": "R3DependencyMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pure",
              "description": "Whether the pipe is marked as pure.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "makeBindingParser",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/template.ts#L2070-L2074",
        "signature": "function makeBindingParser(\n  interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG\n): BindingParser;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Construct a `BindingParser` with a default configuration.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "interpolationConfig",
              "description": "",
              "type": "InterpolationConfig"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "parseTemplate",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/template.ts#L2007-L2063",
        "signature": "function parseTemplate(\n  template: string,\n  templateUrl: string,\n  options: ParseTemplateOptions = {}\n): {\n  errors?: ParseError[];\n  nodes: t.Node[];\n  styleUrls: string[];\n  styles: string[];\n  ngContentSelectors: string[];\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Parse a template into render3 `Node`s and additional metadata, with no other dependencies.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "template",
              "description": "text of the template to parse",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "templateUrl",
              "description": "URL to use for source mapping of the parsed template",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "options to modify how the template is parsed",
              "type": "ParseTemplateOptions"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "ParseTemplateOptions",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/template.ts#L1935-L1998",
        "signature": "interface ParseTemplateOptions {\n  preserveWhitespaces?: boolean;\n  interpolationConfig?: InterpolationConfig;\n  range?: LexerRange;\n  escapedString?: boolean;\n  leadingTriviaChars?: string[];\n  enableI18nLegacyMessageIdFormat?: boolean;\n  i18nNormalizeLineEndingsInICUs?: boolean;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Options that can be used to modify how a template is parsed by `parseTemplate()`.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preserveWhitespaces",
              "description": "Include whitespace nodes in the parsed output.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "interpolationConfig",
              "description": "How to parse interpolation markers.",
              "type": "InterpolationConfig"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "range",
              "description": "The start and end point of the text to parse within the `source` string.\nThe entire `source` string is parsed if this is not provided.",
              "type": "LexerRange"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "escapedString",
              "description": "If this text is stored in a JavaScript string, then we have to deal with escape sequences.\n\n**Example 1:**\n\n```\n\"abc\\\"def\\nghi\"\n```\n\n- The `\\\"` must be converted to `\"`.\n- The `\\n` must be converted to a new line character in a token,\n  but it should not increment the current line for source mapping.\n\n**Example 2:**\n\n```\n\"abc\\\n def\"\n```\n\nThe line continuation (`\\` followed by a newline) should be removed from a token\nbut the new line should increment the current line for source mapping.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "leadingTriviaChars",
              "description": "An array of characters that should be considered as leading trivia.\nLeading trivia are characters that are not important to the developer, and so should not be\nincluded in source-map segments.  A common example is whitespace.",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "enableI18nLegacyMessageIdFormat",
              "description": "Render `$localize` message ids with additional legacy message ids.\n\nThis option defaults to `true` but in the future the defaul will be flipped.\n\nFor now set this option to false if you have migrated the translation files to use the new\n`$localize` message id format and you are not using compile time translation merging.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18nNormalizeLineEndingsInICUs",
              "description": "If this text is stored in an external template (e.g. via `templateUrl`) then we need to decide\nwhether or not to normalize the line-endings (from `\\r\\n` to `\\n`) when processing ICU\nexpressions.\n\nIf `true` then we will normalize ICU expression line endings.\nThe default is `false`, but this will be switched in a future major release.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3Reference",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/util.ts#L58-L61",
        "signature": "interface R3Reference {\n  value: o.Expression;\n  type: o.Expression;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "o.Expression"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "compileComponentFromMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/compiler.ts#L136-L265",
        "signature": "function compileComponentFromMetadata(\n  meta: R3ComponentMetadata,\n  constantPool: ConstantPool,\n  bindingParser: BindingParser\n): R3ComponentDef;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "meta",
              "description": "",
              "type": "R3ComponentMetadata"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "constantPool",
              "description": "",
              "type": "ConstantPool"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "bindingParser",
              "description": "",
              "type": "BindingParser"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "compileDirectiveFromMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/compiler.ts#L120-L131",
        "signature": "function compileDirectiveFromMetadata(\n  meta: R3DirectiveMetadata,\n  constantPool: ConstantPool,\n  bindingParser: BindingParser\n): R3DirectiveDef;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "meta",
              "description": "",
              "type": "R3DirectiveMetadata"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "constantPool",
              "description": "",
              "type": "ConstantPool"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "bindingParser",
              "description": "",
              "type": "BindingParser"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "parseHostBindings",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/compiler.ts#L821-L873",
        "signature": "function parseHostBindings(host: {\n  [key: string]: string | o.Expression;\n}): ParsedHostBindings;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "host",
              "description": "",
              "type": "{ [key: string]: string | o.Expression; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "ParsedHostBindings",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/compiler.ts#L814-L819",
        "signature": "interface ParsedHostBindings {\n  attributes: { [key: string]: o.Expression };\n  listeners: { [key: string]: string };\n  properties: { [key: string]: string };\n  specialAttributes: { styleAttr?: string; classAttr?: string };\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "attributes",
              "description": "",
              "type": "{ [key: string]: o.Expression; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "listeners",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "properties",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "specialAttributes",
              "description": "",
              "type": "{ styleAttr?: string; classAttr?: string; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "verifyHostBindings",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/compiler.ts#L883-L892",
        "signature": "function verifyHostBindings(\n  bindings: ParsedHostBindings,\n  sourceSpan: ParseSourceSpan\n): ParseError[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Verifies host bindings and returns the list of errors (if any). Empty array indicates that a\ngiven set of host bindings has no errors.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "bindings",
              "description": "set of host bindings to verify.",
              "type": "ParsedHostBindings"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sourceSpan",
              "description": "source span where host bindings were defined.",
              "type": "ParseSourceSpan"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "array of errors associated with a given set of host bindings.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "publishFacade",
    "overloads": [
      {
        "file": "packages/compiler/src/jit_compiler_facade.ts#L366-L369",
        "signature": "function publishFacade(global: any);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "global",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "VERSION",
    "overloads": [
      {
        "file": "packages/compiler/src/version.ts#L17-L17",
        "signature": "const VERSION: Version;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "templateVisitAll",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L378-L391",
        "signature": "function templateVisitAll(\n  visitor: TemplateAstVisitor,\n  asts: TemplateAst[],\n  context: any = null\n): any[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "visitor",
              "description": "",
              "type": "TemplateAstVisitor"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "asts",
              "description": "",
              "type": "TemplateAst[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "context",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "TemplateAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L21-L31",
        "signature": "interface TemplateAst {\n  sourceSpan: ParseSourceSpan;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An Abstract Syntax Tree node representing part of a parsed Angular template.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "sourceSpan",
              "description": "The source span from which this node was parsed.",
              "type": "ParseSourceSpan"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TextAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L36-L42",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A segment of text within the template.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L39-L41",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class TextAst implements TemplateAst {\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "BoundTextAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L47-L54",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A bound expression within the text of a template.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L51-L53",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class BoundTextAst implements TemplateAst {\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "AttrAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L59-L64",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A plain attribute on an element.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L61-L63",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class AttrAst implements TemplateAst {\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "PropertyBindingType",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L66-L77",
        "signature": "export const enum PropertyBindingType {\n  // A normal binding to a property (e.g. `[property]=\"expression\"`).\n  Property,\n  // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n  Attribute,\n  // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n  Class,\n  // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n  Style,\n  // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n  Animation,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "BoundElementPropertyAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L91-L110",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n`[@trigger]=\"stateExp\"`)\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isAnimation",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "fromBoundProperty",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L101-L105",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "prop",
                      "description": "",
                      "type": "BoundElementProperty"
                    }
                  ]
                ],
                "signature": "static fromBoundProperty(prop: BoundElementProperty);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L107-L109",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class BoundElementPropertyAst implements TemplateAst {\n  readonly isAnimation: boolean;\n\n  static fromBoundProperty(prop: BoundElementProperty);\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "BoundEventAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L116-L150",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n`(@trigger.phase)=\"callback($event)\"`).\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "fullName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isAnimation",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "calcFullName",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L128-L137",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "target",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "phase",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "static calcFullName(name: string, target: string|null, phase: string|null): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "fromParsedEvent",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L139-L145",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "event",
                      "description": "",
                      "type": "ParsedEvent"
                    }
                  ]
                ],
                "signature": "static fromParsedEvent(event: ParsedEvent);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L147-L149",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class BoundEventAst implements TemplateAst {\n  readonly fullName: string;\n  readonly isAnimation: boolean;\n\n  static calcFullName(\n    name: string,\n    target: string | null,\n    phase: string | null\n  ): string;\n  static fromParsedEvent(event: ParsedEvent);\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ReferenceAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L155-L162",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A reference declaration on an element (e.g. `let someName=\"expression\"`).\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L159-L161",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ReferenceAst implements TemplateAst {\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "VariableAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L167-L179",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "fromParsedVariable",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L172-L174",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "v",
                      "description": "",
                      "type": "ParsedVariable"
                    }
                  ]
                ],
                "signature": "static fromParsedVariable(v: ParsedVariable);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L176-L178",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class VariableAst implements TemplateAst {\n  static fromParsedVariable(v: ParsedVariable);\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ElementAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L184-L196",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An element declaration in a template.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L193-L195",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ElementAst implements TemplateAst {\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "EmbeddedTemplateAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L201-L212",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A `<ng-template>` element included in an Angular template.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L209-L211",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class EmbeddedTemplateAst implements TemplateAst {\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "BoundDirectivePropertyAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L217-L224",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A directive property with a bound value (e.g. `*ngIf=\"condition\").\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L221-L223",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class BoundDirectivePropertyAst implements TemplateAst {\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "DirectiveAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L229-L237",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A directive declared on an element.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L234-L236",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class DirectiveAst implements TemplateAst {\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ProviderAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L242-L253",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A provider declared on an element\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L249-L252",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ProviderAst implements TemplateAst {\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "ProviderAstType",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L255-L261",
        "signature": "export enum ProviderAstType {\n  PublicService,\n  PrivateService,\n  Component,\n  Directive,\n  Builtin,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "NgContentAst",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L266-L272",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Position where content is to be projected (instance of `<ng-content>` in a template).\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L269-L271",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "TemplateAstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: TemplateAstVisitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class NgContentAst implements TemplateAst {\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "QueryMatch",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L274-L277",
        "signature": "interface QueryMatch {\n  queryId: number;\n  value: CompileTokenMetadata;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "queryId",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "CompileTokenMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "TemplateAstVisitor",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L282-L300",
        "signature": "interface TemplateAstVisitor {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A visitor for {@link TemplateAst} trees that will process each node.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "NullTemplateVisitor",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L306-L319",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A visitor that accepts each node but doesn't do anything. It is intended to be used\nas the base class for a visitor that is only interested in a subset of the node types.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitNgContent",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L307-L307",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "NgContentAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitNgContent(ast: NgContentAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitEmbeddedTemplate",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L308-L308",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "EmbeddedTemplateAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitElement",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L309-L309",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "ElementAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitElement(ast: ElementAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitReference",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L310-L310",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "ReferenceAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitReference(ast: ReferenceAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitVariable",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L311-L311",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "VariableAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitVariable(ast: VariableAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitEvent",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L312-L312",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "BoundEventAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitEvent(ast: BoundEventAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitElementProperty",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L313-L313",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "BoundElementPropertyAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitElementProperty(ast: BoundElementPropertyAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitAttr",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L314-L314",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "AttrAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitAttr(ast: AttrAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitBoundText",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L315-L315",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "BoundTextAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitBoundText(ast: BoundTextAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitText",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L316-L316",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "TextAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitText(ast: TextAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitDirective",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L317-L317",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "DirectiveAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitDirective(ast: DirectiveAst, context: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitDirectiveProperty",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L318-L318",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "BoundDirectivePropertyAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): void;"
              }
            }
          ]
        ],
        "signature": "class NullTemplateVisitor implements TemplateAstVisitor {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "RecursiveTemplateAstVisitor",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L325-L373",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Base class that can be used to build a visitor that visits each node\nin an template ast recursively.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitEmbeddedTemplate",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L331-L340",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "EmbeddedTemplateAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitElement",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L342-L352",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "ElementAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitElement(ast: ElementAst, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitDirective",
              "info": {
                "file": "packages/compiler/src/template_parser/template_ast.ts#L354-L360",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "DirectiveAst"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitDirective(ast: DirectiveAst, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class RecursiveTemplateAstVisitor\n  extends NullTemplateVisitor\n  implements TemplateAstVisitor {\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;\n  visitElement(ast: ElementAst, context: any): any;\n  visitDirective(ast: DirectiveAst, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "compiler",
    "name": "TemplateAstPath",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_ast.ts#L393-L393",
        "signature": "export type TemplateAstPath = AstPath<TemplateAst>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "sanitizeIdentifier",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L21-L23",
        "signature": "function sanitizeIdentifier(name: string): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "identifierName",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L27-L48",
        "signature": "function identifierName(\n  compileIdentifier: CompileIdentifierMetadata | null | undefined\n): string | null;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "compileIdentifier",
              "description": "",
              "type": "CompileIdentifierMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "identifierModuleUrl",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L50-L57",
        "signature": "function identifierModuleUrl(\n  compileIdentifier: CompileIdentifierMetadata\n): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "compileIdentifier",
              "description": "",
              "type": "CompileIdentifierMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "viewClassName",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L59-L61",
        "signature": "function viewClassName(compType: any, embeddedTemplateIndex: number): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "compType",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "embeddedTemplateIndex",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "rendererTypeName",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L63-L65",
        "signature": "function rendererTypeName(compType: any): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "compType",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "hostViewClassName",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L67-L69",
        "signature": "function hostViewClassName(compType: any): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "compType",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "componentFactoryName",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L71-L73",
        "signature": "function componentFactoryName(compType: any): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "compType",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "tokenName",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L126-L128",
        "signature": "function tokenName(token: CompileTokenMetadata);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "CompileTokenMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "tokenReference",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L130-L136",
        "signature": "function tokenReference(token: CompileTokenMetadata);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "CompileTokenMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "flatten",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L750-L755",
        "signature": "function flatten<T>(list: Array<T | T[]>): T[];",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "list",
              "description": "",
              "type": "(T | T[])[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "templateSourceUrl",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L763-L779",
        "signature": "function templateSourceUrl(\n  ngModuleType: CompileIdentifierMetadata,\n  compMeta: { type: CompileIdentifierMetadata },\n  templateMeta: { isInline: boolean; templateUrl: string | null }\n);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "ngModuleType",
              "description": "",
              "type": "CompileIdentifierMetadata"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "compMeta",
              "description": "",
              "type": "{ type: CompileIdentifierMetadata; }"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "templateMeta",
              "description": "",
              "type": "{ isInline: boolean; templateUrl: string | null; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "sharedStylesheetJitUrl",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L781-L785",
        "signature": "function sharedStylesheetJitUrl(meta: CompileStylesheetMetadata, id: number);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "meta",
              "description": "",
              "type": "CompileStylesheetMetadata"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "id",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "ngModuleJitUrl",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L787-L789",
        "signature": "function ngModuleJitUrl(moduleMeta: CompileNgModuleMetadata): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "moduleMeta",
              "description": "",
              "type": "CompileNgModuleMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "templateJitUrl",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L791-L795",
        "signature": "function templateJitUrl(\n  ngModuleType: CompileIdentifierMetadata,\n  compMeta: CompileDirectiveMetadata\n): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "ngModuleType",
              "description": "",
              "type": "CompileIdentifierMetadata"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "compMeta",
              "description": "",
              "type": "CompileDirectiveMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "ProxyClass",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L75-L77",
        "signature": "interface ProxyClass {}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileIdentifierMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L79-L81",
        "signature": "interface CompileIdentifierMetadata {\n  reference: any;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "reference",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "CompileSummaryKind",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L83-L88",
        "signature": "export enum CompileSummaryKind {\n  Pipe,\n  Directive,\n  NgModule,\n  Injectable,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileTypeSummary",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L95-L98",
        "signature": "interface CompileTypeSummary {\n  summaryKind: CompileSummaryKind | null;\n  type: CompileTypeMetadata;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A CompileSummary is the data needed to use a directive / pipe / module\nin other modules / components. However, this data is not enough to compile\nthe directive / module itself.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "summaryKind",
              "description": "",
              "type": "CompileSummaryKind"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileTypeMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileDiDependencyMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L100-L109",
        "signature": "interface CompileDiDependencyMetadata {\n  isAttribute?: boolean;\n  isSelf?: boolean;\n  isHost?: boolean;\n  isSkipSelf?: boolean;\n  isOptional?: boolean;\n  isValue?: boolean;\n  token?: CompileTokenMetadata;\n  value?: any;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "isAttribute",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isSelf",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isHost",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isSkipSelf",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isOptional",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isValue",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "CompileTokenMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileProviderMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L111-L119",
        "signature": "interface CompileProviderMetadata {\n  token: CompileTokenMetadata;\n  useClass?: CompileTypeMetadata;\n  useValue?: any;\n  useExisting?: CompileTokenMetadata;\n  useFactory?: CompileFactoryMetadata;\n  deps?: CompileDiDependencyMetadata[];\n  multi?: boolean;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "CompileTokenMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useClass",
              "description": "",
              "type": "CompileTypeMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useValue",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useExisting",
              "description": "",
              "type": "CompileTokenMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useFactory",
              "description": "",
              "type": "CompileFactoryMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "deps",
              "description": "",
              "type": "CompileDiDependencyMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "multi",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileFactoryMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L121-L124",
        "signature": "interface CompileFactoryMetadata {\n  diDeps: CompileDiDependencyMetadata[];\n  reference: any;\n\n  // inherited from CompileIdentifierMetadata\n  reference: any;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "diDeps",
              "description": "",
              "type": "CompileDiDependencyMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "reference",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileTokenMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L138-L141",
        "signature": "interface CompileTokenMetadata {\n  value?: any;\n  identifier?: CompileIdentifierMetadata | CompileTypeMetadata;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "identifier",
              "description": "",
              "type": "CompileIdentifierMetadata | CompileTypeMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileInjectableMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L143-L154",
        "signature": "interface CompileInjectableMetadata {\n  symbol: StaticSymbol;\n  type: CompileTypeMetadata;\n  providedIn?: StaticSymbol;\n  useValue?: any;\n  useClass?: StaticSymbol;\n  useExisting?: StaticSymbol;\n  useFactory?: StaticSymbol;\n  deps?: any[];\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "symbol",
              "description": "",
              "type": "StaticSymbol"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileTypeMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providedIn",
              "description": "",
              "type": "StaticSymbol"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useValue",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useClass",
              "description": "",
              "type": "StaticSymbol"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useExisting",
              "description": "",
              "type": "StaticSymbol"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useFactory",
              "description": "",
              "type": "StaticSymbol"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "deps",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileTypeMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L159-L163",
        "signature": "interface CompileTypeMetadata {\n  diDeps: CompileDiDependencyMetadata[];\n  lifecycleHooks: LifecycleHooks[];\n  reference: any;\n\n  // inherited from CompileIdentifierMetadata\n  reference: any;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Metadata regarding compilation of a type.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "diDeps",
              "description": "",
              "type": "CompileDiDependencyMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "lifecycleHooks",
              "description": "",
              "type": "LifecycleHooks[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "reference",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileQueryMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L165-L172",
        "signature": "interface CompileQueryMetadata {\n  selectors: Array<CompileTokenMetadata>;\n  descendants: boolean;\n  first: boolean;\n  propertyName: string;\n  read: CompileTokenMetadata;\n  static?: boolean;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "",
              "type": "CompileTokenMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "descendants",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "first",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "read",
              "description": "",
              "type": "CompileTokenMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "static",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CompileStylesheetMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L177-L188",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Metadata about a stylesheet\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "moduleUrl",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styles",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleUrls",
              "description": "",
              "type": "string[]"
            }
          ]
        ],
        "signature": "class CompileStylesheetMetadata {\n  moduleUrl: string | null;\n  styles: string[];\n  styleUrls: string[];\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileTemplateSummary",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L193-L198",
        "signature": "interface CompileTemplateSummary {\n  ngContentSelectors: string[];\n  encapsulation: ViewEncapsulation | null;\n  styles: string[];\n  animations: any[] | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Summary Metadata regarding compilation of a template.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngContentSelectors",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "encapsulation",
              "description": "",
              "type": "ViewEncapsulation"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styles",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "animations",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CompileTemplateMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L203-L268",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Metadata regarding compilation of a template.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "encapsulation",
              "description": "",
              "type": "ViewEncapsulation"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "template",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "templateUrl",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "htmlAst",
              "description": "",
              "type": "HtmlParseTreeResult"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isInline",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styles",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleUrls",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "externalStylesheets",
              "description": "",
              "type": "CompileStylesheetMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "animations",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngContentSelectors",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "interpolation",
              "description": "",
              "type": "[string, string]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preserveWhitespaces",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toSummary",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L260-L267",
                "info": [],
                "signature": "toSummary(): CompileTemplateSummary;"
              }
            }
          ]
        ],
        "signature": "class CompileTemplateMetadata {\n  encapsulation: ViewEncapsulation | null;\n  template: string | null;\n  templateUrl: string | null;\n  htmlAst: HtmlParseTreeResult | null;\n  isInline: boolean;\n  styles: string[];\n  styleUrls: string[];\n  externalStylesheets: CompileStylesheetMetadata[];\n  animations: any[];\n  ngContentSelectors: string[];\n  interpolation: [string, string] | null;\n  preserveWhitespaces: boolean;\n\n  toSummary(): CompileTemplateSummary;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileEntryComponentMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L270-L273",
        "signature": "interface CompileEntryComponentMetadata {\n  componentType: any;\n  componentFactory: StaticSymbol | object;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "componentType",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentFactory",
              "description": "",
              "type": "object | StaticSymbol"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileDirectiveSummary",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L277-L298",
        "signature": "interface CompileDirectiveSummary {\n  type: CompileTypeMetadata;\n  isComponent: boolean;\n  selector: string | null;\n  exportAs: string | null;\n  inputs: { [key: string]: string };\n  outputs: { [key: string]: string };\n  hostListeners: { [key: string]: string };\n  hostProperties: { [key: string]: string };\n  hostAttributes: { [key: string]: string };\n  providers: CompileProviderMetadata[];\n  viewProviders: CompileProviderMetadata[];\n  queries: CompileQueryMetadata[];\n  guards: { [key: string]: any };\n  viewQueries: CompileQueryMetadata[];\n  entryComponents: CompileEntryComponentMetadata[];\n  changeDetection: ChangeDetectionStrategy | null;\n  template: CompileTemplateSummary | null;\n  componentViewType: StaticSymbol | ProxyClass | null;\n  rendererType: StaticSymbol | object | null;\n  componentFactory: StaticSymbol | object | null;\n\n  // inherited from CompileTypeSummary\n  summaryKind: CompileSummaryKind | null;\n  type: CompileTypeMetadata;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileTypeMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isComponent",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportAs",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "inputs",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "outputs",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostListeners",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostProperties",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostAttributes",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "CompileProviderMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewProviders",
              "description": "",
              "type": "CompileProviderMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queries",
              "description": "",
              "type": "CompileQueryMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "guards",
              "description": "",
              "type": "{ [key: string]: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewQueries",
              "description": "",
              "type": "CompileQueryMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entryComponents",
              "description": "",
              "type": "CompileEntryComponentMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "changeDetection",
              "description": "",
              "type": "ChangeDetectionStrategy"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "template",
              "description": "",
              "type": "CompileTemplateSummary"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentViewType",
              "description": "",
              "type": "StaticSymbol | ProxyClass"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "rendererType",
              "description": "",
              "type": "object | StaticSymbol"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentFactory",
              "description": "",
              "type": "object | StaticSymbol"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CompileDirectiveMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L303-L522",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Metadata regarding compilation of a directive.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isHost",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileTypeMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isComponent",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportAs",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "changeDetection",
              "description": "",
              "type": "ChangeDetectionStrategy"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "inputs",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "outputs",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostListeners",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostProperties",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostAttributes",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "CompileProviderMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewProviders",
              "description": "",
              "type": "CompileProviderMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queries",
              "description": "",
              "type": "CompileQueryMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "guards",
              "description": "",
              "type": "{ [key: string]: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewQueries",
              "description": "",
              "type": "CompileQueryMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entryComponents",
              "description": "",
              "type": "CompileEntryComponentMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "template",
              "description": "",
              "type": "CompileTemplateMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentViewType",
              "description": "",
              "type": "StaticSymbol | ProxyClass"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "rendererType",
              "description": "",
              "type": "object | StaticSymbol"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentFactory",
              "description": "",
              "type": "object | StaticSymbol"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L304-L403",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{\n    isHost,\n    type,\n    isComponent,\n    selector,\n    exportAs,\n    changeDetection,\n    inputs,\n    outputs,\n    host,\n    providers,\n    viewProviders,\n    queries,\n    guards,\n    viewQueries,\n    entryComponents,\n    template,\n    componentViewType,\n    rendererType,\n    componentFactory\n  }",
                      "description": "",
                      "type": "{ isHost: boolean; type: CompileTypeMetadata; isComponent: boolean; selector: string | null; exportAs: string | null; changeDetection: ChangeDetectionStrategy | null; inputs: string[]; outputs: string[]; host: { [key: string]: string; }; providers: CompileProviderMetadata[]; viewProviders: CompileProviderMetadata[]; queries: CompileQueryMetadata[]; guards: { [key: string]: any; }; viewQueries: CompileQueryMetadata[]; entryComponents: CompileEntryComponentMetadata[]; template: CompileTemplateMetadata; componentViewType: StaticSymbol | ProxyClass | null; rendererType: StaticSymbol | object | null; componentFactory: StaticSymbol | object | null; }"
                    }
                  ]
                ],
                "signature": "static create({  isHost,  type,  isComponent,  selector,  exportAs,  changeDetection,  inputs,  outputs,  host,  providers,  viewProviders,  queries,  guards,  viewQueries,  entryComponents,  template,  componentViewType,  rendererType,  componentFactory }: {  isHost: boolean,  type: CompileTypeMetadata,  isComponent: boolean,  selector: string|null,  exportAs: string|null,  changeDetection: ChangeDetectionStrategy|null,  inputs: string[],  outputs: string[],  host: {[key: string]: string},  providers: CompileProviderMetadata[],  viewProviders: CompileProviderMetadata[],  queries: CompileQueryMetadata[],  guards: {[key: string]: any};  viewQueries: CompileQueryMetadata[],  entryComponents: CompileEntryComponentMetadata[],  template: CompileTemplateMetadata,  componentViewType: StaticSymbol|ProxyClass|null,  rendererType: StaticSymbol|object|null,  componentFactory: StaticSymbol|object|null, }): CompileDirectiveMetadata;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toSummary",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L497-L521",
                "info": [],
                "signature": "toSummary(): CompileDirectiveSummary;"
              }
            }
          ]
        ],
        "signature": "class CompileDirectiveMetadata {\n  isHost: boolean;\n  type: CompileTypeMetadata;\n  isComponent: boolean;\n  selector: string | null;\n  exportAs: string | null;\n  changeDetection: ChangeDetectionStrategy | null;\n  inputs: { [key: string]: string };\n  outputs: { [key: string]: string };\n  hostListeners: { [key: string]: string };\n  hostProperties: { [key: string]: string };\n  hostAttributes: { [key: string]: string };\n  providers: CompileProviderMetadata[];\n  viewProviders: CompileProviderMetadata[];\n  queries: CompileQueryMetadata[];\n  guards: { [key: string]: any };\n  viewQueries: CompileQueryMetadata[];\n  entryComponents: CompileEntryComponentMetadata[];\n  template: CompileTemplateMetadata | null;\n  componentViewType: StaticSymbol | ProxyClass | null;\n  rendererType: StaticSymbol | object | null;\n  componentFactory: StaticSymbol | object | null;\n\n  static create({\n    isHost,\n    type,\n    isComponent,\n    selector,\n    exportAs,\n    changeDetection,\n    inputs,\n    outputs,\n    host,\n    providers,\n    viewProviders,\n    queries,\n    guards,\n    viewQueries,\n    entryComponents,\n    template,\n    componentViewType,\n    rendererType,\n    componentFactory,\n  }: {\n    isHost: boolean;\n    type: CompileTypeMetadata;\n    isComponent: boolean;\n    selector: string | null;\n    exportAs: string | null;\n    changeDetection: ChangeDetectionStrategy | null;\n    inputs: string[];\n    outputs: string[];\n    host: { [key: string]: string };\n    providers: CompileProviderMetadata[];\n    viewProviders: CompileProviderMetadata[];\n    queries: CompileQueryMetadata[];\n    guards: { [key: string]: any };\n    viewQueries: CompileQueryMetadata[];\n    entryComponents: CompileEntryComponentMetadata[];\n    template: CompileTemplateMetadata;\n    componentViewType: StaticSymbol | ProxyClass | null;\n    rendererType: StaticSymbol | object | null;\n    componentFactory: StaticSymbol | object | null;\n  }): CompileDirectiveMetadata;\n  toSummary(): CompileDirectiveSummary;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompilePipeSummary",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L524-L528",
        "signature": "interface CompilePipeSummary {\n  type: CompileTypeMetadata;\n  name: string;\n  pure: boolean;\n\n  // inherited from CompileTypeSummary\n  summaryKind: CompileSummaryKind | null;\n  type: CompileTypeMetadata;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileTypeMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pure",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CompilePipeMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L530-L553",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileTypeMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pure",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toSummary",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L545-L552",
                "info": [],
                "signature": "toSummary(): CompilePipeSummary;"
              }
            }
          ]
        ],
        "signature": "class CompilePipeMetadata {\n  type: CompileTypeMetadata;\n  name: string;\n  pure: boolean;\n\n  toSummary(): CompilePipeSummary;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "CompileNgModuleSummary",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L557-L571",
        "signature": "interface CompileNgModuleSummary {\n  type: CompileTypeMetadata;\n  exportedDirectives: CompileIdentifierMetadata[];\n  exportedPipes: CompileIdentifierMetadata[];\n  entryComponents: CompileEntryComponentMetadata[];\n  providers: {\n    provider: CompileProviderMetadata;\n    module: CompileIdentifierMetadata;\n  }[];\n  modules: CompileTypeMetadata[];\n\n  // inherited from CompileTypeSummary\n  summaryKind: CompileSummaryKind | null;\n  type: CompileTypeMetadata;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileTypeMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportedDirectives",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportedPipes",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entryComponents",
              "description": "",
              "type": "CompileEntryComponentMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "{ provider: CompileProviderMetadata; module: CompileIdentifierMetadata; }[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "modules",
              "description": "",
              "type": "CompileTypeMetadata[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CompileShallowModuleMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L573-L580",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileTypeMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "rawExports",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "rawImports",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "rawProviders",
              "description": "",
              "type": "any"
            }
          ]
        ],
        "signature": "class CompileShallowModuleMetadata {\n  type!: CompileTypeMetadata;\n  rawExports: any;\n  rawImports: any;\n  rawProviders: any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CompileNgModuleMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L585-L659",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Metadata regarding compilation of a module.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileTypeMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "declaredDirectives",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportedDirectives",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "declaredPipes",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportedPipes",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entryComponents",
              "description": "",
              "type": "CompileEntryComponentMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "bootstrapComponents",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "CompileProviderMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "importedModules",
              "description": "",
              "type": "CompileNgModuleSummary[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportedModules",
              "description": "",
              "type": "CompileNgModuleSummary[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "schemas",
              "description": "",
              "type": "SchemaMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "id",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "transitiveModule",
              "description": "",
              "type": "TransitiveCompileNgModuleMetadata"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toSummary",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L647-L658",
                "info": [],
                "signature": "toSummary(): CompileNgModuleSummary;"
              }
            }
          ]
        ],
        "signature": "class CompileNgModuleMetadata {\n  type: CompileTypeMetadata;\n  declaredDirectives: CompileIdentifierMetadata[];\n  exportedDirectives: CompileIdentifierMetadata[];\n  declaredPipes: CompileIdentifierMetadata[];\n  exportedPipes: CompileIdentifierMetadata[];\n  entryComponents: CompileEntryComponentMetadata[];\n  bootstrapComponents: CompileIdentifierMetadata[];\n  providers: CompileProviderMetadata[];\n  importedModules: CompileNgModuleSummary[];\n  exportedModules: CompileNgModuleSummary[];\n  schemas: SchemaMetadata[];\n  id: string | null;\n  transitiveModule: TransitiveCompileNgModuleMetadata;\n\n  toSummary(): CompileNgModuleSummary;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TransitiveCompileNgModuleMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L661-L717",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "directivesSet",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "directives",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportedDirectivesSet",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportedDirectives",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipesSet",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipes",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportedPipesSet",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportedPipes",
              "description": "",
              "type": "CompileIdentifierMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "modulesSet",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "modules",
              "description": "",
              "type": "CompileTypeMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entryComponentsSet",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entryComponents",
              "description": "",
              "type": "CompileEntryComponentMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "{ provider: CompileProviderMetadata; module: CompileIdentifierMetadata; }[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addProvider",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L677-L679",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "provider",
                      "description": "",
                      "type": "CompileProviderMetadata"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "module",
                      "description": "",
                      "type": "CompileIdentifierMetadata"
                    }
                  ]
                ],
                "signature": "addProvider(provider: CompileProviderMetadata, module: CompileIdentifierMetadata);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addDirective",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L681-L686",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "id",
                      "description": "",
                      "type": "CompileIdentifierMetadata"
                    }
                  ]
                ],
                "signature": "addDirective(id: CompileIdentifierMetadata);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addExportedDirective",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L687-L692",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "id",
                      "description": "",
                      "type": "CompileIdentifierMetadata"
                    }
                  ]
                ],
                "signature": "addExportedDirective(id: CompileIdentifierMetadata);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addPipe",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L693-L698",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "id",
                      "description": "",
                      "type": "CompileIdentifierMetadata"
                    }
                  ]
                ],
                "signature": "addPipe(id: CompileIdentifierMetadata);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addExportedPipe",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L699-L704",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "id",
                      "description": "",
                      "type": "CompileIdentifierMetadata"
                    }
                  ]
                ],
                "signature": "addExportedPipe(id: CompileIdentifierMetadata);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addModule",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L705-L710",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "id",
                      "description": "",
                      "type": "CompileTypeMetadata"
                    }
                  ]
                ],
                "signature": "addModule(id: CompileTypeMetadata);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addEntryComponent",
              "info": {
                "file": "packages/compiler/src/compile_metadata.ts#L711-L716",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ec",
                      "description": "",
                      "type": "CompileEntryComponentMetadata"
                    }
                  ]
                ],
                "signature": "addEntryComponent(ec: CompileEntryComponentMetadata);"
              }
            }
          ]
        ],
        "signature": "class TransitiveCompileNgModuleMetadata {\n  directivesSet = new Set<any>();\n  directives: CompileIdentifierMetadata[] = [];\n  exportedDirectivesSet = new Set<any>();\n  exportedDirectives: CompileIdentifierMetadata[] = [];\n  pipesSet = new Set<any>();\n  pipes: CompileIdentifierMetadata[] = [];\n  exportedPipesSet = new Set<any>();\n  exportedPipes: CompileIdentifierMetadata[] = [];\n  modulesSet = new Set<any>();\n  modules: CompileTypeMetadata[] = [];\n  entryComponentsSet = new Set<any>();\n  entryComponents: CompileEntryComponentMetadata[] = [];\n  providers: {\n    provider: CompileProviderMetadata;\n    module: CompileIdentifierMetadata;\n  }[] = [];\n\n  addProvider(\n    provider: CompileProviderMetadata,\n    module: CompileIdentifierMetadata\n  );\n  addDirective(id: CompileIdentifierMetadata);\n  addExportedDirective(id: CompileIdentifierMetadata);\n  addPipe(id: CompileIdentifierMetadata);\n  addExportedPipe(id: CompileIdentifierMetadata);\n  addModule(id: CompileTypeMetadata);\n  addEntryComponent(ec: CompileEntryComponentMetadata);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ProviderMeta",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_metadata.ts#L723-L748",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useClass",
              "description": "",
              "type": "Type"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useValue",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useExisting",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useFactory",
              "description": "",
              "type": "Function"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "dependencies",
              "description": "",
              "type": "Object[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "multi",
              "description": "",
              "type": "boolean"
            }
          ]
        ],
        "signature": "class ProviderMeta {\n  token: any;\n  useClass: Type | null;\n  useValue: any;\n  useExisting: any;\n  useFactory: Function | null;\n  dependencies: Object[] | null;\n  multi: boolean;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "createAotUrlResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler_factory.ts#L39-L51",
        "signature": "function createAotUrlResolver(host: {\n  resourceNameToFileName(\n    resourceName: string,\n    containingFileName: string\n  ): string | null;\n}): UrlResolver;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "host",
              "description": "",
              "type": "{ resourceNameToFileName(resourceName: string, containingFileName: string): string | null; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "createAotCompiler",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler_factory.ts#L56-L103",
        "signature": "function createAotCompiler(\n  compilerHost: AotCompilerHost,\n  options: AotCompilerOptions,\n  errorCollector?: (error: any, type?: any) => void\n): { compiler: AotCompiler; reflector: StaticReflector };",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates a new AotCompiler based on options and a host.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "compilerHost",
              "description": "",
              "type": "AotCompilerHost"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "AotCompilerOptions"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "errorCollector",
              "description": "",
              "type": "(error: any, type?: any) => void"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "analyzeNgModules",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler.ts#L819-L825",
        "signature": "function analyzeNgModules(\n  fileNames: string[],\n  host: NgAnalyzeModulesHost,\n  staticSymbolResolver: StaticSymbolResolver,\n  metadataResolver: CompileMetadataResolver\n): NgAnalyzedModules;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fileNames",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "host",
              "description": "",
              "type": "NgAnalyzeModulesHost"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "staticSymbolResolver",
              "description": "",
              "type": "StaticSymbolResolver"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "metadataResolver",
              "description": "",
              "type": "CompileMetadataResolver"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "analyzeAndValidateNgModules",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler.ts#L827-L832",
        "signature": "function analyzeAndValidateNgModules(\n  fileNames: string[],\n  host: NgAnalyzeModulesHost,\n  staticSymbolResolver: StaticSymbolResolver,\n  metadataResolver: CompileMetadataResolver\n): NgAnalyzedModules;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fileNames",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "host",
              "description": "",
              "type": "NgAnalyzeModulesHost"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "staticSymbolResolver",
              "description": "",
              "type": "StaticSymbolResolver"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "metadataResolver",
              "description": "",
              "type": "CompileMetadataResolver"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "analyzeFile",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler.ts#L868-L940",
        "signature": "function analyzeFile(\n  host: NgAnalyzeModulesHost,\n  staticSymbolResolver: StaticSymbolResolver,\n  metadataResolver: CompileMetadataResolver,\n  fileName: string\n): NgAnalyzedFile;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "host",
              "description": "",
              "type": "NgAnalyzeModulesHost"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "staticSymbolResolver",
              "description": "",
              "type": "StaticSymbolResolver"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "metadataResolver",
              "description": "",
              "type": "CompileMetadataResolver"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fileName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "analyzeFileForInjectables",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler.ts#L942-L970",
        "signature": "function analyzeFileForInjectables(\n  host: NgAnalyzeModulesHost,\n  staticSymbolResolver: StaticSymbolResolver,\n  metadataResolver: CompileMetadataResolver,\n  fileName: string\n): NgAnalyzedFileWithInjectables;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "host",
              "description": "",
              "type": "NgAnalyzeModulesHost"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "staticSymbolResolver",
              "description": "",
              "type": "StaticSymbolResolver"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "metadataResolver",
              "description": "",
              "type": "CompileMetadataResolver"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fileName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "mergeAnalyzedFiles",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler.ts#L994-L1022",
        "signature": "function mergeAnalyzedFiles(analyzedFiles: NgAnalyzedFile[]): NgAnalyzedModules;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "analyzedFiles",
              "description": "",
              "type": "NgAnalyzedFile[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "AotCompiler",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler.ts#L55-L769",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCache",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L71-L73",
                "info": [],
                "signature": "clearCache();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "analyzeModulesSync",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L75-L82",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rootFiles",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "analyzeModulesSync(rootFiles: string[]): NgAnalyzedModules;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "analyzeModulesAsync",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L84-L92",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rootFiles",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "analyzeModulesAsync(rootFiles: string[]): Promise<NgAnalyzedModules>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "findGeneratedFileNames",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L114-L151",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "findGeneratedFileNames(fileName: string): string[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "emitBasicStub",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L153-L186",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "genFileName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "originalFileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "emitBasicStub(genFileName: string, originalFileName?: string): GeneratedFile;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "emitTypeCheckStub",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L188-L197",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "genFileName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "originalFileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "emitTypeCheckStub(genFileName: string, originalFileName: string): GeneratedFile|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "loadFilesAsync",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L199-L213",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileNames",
                      "description": "",
                      "type": "string[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tsFiles",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "loadFilesAsync(fileNames: string[], tsFiles: string[]): Promise<   {analyzedModules: NgAnalyzedModules, analyzedInjectables: NgAnalyzedFileWithInjectables[]}>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "loadFilesSync",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L215-L227",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileNames",
                      "description": "",
                      "type": "string[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tsFiles",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "loadFilesSync(fileNames: string[], tsFiles: string[]):   {analyzedModules: NgAnalyzedModules, analyzedInjectables: NgAnalyzedFileWithInjectables[]};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "emitMessageBundle",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L311-L342",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "analyzeResult",
                      "description": "",
                      "type": "NgAnalyzedModules"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "emitMessageBundle(analyzeResult: NgAnalyzedModules, locale: string|null): MessageBundle;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "emitAllPartialModules",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L344-L369",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "{ngModuleByPipeOrDirective, files}",
                      "description": "",
                      "type": "NgAnalyzedModules"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "r3Files",
                      "description": "",
                      "type": "NgAnalyzedFileWithInjectables[]"
                    }
                  ]
                ],
                "signature": "emitAllPartialModules(   {ngModuleByPipeOrDirective, files}: NgAnalyzedModules,   r3Files: NgAnalyzedFileWithInjectables[]): PartialModule[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "emitAllPartialModules2",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L445-L451",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "files",
                      "description": "",
                      "type": "NgAnalyzedFileWithInjectables[]"
                    }
                  ]
                ],
                "signature": "emitAllPartialModules2(files: NgAnalyzedFileWithInjectables[]): PartialModule[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "emitAllImpls",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L465-L472",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "analyzeResult",
                      "description": "",
                      "type": "NgAnalyzedModules"
                    }
                  ]
                ],
                "signature": "emitAllImpls(analyzeResult: NgAnalyzedModules): GeneratedFile[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "listLazyRoutes",
              "info": {
                "file": "packages/compiler/src/aot/compiler.ts#L733-L768",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "entryRoute",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "analyzedModules",
                      "description": "",
                      "type": "NgAnalyzedModules"
                    }
                  ]
                ],
                "signature": "listLazyRoutes(entryRoute?: string, analyzedModules?: NgAnalyzedModules): LazyRoute[];"
              }
            }
          ]
        ],
        "signature": "class AotCompiler {\n  clearCache();\n  analyzeModulesSync(rootFiles: string[]): NgAnalyzedModules;\n  analyzeModulesAsync(rootFiles: string[]): Promise<NgAnalyzedModules>;\n  findGeneratedFileNames(fileName: string): string[];\n  emitBasicStub(genFileName: string, originalFileName?: string): GeneratedFile;\n  emitTypeCheckStub(\n    genFileName: string,\n    originalFileName: string\n  ): GeneratedFile | null;\n  loadFilesAsync(\n    fileNames: string[],\n    tsFiles: string[]\n  ): Promise<{\n    analyzedModules: NgAnalyzedModules;\n    analyzedInjectables: NgAnalyzedFileWithInjectables[];\n  }>;\n  loadFilesSync(\n    fileNames: string[],\n    tsFiles: string[]\n  ): {\n    analyzedModules: NgAnalyzedModules;\n    analyzedInjectables: NgAnalyzedFileWithInjectables[];\n  };\n  emitMessageBundle(\n    analyzeResult: NgAnalyzedModules,\n    locale: string | null\n  ): MessageBundle;\n  emitAllPartialModules(\n    { ngModuleByPipeOrDirective, files }: NgAnalyzedModules,\n    r3Files: NgAnalyzedFileWithInjectables[]\n  ): PartialModule[];\n  emitAllPartialModules2(\n    files: NgAnalyzedFileWithInjectables[]\n  ): PartialModule[];\n  emitAllImpls(analyzeResult: NgAnalyzedModules): GeneratedFile[];\n  listLazyRoutes(\n    entryRoute?: string,\n    analyzedModules?: NgAnalyzedModules\n  ): LazyRoute[];\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "NgAnalyzedModules",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler.ts#L792-L797",
        "signature": "interface NgAnalyzedModules {\n  ngModules: CompileNgModuleMetadata[];\n  ngModuleByPipeOrDirective: Map<StaticSymbol, CompileNgModuleMetadata>;\n  files: NgAnalyzedFile[];\n  symbolsMissingModule?: StaticSymbol[];\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "ngModules",
              "description": "",
              "type": "CompileNgModuleMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngModuleByPipeOrDirective",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "files",
              "description": "",
              "type": "NgAnalyzedFile[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "symbolsMissingModule",
              "description": "",
              "type": "StaticSymbol[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "NgAnalyzedFileWithInjectables",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler.ts#L799-L803",
        "signature": "interface NgAnalyzedFileWithInjectables {\n  fileName: string;\n  injectables: CompileInjectableMetadata[];\n  shallowModules: CompileShallowModuleMetadata[];\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "fileName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "injectables",
              "description": "",
              "type": "CompileInjectableMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "shallowModules",
              "description": "",
              "type": "CompileShallowModuleMetadata[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "NgAnalyzedFile",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler.ts#L805-L813",
        "signature": "interface NgAnalyzedFile {\n  fileName: string;\n  directives: StaticSymbol[];\n  abstractDirectives: StaticSymbol[];\n  pipes: StaticSymbol[];\n  ngModules: CompileNgModuleMetadata[];\n  injectables: CompileInjectableMetadata[];\n  exportsNonSourceFiles: boolean;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "fileName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "directives",
              "description": "",
              "type": "StaticSymbol[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "abstractDirectives",
              "description": "",
              "type": "StaticSymbol[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipes",
              "description": "",
              "type": "StaticSymbol[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngModules",
              "description": "",
              "type": "CompileNgModuleMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "injectables",
              "description": "",
              "type": "CompileInjectableMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportsNonSourceFiles",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "NgAnalyzeModulesHost",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler.ts#L815-L817",
        "signature": "interface NgAnalyzeModulesHost {}",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "toTypeScript",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/generated_file.ts#L43-L48",
        "signature": "function toTypeScript(file: GeneratedFile, preamble: string = \"\"): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "file",
              "description": "",
              "type": "GeneratedFile"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "preamble",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "GeneratedFile",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/generated_file.ts#L12-L41",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "source",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "stmts",
              "description": "",
              "type": "Statement[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isEquivalent",
              "info": {
                "file": "packages/compiler/src/aot/generated_file.ts#L27-L40",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "other",
                      "description": "",
                      "type": "GeneratedFile"
                    }
                  ]
                ],
                "signature": "isEquivalent(other: GeneratedFile): boolean;"
              }
            }
          ]
        ],
        "signature": "class GeneratedFile {\n  public source: string | null;\n  public stmts: Statement[] | null;\n\n  isEquivalent(other: GeneratedFile): boolean;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "AotCompilerOptions",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler_options.ts#L11-L24",
        "signature": "interface AotCompilerOptions {\n  locale?: string;\n  i18nFormat?: string;\n  i18nUseExternalIds?: boolean;\n  translations?: string;\n  missingTranslation?: MissingTranslationStrategy;\n  enableSummariesForJit?: boolean;\n  preserveWhitespaces?: boolean;\n  fullTemplateTypeCheck?: boolean;\n  allowEmptyCodegenFiles?: boolean;\n  strictInjectionParameters?: boolean;\n  enableIvy?: boolean | \"ngtsc\";\n  createExternalSymbolFactoryReexports?: boolean;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "locale",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18nFormat",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18nUseExternalIds",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "translations",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "missingTranslation",
              "description": "",
              "type": "MissingTranslationStrategy"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "enableSummariesForJit",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preserveWhitespaces",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "fullTemplateTypeCheck",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "allowEmptyCodegenFiles",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "strictInjectionParameters",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "enableIvy",
              "description": "",
              "type": "boolean | \"ngtsc\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "createExternalSymbolFactoryReexports",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "AotCompilerHost",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/compiler_host.ts#L16-L33",
        "signature": "interface AotCompilerHost {\n  // inherited from StaticSymbolResolverHost\n  // inherited from AotSummaryResolverHost\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The host of the AotCompiler disconnects the implementation from TypeScript / other language\nservices and from underlying file systems.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "formattedError",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/formatted_error.ts#L55-L62",
        "signature": "function formattedError(chain: FormattedMessageChain): FormattedError;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "chain",
              "description": "",
              "type": "FormattedMessageChain"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "isFormattedError",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/formatted_error.ts#L64-L66",
        "signature": "function isFormattedError(error: Error): error is FormattedError;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "error",
              "description": "",
              "type": "Error"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "Position",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/formatted_error.ts#L11-L15",
        "signature": "interface Position {\n  fileName: string;\n  line: number;\n  column: number;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "fileName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "line",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "column",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "FormattedMessageChain",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/formatted_error.ts#L17-L21",
        "signature": "interface FormattedMessageChain {\n  message: string;\n  position?: Position;\n  next?: FormattedMessageChain[];\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "message",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "position",
              "description": "",
              "type": "Position"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "next",
              "description": "",
              "type": "FormattedMessageChain[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "compiler",
    "name": "FormattedError",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/formatted_error.ts#L23-L26",
        "signature": "export type FormattedError = Error & {\n  chain: FormattedMessageChain;\n  position?: Position;\n};",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "PartialModule",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/partial_module.ts#L11-L14",
        "signature": "interface PartialModule {\n  fileName: string;\n  statements: o.Statement[];\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "fileName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "statements",
              "description": "",
              "type": "o.Statement[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "StaticReflector",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/static_reflector.ts#L43-L867",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A static reflector implements enough of the Reflector API that is necessary to compile\ntemplates statically.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ROUTES",
              "description": "",
              "type": "StaticSymbol"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "componentModuleUrl",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L84-L87",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "typeOrFunc",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "componentModuleUrl(typeOrFunc: StaticSymbol): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "invalidateSymbols",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L93-L103",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Invalidate the specified `symbols` on program change."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "symbols",
                      "description": "",
                      "type": "StaticSymbol[]"
                    }
                  ]
                ],
                "signature": "invalidateSymbols(symbols: StaticSymbol[]);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveExternalReference",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L105-L123",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ref",
                      "description": "",
                      "type": "o.ExternalReference"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "containingFile",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "resolveExternalReference(ref: o.ExternalReference, containingFile?: string): StaticSymbol;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "findDeclaration",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L125-L128",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleUrl",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "containingFile",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "findDeclaration(moduleUrl: string, name: string, containingFile?: string): StaticSymbol;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "tryFindDeclaration",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L130-L133",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleUrl",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "containingFile",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "tryFindDeclaration(moduleUrl: string, name: string, containingFile?: string): StaticSymbol;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "findSymbolDeclaration",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L135-L147",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "symbol",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "findSymbolDeclaration(symbol: StaticSymbol): StaticSymbol;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "tryAnnotations",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L149-L157",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "public tryAnnotations(type: StaticSymbol): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "annotations",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L159-L163",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "public annotations(type: StaticSymbol): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "shallowAnnotations",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L165-L169",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "public shallowAnnotations(type: StaticSymbol): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "propMetadata",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L219-L249",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "public propMetadata(type: StaticSymbol): {[key: string]: any[]};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parameters",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L251-L293",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "public parameters(type: StaticSymbol): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasLifecycleHook",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L338-L351",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "lcProperty",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "hasLifecycleHook(type: any, lcProperty: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "guards",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L353-L375",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "guards(type: any): {[key: string]: StaticSymbol};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getStaticSymbol",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L443-L445",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\nAll types passed to the StaticResolver should be pseudo-types returned by this method.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "declarationFile",
                      "description": "the absolute path of the file where the symbol is declared",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "the name of the type.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "members",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "getStaticSymbol(declarationFile: string, name: string, members?: string[]): StaticSymbol;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "simplify",
              "info": {
                "file": "packages/compiler/src/aot/static_reflector.ts#L459-L834",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "lazy",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "public simplify(context: StaticSymbol, value: any, lazy: boolean = false): any;"
              }
            }
          ]
        ],
        "signature": "class StaticReflector implements CompileReflector {\n  ROUTES!: StaticSymbol;\n\n  componentModuleUrl(typeOrFunc: StaticSymbol): string;\n  invalidateSymbols(symbols: StaticSymbol[]);\n  resolveExternalReference(\n    ref: o.ExternalReference,\n    containingFile?: string\n  ): StaticSymbol;\n  findDeclaration(\n    moduleUrl: string,\n    name: string,\n    containingFile?: string\n  ): StaticSymbol;\n  tryFindDeclaration(\n    moduleUrl: string,\n    name: string,\n    containingFile?: string\n  ): StaticSymbol;\n  findSymbolDeclaration(symbol: StaticSymbol): StaticSymbol;\n  public tryAnnotations(type: StaticSymbol): any[];\n  public annotations(type: StaticSymbol): any[];\n  public shallowAnnotations(type: StaticSymbol): any[];\n  public propMetadata(type: StaticSymbol): { [key: string]: any[] };\n  public parameters(type: StaticSymbol): any[];\n  hasLifecycleHook(type: any, lcProperty: string): boolean;\n  guards(type: any): { [key: string]: StaticSymbol };\n  getStaticSymbol(\n    declarationFile: string,\n    name: string,\n    members?: string[]\n  ): StaticSymbol;\n  public simplify(\n    context: StaticSymbol,\n    value: any,\n    lazy: boolean = false\n  ): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "StaticSymbol",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/static_symbol.ts#L14-L23",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "A token representing the a reference to a static type.\n\nThis token is unique for a filePath and name and can be used as a hash table key.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "assertNoMembers",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol.ts#L17-L22",
                "info": [],
                "signature": "assertNoMembers();"
              }
            }
          ]
        ],
        "signature": "class StaticSymbol {\n  assertNoMembers();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "StaticSymbolCache",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/static_symbol.ts#L29-L43",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A cache of static symbol used by the StaticReflector to return the same symbol for the\nsame symbol values.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol.ts#L32-L42",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "declarationFile",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "members",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "get(declarationFile: string, name: string, members?: string[]): StaticSymbol;"
              }
            }
          ]
        ],
        "signature": "class StaticSymbolCache {\n  get(declarationFile: string, name: string, members?: string[]): StaticSymbol;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "unescapeIdentifier",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L539-L541",
        "signature": "function unescapeIdentifier(identifier: string): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "identifier",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "unwrapResolvedMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L543-L548",
        "signature": "function unwrapResolvedMetadata(metadata: any): any;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "metadata",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ResolvedStaticSymbol",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L17-L19",
        "info": [],
        "signature": "class ResolvedStaticSymbol {}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "StaticSymbolResolverHost",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L26-L50",
        "signature": "interface StaticSymbolResolverHost {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The host of the SymbolResolverHost disconnects the implementation from TypeScript / other\nlanguage\nservices and from underlying file systems.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "StaticSymbolResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L62-L535",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "This class is responsible for loading metadata per symbol,\nand normalizing references between symbols.\n\nInternally, it only uses symbols without members,\nand deduces the values for symbols with members based\non these symbols.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveSymbol",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L77-L97",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "staticSymbol",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "resolveSymbol(staticSymbol: StaticSymbol): ResolvedStaticSymbol;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getImportAs",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L108-L132",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "getImportAs produces a symbol that can be used to import the given symbol.\nThe import might be different than the symbol if the symbol is exported from\na library with a summary; in which case we want to import the symbol from the\nngfactory re-export instead of directly to avoid introducing a direct dependency\non an otherwise indirect dependency.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "staticSymbol",
                      "description": "the symbol for which to generate a import symbol",
                      "type": "StaticSymbol"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "useSummaries",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "getImportAs(staticSymbol: StaticSymbol, useSummaries: boolean = true): StaticSymbol|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getResourcePath",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L139-L141",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "getResourcePath produces the path to the original location of the symbol and should\nbe used to determine the relative location of resource references recorded in\nsymbol metadata.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "staticSymbol",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "getResourcePath(staticSymbol: StaticSymbol): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getTypeArity",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L147-L160",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "getTypeArity returns the number of generic type parameters the given symbol\nhas. If the symbol is not a type the result is null.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "staticSymbol",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "getTypeArity(staticSymbol: StaticSymbol): number|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getKnownModuleName",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L162-L164",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "filePath",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getKnownModuleName(filePath: string): string|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "recordImportAs",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L166-L170",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "sourceSymbol",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "targetSymbol",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "recordImportAs(sourceSymbol: StaticSymbol, targetSymbol: StaticSymbol);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "recordModuleNameForFileName",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L172-L174",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "recordModuleNameForFileName(fileName: string, moduleName: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "invalidateFile",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L182-L195",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Invalidate all information derived from the given file and return the\nstatic symbols contained in the file.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "the file to invalidate",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "invalidateFile(fileName: string): StaticSymbol[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ignoreErrorsFor",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L198-L206",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cb",
                      "description": "",
                      "type": "() => T"
                    }
                  ]
                ],
                "signature": "ignoreErrorsFor<T>(cb: () => T);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getStaticSymbol",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L246-L248",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\nAll types passed to the StaticResolver should be pseudo-types returned by this method.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "declarationFile",
                      "description": "the absolute path of the file where the symbol is declared",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "the name of the type.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "members",
                      "description": "a symbol for a static member of the named type",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "getStaticSymbol(declarationFile: string, name: string, members?: string[]): StaticSymbol;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasDecorators",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L257-L266",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "hasDecorators checks a file's metadata for the presence of decorators without evaluating the\nmetadata.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "filePath",
                      "description": "the absolute path to examine for decorators.",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "true if any class in the file has a decorator.\n"
                    }
                  ]
                ],
                "signature": "hasDecorators(filePath: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getSymbolsOf",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L268-L277",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "filePath",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getSymbolsOf(filePath: string): StaticSymbol[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getSymbolByModule",
              "info": {
                "file": "packages/compiler/src/aot/static_symbol_resolver.ts#L516-L524",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "module",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "symbolName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "containingFile",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getSymbolByModule(module: string, symbolName: string, containingFile?: string): StaticSymbol;"
              }
            }
          ]
        ],
        "signature": "class StaticSymbolResolver {\n  resolveSymbol(staticSymbol: StaticSymbol): ResolvedStaticSymbol;\n  getImportAs(\n    staticSymbol: StaticSymbol,\n    useSummaries: boolean = true\n  ): StaticSymbol | null;\n  getResourcePath(staticSymbol: StaticSymbol): string;\n  getTypeArity(staticSymbol: StaticSymbol): number | null;\n  getKnownModuleName(filePath: string): string | null;\n  recordImportAs(sourceSymbol: StaticSymbol, targetSymbol: StaticSymbol);\n  recordModuleNameForFileName(fileName: string, moduleName: string);\n  invalidateFile(fileName: string): StaticSymbol[];\n  ignoreErrorsFor<T>(cb: () => T);\n  getStaticSymbol(\n    declarationFile: string,\n    name: string,\n    members?: string[]\n  ): StaticSymbol;\n  hasDecorators(filePath: string): boolean;\n  getSymbolsOf(filePath: string): StaticSymbol[];\n  getSymbolByModule(\n    module: string,\n    symbolName: string,\n    containingFile?: string\n  ): StaticSymbol;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "AotSummaryResolverHost",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/summary_resolver.ts#L15-L40",
        "signature": "interface AotSummaryResolverHost {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "AotSummaryResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/aot/summary_resolver.ts#L42-L132",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isLibraryFile",
              "info": {
                "file": "packages/compiler/src/aot/summary_resolver.ts#L52-L57",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "filePath",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "isLibraryFile(filePath: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toSummaryFileName",
              "info": {
                "file": "packages/compiler/src/aot/summary_resolver.ts#L59-L61",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "filePath",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "referringSrcFileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "toSummaryFileName(filePath: string, referringSrcFileName: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "fromSummaryFileName",
              "info": {
                "file": "packages/compiler/src/aot/summary_resolver.ts#L63-L65",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "referringLibFileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "fromSummaryFileName(fileName: string, referringLibFileName: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveSummary",
              "info": {
                "file": "packages/compiler/src/aot/summary_resolver.ts#L67-L77",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "staticSymbol",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "resolveSummary(staticSymbol: StaticSymbol): Summary<StaticSymbol>|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getSymbolsOf",
              "info": {
                "file": "packages/compiler/src/aot/summary_resolver.ts#L79-L84",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "filePath",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getSymbolsOf(filePath: string): StaticSymbol[]|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getImportAs",
              "info": {
                "file": "packages/compiler/src/aot/summary_resolver.ts#L86-L89",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "staticSymbol",
                      "description": "",
                      "type": "StaticSymbol"
                    }
                  ]
                ],
                "signature": "getImportAs(staticSymbol: StaticSymbol): StaticSymbol;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getKnownModuleName",
              "info": {
                "file": "packages/compiler/src/aot/summary_resolver.ts#L94-L96",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Converts a file path to a module name that can be used as an `import`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "importedFilePath",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getKnownModuleName(importedFilePath: string): string|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addSummary",
              "info": {
                "file": "packages/compiler/src/aot/summary_resolver.ts#L98-L100",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "summary",
                      "description": "",
                      "type": "Summary<StaticSymbol>"
                    }
                  ]
                ],
                "signature": "addSummary(summary: Summary<StaticSymbol>);"
              }
            }
          ]
        ],
        "signature": "class AotSummaryResolver implements SummaryResolver<StaticSymbol> {\n  isLibraryFile(filePath: string): boolean;\n  toSummaryFileName(filePath: string, referringSrcFileName: string);\n  fromSummaryFileName(fileName: string, referringLibFileName: string);\n  resolveSummary(staticSymbol: StaticSymbol): Summary<StaticSymbol> | null;\n  getSymbolsOf(filePath: string): StaticSymbol[] | null;\n  getImportAs(staticSymbol: StaticSymbol): StaticSymbol;\n  getKnownModuleName(importedFilePath: string): string | null;\n  addSummary(summary: Summary<StaticSymbol>);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "AstPath",
    "overloads": [
      {
        "file": "packages/compiler/src/ast_path.ts#L26-L60",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "A path is an ordered set of elements. Typically a path is to  a\nparticular offset in a source file. The head of the list is the top\nmost node. The tail is the node that contains the offset directly.\n\nFor example, the expression `a + b + c` might have an ast that looks\nlike:\n+\n/ \\\na   +\n/ \\\nb   c\n\nThe path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n'c' at 9-10]` and the path the node at offset 1 would be\n`['+' at 1-10, 'a' at 1-2]`.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parentOf",
              "info": {
                "file": "packages/compiler/src/ast_path.ts#L39-L41",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "parentOf(node: T|undefined): T|undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "childOf",
              "info": {
                "file": "packages/compiler/src/ast_path.ts#L42-L44",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "childOf(node: T): T|undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "first",
              "info": {
                "file": "packages/compiler/src/ast_path.ts#L46-L51",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ctor",
                      "description": "",
                      "type": "new (...args: any[]) => N"
                    }
                  ]
                ],
                "signature": "first<N extends T>(ctor: {new(...args: any[]): N}): N|undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "push",
              "info": {
                "file": "packages/compiler/src/ast_path.ts#L53-L55",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "push(node: T);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pop",
              "info": {
                "file": "packages/compiler/src/ast_path.ts#L57-L59",
                "info": [],
                "signature": "pop(): T;"
              }
            }
          ]
        ],
        "signature": "class AstPath<T> {\n  parentOf(node: T | undefined): T | undefined;\n  childOf(node: T): T | undefined;\n  first<N extends T>(ctor: { new (...args: any[]): N }): N | undefined;\n  push(node: T);\n  pop(): T;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "Summary",
    "overloads": [
      {
        "file": "packages/compiler/src/summary_resolver.ts#L11-L15",
        "signature": "interface Summary<T> {\n  symbol: T;\n  metadata: any;\n  type?: CompileTypeSummary;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "symbol",
              "description": "",
              "type": "T"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "metadata",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileTypeSummary"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "SummaryResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/summary_resolver.ts#L17-L26",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isLibraryFile",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L18-L18",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract isLibraryFile(fileName: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toSummaryFileName",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L19-L19",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "referringSrcFileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract toSummaryFileName(fileName: string, referringSrcFileName: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "fromSummaryFileName",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L20-L20",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "referringLibFileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract fromSummaryFileName(fileName: string, referringLibFileName: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveSummary",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L21-L21",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reference",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "abstract resolveSummary(reference: T): Summary<T>|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getSymbolsOf",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L22-L22",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "filePath",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract getSymbolsOf(filePath: string): T[]|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getImportAs",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L23-L23",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reference",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "abstract getImportAs(reference: T): T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getKnownModuleName",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L24-L24",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract getKnownModuleName(fileName: string): string|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addSummary",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L25-L25",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "summary",
                      "description": "",
                      "type": "Summary<T>"
                    }
                  ]
                ],
                "signature": "abstract addSummary(summary: Summary<T>): void;"
              }
            }
          ]
        ],
        "signature": "class SummaryResolver<T> {\n  abstract isLibraryFile(fileName: string): boolean;\n  abstract toSummaryFileName(\n    fileName: string,\n    referringSrcFileName: string\n  ): string;\n  abstract fromSummaryFileName(\n    fileName: string,\n    referringLibFileName: string\n  ): string;\n  abstract resolveSummary(reference: T): Summary<T> | null;\n  abstract getSymbolsOf(filePath: string): T[] | null;\n  abstract getImportAs(reference: T): T;\n  abstract getKnownModuleName(fileName: string): string | null;\n  abstract addSummary(summary: Summary<T>): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "JitSummaryResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/summary_resolver.ts#L28-L55",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isLibraryFile",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L31-L33",
                "info": [],
                "signature": "isLibraryFile(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toSummaryFileName",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L34-L36",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "toSummaryFileName(fileName: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "fromSummaryFileName",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L37-L39",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "fromSummaryFileName(fileName: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveSummary",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L40-L42",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reference",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "resolveSummary(reference: Type): Summary<Type>|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getSymbolsOf",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L43-L45",
                "info": [],
                "signature": "getSymbolsOf(): Type[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getImportAs",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L46-L48",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "reference",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "getImportAs(reference: Type): Type;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getKnownModuleName",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L49-L51",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getKnownModuleName(fileName: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addSummary",
              "info": {
                "file": "packages/compiler/src/summary_resolver.ts#L52-L54",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "summary",
                      "description": "",
                      "type": "Summary<Type>"
                    }
                  ]
                ],
                "signature": "addSummary(summary: Summary<Type>);"
              }
            }
          ]
        ],
        "signature": "class JitSummaryResolver implements SummaryResolver<Type> {\n  isLibraryFile(): boolean;\n  toSummaryFileName(fileName: string): string;\n  fromSummaryFileName(fileName: string): string;\n  resolveSummary(reference: Type): Summary<Type> | null;\n  getSymbolsOf(): Type[];\n  getImportAs(reference: Type): Type;\n  getKnownModuleName(fileName: string);\n  addSummary(summary: Summary<Type>);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CompileReflector",
    "overloads": [
      {
        "file": "packages/compiler/src/compile_reflector.ts#L15-L25",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Provides access to reflection data about symbols that the compiler needs.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parameters",
              "info": {
                "file": "packages/compiler/src/compile_reflector.ts#L16-L16",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "typeOrFunc",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract parameters(typeOrFunc: /*Type*/ any): any[][];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "annotations",
              "info": {
                "file": "packages/compiler/src/compile_reflector.ts#L17-L17",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "typeOrFunc",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract annotations(typeOrFunc: /*Type*/ any): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "shallowAnnotations",
              "info": {
                "file": "packages/compiler/src/compile_reflector.ts#L18-L18",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "typeOrFunc",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract shallowAnnotations(typeOrFunc: /*Type*/ any): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "tryAnnotations",
              "info": {
                "file": "packages/compiler/src/compile_reflector.ts#L19-L19",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "typeOrFunc",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract tryAnnotations(typeOrFunc: /*Type*/ any): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "propMetadata",
              "info": {
                "file": "packages/compiler/src/compile_reflector.ts#L20-L20",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "typeOrFunc",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract propMetadata(typeOrFunc: /*Type*/ any): {[key: string]: any[]};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasLifecycleHook",
              "info": {
                "file": "packages/compiler/src/compile_reflector.ts#L21-L21",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "lcProperty",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract hasLifecycleHook(type: any, lcProperty: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "guards",
              "info": {
                "file": "packages/compiler/src/compile_reflector.ts#L22-L22",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "typeOrFunc",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract guards(typeOrFunc: /* Type */ any): {[key: string]: any};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "componentModuleUrl",
              "info": {
                "file": "packages/compiler/src/compile_reflector.ts#L23-L23",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cmpMetadata",
                      "description": "",
                      "type": "Component"
                    }
                  ]
                ],
                "signature": "abstract componentModuleUrl(type: /*Type*/ any, cmpMetadata: Component): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveExternalReference",
              "info": {
                "file": "packages/compiler/src/compile_reflector.ts#L24-L24",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ref",
                      "description": "",
                      "type": "o.ExternalReference"
                    }
                  ]
                ],
                "signature": "abstract resolveExternalReference(ref: o.ExternalReference): any;"
              }
            }
          ]
        ],
        "signature": "class CompileReflector {\n  abstract parameters(typeOrFunc: /*Type*/ any): any[][];\n  abstract annotations(typeOrFunc: /*Type*/ any): any[];\n  abstract shallowAnnotations(typeOrFunc: /*Type*/ any): any[];\n  abstract tryAnnotations(typeOrFunc: /*Type*/ any): any[];\n  abstract propMetadata(typeOrFunc: /*Type*/ any): { [key: string]: any[] };\n  abstract hasLifecycleHook(type: any, lcProperty: string): boolean;\n  abstract guards(typeOrFunc: /* Type */ any): { [key: string]: any };\n  abstract componentModuleUrl(\n    type: /*Type*/ any,\n    cmpMetadata: Component\n  ): string;\n  abstract resolveExternalReference(ref: o.ExternalReference): any;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "createUrlResolverWithoutPackagePrefix",
    "overloads": [
      {
        "file": "packages/compiler/src/url_resolver.ts#L12-L14",
        "signature": "function createUrlResolverWithoutPackagePrefix(): UrlResolver;",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create a {@link UrlResolver} with no package prefix.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "createOfflineCompileUrlResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/url_resolver.ts#L16-L18",
        "signature": "function createOfflineCompileUrlResolver(): UrlResolver;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "getUrlScheme",
    "overloads": [
      {
        "file": "packages/compiler/src/url_resolver.ts#L76-L79",
        "signature": "function getUrlScheme(url: string): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Extract the scheme of a URL.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "url",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "UrlResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/url_resolver.ts#L36-L38",
        "signature": "interface UrlResolver {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Used by the {@link Compiler} when resolving HTML and CSS template URLs.\n\nThis class can be overridden by the application developer to create custom behavior.\n\nSee {@link Compiler}\n\n## Example\n\n{@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}\n"
            }
          ],
          [
            "security",
            {
              "__kind": "heading",
              "description": "When compiling templates at runtime, you must\nensure that the entire template comes from a trusted source.\nAttacker-controlled data introduced by a template could expose your\napplication to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "UrlResolverCtor",
    "overloads": [
      {
        "file": "packages/compiler/src/url_resolver.ts#L40-L42",
        "signature": "interface UrlResolverCtor {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ResourceLoader",
    "overloads": [
      {
        "file": "packages/compiler/src/resource_loader.ts#L13-L17",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "An interface for retrieving documents by URL that the compiler uses\nto load templates.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/compiler/src/resource_loader.ts#L14-L16",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "get(url: string): Promise<string>|string;"
              }
            }
          ]
        ],
        "signature": "class ResourceLoader {\n  get(url: string): Promise<string> | string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ElementSchemaRegistry",
    "overloads": [
      {
        "file": "packages/compiler/src/schema/element_schema_registry.ts#L11-L25",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "hasProperty",
              "info": {
                "file": "packages/compiler/src/schema/element_schema_registry.ts#L12-L12",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tagName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "propName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "schemaMetas",
                      "description": "",
                      "type": "SchemaMetadata[]"
                    }
                  ]
                ],
                "signature": "abstract hasProperty(tagName: string, propName: string, schemaMetas: SchemaMetadata[]): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasElement",
              "info": {
                "file": "packages/compiler/src/schema/element_schema_registry.ts#L13-L13",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tagName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "schemaMetas",
                      "description": "",
                      "type": "SchemaMetadata[]"
                    }
                  ]
                ],
                "signature": "abstract hasElement(tagName: string, schemaMetas: SchemaMetadata[]): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "securityContext",
              "info": {
                "file": "packages/compiler/src/schema/element_schema_registry.ts#L14-L15",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "elementName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "propName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isAttribute",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "abstract securityContext(elementName: string, propName: string, isAttribute: boolean):   SecurityContext;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "allKnownElementNames",
              "info": {
                "file": "packages/compiler/src/schema/element_schema_registry.ts#L16-L16",
                "info": [],
                "signature": "abstract allKnownElementNames(): string[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getMappedPropName",
              "info": {
                "file": "packages/compiler/src/schema/element_schema_registry.ts#L17-L17",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "propName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract getMappedPropName(propName: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getDefaultComponentElementName",
              "info": {
                "file": "packages/compiler/src/schema/element_schema_registry.ts#L18-L18",
                "info": [],
                "signature": "abstract getDefaultComponentElementName(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "validateProperty",
              "info": {
                "file": "packages/compiler/src/schema/element_schema_registry.ts#L19-L19",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract validateProperty(name: string): {error: boolean, msg?: string};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "validateAttribute",
              "info": {
                "file": "packages/compiler/src/schema/element_schema_registry.ts#L20-L20",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract validateAttribute(name: string): {error: boolean, msg?: string};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "normalizeAnimationStyleProperty",
              "info": {
                "file": "packages/compiler/src/schema/element_schema_registry.ts#L21-L21",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "propName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract normalizeAnimationStyleProperty(propName: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "normalizeAnimationStyleValue",
              "info": {
                "file": "packages/compiler/src/schema/element_schema_registry.ts#L22-L24",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "camelCaseProp",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "userProvidedProp",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "val",
                      "description": "",
                      "type": "string | number"
                    }
                  ]
                ],
                "signature": "abstract normalizeAnimationStyleValue(   camelCaseProp: string, userProvidedProp: string,   val: string|number): {error: string, value: string};"
              }
            }
          ]
        ],
        "signature": "class ElementSchemaRegistry {\n  abstract hasProperty(\n    tagName: string,\n    propName: string,\n    schemaMetas: SchemaMetadata[]\n  ): boolean;\n  abstract hasElement(tagName: string, schemaMetas: SchemaMetadata[]): boolean;\n  abstract securityContext(\n    elementName: string,\n    propName: string,\n    isAttribute: boolean\n  ): SecurityContext;\n  abstract allKnownElementNames(): string[];\n  abstract getMappedPropName(propName: string): string;\n  abstract getDefaultComponentElementName(): string;\n  abstract validateProperty(name: string): { error: boolean; msg?: string };\n  abstract validateAttribute(name: string): { error: boolean; msg?: string };\n  abstract normalizeAnimationStyleProperty(propName: string): string;\n  abstract normalizeAnimationStyleValue(\n    camelCaseProp: string,\n    userProvidedProp: string,\n    val: string | number\n  ): { error: string; value: string };\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "computeMsgId",
    "overloads": [
      {
        "file": "packages/compiler/src/i18n/digest.ts#L189-L201",
        "signature": "function computeMsgId(msg: string, meaning: string = \"\"): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "msg",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "meaning",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Extractor",
    "overloads": [
      {
        "file": "packages/compiler/src/i18n/extractor.ts#L53-L124",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "extract",
              "info": {
                "file": "packages/compiler/src/i18n/extractor.ts#L58-L95",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rootFiles",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "extract(rootFiles: string[]): Promise<MessageBundle>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/compiler/src/i18n/extractor.ts#L97-L123",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "host",
                      "description": "",
                      "type": "ExtractorHost"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "static create(host: ExtractorHost, locale: string|null):   {extractor: Extractor, staticReflector: StaticReflector};"
              }
            }
          ]
        ],
        "signature": "class Extractor {\n  extract(rootFiles: string[]): Promise<MessageBundle>;\n  static create(\n    host: ExtractorHost,\n    locale: string | null\n  ): { extractor: Extractor; staticReflector: StaticReflector };\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "ExtractorHost",
    "overloads": [
      {
        "file": "packages/compiler/src/i18n/extractor.ts#L41-L51",
        "signature": "interface ExtractorHost {\n  // inherited from StaticSymbolResolverHost\n  // inherited from AotSummaryResolverHost\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The host of the Extractor disconnects the implementation from TypeScript / other language\nservices and from underlying file systems.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "I18NHtmlParser",
    "overloads": [
      {
        "file": "packages/compiler/src/i18n/i18n_html_parser.ts#L25-L56",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "getTagDefinition",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parse",
              "info": {
                "file": "packages/compiler/src/i18n/i18n_html_parser.ts#L45-L55",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "source",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "TokenizeOptions"
                    }
                  ]
                ],
                "signature": "parse(source: string, url: string, options: TokenizeOptions = {}): ParseTreeResult;"
              }
            }
          ]
        ],
        "signature": "class I18NHtmlParser implements HtmlParser {\n  getTagDefinition: any;\n\n  parse(\n    source: string,\n    url: string,\n    options: TokenizeOptions = {}\n  ): ParseTreeResult;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "MessageBundle",
    "overloads": [
      {
        "file": "packages/compiler/src/i18n/message_bundle.ts#L21-L84",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A container for message extracted from the templates.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "updateFromTemplate",
              "info": {
                "file": "packages/compiler/src/i18n/message_bundle.ts#L28-L46",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "html",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "interpolationConfig",
                      "description": "",
                      "type": "InterpolationConfig"
                    }
                  ]
                ],
                "signature": "updateFromTemplate(html: string, url: string, interpolationConfig: InterpolationConfig):   ParseError[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getMessages",
              "info": {
                "file": "packages/compiler/src/i18n/message_bundle.ts#L50-L52",
                "info": [],
                "signature": "getMessages(): i18n.Message[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "write",
              "info": {
                "file": "packages/compiler/src/i18n/message_bundle.ts#L54-L83",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "serializer",
                      "description": "",
                      "type": "Serializer"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "filterSources",
                      "description": "",
                      "type": "(path: string) => string"
                    }
                  ]
                ],
                "signature": "write(serializer: Serializer, filterSources?: (path: string) => string): string;"
              }
            }
          ]
        ],
        "signature": "class MessageBundle {\n  updateFromTemplate(\n    html: string,\n    url: string,\n    interpolationConfig: InterpolationConfig\n  ): ParseError[];\n  getMessages(): i18n.Message[];\n  write(\n    serializer: Serializer,\n    filterSources?: (path: string) => string\n  ): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Serializer",
    "overloads": [
      {
        "file": "packages/compiler/src/i18n/serializers/serializer.ts#L11-L27",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "write",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/serializer.ts#L15-L15",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "messages",
                      "description": "",
                      "type": "i18n.Message[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract write(messages: i18n.Message[], locale: string|null): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "load",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/serializer.ts#L17-L18",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "content",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract load(content: string, url: string):   {locale: string|null, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "digest",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/serializer.ts#L20-L20",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "i18n.Message"
                    }
                  ]
                ],
                "signature": "abstract digest(message: i18n.Message): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createNameMapper",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/serializer.ts#L24-L26",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "i18n.Message"
                    }
                  ]
                ],
                "signature": "createNameMapper(message: i18n.Message): PlaceholderMapper|null;"
              }
            }
          ]
        ],
        "signature": "class Serializer {\n  abstract write(messages: i18n.Message[], locale: string | null): string;\n  abstract load(\n    content: string,\n    url: string\n  ): {\n    locale: string | null;\n    i18nNodesByMsgId: { [msgId: string]: i18n.Node[] };\n  };\n  abstract digest(message: i18n.Message): string;\n  createNameMapper(message: i18n.Message): PlaceholderMapper | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Xliff",
    "overloads": [
      {
        "file": "packages/compiler/src/i18n/serializers/xliff.ts#L36-L121",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "write",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xliff.ts#L37-L93",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "messages",
                      "description": "",
                      "type": "i18n.Message[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "write(messages: i18n.Message[], locale: string|null): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "load",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xliff.ts#L95-L116",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "content",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "load(content: string, url: string):   {locale: string, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "digest",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xliff.ts#L118-L120",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "i18n.Message"
                    }
                  ]
                ],
                "signature": "digest(message: i18n.Message): string;"
              }
            }
          ]
        ],
        "signature": "class Xliff extends Serializer {\n  write(messages: i18n.Message[], locale: string | null): string;\n  load(\n    content: string,\n    url: string\n  ): { locale: string; i18nNodesByMsgId: { [msgId: string]: i18n.Node[] } };\n  digest(message: i18n.Message): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Xliff2",
    "overloads": [
      {
        "file": "packages/compiler/src/i18n/serializers/xliff2.ts#L32-L114",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "write",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xliff2.ts#L33-L86",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "messages",
                      "description": "",
                      "type": "i18n.Message[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "write(messages: i18n.Message[], locale: string|null): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "load",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xliff2.ts#L88-L109",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "content",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "load(content: string, url: string):   {locale: string, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "digest",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xliff2.ts#L111-L113",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "i18n.Message"
                    }
                  ]
                ],
                "signature": "digest(message: i18n.Message): string;"
              }
            }
          ]
        ],
        "signature": "class Xliff2 extends Serializer {\n  write(messages: i18n.Message[], locale: string | null): string;\n  load(\n    content: string,\n    url: string\n  ): { locale: string; i18nNodesByMsgId: { [msgId: string]: i18n.Node[] } };\n  digest(message: i18n.Message): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Xmb",
    "overloads": [
      {
        "file": "packages/compiler/src/i18n/serializers/xmb.ts#L41-L96",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "write",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xmb.ts#L42-L81",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "messages",
                      "description": "",
                      "type": "i18n.Message[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "write(messages: i18n.Message[], locale: string|null): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "load",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xmb.ts#L83-L86",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "content",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "load(content: string, url: string):   {locale: string, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "digest",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xmb.ts#L88-L90",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "i18n.Message"
                    }
                  ]
                ],
                "signature": "digest(message: i18n.Message): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createNameMapper",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xmb.ts#L93-L95",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "i18n.Message"
                    }
                  ]
                ],
                "signature": "createNameMapper(message: i18n.Message): PlaceholderMapper;"
              }
            }
          ]
        ],
        "signature": "class Xmb extends Serializer {\n  write(messages: i18n.Message[], locale: string | null): string;\n  load(\n    content: string,\n    url: string\n  ): { locale: string; i18nNodesByMsgId: { [msgId: string]: i18n.Node[] } };\n  digest(message: i18n.Message): string;\n  createNameMapper(message: i18n.Message): PlaceholderMapper;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Xtb",
    "overloads": [
      {
        "file": "packages/compiler/src/i18n/serializers/xtb.ts#L21-L64",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "write",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xtb.ts#L22-L24",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "messages",
                      "description": "",
                      "type": "i18n.Message[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "locale",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "write(messages: i18n.Message[], locale: string|null): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "load",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xtb.ts#L26-L55",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "content",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "load(content: string, url: string):   {locale: string, i18nNodesByMsgId: {[msgId: string]: i18n.Node[]}};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "digest",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xtb.ts#L57-L59",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "i18n.Message"
                    }
                  ]
                ],
                "signature": "digest(message: i18n.Message): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createNameMapper",
              "info": {
                "file": "packages/compiler/src/i18n/serializers/xtb.ts#L61-L63",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "i18n.Message"
                    }
                  ]
                ],
                "signature": "createNameMapper(message: i18n.Message): PlaceholderMapper;"
              }
            }
          ]
        ],
        "signature": "class Xtb extends Serializer {\n  write(messages: i18n.Message[], locale: string | null): string;\n  load(\n    content: string,\n    url: string\n  ): { locale: string; i18nNodesByMsgId: { [msgId: string]: i18n.Node[] } };\n  digest(message: i18n.Message): string;\n  createNameMapper(message: i18n.Message): PlaceholderMapper;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "PrenormalizedTemplateMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/directive_normalizer.ts#L22-L34",
        "signature": "interface PrenormalizedTemplateMetadata {\n  ngModuleType: any;\n  componentType: any;\n  moduleUrl: string;\n  template: string | null;\n  templateUrl: string | null;\n  styles: string[];\n  styleUrls: string[];\n  interpolation: [string, string] | null;\n  encapsulation: ViewEncapsulation | null;\n  animations: any[];\n  preserveWhitespaces: boolean | null;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "ngModuleType",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentType",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "moduleUrl",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "template",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "templateUrl",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styles",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleUrls",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "interpolation",
              "description": "",
              "type": "[string, string]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "encapsulation",
              "description": "",
              "type": "ViewEncapsulation"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "animations",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preserveWhitespaces",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "DirectiveNormalizer",
    "overloads": [
      {
        "file": "packages/compiler/src/directive_normalizer.ts#L36-L259",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCache",
              "info": {
                "file": "packages/compiler/src/directive_normalizer.ts#L43-L45",
                "info": [],
                "signature": "clearCache(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCacheFor",
              "info": {
                "file": "packages/compiler/src/directive_normalizer.ts#L47-L56",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "normalizedDirective",
                      "description": "",
                      "type": "CompileDirectiveMetadata"
                    }
                  ]
                ],
                "signature": "clearCacheFor(normalizedDirective: CompileDirectiveMetadata): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "normalizeTemplate",
              "info": {
                "file": "packages/compiler/src/directive_normalizer.ts#L67-L98",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "prenormData",
                      "description": "",
                      "type": "PrenormalizedTemplateMetadata"
                    }
                  ]
                ],
                "signature": "normalizeTemplate(prenormData: PrenormalizedTemplateMetadata):   SyncAsync<CompileTemplateMetadata>;"
              }
            }
          ]
        ],
        "signature": "class DirectiveNormalizer {\n  clearCache(): void;\n  clearCacheFor(normalizedDirective: CompileDirectiveMetadata): void;\n  normalizeTemplate(\n    prenormData: PrenormalizedTemplateMetadata\n  ): SyncAsync<CompileTemplateMetadata>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ParserError",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L12-L18",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "message",
              "description": "",
              "type": "string"
            }
          ]
        ],
        "signature": "class ParserError {\n  public message: string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ParseSpan",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L20-L25",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "toAbsolute",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L22-L24",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "absoluteOffset",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "toAbsolute(absoluteOffset: number): AbsoluteSourceSpan;"
              }
            }
          ]
        ],
        "signature": "class ParseSpan {\n  toAbsolute(absoluteOffset: number): AbsoluteSourceSpan;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "AST",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L27-L40",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L34-L36",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L37-L39",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ASTWithName",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L42-L47",
        "info": [],
        "signature": "class ASTWithName extends AST {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Quote",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L62-L74",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents a quoted expression of the form:\n\nquote = prefix `:` uninterpretedExpression\nprefix = identifier\nuninterpretedExpression = arbitrary string\n\nA quoted expression is meant to be pre-processed by an AST transformer that\nconverts it into another AST that no longer contains quoted expressions.\nIt is meant to allow third-party developers to extend Angular template\nexpression language. The `uninterpretedExpression` part of the quote is\ntherefore not interpreted by the Angular's own expression parser.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L68-L70",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L71-L73",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class Quote extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "EmptyExpr",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L76-L80",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L77-L79",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null);"
              }
            }
          ]
        ],
        "signature": "class EmptyExpr extends AST {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ImplicitReceiver",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L80-L84",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L81-L83",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class ImplicitReceiver extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Chain",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L89-L96",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Multiple expressions separated by a semicolon.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L93-L95",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class Chain extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Conditional",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L98-L107",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L104-L106",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class Conditional extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "PropertyRead",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L109-L118",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L115-L117",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class PropertyRead extends ASTWithName {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "PropertyWrite",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L120-L129",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L126-L128",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class PropertyWrite extends ASTWithName {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "SafePropertyRead",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L131-L140",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L137-L139",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class SafePropertyRead extends ASTWithName {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "KeyedRead",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L142-L149",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L146-L148",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class KeyedRead extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "KeyedWrite",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L151-L160",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L157-L159",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class KeyedWrite extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "BindingPipe",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L162-L171",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L168-L170",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class BindingPipe extends ASTWithName {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "LiteralPrimitive",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L173-L180",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L177-L179",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class LiteralPrimitive extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "LiteralArray",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L182-L189",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L186-L188",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class LiteralArray extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "compiler",
    "name": "LiteralMapKey",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L191-L193",
        "signature": "export type LiteralMapKey = {\n  key: string;\n  quoted: boolean;\n};",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "LiteralMap",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L195-L204",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L201-L203",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class LiteralMap extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Interpolation",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L206-L215",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L212-L214",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class Interpolation extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Binary",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L217-L226",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L223-L225",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class Binary extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "PrefixNot",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L228-L235",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L232-L234",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class PrefixNot extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "NonNullAssert",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L237-L244",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L241-L243",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class NonNullAssert extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "MethodCall",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L246-L255",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L252-L254",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class MethodCall extends ASTWithName {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "SafeMethodCall",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L257-L266",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L263-L265",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class SafeMethodCall extends ASTWithName {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "FunctionCall",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L268-L277",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L274-L276",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ]
        ],
        "signature": "class FunctionCall extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "AbsoluteSourceSpan",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L283-L285",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Records the absolute position of a text span in a source file, where `start` and `end` are the\nstarting and ending byte offsets, respectively, of the text span in a source file.\n"
            }
          ]
        ],
        "signature": "class AbsoluteSourceSpan {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ASTWithSource",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L287-L305",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L296-L301",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "AstVisitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: AstVisitor, context: any = null): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L302-L304",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ASTWithSource extends AST {\n  visit(visitor: AstVisitor, context: any = null): any;\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "compiler",
    "name": "TemplateBinding",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L326-L326",
        "signature": "export type TemplateBinding = VariableBinding | ExpressionBinding;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "TemplateBinding refers to a particular key-value pair in a microsyntax\nexpression. A few examples are:\n\n|---------------------|--------------|---------|--------------|\n|     expression      |     key      |  value  | binding type |\n|---------------------|--------------|---------|--------------|\n| 1. let item         |    item      |  null   |   variable   |\n| 2. of items         |   ngForOf    |  items  |  expression  |\n| 3. let x = y        |      x       |    y    |   variable   |\n| 4. index as i       |      i       |  index  |   variable   |\n| 5. trackBy: func    | ngForTrackBy |   func  |  expression  |\n| 6. *ngIf=\"cond\"     |     ngIf     |   cond  |  expression  |\n|---------------------|--------------|---------|--------------|\n\n(6) is a notable exception because it is a binding from the template key in\nthe LHS of a HTML attribute to the expression in the RHS. All other bindings\nin the example above are derived solely from the RHS.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "VariableBinding",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L328-L338",
        "info": [],
        "signature": "class VariableBinding {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ExpressionBinding",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L340-L354",
        "info": [],
        "signature": "class ExpressionBinding {}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "TemplateBindingIdentifier",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L356-L359",
        "signature": "interface TemplateBindingIdentifier {\n  source: string;\n  span: AbsoluteSourceSpan;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "source",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "span",
              "description": "",
              "type": "AbsoluteSourceSpan"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "AstVisitor",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L361-L390",
        "signature": "interface AstVisitor {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "RecursiveAstVisitor",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L392-L472",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L393-L398",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "AST"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(ast: AST, context?: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitBinary",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L399-L402",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Binary"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitBinary(ast: Binary, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitChain",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L403-L405",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Chain"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitChain(ast: Chain, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitConditional",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L406-L410",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Conditional"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitConditional(ast: Conditional, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPipe",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L411-L414",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "BindingPipe"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPipe(ast: BindingPipe, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitFunctionCall",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L415-L420",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "FunctionCall"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitFunctionCall(ast: FunctionCall, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitImplicitReceiver",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L421-L421",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "ImplicitReceiver"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitInterpolation",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L422-L424",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Interpolation"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitInterpolation(ast: Interpolation, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitKeyedRead",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L425-L428",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "KeyedRead"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitKeyedRead(ast: KeyedRead, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitKeyedWrite",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L429-L433",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "KeyedWrite"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitKeyedWrite(ast: KeyedWrite, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitLiteralArray",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L434-L436",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "LiteralArray"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitLiteralArray(ast: LiteralArray, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitLiteralMap",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L437-L439",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "LiteralMap"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitLiteralMap(ast: LiteralMap, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitLiteralPrimitive",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L440-L440",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "LiteralPrimitive"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitMethodCall",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L441-L444",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "MethodCall"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitMethodCall(ast: MethodCall, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPrefixNot",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L445-L447",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "PrefixNot"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPrefixNot(ast: PrefixNot, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitNonNullAssert",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L448-L450",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "NonNullAssert"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitNonNullAssert(ast: NonNullAssert, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPropertyRead",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L451-L453",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "PropertyRead"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPropertyRead(ast: PropertyRead, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPropertyWrite",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L454-L457",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "PropertyWrite"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPropertyWrite(ast: PropertyWrite, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitSafePropertyRead",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L458-L460",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "SafePropertyRead"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitSafePropertyRead(ast: SafePropertyRead, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitSafeMethodCall",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L461-L464",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "SafeMethodCall"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitSafeMethodCall(ast: SafeMethodCall, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitQuote",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L465-L465",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Quote"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitQuote(ast: Quote, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitAll",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L467-L471",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "asts",
                      "description": "",
                      "type": "AST[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitAll(asts: AST[], context: any): any;"
              }
            }
          ]
        ],
        "signature": "class RecursiveAstVisitor implements AstVisitor {\n  visit(ast: AST, context?: any): any;\n  visitBinary(ast: Binary, context: any): any;\n  visitChain(ast: Chain, context: any): any;\n  visitConditional(ast: Conditional, context: any): any;\n  visitPipe(ast: BindingPipe, context: any): any;\n  visitFunctionCall(ast: FunctionCall, context: any): any;\n  visitInterpolation(ast: Interpolation, context: any): any;\n  visitKeyedRead(ast: KeyedRead, context: any): any;\n  visitKeyedWrite(ast: KeyedWrite, context: any): any;\n  visitLiteralArray(ast: LiteralArray, context: any): any;\n  visitLiteralMap(ast: LiteralMap, context: any): any;\n  visitMethodCall(ast: MethodCall, context: any): any;\n  visitPrefixNot(ast: PrefixNot, context: any): any;\n  visitNonNullAssert(ast: NonNullAssert, context: any): any;\n  visitPropertyRead(ast: PropertyRead, context: any): any;\n  visitPropertyWrite(ast: PropertyWrite, context: any): any;\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n  visitAll(asts: AST[], context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "AstTransformer",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L474-L578",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visitImplicitReceiver",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L475-L477",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "ImplicitReceiver"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitInterpolation",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L479-L481",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Interpolation"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitInterpolation(ast: Interpolation, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitLiteralPrimitive",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L483-L485",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "LiteralPrimitive"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPropertyRead",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L487-L490",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "PropertyRead"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPropertyRead(ast: PropertyRead, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPropertyWrite",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L492-L496",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "PropertyWrite"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPropertyWrite(ast: PropertyWrite, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitSafePropertyRead",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L498-L501",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "SafePropertyRead"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitSafePropertyRead(ast: SafePropertyRead, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitMethodCall",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L503-L507",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "MethodCall"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitMethodCall(ast: MethodCall, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitSafeMethodCall",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L509-L513",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "SafeMethodCall"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitSafeMethodCall(ast: SafeMethodCall, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitFunctionCall",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L515-L518",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "FunctionCall"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitFunctionCall(ast: FunctionCall, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitLiteralArray",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L520-L522",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "LiteralArray"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitLiteralArray(ast: LiteralArray, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitLiteralMap",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L524-L526",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "LiteralMap"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitLiteralMap(ast: LiteralMap, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitBinary",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L528-L531",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Binary"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitBinary(ast: Binary, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPrefixNot",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L533-L535",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "PrefixNot"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPrefixNot(ast: PrefixNot, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitNonNullAssert",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L537-L539",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "NonNullAssert"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitNonNullAssert(ast: NonNullAssert, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitConditional",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L541-L545",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Conditional"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitConditional(ast: Conditional, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPipe",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L547-L551",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "BindingPipe"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPipe(ast: BindingPipe, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitKeyedRead",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L553-L555",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "KeyedRead"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitKeyedRead(ast: KeyedRead, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitKeyedWrite",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L557-L560",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "KeyedWrite"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitKeyedWrite(ast: KeyedWrite, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitAll",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L562-L568",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "asts",
                      "description": "",
                      "type": "any[]"
                    }
                  ]
                ],
                "signature": "visitAll(asts: any[]): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitChain",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L570-L572",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Chain"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitChain(ast: Chain, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitQuote",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L574-L577",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Quote"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitQuote(ast: Quote, context: any): AST;"
              }
            }
          ]
        ],
        "signature": "class AstTransformer implements AstVisitor {\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST;\n  visitInterpolation(ast: Interpolation, context: any): AST;\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST;\n  visitPropertyRead(ast: PropertyRead, context: any): AST;\n  visitPropertyWrite(ast: PropertyWrite, context: any): AST;\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): AST;\n  visitMethodCall(ast: MethodCall, context: any): AST;\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): AST;\n  visitFunctionCall(ast: FunctionCall, context: any): AST;\n  visitLiteralArray(ast: LiteralArray, context: any): AST;\n  visitLiteralMap(ast: LiteralMap, context: any): AST;\n  visitBinary(ast: Binary, context: any): AST;\n  visitPrefixNot(ast: PrefixNot, context: any): AST;\n  visitNonNullAssert(ast: NonNullAssert, context: any): AST;\n  visitConditional(ast: Conditional, context: any): AST;\n  visitPipe(ast: BindingPipe, context: any): AST;\n  visitKeyedRead(ast: KeyedRead, context: any): AST;\n  visitKeyedWrite(ast: KeyedWrite, context: any): AST;\n  visitAll(asts: any[]): any[];\n  visitChain(ast: Chain, context: any): AST;\n  visitQuote(ast: Quote, context: any): AST;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "AstMemoryEfficientTransformer",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L582-L752",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visitImplicitReceiver",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L583-L585",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "ImplicitReceiver"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitInterpolation",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L587-L592",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Interpolation"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitInterpolation(ast: Interpolation, context: any): Interpolation;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitLiteralPrimitive",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L594-L596",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "LiteralPrimitive"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPropertyRead",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L598-L604",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "PropertyRead"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPropertyRead(ast: PropertyRead, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPropertyWrite",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L606-L613",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "PropertyWrite"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPropertyWrite(ast: PropertyWrite, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitSafePropertyRead",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L615-L621",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "SafePropertyRead"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitSafePropertyRead(ast: SafePropertyRead, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitMethodCall",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L623-L630",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "MethodCall"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitMethodCall(ast: MethodCall, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitSafeMethodCall",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L632-L639",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "SafeMethodCall"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitSafeMethodCall(ast: SafeMethodCall, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitFunctionCall",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L641-L648",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "FunctionCall"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitFunctionCall(ast: FunctionCall, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitLiteralArray",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L650-L656",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "LiteralArray"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitLiteralArray(ast: LiteralArray, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitLiteralMap",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L658-L664",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "LiteralMap"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitLiteralMap(ast: LiteralMap, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitBinary",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L666-L673",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Binary"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitBinary(ast: Binary, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPrefixNot",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L675-L681",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "PrefixNot"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPrefixNot(ast: PrefixNot, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitNonNullAssert",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L683-L689",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "NonNullAssert"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitNonNullAssert(ast: NonNullAssert, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitConditional",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L691-L699",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Conditional"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitConditional(ast: Conditional, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitPipe",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L701-L708",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "BindingPipe"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitPipe(ast: BindingPipe, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitKeyedRead",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L710-L717",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "KeyedRead"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitKeyedRead(ast: KeyedRead, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitKeyedWrite",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L719-L727",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "KeyedWrite"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitKeyedWrite(ast: KeyedWrite, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitAll",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L729-L739",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "asts",
                      "description": "",
                      "type": "any[]"
                    }
                  ]
                ],
                "signature": "visitAll(asts: any[]): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitChain",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L741-L747",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Chain"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitChain(ast: Chain, context: any): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitQuote",
              "info": {
                "file": "packages/compiler/src/expression_parser/ast.ts#L749-L751",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Quote"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitQuote(ast: Quote, context: any): AST;"
              }
            }
          ]
        ],
        "signature": "class AstMemoryEfficientTransformer implements AstVisitor {\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST;\n  visitInterpolation(ast: Interpolation, context: any): Interpolation;\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST;\n  visitPropertyRead(ast: PropertyRead, context: any): AST;\n  visitPropertyWrite(ast: PropertyWrite, context: any): AST;\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): AST;\n  visitMethodCall(ast: MethodCall, context: any): AST;\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): AST;\n  visitFunctionCall(ast: FunctionCall, context: any): AST;\n  visitLiteralArray(ast: LiteralArray, context: any): AST;\n  visitLiteralMap(ast: LiteralMap, context: any): AST;\n  visitBinary(ast: Binary, context: any): AST;\n  visitPrefixNot(ast: PrefixNot, context: any): AST;\n  visitNonNullAssert(ast: NonNullAssert, context: any): AST;\n  visitConditional(ast: Conditional, context: any): AST;\n  visitPipe(ast: BindingPipe, context: any): AST;\n  visitKeyedRead(ast: KeyedRead, context: any): AST;\n  visitKeyedWrite(ast: KeyedWrite, context: any): AST;\n  visitAll(asts: any[]): any[];\n  visitChain(ast: Chain, context: any): AST;\n  visitQuote(ast: Quote, context: any): AST;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ParsedProperty",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L756-L766",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "isLiteral",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isAnimation",
              "description": "",
              "type": "boolean"
            }
          ]
        ],
        "signature": "class ParsedProperty {\n  public readonly isLiteral: boolean;\n  public readonly isAnimation: boolean;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "ParsedPropertyType",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L768-L772",
        "signature": "export enum ParsedPropertyType {\n  DEFAULT,\n  LITERAL_ATTR,\n  ANIMATION,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "ParsedEventType",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L774-L779",
        "signature": "export const enum ParsedEventType {\n  // DOM or Directive event\n  Regular,\n  // Animation specific event\n  Animation,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ParsedEvent",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L781-L788",
        "info": [],
        "signature": "class ParsedEvent {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ParsedVariable",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L793-L798",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "ParsedVariable represents a variable declaration in a microsyntax expression.\n"
            }
          ]
        ],
        "signature": "class ParsedVariable {}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "BindingType",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L800-L811",
        "signature": "export const enum BindingType {\n  // A regular binding to a property (e.g. `[property]=\"expression\"`).\n  Property,\n  // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n  Attribute,\n  // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n  Class,\n  // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n  Style,\n  // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n  Animation,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "BoundElementProperty",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/ast.ts#L813-L818",
        "info": [],
        "signature": "class BoundElementProperty {}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "isIdentifier",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/lexer.ts#L364-L374",
        "signature": "function isIdentifier(input: string): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "input",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "isQuote",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/lexer.ts#L389-L391",
        "signature": "function isQuote(code: number): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "code",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "TokenType",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/lexer.ts#L11-L19",
        "signature": "export enum TokenType {\n  Character,\n  Identifier,\n  Keyword,\n  String,\n  Operator,\n  Number,\n  Error,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Lexer",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/lexer.ts#L23-L34",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "tokenize",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L24-L33",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "text",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "tokenize(text: string): Token[];"
              }
            }
          ]
        ],
        "signature": "class Lexer {\n  tokenize(text: string): Token[];\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Token",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/lexer.ts#L36-L116",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isCharacter",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L41-L43",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "code",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "isCharacter(code: number): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isNumber",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L45-L47",
                "info": [],
                "signature": "isNumber(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isString",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L49-L51",
                "info": [],
                "signature": "isString(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isOperator",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L53-L55",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "operator",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "isOperator(operator: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isIdentifier",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L57-L59",
                "info": [],
                "signature": "isIdentifier(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isKeyword",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L61-L63",
                "info": [],
                "signature": "isKeyword(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isKeywordLet",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L65-L67",
                "info": [],
                "signature": "isKeywordLet(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isKeywordAs",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L69-L71",
                "info": [],
                "signature": "isKeywordAs(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isKeywordNull",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L73-L75",
                "info": [],
                "signature": "isKeywordNull(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isKeywordUndefined",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L77-L79",
                "info": [],
                "signature": "isKeywordUndefined(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isKeywordTrue",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L81-L83",
                "info": [],
                "signature": "isKeywordTrue(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isKeywordFalse",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L85-L87",
                "info": [],
                "signature": "isKeywordFalse(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isKeywordThis",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L89-L91",
                "info": [],
                "signature": "isKeywordThis(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isError",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L93-L95",
                "info": [],
                "signature": "isError(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toNumber",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L97-L99",
                "info": [],
                "signature": "toNumber(): number;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/compiler/src/expression_parser/lexer.ts#L101-L115",
                "info": [],
                "signature": "toString(): string|null;"
              }
            }
          ]
        ],
        "signature": "class Token {\n  isCharacter(code: number): boolean;\n  isNumber(): boolean;\n  isString(): boolean;\n  isOperator(operator: string): boolean;\n  isIdentifier(): boolean;\n  isKeyword(): boolean;\n  isKeywordLet(): boolean;\n  isKeywordAs(): boolean;\n  isKeywordNull(): boolean;\n  isKeywordUndefined(): boolean;\n  isKeywordTrue(): boolean;\n  isKeywordFalse(): boolean;\n  isKeywordThis(): boolean;\n  isError(): boolean;\n  toNumber(): number;\n  toString(): string | null;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "EOF",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/lexer.ts#L146-L146",
        "signature": "const EOF: Token;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "SplitInterpolation",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/parser.ts#L16-L18",
        "info": [],
        "signature": "class SplitInterpolation {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TemplateBindingParseResult",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/parser.ts#L20-L24",
        "info": [],
        "signature": "class TemplateBindingParseResult {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Parser",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/parser.ts#L40-L275",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "simpleExpressionChecker",
              "description": "",
              "type": "typeof SimpleExpressionChecker"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseAction",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L47-L58",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "location",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "absoluteOffset",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "interpolationConfig",
                      "description": "",
                      "type": "InterpolationConfig"
                    }
                  ]
                ],
                "signature": "parseAction(   input: string, location: any, absoluteOffset: number,   interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseBinding",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L60-L65",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "location",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "absoluteOffset",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "interpolationConfig",
                      "description": "",
                      "type": "InterpolationConfig"
                    }
                  ]
                ],
                "signature": "parseBinding(   input: string, location: any, absoluteOffset: number,   interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseSimpleBinding",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L73-L83",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "location",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "absoluteOffset",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "interpolationConfig",
                      "description": "",
                      "type": "InterpolationConfig"
                    }
                  ]
                ],
                "signature": "parseSimpleBinding(   input: string, location: string, absoluteOffset: number,   interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseTemplateBindings",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L147-L158",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Parse microsyntax template expression and return a list of bindings or\nparsing errors in case the given expression is invalid.\n\nFor example,\n```\n<div *ngFor=\"let item of items\">\n^      ^ absoluteValueOffset for `templateValue`\nabsoluteKeyOffset for `templateKey`\n```\ncontains three bindings:\n1. ngFor -> null\n2. item -> NgForOfContext.$implicit\n3. ngForOf -> items\n\nThis is apparent from the de-sugared template:\n```\n<ng-template ngFor let-item [ngForOf]=\"items\">\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "templateKey",
                      "description": "name of directive, without the * prefix. For example: ngIf, ngFor",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "templateValue",
                      "description": "RHS of the microsyntax attribute",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "templateUrl",
                      "description": "template filename if it's external, component filename if it's inline",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "absoluteKeyOffset",
                      "description": "start of the `templateKey`",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "absoluteValueOffset",
                      "description": "start of the `templateValue`",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "parseTemplateBindings(   templateKey: string, templateValue: string, templateUrl: string, absoluteKeyOffset: number,   absoluteValueOffset: number): TemplateBindingParseResult;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseInterpolation",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L160-L183",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "location",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "absoluteOffset",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "interpolationConfig",
                      "description": "",
                      "type": "InterpolationConfig"
                    }
                  ]
                ],
                "signature": "parseInterpolation(   input: string, location: any, absoluteOffset: number,   interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "splitInterpolation",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L185-L219",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "location",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "interpolationConfig",
                      "description": "",
                      "type": "InterpolationConfig"
                    }
                  ]
                ],
                "signature": "splitInterpolation(   input: string, location: string,   interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): SplitInterpolation   |null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "wrapLiteralPrimitive",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L221-L226",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "input",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "location",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "absoluteOffset",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "wrapLiteralPrimitive(input: string|null, location: any, absoluteOffset: number): ASTWithSource;"
              }
            }
          ]
        ],
        "signature": "class Parser {\n  simpleExpressionChecker = SimpleExpressionChecker;\n\n  parseAction(\n    input: string,\n    location: any,\n    absoluteOffset: number,\n    interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG\n  ): ASTWithSource;\n  parseBinding(\n    input: string,\n    location: any,\n    absoluteOffset: number,\n    interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG\n  ): ASTWithSource;\n  parseSimpleBinding(\n    input: string,\n    location: string,\n    absoluteOffset: number,\n    interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG\n  ): ASTWithSource;\n  parseTemplateBindings(\n    templateKey: string,\n    templateValue: string,\n    templateUrl: string,\n    absoluteKeyOffset: number,\n    absoluteValueOffset: number\n  ): TemplateBindingParseResult;\n  parseInterpolation(\n    input: string,\n    location: any,\n    absoluteOffset: number,\n    interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG\n  ): ASTWithSource | null;\n  splitInterpolation(\n    input: string,\n    location: string,\n    interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG\n  ): SplitInterpolation | null;\n  wrapLiteralPrimitive(\n    input: string | null,\n    location: any,\n    absoluteOffset: number\n  ): ASTWithSource;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "IvyParser",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/parser.ts#L277-L279",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "simpleExpressionChecker",
              "description": "",
              "type": "typeof IvySimpleExpressionChecker"
            }
          ]
        ],
        "signature": "class IvyParser extends Parser {\n  simpleExpressionChecker = IvySimpleExpressionChecker;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "_ParseAST",
    "overloads": [
      {
        "file": "packages/compiler/src/expression_parser/parser.ts#L281-L1031",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "index",
              "description": "",
              "type": "number"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "peek",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L299-L302",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "offset",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "peek(offset: number): Token;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "span",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L345-L347",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "start",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "span(start: number);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "sourceSpan",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L349-L355",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "start",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "sourceSpan(start: number): AbsoluteSourceSpan;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "advance",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L357-L359",
                "info": [],
                "signature": "advance();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "consumeOptionalCharacter",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L361-L368",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "code",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "consumeOptionalCharacter(code: number): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "peekKeywordLet",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L370-L372",
                "info": [],
                "signature": "peekKeywordLet(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "peekKeywordAs",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L373-L375",
                "info": [],
                "signature": "peekKeywordAs(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "expectCharacter",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L377-L380",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "code",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "expectCharacter(code: number);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "consumeOptionalOperator",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L382-L389",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "op",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "consumeOptionalOperator(op: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "expectOperator",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L391-L394",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "operator",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "expectOperator(operator: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "expectIdentifierOrKeyword",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L396-L404",
                "info": [],
                "signature": "expectIdentifierOrKeyword(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "expectIdentifierOrKeywordOrString",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L406-L414",
                "info": [],
                "signature": "expectIdentifierOrKeywordOrString(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseChain",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L416-L436",
                "info": [],
                "signature": "parseChain(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parsePipe",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L438-L460",
                "info": [],
                "signature": "parsePipe(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseExpression",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L462-L464",
                "info": [],
                "signature": "parseExpression(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseConditional",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L466-L485",
                "info": [],
                "signature": "parseConditional(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseLogicalOr",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L487-L496",
                "info": [],
                "signature": "parseLogicalOr(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseLogicalAnd",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L498-L507",
                "info": [],
                "signature": "parseLogicalAnd(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseEquality",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L509-L528",
                "info": [],
                "signature": "parseEquality(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseRelational",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L530-L549",
                "info": [],
                "signature": "parseRelational(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseAdditive",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L551-L568",
                "info": [],
                "signature": "parseAdditive(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseMultiplicative",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L570-L588",
                "info": [],
                "signature": "parseMultiplicative(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parsePrefix",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L590-L617",
                "info": [],
                "signature": "parsePrefix(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseCallChain",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L619-L657",
                "info": [],
                "signature": "parseCallChain(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parsePrimary",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L659-L719",
                "info": [],
                "signature": "parsePrimary(): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseExpressionList",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L721-L729",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "terminator",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "parseExpressionList(terminator: number): AST[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseLiteralMap",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L731-L749",
                "info": [],
                "signature": "parseLiteralMap(): LiteralMap;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseAccessMemberOrMethodCall",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L751-L791",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "receiver",
                      "description": "",
                      "type": "AST"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isSafe",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "parseAccessMemberOrMethodCall(receiver: AST, isSafe: boolean = false): AST;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseCallArguments",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L793-L800",
                "info": [],
                "signature": "parseCallArguments(): BindingPipe[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "expectTemplateBindingKey",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L806-L821",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Parses an identifier, a keyword, a string with an optional `-` in between,\nand returns the string along with its absolute source span.\n"
                    }
                  ]
                ],
                "signature": "expectTemplateBindingKey(): TemplateBindingIdentifier;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseTemplateBindings",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L844-L879",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Parse microsyntax template expression and return a list of bindings or\nparsing errors in case the given expression is invalid.\n\nFor example,\n```\n<div *ngFor=\"let item of items; index as i; trackBy: func\">\n```\ncontains five bindings:\n1. ngFor -> null\n2. item -> NgForOfContext.$implicit\n3. ngForOf -> items\n4. i -> NgForOfContext.index\n5. ngForTrackBy -> func\n\nFor a full description of the microsyntax grammar, see\nhttps://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "templateKey",
                      "description": "name of the microsyntax directive, like ngIf, ngFor,",
                      "type": "TemplateBindingIdentifier"
                    }
                  ]
                ],
                "signature": "parseTemplateBindings(templateKey: TemplateBindingIdentifier): TemplateBindingParseResult;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "error",
              "info": {
                "file": "packages/compiler/src/expression_parser/parser.ts#L993-L996",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "error(message: string, index: number|null = null);"
              }
            }
          ]
        ],
        "signature": "class _ParseAST {\n  index: number = 0;\n\n  peek(offset: number): Token;\n  span(start: number);\n  sourceSpan(start: number): AbsoluteSourceSpan;\n  advance();\n  consumeOptionalCharacter(code: number): boolean;\n  peekKeywordLet(): boolean;\n  peekKeywordAs(): boolean;\n  expectCharacter(code: number);\n  consumeOptionalOperator(op: string): boolean;\n  expectOperator(operator: string);\n  expectIdentifierOrKeyword(): string;\n  expectIdentifierOrKeywordOrString(): string;\n  parseChain(): AST;\n  parsePipe(): AST;\n  parseExpression(): AST;\n  parseConditional(): AST;\n  parseLogicalOr(): AST;\n  parseLogicalAnd(): AST;\n  parseEquality(): AST;\n  parseRelational(): AST;\n  parseAdditive(): AST;\n  parseMultiplicative(): AST;\n  parsePrefix(): AST;\n  parseCallChain(): AST;\n  parsePrimary(): AST;\n  parseExpressionList(terminator: number): AST[];\n  parseLiteralMap(): LiteralMap;\n  parseAccessMemberOrMethodCall(receiver: AST, isSafe: boolean = false): AST;\n  parseCallArguments(): BindingPipe[];\n  expectTemplateBindingKey(): TemplateBindingIdentifier;\n  parseTemplateBindings(\n    templateKey: TemplateBindingIdentifier\n  ): TemplateBindingParseResult;\n  error(message: string, index: number | null = null);\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "compiler",
    "name": "ErrorCollector",
    "overloads": [
      {
        "file": "packages/compiler/src/metadata_resolver.ts#L28-L28",
        "signature": "export type ErrorCollector = (error: any, type?: any) => void;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "ERROR_COMPONENT_TYPE",
    "overloads": [
      {
        "file": "packages/compiler/src/metadata_resolver.ts#L30-L30",
        "signature": "const ERROR_COMPONENT_TYPE: \"ngComponentType\";",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CompileMetadataResolver",
    "overloads": [
      {
        "file": "packages/compiler/src/metadata_resolver.ts#L39-L1215",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "getReflector",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L58-L60",
                "info": [],
                "signature": "getReflector(): CompileReflector;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCacheFor",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L62-L74",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type"
                    }
                  ]
                ],
                "signature": "clearCacheFor(type: Type);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCache",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L76-L84",
                "info": [],
                "signature": "clearCache(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getHostComponentViewClass",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L116-L118",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dirType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getHostComponentViewClass(dirType: any): StaticSymbol|cpl.ProxyClass;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getHostComponentType",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L120-L127",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dirType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getHostComponentType(dirType: any): StaticSymbol|cpl.ProxyClass;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getHostComponentMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L172-L219",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "compMeta",
                      "description": "",
                      "type": "cpl.CompileDirectiveMetadata"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "hostViewType",
                      "description": "",
                      "type": "StaticSymbol | cpl.ProxyClass"
                    }
                  ]
                ],
                "signature": "getHostComponentMetadata(   compMeta: cpl.CompileDirectiveMetadata,   hostViewType?: StaticSymbol|cpl.ProxyClass): cpl.CompileDirectiveMetadata;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "loadDirectiveMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L221-L285",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ngModuleType",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "directiveType",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isSync",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "loadDirectiveMetadata(ngModuleType: any, directiveType: any, isSync: boolean): SyncAsync<null>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getNonNormalizedDirectiveMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L287-L399",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "directiveType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getNonNormalizedDirectiveMetadata(directiveType: any):   {annotation: Directive, metadata: cpl.CompileDirectiveMetadata}|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getDirectiveMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L405-L415",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Gets the metadata for the given directive.\nThis assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "directiveType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getDirectiveMetadata(directiveType: any): cpl.CompileDirectiveMetadata;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getDirectiveSummary",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L417-L427",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dirType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getDirectiveSummary(dirType: any): cpl.CompileDirectiveSummary;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isDirective",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L429-L432",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "isDirective(type: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isAbstractDirective",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L434-L447",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "isAbstractDirective(type: any): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isPipe",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L449-L452",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "isPipe(type: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isNgModule",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L454-L457",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "isNgModule(type: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getNgModuleSummary",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L459-L471",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "alreadyCollecting",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getNgModuleSummary(moduleType: any, alreadyCollecting: Set<any>|null = null):   cpl.CompileNgModuleSummary|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "loadNgModuleDirectiveAndPipeMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L476-L490",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Loads the declared directives and pipes of an NgModule.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isSync",
                      "description": "",
                      "type": "boolean"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "throwIfNotFound",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "loadNgModuleDirectiveAndPipeMetadata(moduleType: any, isSync: boolean, throwIfNotFound = true):   Promise<any>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getShallowModuleMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L492-L510",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getShallowModuleMetadata(moduleType: any): cpl.CompileShallowModuleMetadata|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getNgModuleMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L512-L730",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "throwIfNotFound",
                      "description": "",
                      "type": "boolean"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "alreadyCollecting",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getNgModuleMetadata(   moduleType: any, throwIfNotFound = true,   alreadyCollecting: Set<any>|null = null): cpl.CompileNgModuleMetadata|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isInjectable",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L825-L828",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "isInjectable(type: any): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getInjectableSummary",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L830-L835",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getInjectableSummary(type: any): cpl.CompileTypeSummary;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getInjectableMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L837-L863",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dependencies",
                      "description": "",
                      "type": "any[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "throwOnUnknownDeps",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "getInjectableMetadata(   type: any, dependencies: any[]|null = null,   throwOnUnknownDeps: boolean = true): cpl.CompileInjectableMetadata|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getPipeMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L885-L895",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Gets the metadata for the given pipe.\nThis assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pipeType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getPipeMetadata(pipeType: any): cpl.CompilePipeMetadata|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getPipeSummary",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L897-L907",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pipeType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getPipeSummary(pipeType: any): cpl.CompilePipeSummary;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getOrLoadPipeMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L909-L915",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pipeType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getOrLoadPipeMetadata(pipeType: any): cpl.CompilePipeMetadata;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getProviderMetadata",
              "info": {
                "file": "packages/compiler/src/metadata_resolver.ts#L1128-L1156",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "provider",
                      "description": "",
                      "type": "cpl.ProviderMeta"
                    }
                  ]
                ],
                "signature": "getProviderMetadata(provider: cpl.ProviderMeta): cpl.CompileProviderMetadata;"
              }
            }
          ]
        ],
        "signature": "class CompileMetadataResolver {\n  getReflector(): CompileReflector;\n  clearCacheFor(type: Type);\n  clearCache(): void;\n  getHostComponentViewClass(dirType: any): StaticSymbol | cpl.ProxyClass;\n  getHostComponentType(dirType: any): StaticSymbol | cpl.ProxyClass;\n  getHostComponentMetadata(\n    compMeta: cpl.CompileDirectiveMetadata,\n    hostViewType?: StaticSymbol | cpl.ProxyClass\n  ): cpl.CompileDirectiveMetadata;\n  loadDirectiveMetadata(\n    ngModuleType: any,\n    directiveType: any,\n    isSync: boolean\n  ): SyncAsync<null>;\n  getNonNormalizedDirectiveMetadata(\n    directiveType: any\n  ): { annotation: Directive; metadata: cpl.CompileDirectiveMetadata } | null;\n  getDirectiveMetadata(directiveType: any): cpl.CompileDirectiveMetadata;\n  getDirectiveSummary(dirType: any): cpl.CompileDirectiveSummary;\n  isDirective(type: any);\n  isAbstractDirective(type: any): boolean;\n  isPipe(type: any);\n  isNgModule(type: any);\n  getNgModuleSummary(\n    moduleType: any,\n    alreadyCollecting: Set<any> | null = null\n  ): cpl.CompileNgModuleSummary | null;\n  loadNgModuleDirectiveAndPipeMetadata(\n    moduleType: any,\n    isSync: boolean,\n    throwIfNotFound = true\n  ): Promise<any>;\n  getShallowModuleMetadata(\n    moduleType: any\n  ): cpl.CompileShallowModuleMetadata | null;\n  getNgModuleMetadata(\n    moduleType: any,\n    throwIfNotFound = true,\n    alreadyCollecting: Set<any> | null = null\n  ): cpl.CompileNgModuleMetadata | null;\n  isInjectable(type: any): boolean;\n  getInjectableSummary(type: any): cpl.CompileTypeSummary;\n  getInjectableMetadata(\n    type: any,\n    dependencies: any[] | null = null,\n    throwOnUnknownDeps: boolean = true\n  ): cpl.CompileInjectableMetadata | null;\n  getPipeMetadata(pipeType: any): cpl.CompilePipeMetadata | null;\n  getPipeSummary(pipeType: any): cpl.CompilePipeSummary;\n  getOrLoadPipeMetadata(pipeType: any): cpl.CompilePipeMetadata;\n  getProviderMetadata(provider: cpl.ProviderMeta): cpl.CompileProviderMetadata;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "visitAll",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L96-L109",
        "signature": "function visitAll(visitor: Visitor, nodes: Node[], context: any = null): any[];",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "visitor",
              "description": "",
              "type": "Visitor"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "nodes",
              "description": "",
              "type": "Node[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "context",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "findNode",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L160-L178",
        "signature": "function findNode(nodes: Node[], position: number): HtmlAstPath;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "nodes",
              "description": "",
              "type": "Node[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "position",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "Node",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L13-L16",
        "signature": "interface Node {\n  sourceSpan: ParseSourceSpan;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "sourceSpan",
              "description": "",
              "type": "ParseSourceSpan"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "NodeWithI18n",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L18-L21",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L20-L20",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract visit(visitor: Visitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class NodeWithI18n implements Node {\n  abstract visit(visitor: Visitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Text",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L23-L30",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L27-L29",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: Visitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class Text extends NodeWithI18n {\n  visit(visitor: Visitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Expansion",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L32-L41",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L38-L40",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: Visitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class Expansion extends NodeWithI18n {\n  visit(visitor: Visitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ExpansionCase",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L43-L51",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L48-L50",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: Visitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class ExpansionCase implements Node {\n  visit(visitor: Visitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Attribute",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L53-L62",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L59-L61",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: Visitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class Attribute extends NodeWithI18n {\n  visit(visitor: Visitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Element",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L64-L74",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L71-L73",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: Visitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class Element extends NodeWithI18n {\n  visit(visitor: Visitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "Comment",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L76-L81",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visit",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L78-L80",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "visitor",
                      "description": "",
                      "type": "Visitor"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visit(visitor: Visitor, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class Comment implements Node {\n  visit(visitor: Visitor, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "Visitor",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L83-L94",
        "signature": "interface Visitor {}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "RecursiveVisitor",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L111-L143",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "visitElement",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L114-L119",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Element"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitElement(ast: Element, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitAttribute",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L121-L121",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Attribute"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitAttribute(ast: Attribute, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitText",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L122-L122",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Text"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitText(ast: Text, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitComment",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L123-L123",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Comment"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitComment(ast: Comment, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpansion",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L125-L129",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "Expansion"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpansion(ast: Expansion, context: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "visitExpansionCase",
              "info": {
                "file": "packages/compiler/src/ml_parser/ast.ts#L131-L131",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ast",
                      "description": "",
                      "type": "ExpansionCase"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "visitExpansionCase(ast: ExpansionCase, context: any): any;"
              }
            }
          ]
        ],
        "signature": "class RecursiveVisitor implements Visitor {\n  visitElement(ast: Element, context: any): any;\n  visitExpansion(ast: Expansion, context: any): any;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "compiler",
    "name": "HtmlAstPath",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/ast.ts#L145-L145",
        "signature": "export type HtmlAstPath = AstPath<Node>;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ParseTreeResult",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/parser.ts#L25-L27",
        "info": [],
        "signature": "class ParseTreeResult {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TreeError",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/parser.ts#L15-L23",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/compiler/src/ml_parser/parser.ts#L16-L18",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "elementName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "span",
                      "description": "",
                      "type": "ParseSourceSpan"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "msg",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "static create(elementName: string|null, span: ParseSourceSpan, msg: string): TreeError;"
              }
            }
          ]
        ],
        "signature": "class TreeError extends ParseError {\n  static create(\n    elementName: string | null,\n    span: ParseSourceSpan,\n    msg: string\n  ): TreeError;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "HtmlParser",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/html_parser.ts#L15-L23",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "parse",
              "info": {
                "file": "packages/compiler/src/ml_parser/html_parser.ts#L20-L22",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "source",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "TokenizeOptions"
                    }
                  ]
                ],
                "signature": "parse(source: string, url: string, options?: TokenizeOptions): ParseTreeResult;"
              }
            }
          ]
        ],
        "signature": "class HtmlParser extends Parser {\n  parse(\n    source: string,\n    url: string,\n    options?: TokenizeOptions\n  ): ParseTreeResult;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "getHtmlTagDefinition",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/html_tags.ts#L57-L115",
        "signature": "function getHtmlTagDefinition(tagName: string): HtmlTagDefinition;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "tagName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "HtmlTagDefinition",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/html_tags.ts#L11-L49",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "closedByParent",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "implicitNamespacePrefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "contentType",
              "description": "",
              "type": "TagContentType"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isVoid",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ignoreFirstLf",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "canSelfClose",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isClosedByChild",
              "info": {
                "file": "packages/compiler/src/ml_parser/html_tags.ts#L46-L48",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "isClosedByChild(name: string): boolean;"
              }
            }
          ]
        ],
        "signature": "class HtmlTagDefinition implements TagDefinition {\n  closedByParent: boolean = false;\n  implicitNamespacePrefix: string | null;\n  contentType: TagContentType;\n  isVoid: boolean;\n  ignoreFirstLf: boolean;\n  canSelfClose: boolean = false;\n\n  isClosedByChild(name: string): boolean;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "splitNsName",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L26-L38",
        "signature": "function splitNsName(elementName: string): [string | null, string];",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "elementName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "isNgContainer",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L41-L43",
        "signature": "function isNgContainer(tagName: string): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "tagName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "isNgContent",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L46-L48",
        "signature": "function isNgContent(tagName: string): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "tagName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "isNgTemplate",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L51-L53",
        "signature": "function isNgTemplate(tagName: string): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "tagName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "getNsPrefix",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L57-L59",
        "signature": "function getNsPrefix(fullName: string | null): string | null;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fullName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      },
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L55-L55",
        "signature": "function getNsPrefix(fullName: string): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fullName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      },
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L56-L56",
        "signature": "function getNsPrefix(fullName: null): null;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "fullName",
              "description": "",
              "type": "null"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "mergeNsAndName",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L61-L63",
        "signature": "function mergeNsAndName(prefix: string, localName: string): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "localName",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "TagContentType",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L9-L13",
        "signature": "export enum TagContentType {\n  RAW_TEXT,\n  ESCAPABLE_RAW_TEXT,\n  PARSABLE_DATA,\n}",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "TagDefinition",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L15-L24",
        "signature": "interface TagDefinition {\n  closedByParent: boolean;\n  implicitNamespacePrefix: string | null;\n  contentType: TagContentType;\n  isVoid: boolean;\n  ignoreFirstLf: boolean;\n  canSelfClose: boolean;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "closedByParent",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "implicitNamespacePrefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "contentType",
              "description": "",
              "type": "TagContentType"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isVoid",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ignoreFirstLf",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "canSelfClose",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "NAMED_ENTITIES",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L70-L323",
        "signature": "const NAMED_ENTITIES: { [k: string]: string };",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "NGSP_UNICODE",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/tags.ts#L327-L327",
        "signature": "const NGSP_UNICODE: \"\";",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "XmlParser",
    "overloads": [
      {
        "file": "packages/compiler/src/ml_parser/xml_parser.ts#L15-L23",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "parse",
              "info": {
                "file": "packages/compiler/src/ml_parser/xml_parser.ts#L20-L22",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "source",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "TokenizeOptions"
                    }
                  ]
                ],
                "signature": "parse(source: string, url: string, options?: TokenizeOptions): ParseTreeResult;"
              }
            }
          ]
        ],
        "signature": "class XmlParser extends Parser {\n  parse(\n    source: string,\n    url: string,\n    options?: TokenizeOptions\n  ): ParseTreeResult;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "debugOutputAstAsTypeScript",
    "overloads": [
      {
        "file": "packages/compiler/src/output/ts_emitter.ts#L12-L29",
        "signature": "function debugOutputAstAsTypeScript(\n  ast: o.Statement | o.Expression | o.Type | any[]\n): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "ast",
              "description": "",
              "type": "any[] | o.Statement | o.Expression | o.Type"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "compiler",
    "name": "ReferenceFilter",
    "overloads": [
      {
        "file": "packages/compiler/src/output/ts_emitter.ts#L31-L31",
        "signature": "export type ReferenceFilter = (reference: o.ExternalReference) => boolean;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TypeScriptEmitter",
    "overloads": [
      {
        "file": "packages/compiler/src/output/ts_emitter.ts#L33-L73",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "emitStatementsAndContext",
              "info": {
                "file": "packages/compiler/src/output/ts_emitter.ts#L34-L68",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "genFilePath",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmts",
                      "description": "",
                      "type": "o.Statement[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "preamble",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "emitSourceMaps",
                      "description": "",
                      "type": "boolean"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "referenceFilter",
                      "description": "",
                      "type": "ReferenceFilter"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "importFilter",
                      "description": "",
                      "type": "ReferenceFilter"
                    }
                  ]
                ],
                "signature": "emitStatementsAndContext(   genFilePath: string, stmts: o.Statement[], preamble: string = '',   emitSourceMaps: boolean = true, referenceFilter?: ReferenceFilter,   importFilter?: ReferenceFilter): {sourceText: string, context: EmitterVisitorContext};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "emitStatements",
              "info": {
                "file": "packages/compiler/src/output/ts_emitter.ts#L70-L72",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "genFilePath",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stmts",
                      "description": "",
                      "type": "o.Statement[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "preamble",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "emitStatements(genFilePath: string, stmts: o.Statement[], preamble: string = '');"
              }
            }
          ]
        ],
        "signature": "class TypeScriptEmitter implements OutputEmitter {\n  emitStatementsAndContext(\n    genFilePath: string,\n    stmts: o.Statement[],\n    preamble: string = \"\",\n    emitSourceMaps: boolean = true,\n    referenceFilter?: ReferenceFilter,\n    importFilter?: ReferenceFilter\n  ): { sourceText: string; context: EmitterVisitorContext };\n  emitStatements(\n    genFilePath: string,\n    stmts: o.Statement[],\n    preamble: string = \"\"\n  );\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "typeSourceSpan",
    "overloads": [
      {
        "file": "packages/compiler/src/parse_util.ts#L133-L140",
        "signature": "function typeSourceSpan(\n  kind: string,\n  type: CompileIdentifierMetadata\n): ParseSourceSpan;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "kind",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "CompileIdentifierMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "r3JitTypeSourceSpan",
    "overloads": [
      {
        "file": "packages/compiler/src/parse_util.ts#L150-L156",
        "signature": "function r3JitTypeSourceSpan(\n  kind: string,\n  typeName: string,\n  sourceUrl: string\n): ParseSourceSpan;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Generates Source Span object for a given R3 Type for JIT mode.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "kind",
              "description": "Component or Directive.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "typeName",
              "description": "name of the Component or Directive.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sourceUrl",
              "description": "reference to Component or Directive source.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "instance of ParseSourceSpan that represent a given Component or Directive.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ParseLocation",
    "overloads": [
      {
        "file": "packages/compiler/src/parse_util.ts#L11-L96",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/compiler/src/parse_util.ts#L16-L18",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "moveBy",
              "info": {
                "file": "packages/compiler/src/parse_util.ts#L20-L50",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "delta",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "moveBy(delta: number): ParseLocation;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getContext",
              "info": {
                "file": "packages/compiler/src/parse_util.ts#L54-L95",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "maxChars",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "maxLines",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "getContext(maxChars: number, maxLines: number): {before: string, after: string}|null;"
              }
            }
          ]
        ],
        "signature": "class ParseLocation {\n  toString(): string;\n  moveBy(delta: number): ParseLocation;\n  getContext(\n    maxChars: number,\n    maxLines: number\n  ): { before: string; after: string } | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ParseSourceFile",
    "overloads": [
      {
        "file": "packages/compiler/src/parse_util.ts#L98-L100",
        "info": [],
        "signature": "class ParseSourceFile {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ParseSourceSpan",
    "overloads": [
      {
        "file": "packages/compiler/src/parse_util.ts#L102-L109",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/compiler/src/parse_util.ts#L106-L108",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ParseSourceSpan {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "compiler",
    "name": "ParseErrorLevel",
    "overloads": [
      {
        "file": "packages/compiler/src/parse_util.ts#L111-L114",
        "signature": "export enum ParseErrorLevel {\n  WARNING,\n  ERROR,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "ParseError",
    "overloads": [
      {
        "file": "packages/compiler/src/parse_util.ts#L116-L131",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "contextualMessage",
              "info": {
                "file": "packages/compiler/src/parse_util.ts#L121-L125",
                "info": [],
                "signature": "contextualMessage(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/compiler/src/parse_util.ts#L127-L130",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ParseError {\n  contextualMessage(): string;\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "DomElementSchemaRegistry",
    "overloads": [
      {
        "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L243-L411",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "hasProperty",
              "info": {
                "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L287-L306",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tagName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "propName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "schemaMetas",
                      "description": "",
                      "type": "SchemaMetadata[]"
                    }
                  ]
                ],
                "signature": "hasProperty(tagName: string, propName: string, schemaMetas: SchemaMetadata[]): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasElement",
              "info": {
                "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L308-L325",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tagName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "schemaMetas",
                      "description": "",
                      "type": "SchemaMetadata[]"
                    }
                  ]
                ],
                "signature": "hasElement(tagName: string, schemaMetas: SchemaMetadata[]): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "securityContext",
              "info": {
                "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L337-L353",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "securityContext returns the security context for the given property on the given DOM tag.\n\nTag and property name are statically known and cannot change at runtime, i.e. it is not\npossible to bind a value into a changing attribute or tag name.\n\nThe filtering is based on a list of allowed tags|attributes. All attributes in the schema\nabove are assumed to have the 'NONE' security context, i.e. that they are safe inert\nstring values. Only specific well known attack vectors are assigned their appropriate context.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tagName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "propName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isAttribute",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "securityContext(tagName: string, propName: string, isAttribute: boolean): SecurityContext;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getMappedPropName",
              "info": {
                "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L355-L357",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "propName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getMappedPropName(propName: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getDefaultComponentElementName",
              "info": {
                "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L359-L361",
                "info": [],
                "signature": "getDefaultComponentElementName(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "validateProperty",
              "info": {
                "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L363-L373",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "validateProperty(name: string): {error: boolean, msg?: string};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "validateAttribute",
              "info": {
                "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L375-L383",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "validateAttribute(name: string): {error: boolean, msg?: string};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "allKnownElementNames",
              "info": {
                "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L385-L387",
                "info": [],
                "signature": "allKnownElementNames(): string[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "normalizeAnimationStyleProperty",
              "info": {
                "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L389-L391",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "propName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "normalizeAnimationStyleProperty(propName: string): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "normalizeAnimationStyleValue",
              "info": {
                "file": "packages/compiler/src/schema/dom_element_schema_registry.ts#L393-L410",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "camelCaseProp",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "userProvidedProp",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "val",
                      "description": "",
                      "type": "string | number"
                    }
                  ]
                ],
                "signature": "normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string|number):   {error: string, value: string};"
              }
            }
          ]
        ],
        "signature": "class DomElementSchemaRegistry extends ElementSchemaRegistry {\n  hasProperty(\n    tagName: string,\n    propName: string,\n    schemaMetas: SchemaMetadata[]\n  ): boolean;\n  hasElement(tagName: string, schemaMetas: SchemaMetadata[]): boolean;\n  securityContext(\n    tagName: string,\n    propName: string,\n    isAttribute: boolean\n  ): SecurityContext;\n  getMappedPropName(propName: string): string;\n  getDefaultComponentElementName(): string;\n  validateProperty(name: string): { error: boolean; msg?: string };\n  validateAttribute(name: string): { error: boolean; msg?: string };\n  allKnownElementNames(): string[];\n  normalizeAnimationStyleProperty(propName: string): string;\n  normalizeAnimationStyleValue(\n    camelCaseProp: string,\n    userProvidedProp: string,\n    val: string | number\n  ): { error: string; value: string };\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CssSelector",
    "overloads": [
      {
        "file": "packages/compiler/src/selector.ts#L42-L176",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A css selector contains an element name,\ncss classes and attribute/value pairs with the purpose\nof selecting subsets out of them.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "element",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classNames",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attrs",
              "description": "The selectors are encoded in pairs where:\n- even locations are attribute names\n- odd locations are attribute values.\n\nExample:\nSelector: `[key1=value1][key2]` would parse to:\n```\n['key1', 'value1', 'key2', '']\n```",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "notSelectors",
              "description": "",
              "type": "CssSelector[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parse",
              "info": {
                "file": "packages/compiler/src/selector.ts#L59-L114",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "selector",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "static parse(selector: string): CssSelector[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isElementSelector",
              "info": {
                "file": "packages/compiler/src/selector.ts#L116-L119",
                "info": [],
                "signature": "isElementSelector(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasElementSelector",
              "info": {
                "file": "packages/compiler/src/selector.ts#L121-L123",
                "info": [],
                "signature": "hasElementSelector(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setElement",
              "info": {
                "file": "packages/compiler/src/selector.ts#L125-L127",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "element",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "setElement(element: string|null = null);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getMatchingElementTemplate",
              "info": {
                "file": "packages/compiler/src/selector.ts#L130-L143",
                "info": [],
                "signature": "getMatchingElementTemplate(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getAttrs",
              "info": {
                "file": "packages/compiler/src/selector.ts#L145-L151",
                "info": [],
                "signature": "getAttrs(): string[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addAttribute",
              "info": {
                "file": "packages/compiler/src/selector.ts#L153-L155",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "addAttribute(name: string, value: string = '');"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addClassName",
              "info": {
                "file": "packages/compiler/src/selector.ts#L157-L159",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "addClassName(name: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/compiler/src/selector.ts#L161-L175",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class CssSelector {\n  element: string | null = null;\n  classNames: string[] = [];\n  attrs: string[] = [];\n  notSelectors: CssSelector[] = [];\n\n  static parse(selector: string): CssSelector[];\n  isElementSelector(): boolean;\n  hasElementSelector(): boolean;\n  setElement(element: string | null = null);\n  getMatchingElementTemplate(): string;\n  getAttrs(): string[];\n  addAttribute(name: string, value: string = \"\");\n  addClassName(name: string);\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "SelectorMatcher",
    "overloads": [
      {
        "file": "packages/compiler/src/selector.ts#L182-L385",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Reads a list of CssSelectors and allows to calculate which ones\nare contained in a given CssSelector.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createNotMatcher",
              "info": {
                "file": "packages/compiler/src/selector.ts#L183-L187",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "notSelectors",
                      "description": "",
                      "type": "CssSelector[]"
                    }
                  ]
                ],
                "signature": "static createNotMatcher(notSelectors: CssSelector[]): SelectorMatcher<null>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addSelectables",
              "info": {
                "file": "packages/compiler/src/selector.ts#L197-L206",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cssSelectors",
                      "description": "",
                      "type": "CssSelector[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callbackCtxt",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "addSelectables(cssSelectors: CssSelector[], callbackCtxt?: T);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "match",
              "info": {
                "file": "packages/compiler/src/selector.ts#L294-L341",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Find the objects that have been added via `addSelectable`\nwhose css selector is contained in the given css selector."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cssSelector",
                      "description": "A css selector",
                      "type": "CssSelector"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "matchedCallback",
                      "description": "This callback will be called with the object handed into `addSelectable`",
                      "type": "(c: CssSelector, a: T) => void"
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "boolean true if a match was found\n"
                    }
                  ]
                ],
                "signature": "match(cssSelector: CssSelector, matchedCallback: ((c: CssSelector, a: T) => void)|null): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_matchTerminal",
              "info": {
                "file": "packages/compiler/src/selector.ts#L344-L366",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "map",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cssSelector",
                      "description": "",
                      "type": "CssSelector"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "matchedCallback",
                      "description": "",
                      "type": "(c: CssSelector, a: any) => void"
                    }
                  ]
                ],
                "signature": "_matchTerminal(   map: Map<string, SelectorContext<T>[]>, name: string, cssSelector: CssSelector,   matchedCallback: ((c: CssSelector, a: any) => void)|null): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_matchPartial",
              "info": {
                "file": "packages/compiler/src/selector.ts#L369-L384",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "map",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cssSelector",
                      "description": "",
                      "type": "CssSelector"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "matchedCallback",
                      "description": "",
                      "type": "(c: CssSelector, a: any) => void"
                    }
                  ]
                ],
                "signature": "_matchPartial(   map: Map<string, SelectorMatcher<T>>, name: string, cssSelector: CssSelector,   matchedCallback: ((c: CssSelector, a: any) => void)|null): boolean;"
              }
            }
          ]
        ],
        "signature": "class SelectorMatcher<T = any> {\n  static createNotMatcher(notSelectors: CssSelector[]): SelectorMatcher<null>;\n  addSelectables(cssSelectors: CssSelector[], callbackCtxt?: T);\n  match(\n    cssSelector: CssSelector,\n    matchedCallback: ((c: CssSelector, a: T) => void) | null\n  ): boolean;\n  _matchTerminal(\n    map: Map<string, SelectorContext<T>[]>,\n    name: string,\n    cssSelector: CssSelector,\n    matchedCallback: ((c: CssSelector, a: any) => void) | null\n  ): boolean;\n  _matchPartial(\n    map: Map<string, SelectorMatcher<T>>,\n    name: string,\n    cssSelector: CssSelector,\n    matchedCallback: ((c: CssSelector, a: any) => void) | null\n  ): boolean;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "SelectorListContext",
    "overloads": [
      {
        "file": "packages/compiler/src/selector.ts#L388-L392",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "alreadyMatched",
              "description": "",
              "type": "boolean"
            }
          ]
        ],
        "signature": "class SelectorListContext {\n  alreadyMatched: boolean = false;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "SelectorContext",
    "overloads": [
      {
        "file": "packages/compiler/src/selector.ts#L395-L417",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "notSelectors",
              "description": "",
              "type": "CssSelector[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "finalize",
              "info": {
                "file": "packages/compiler/src/selector.ts#L403-L416",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cssSelector",
                      "description": "",
                      "type": "CssSelector"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callback",
                      "description": "",
                      "type": "(c: CssSelector, a: T) => void"
                    }
                  ]
                ],
                "signature": "finalize(cssSelector: CssSelector, callback: ((c: CssSelector, a: T) => void)|null): boolean;"
              }
            }
          ]
        ],
        "signature": "class SelectorContext<T = any> {\n  notSelectors: CssSelector[];\n\n  finalize(\n    cssSelector: CssSelector,\n    callback: ((c: CssSelector, a: T) => void) | null\n  ): boolean;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "HOST_ATTR",
    "overloads": [
      {
        "file": "packages/compiler/src/style_compiler.ts#L17-L17",
        "signature": "const HOST_ATTR: string;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "compiler",
    "name": "CONTENT_ATTR",
    "overloads": [
      {
        "file": "packages/compiler/src/style_compiler.ts#L18-L18",
        "signature": "const CONTENT_ATTR: string;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "StylesCompileDependency",
    "overloads": [
      {
        "file": "packages/compiler/src/style_compiler.ts#L20-L23",
        "info": [],
        "signature": "class StylesCompileDependency {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "CompiledStylesheet",
    "overloads": [
      {
        "file": "packages/compiler/src/style_compiler.ts#L25-L30",
        "info": [],
        "signature": "class CompiledStylesheet {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "StyleCompiler",
    "overloads": [
      {
        "file": "packages/compiler/src/style_compiler.ts#L32-L90",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "compileComponent",
              "info": {
                "file": "packages/compiler/src/style_compiler.ts#L37-L46",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "outputCtx",
                      "description": "",
                      "type": "OutputContext"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "comp",
                      "description": "",
                      "type": "CompileDirectiveMetadata"
                    }
                  ]
                ],
                "signature": "compileComponent(outputCtx: OutputContext, comp: CompileDirectiveMetadata): CompiledStylesheet;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compileStyles",
              "info": {
                "file": "packages/compiler/src/style_compiler.ts#L48-L53",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "outputCtx",
                      "description": "",
                      "type": "OutputContext"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "comp",
                      "description": "",
                      "type": "CompileDirectiveMetadata"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "stylesheet",
                      "description": "",
                      "type": "CompileStylesheetMetadata"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "shim",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "compileStyles(   outputCtx: OutputContext, comp: CompileDirectiveMetadata,   stylesheet: CompileStylesheetMetadata,   shim: boolean = this.needsStyleShim(comp)): CompiledStylesheet;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "needsStyleShim",
              "info": {
                "file": "packages/compiler/src/style_compiler.ts#L55-L57",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "comp",
                      "description": "",
                      "type": "CompileDirectiveMetadata"
                    }
                  ]
                ],
                "signature": "needsStyleShim(comp: CompileDirectiveMetadata): boolean;"
              }
            }
          ]
        ],
        "signature": "class StyleCompiler {\n  compileComponent(\n    outputCtx: OutputContext,\n    comp: CompileDirectiveMetadata\n  ): CompiledStylesheet;\n  compileStyles(\n    outputCtx: OutputContext,\n    comp: CompileDirectiveMetadata,\n    stylesheet: CompileStylesheetMetadata,\n    shim: boolean = this.needsStyleShim(comp)\n  ): CompiledStylesheet;\n  needsStyleShim(comp: CompileDirectiveMetadata): boolean;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "splitClasses",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_parser.ts#L851-L853",
        "signature": "function splitClasses(classAttrValue: string): string[];",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "classAttrValue",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "createElementCssSelector",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_parser.ts#L893-L912",
        "signature": "function createElementCssSelector(\n  elementName: string,\n  attributes: [string, string][]\n): CssSelector;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "elementName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attributes",
              "description": "",
              "type": "[string, string][]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "removeSummaryDuplicates",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_parser.ts#L921-L931",
        "signature": "function removeSummaryDuplicates<T extends { type: CompileTypeMetadata }>(\n  items: T[]\n): T[];",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "items",
              "description": "",
              "type": "T[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "isEmptyExpression",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_parser.ts#L933-L938",
        "signature": "function isEmptyExpression(ast: AST): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "ast",
              "description": "",
              "type": "AST"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TemplateParseError",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_parser.ts#L68-L72",
        "info": [],
        "signature": "class TemplateParseError extends ParseError {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TemplateParseResult",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_parser.ts#L74-L78",
        "info": [],
        "signature": "class TemplateParseResult {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "TemplateParser",
    "overloads": [
      {
        "file": "packages/compiler/src/template_parser/template_parser.ts#L80-L214",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "parse",
              "info": {
                "file": "packages/compiler/src/template_parser/template_parser.ts#L91-L112",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "component",
                      "description": "",
                      "type": "CompileDirectiveMetadata"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "template",
                      "description": "",
                      "type": "string | ParseTreeResult"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "directives",
                      "description": "",
                      "type": "CompileDirectiveSummary[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pipes",
                      "description": "",
                      "type": "CompilePipeSummary[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "schemas",
                      "description": "",
                      "type": "SchemaMetadata[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "templateUrl",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "preserveWhitespaces",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "parse(   component: CompileDirectiveMetadata, template: string|ParseTreeResult,   directives: CompileDirectiveSummary[], pipes: CompilePipeSummary[], schemas: SchemaMetadata[],   templateUrl: string,   preserveWhitespaces: boolean): {template: t.TemplateAst[], pipes: CompilePipeSummary[]};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "tryParse",
              "info": {
                "file": "packages/compiler/src/template_parser/template_parser.ts#L114-L131",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "component",
                      "description": "",
                      "type": "CompileDirectiveMetadata"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "template",
                      "description": "",
                      "type": "string | ParseTreeResult"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "directives",
                      "description": "",
                      "type": "CompileDirectiveSummary[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pipes",
                      "description": "",
                      "type": "CompilePipeSummary[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "schemas",
                      "description": "",
                      "type": "SchemaMetadata[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "templateUrl",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "preserveWhitespaces",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "tryParse(   component: CompileDirectiveMetadata, template: string|ParseTreeResult,   directives: CompileDirectiveSummary[], pipes: CompilePipeSummary[], schemas: SchemaMetadata[],   templateUrl: string, preserveWhitespaces: boolean): TemplateParseResult;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "tryParseHtml",
              "info": {
                "file": "packages/compiler/src/template_parser/template_parser.ts#L133-L175",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "htmlAstWithErrors",
                      "description": "",
                      "type": "ParseTreeResult"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "component",
                      "description": "",
                      "type": "CompileDirectiveMetadata"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "directives",
                      "description": "",
                      "type": "CompileDirectiveSummary[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pipes",
                      "description": "",
                      "type": "CompilePipeSummary[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "schemas",
                      "description": "",
                      "type": "SchemaMetadata[]"
                    }
                  ]
                ],
                "signature": "tryParseHtml(   htmlAstWithErrors: ParseTreeResult, component: CompileDirectiveMetadata,   directives: CompileDirectiveSummary[], pipes: CompilePipeSummary[],   schemas: SchemaMetadata[]): TemplateParseResult;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "expandHtml",
              "info": {
                "file": "packages/compiler/src/template_parser/template_parser.ts#L177-L187",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "htmlAstWithErrors",
                      "description": "",
                      "type": "ParseTreeResult"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "forced",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "expandHtml(htmlAstWithErrors: ParseTreeResult, forced: boolean = false): ParseTreeResult;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getInterpolationConfig",
              "info": {
                "file": "packages/compiler/src/template_parser/template_parser.ts#L189-L194",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "component",
                      "description": "",
                      "type": "CompileDirectiveMetadata"
                    }
                  ]
                ],
                "signature": "getInterpolationConfig(component: CompileDirectiveMetadata): InterpolationConfig|undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_assertNoReferenceDuplicationOnTemplate",
              "info": {
                "file": "packages/compiler/src/template_parser/template_parser.ts#L197-L213",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "result",
                      "description": "",
                      "type": "t.TemplateAst[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "errors",
                      "description": "",
                      "type": "TemplateParseError[]"
                    }
                  ]
                ],
                "signature": "_assertNoReferenceDuplicationOnTemplate(result: t.TemplateAst[], errors: TemplateParseError[]):   void;"
              }
            }
          ]
        ],
        "signature": "class TemplateParser {\n  parse(\n    component: CompileDirectiveMetadata,\n    template: string | ParseTreeResult,\n    directives: CompileDirectiveSummary[],\n    pipes: CompilePipeSummary[],\n    schemas: SchemaMetadata[],\n    templateUrl: string,\n    preserveWhitespaces: boolean\n  ): { template: t.TemplateAst[]; pipes: CompilePipeSummary[] };\n  tryParse(\n    component: CompileDirectiveMetadata,\n    template: string | ParseTreeResult,\n    directives: CompileDirectiveSummary[],\n    pipes: CompilePipeSummary[],\n    schemas: SchemaMetadata[],\n    templateUrl: string,\n    preserveWhitespaces: boolean\n  ): TemplateParseResult;\n  tryParseHtml(\n    htmlAstWithErrors: ParseTreeResult,\n    component: CompileDirectiveMetadata,\n    directives: CompileDirectiveSummary[],\n    pipes: CompilePipeSummary[],\n    schemas: SchemaMetadata[]\n  ): TemplateParseResult;\n  expandHtml(\n    htmlAstWithErrors: ParseTreeResult,\n    forced: boolean = false\n  ): ParseTreeResult;\n  getInterpolationConfig(\n    component: CompileDirectiveMetadata\n  ): InterpolationConfig | undefined;\n  _assertNoReferenceDuplicationOnTemplate(\n    result: t.TemplateAst[],\n    errors: TemplateParseError[]\n  ): void;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "compiler",
    "name": "compileInjectable",
    "overloads": [
      {
        "file": "packages/compiler/src/injectable_compiler_2.ts#L33-L126",
        "signature": "function compileInjectable(meta: R3InjectableMetadata): InjectableDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "meta",
              "description": "",
              "type": "R3InjectableMetadata"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "InjectableDef",
    "overloads": [
      {
        "file": "packages/compiler/src/injectable_compiler_2.ts#L14-L18",
        "signature": "interface InjectableDef {\n  expression: o.Expression;\n  type: o.Type;\n  statements: o.Statement[];\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "expression",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "o.Type"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "statements",
              "description": "",
              "type": "o.Statement[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3InjectableMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/injectable_compiler_2.ts#L20-L31",
        "signature": "interface R3InjectableMetadata {\n  name: string;\n  type: R3Reference;\n  internalType: o.Expression;\n  typeArgumentCount: number;\n  providedIn: o.Expression;\n  useClass?: o.Expression;\n  useFactory?: o.Expression;\n  useExisting?: o.Expression;\n  useValue?: o.Expression;\n  userDeps?: R3DependencyMetadata[];\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "R3Reference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "internalType",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "typeArgumentCount",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providedIn",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useClass",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useFactory",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useExisting",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useValue",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "userDeps",
              "description": "",
              "type": "R3DependencyMetadata[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3DirectiveMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/api.ts#L21-L118",
        "signature": "interface R3DirectiveMetadata {\n  name: string;\n  type: R3Reference;\n  internalType: o.Expression;\n  typeArgumentCount: number;\n  typeSourceSpan: ParseSourceSpan;\n  deps: R3DependencyMetadata[] | \"invalid\" | null;\n  selector: string | null;\n  queries: R3QueryMetadata[];\n  viewQueries: R3QueryMetadata[];\n  host: R3HostMetadata;\n  lifecycle: {\n    /**\n     * Whether the directive uses NgOnChanges.\n     */\n    usesOnChanges: boolean;\n  };\n  inputs: { [field: string]: string | [string, string] };\n  outputs: { [field: string]: string };\n  usesInheritance: boolean;\n  fullInheritance: boolean;\n  exportAs: string[] | null;\n  providers: o.Expression | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Information needed to compile a directive for the render3 runtime.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "Name of the directive type.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "An expression representing a reference to the directive itself.",
              "type": "R3Reference"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "internalType",
              "description": "An expression representing a reference to the directive being compiled, intended for use within\na class definition itself.\n\nThis can differ from the outer `type` if the class is being compiled by ngcc and is inside\nan IIFE structure that uses a different name internally.",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "typeArgumentCount",
              "description": "Number of generic type parameters of the type itself.",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "typeSourceSpan",
              "description": "A source span for the directive type.",
              "type": "ParseSourceSpan"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "deps",
              "description": "Dependencies of the directive's constructor.",
              "type": "R3DependencyMetadata[] | \"invalid\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "selector",
              "description": "Unparsed selector of the directive, or `null` if there was no selector.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queries",
              "description": "Information about the content queries made by the directive.",
              "type": "R3QueryMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewQueries",
              "description": "Information about the view queries made by the directive.",
              "type": "R3QueryMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "host",
              "description": "Mappings indicating how the directive interacts with its host element (host bindings,\nlisteners, etc).",
              "type": "R3HostMetadata"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "lifecycle",
              "description": "Information about usage of specific lifecycle events which require special treatment in the\ncode generator.",
              "type": "{ usesOnChanges: boolean; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "inputs",
              "description": "A mapping of input field names to the property names.",
              "type": "{ [field: string]: string | [string, string]; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "outputs",
              "description": "A mapping of output field names to the property names.",
              "type": "{ [field: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "usesInheritance",
              "description": "Whether or not the component or directive inherits from another class",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "fullInheritance",
              "description": "Whether or not the component or directive inherits its entire decorator from its base class.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportAs",
              "description": "Reference name under which to export the directive's type in a template,\nif any.",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "The list of providers defined in the directive.",
              "type": "o.Expression"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3ComponentMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/api.ts#L123-L207",
        "signature": "interface R3ComponentMetadata {\n  template: {\n    /**\n     * Parsed nodes of the template.\n     */\n    nodes: t.Node[];\n\n    /**\n     * Any ng-content selectors extracted from the template. Contains `null` when an ng-content\n     * element without selector is present.\n     */\n    ngContentSelectors: string[];\n  };\n  pipes: Map<string, o.Expression>;\n  directives: { selector: string; expression: o.Expression }[];\n  wrapDirectivesAndPipesInClosure: boolean;\n  styles: string[];\n  encapsulation: ViewEncapsulation;\n  animations: o.Expression | null;\n  viewProviders: o.Expression | null;\n  relativeContextFilePath: string;\n  i18nUseExternalIds: boolean;\n  interpolation: InterpolationConfig;\n  changeDetection?: ChangeDetectionStrategy;\n\n  // inherited from R3DirectiveMetadata\n  name: string;\n  type: R3Reference;\n  internalType: o.Expression;\n  typeArgumentCount: number;\n  typeSourceSpan: ParseSourceSpan;\n  deps: R3DependencyMetadata[] | \"invalid\" | null;\n  selector: string | null;\n  queries: R3QueryMetadata[];\n  viewQueries: R3QueryMetadata[];\n  host: R3HostMetadata;\n  lifecycle: {\n    /**\n     * Whether the directive uses NgOnChanges.\n     */\n    usesOnChanges: boolean;\n  };\n  inputs: { [field: string]: string | [string, string] };\n  outputs: { [field: string]: string };\n  usesInheritance: boolean;\n  fullInheritance: boolean;\n  exportAs: string[] | null;\n  providers: o.Expression | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Information needed to compile a component for the render3 runtime.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "template",
              "description": "Information about the component's template.",
              "type": "{ nodes: t.Node[]; ngContentSelectors: string[]; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipes",
              "description": "A map of pipe names to an expression referencing the pipe type which are in the scope of the\ncompilation.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "directives",
              "description": "A list of directive selectors and an expression referencing the directive type which are in the\nscope of the compilation.",
              "type": "{ selector: string; expression: o.Expression; }[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "wrapDirectivesAndPipesInClosure",
              "description": "Whether to wrap the 'directives' and/or `pipes` array, if one is generated, in a closure.\n\nThis is done when the directives or pipes contain forward references.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styles",
              "description": "A collection of styling data that will be applied and scoped to the component.",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "encapsulation",
              "description": "An encapsulation policy for the template and CSS styles. One of:\n- `ViewEncapsulation.Native`: Use shadow roots. This works only if natively available on the\n  platform (note that this is marked the as the \"deprecated shadow DOM\" as of Angular v6.1.\n- `ViewEncapsulation.Emulated`: Use shimmed CSS that emulates the native behavior.\n- `ViewEncapsulation.None`: Use global CSS without any encapsulation.\n- `ViewEncapsulation.ShadowDom`: Use the latest ShadowDOM API to natively encapsulate styles\ninto a shadow root.",
              "type": "ViewEncapsulation"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "animations",
              "description": "A collection of animation triggers that will be used in the component template.",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewProviders",
              "description": "The list of view providers defined in the component.",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "relativeContextFilePath",
              "description": "Path to the .ts file in which this template's generated code will be included, relative to\nthe compilation root. This will be used to generate identifiers that need to be globally\nunique in certain contexts (such as g3).",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "i18nUseExternalIds",
              "description": "Whether translation variable name should contain external message id\n(used by Closure Compiler's output of `goog.getMsg` for transition period).",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "interpolation",
              "description": "Overrides the default interpolation start and end delimiters ({{ and }}).",
              "type": "InterpolationConfig"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "changeDetection",
              "description": "Strategy used for detecting changes in the component.",
              "type": "ChangeDetectionStrategy"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3QueryMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/api.ts#L212-L254",
        "signature": "interface R3QueryMetadata {\n  propertyName: string;\n  first: boolean;\n  predicate: o.Expression | string[];\n  descendants: boolean;\n  read: o.Expression | null;\n  static: boolean;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Information needed to compile a query (view or content).\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "propertyName",
              "description": "Name of the property on the class to update with query results.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "first",
              "description": "Whether to read only the first matching result, or an array of results.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "Either an expression representing a type or `InjectionToken` for the query\npredicate, or a set of string selectors.",
              "type": "o.Expression | string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "descendants",
              "description": "Whether to include only direct children or all descendants.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "read",
              "description": "An expression representing a type to read from each matched node, or null if the default value\nfor a given node is to be returned.",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "static",
              "description": "Whether or not this query should collect only static results.\n\nIf static is true, the query's results will be set on the component after nodes are created,\nbut before change detection runs. This means that any results that relied upon change detection\nto run (e.g. results inside *ngIf or *ngFor views) will not be collected. Query results are\navailable in the ngOnInit hook.\n\nIf static is false, the query's results will be set on the component after change detection\nruns. This means that the query results can contain nodes inside *ngIf or *ngFor views, but\nthe results will not be available in the ngOnInit hook (only in the ngAfterContentInit for\ncontent hooks and ngAfterViewInit for view hooks).",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3DirectiveDef",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/api.ts#L259-L262",
        "signature": "interface R3DirectiveDef {\n  expression: o.Expression;\n  type: o.Type;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Output of render3 directive compilation.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "expression",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "o.Type"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3ComponentDef",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/api.ts#L267-L270",
        "signature": "interface R3ComponentDef {\n  expression: o.Expression;\n  type: o.Type;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Output of render3 component compilation.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "expression",
              "description": "",
              "type": "o.Expression"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "o.Type"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "R3HostMetadata",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/api.ts#L276-L293",
        "signature": "interface R3HostMetadata {\n  attributes: { [key: string]: o.Expression };\n  listeners: { [key: string]: string };\n  properties: { [key: string]: string };\n  specialAttributes: { styleAttr?: string; classAttr?: string };\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Mappings indicating how the class interacts with its\nhost element (host bindings, listeners, etc).\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributes",
              "description": "A mapping of attribute binding keys to `o.Expression`s.",
              "type": "{ [key: string]: o.Expression; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "listeners",
              "description": "A mapping of event binding keys to unparsed expressions.",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "properties",
              "description": "A mapping of property binding keys to unparsed expressions.",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "specialAttributes",
              "description": "",
              "type": "{ styleAttr?: string; classAttr?: string; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "Target",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/t2_api.ts#L25-L27",
        "signature": "interface Target {\n  template?: Node[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A logical target for analysis, which could contain a template or other types of bindings.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "template",
              "description": "",
              "type": "Node[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "DirectiveMeta",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/t2_api.ts#L33-L64",
        "signature": "interface DirectiveMeta {\n  name: string;\n  isComponent: boolean;\n  inputs: { [property: string]: string | [string, string] };\n  outputs: { [property: string]: string };\n  exportAs: string[] | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Metadata regarding a directive that's needed to match it against template elements. This is\nprovided by a consumer of the t2 APIs.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "Name of the directive class (used for debugging).",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isComponent",
              "description": "Whether the directive is a component.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "inputs",
              "description": "Set of inputs which this directive claims.\n\nGoes from property names to field names.",
              "type": "{ [property: string]: string | [string, string]; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "outputs",
              "description": "Set of outputs which this directive claims.\n\nGoes from property names to field names.",
              "type": "{ [property: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportAs",
              "description": "Name under which the directive is exported, if any (exportAs in Angular).\n\nNull otherwise",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "TargetBinder",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/t2_api.ts#L72-L74",
        "signature": "interface TargetBinder<D extends DirectiveMeta> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Interface to the binding API, which processes a template and returns an object similar to the\n`ts.TypeChecker`.\n\nThe returned `BoundTarget` has an API for extracting information about the processed target.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "compiler",
    "name": "BoundTarget",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/t2_api.ts#L84-L148",
        "signature": "interface BoundTarget<DirectiveT extends DirectiveMeta> {\n  readonly target: Target;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Result of performing the binding operation against a `Target`.\n\nThe original `Target` is accessible, as well as a suite of methods for extracting binding\ninformation regarding the `Target`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "DirectiveT",
              "description": "directive metadata type",
              "type": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "target",
              "description": "Get the original `Target` that was bound.",
              "type": "Target"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "R3TargetBinder",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/t2_binder.ts#L23-L54",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Processes `Target`s with a given set of directives and performs a binding operation, which\nreturns an object similar to TypeScript's `ts.TypeChecker` that contains knowledge about the\ntarget.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bind",
              "info": {
                "file": "packages/compiler/src/render3/view/t2_binder.ts#L30-L53",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Perform a binding operation on the given `Target` and return a `BoundTarget` which contains\nmetadata about the types referenced in the template.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "target",
                      "description": "",
                      "type": "Target"
                    }
                  ]
                ],
                "signature": "bind(target: Target): BoundTarget<DirectiveT>;"
              }
            }
          ]
        ],
        "signature": "class R3TargetBinder<DirectiveT extends DirectiveMeta>\n  implements TargetBinder<DirectiveT> {\n  bind(target: Target): BoundTarget<DirectiveT>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "compiler",
    "name": "R3BoundTarget",
    "overloads": [
      {
        "file": "packages/compiler/src/render3/view/t2_binder.ts#L508-L554",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Metadata container for a `Target` that allows queries for specific bits of metadata.\n\nSee `BoundTarget` for documentation on the individual methods.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getDirectivesOfNode",
              "info": {
                "file": "packages/compiler/src/render3/view/t2_binder.ts#L519-L521",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "",
                      "type": "Element | Template"
                    }
                  ]
                ],
                "signature": "getDirectivesOfNode(node: Element|Template): DirectiveT[]|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getReferenceTarget",
              "info": {
                "file": "packages/compiler/src/render3/view/t2_binder.ts#L523-L526",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ref",
                      "description": "",
                      "type": "Reference"
                    }
                  ]
                ],
                "signature": "getReferenceTarget(ref: Reference): {directive: DirectiveT, node: Element|Template}|Element   |Template|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getConsumerOfBinding",
              "info": {
                "file": "packages/compiler/src/render3/view/t2_binder.ts#L528-L531",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "binding",
                      "description": "",
                      "type": "BoundAttribute | BoundEvent | TextAttribute"
                    }
                  ]
                ],
                "signature": "getConsumerOfBinding(binding: BoundAttribute|BoundEvent|TextAttribute): DirectiveT|Element   |Template|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getExpressionTarget",
              "info": {
                "file": "packages/compiler/src/render3/view/t2_binder.ts#L533-L535",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "expr",
                      "description": "",
                      "type": "AST"
                    }
                  ]
                ],
                "signature": "getExpressionTarget(expr: AST): Reference|Variable|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getTemplateOfSymbol",
              "info": {
                "file": "packages/compiler/src/render3/view/t2_binder.ts#L537-L539",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "symbol",
                      "description": "",
                      "type": "Reference | Variable"
                    }
                  ]
                ],
                "signature": "getTemplateOfSymbol(symbol: Reference|Variable): Template|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getNestingLevel",
              "info": {
                "file": "packages/compiler/src/render3/view/t2_binder.ts#L541-L543",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "template",
                      "description": "",
                      "type": "Template"
                    }
                  ]
                ],
                "signature": "getNestingLevel(template: Template): number;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getUsedDirectives",
              "info": {
                "file": "packages/compiler/src/render3/view/t2_binder.ts#L545-L549",
                "info": [],
                "signature": "getUsedDirectives(): DirectiveT[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getUsedPipes",
              "info": {
                "file": "packages/compiler/src/render3/view/t2_binder.ts#L551-L553",
                "info": [],
                "signature": "getUsedPipes(): string[];"
              }
            }
          ]
        ],
        "signature": "class R3BoundTarget<DirectiveT extends DirectiveMeta>\n  implements BoundTarget<DirectiveT> {\n  getDirectivesOfNode(node: Element | Template): DirectiveT[] | null;\n  getReferenceTarget(\n    ref: Reference\n  ):\n    | { directive: DirectiveT; node: Element | Template }\n    | Element\n    | Template\n    | null;\n  getConsumerOfBinding(\n    binding: BoundAttribute | BoundEvent | TextAttribute\n  ): DirectiveT | Element | Template | null;\n  getExpressionTarget(expr: AST): Reference | Variable | null;\n  getTemplateOfSymbol(symbol: Reference | Variable): Template | null;\n  getNestingLevel(template: Template): number;\n  getUsedDirectives(): DirectiveT[];\n  getUsedPipes(): string[];\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "TypeDecorator",
    "overloads": [
      {
        "file": "packages/core/src/util/decorators.ts#L26-L37",
        "signature": "interface TypeDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An interface implemented by all Angular type decorators, which allows them to be used as\ndecorators as well as Angular syntax.\n\n```"
            }
          ],
          [
            "ng.Component({...})",
            {
              "__kind": "heading",
              "description": "\nclass MyClass {...}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "createPlatform",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L142-L153",
        "signature": "function createPlatform(injector: Injector): PlatformRef;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates a platform.\nPlatforms must be created on launch using this function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "injector",
              "description": "",
              "type": "Injector"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "assertPlatform",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L195-L208",
        "signature": "function assertPlatform(requiredToken: any): PlatformRef;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Checks that there is currently a platform that contains the given token as a provider.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "requiredToken",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "destroyPlatform",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L216-L220",
        "signature": "function destroyPlatform(): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Destroys the current Angular platform and all Angular applications on the page.\nDestroys all modules and listeners registered with the platform.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "getPlatform",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L227-L229",
        "signature": "function getPlatform(): PlatformRef | null;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns the current platform.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "PlatformRef",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L277-L423",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The Angular platform is the entry point for Angular on a web page.\nEach page has exactly one platform. Services (such as reflection) which are common\nto every Angular application running on the page are bound in its scope.\nA page's platform is initialized implicitly when a platform is created using a platform\nfactory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "bootstrapModuleFactory",
              "info": {
                "file": "packages/core/src/application_ref.ts#L308-L348",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates an instance of an `@NgModule` for the given platform for offline compilation.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\nThe following example creates the NgModule for a browser platform.\n\n```typescript\nmy_module.ts:\n"
                    }
                  ],
                  [
                    "NgModule({",
                    {
                      "__kind": "heading",
                      "description": "\nimports: [BrowserModule]\n})\nclass MyModule {}\n\nmain.ts:\nimport {MyModuleNgFactory} from './my_module.ngfactory';\nimport {platformBrowser} from '@angular/platform-browser';\n\nlet moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleFactory",
                      "description": "",
                      "type": "NgModuleFactory<M>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "BootstrapOptions"
                    }
                  ]
                ],
                "signature": "bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions):   Promise<NgModuleRef<M>>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bootstrapModule",
              "info": {
                "file": "packages/core/src/application_ref.ts#L366-L373",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Simple Example\n\n```typescript"
                    }
                  ],
                  [
                    "NgModule({",
                    {
                      "__kind": "heading",
                      "description": "\nimports: [BrowserModule]\n})\nclass MyModule {}\n\nlet moduleRef = platformBrowser().bootstrapModule(MyModule);\n```\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "Type<M>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "compilerOptions",
                      "description": "",
                      "type": "(CompilerOptions & BootstrapOptions) | (CompilerOptions & BootstrapOptions)[]"
                    }
                  ]
                ],
                "signature": "bootstrapModule<M>(   moduleType: Type<M>,   compilerOptions: (CompilerOptions&BootstrapOptions)|   Array<CompilerOptions&BootstrapOptions> = []): Promise<NgModuleRef<M>>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onDestroy",
              "info": {
                "file": "packages/core/src/application_ref.ts#L395-L397",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Registers a listener to be called when the platform is destroyed.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callback",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "onDestroy(callback: () => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "destroy",
              "info": {
                "file": "packages/core/src/application_ref.ts#L411-L418",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Destroys the current Angular platform and all Angular applications on the page.\nDestroys all modules and listeners registered with the platform.\n"
                    }
                  ]
                ],
                "signature": "destroy();"
              }
            }
          ]
        ],
        "signature": "class PlatformRef {\n  bootstrapModuleFactory<M>(\n    moduleFactory: NgModuleFactory<M>,\n    options?: BootstrapOptions\n  ): Promise<NgModuleRef<M>>;\n  bootstrapModule<M>(\n    moduleType: Type<M>,\n    compilerOptions:\n      | (CompilerOptions & BootstrapOptions)\n      | Array<CompilerOptions & BootstrapOptions> = []\n  ): Promise<NgModuleRef<M>>;\n  onDestroy(callback: () => void): void;\n  destroy();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ApplicationRef",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L562-L789",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A reference to an Angular application running on a page.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n{@a is-stable-examples}\n### isStable examples and caveats\n\nNote two important points about `isStable`, demonstrated in the examples below:\n- the application will never be stable if you start any kind\nof recurrent asynchronous task when the application starts\n(for example for a polling process, started with a `setInterval`, a `setTimeout`\nor using RxJS operators like `interval`);\n- the `isStable` Observable runs outside of the Angular zone.\n\nLet's imagine that you start a recurrent task\n(here incrementing a counter, using RxJS `interval`),\nand at the same time subscribe to `isStable`.\n\n```\nconstructor(appRef: ApplicationRef) {\nappRef.isStable.pipe(\nfilter(stable => stable)\n).subscribe(() => console.log('App is stable now');\ninterval(1000).subscribe(counter => console.log(counter));\n}\n```\nIn this example, `isStable` will never emit `true`,\nand the trace \"App is stable now\" will never get logged.\n\nIf you want to execute something when the app is stable,\nyou have to wait for the application to be stable\nbefore starting your polling process.\n\n```\nconstructor(appRef: ApplicationRef) {\nappRef.isStable.pipe(\nfirst(stable => stable),\ntap(stable => console.log('App is stable now')),\nswitchMap(() => interval(1000))\n).subscribe(counter => console.log(counter));\n}\n```\nIn this example, the trace \"App is stable now\" will be logged\nand then the counter starts incrementing every second.\n\nNote also that this Observable runs outside of the Angular zone,\nwhich means that the code in the subscription\nto this Observable will not trigger the change detection.\n\nLet's imagine that instead of logging the counter value,\nyou update a field of your component\nand display it in its template.\n\n```\nconstructor(appRef: ApplicationRef) {\nappRef.isStable.pipe(\nfirst(stable => stable),\nswitchMap(() => interval(1000))\n).subscribe(counter => this.value = counter);\n}\n```\nAs the `isStable` Observable runs outside the zone,\nthe `value` field will be updated properly,\nbut the template will not be refreshed!\n\nYou'll have to manually trigger the change detection to update the template.\n\n```\nconstructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\nappRef.isStable.pipe(\nfirst(stable => stable),\nswitchMap(() => interval(1000))\n).subscribe(counter => {\nthis.value = counter;\ncd.detectChanges();\n});\n}\n```\n\nOr make the subscription callback run inside the zone.\n\n```\nconstructor(appRef: ApplicationRef, zone: NgZone) {\nappRef.isStable.pipe(\nfirst(stable => stable),\nswitchMap(() => interval(1000))\n).subscribe(counter => zone.run(() => this.value = counter));\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentTypes",
              "description": "Get a list of component types registered to this application.\nThis list is populated even before the component is created.",
              "type": "Type<any>[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "components",
              "description": "Get a list of components registered to this application.",
              "type": "ComponentRef<any>[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isStable",
              "description": "Returns an Observable that indicates when the application is stable or unstable.",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bootstrap",
              "info": {
                "file": "packages/core/src/application_ref.ts#L671-L707",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Bootstrap a new component at the root level of the application.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Bootstrap process\n\nWhen bootstrapping a new root component into an application, Angular mounts the\nspecified application component onto DOM elements identified by the componentType's\nselector and kicks off automatic change detection to finish initializing the component.\n\nOptionally, a component can be mounted onto a DOM element that does not match the\ncomponentType's selector.\n\n### Example\n{@example core/ts/platform/platform.ts region='longform'}\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "componentOrFactory",
                      "description": "",
                      "type": "ComponentFactory<C> | Type<C>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rootSelectorOrNode",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "bootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>, rootSelectorOrNode?: string|any):   ComponentRef<C>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "tick",
              "info": {
                "file": "packages/core/src/application_ref.ts#L719-L740",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Invoke this method to explicitly process change detection and its side-effects.\n\nIn development mode, `tick()` also performs a second change detection cycle to ensure that no\nfurther changes are detected. If additional changes are picked up during this second cycle,\nbindings in the app have side-effects that cannot be resolved in a single change detection\npass.\nIn this case, Angular throws an error, since an Angular application can only have one change\ndetection pass during which all change detection must complete.\n"
                    }
                  ]
                ],
                "signature": "tick(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "attachView",
              "info": {
                "file": "packages/core/src/application_ref.ts#L747-L751",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Attaches a view so that it will be dirty checked.\nThe view will be automatically detached when it is destroyed.\nThis will throw if the view is already attached to a ViewContainer.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "viewRef",
                      "description": "",
                      "type": "ViewRef"
                    }
                  ]
                ],
                "signature": "attachView(viewRef: ViewRef): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "detachView",
              "info": {
                "file": "packages/core/src/application_ref.ts#L756-L760",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Detaches a view from dirty checking again.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "viewRef",
                      "description": "",
                      "type": "ViewRef"
                    }
                  ]
                ],
                "signature": "detachView(viewRef: ViewRef): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/core/src/application_ref.ts#L778-L781",
                "info": [],
                "signature": "ngOnDestroy();"
              }
            }
          ]
        ],
        "signature": "class ApplicationRef {\n  public readonly componentTypes: Type<any>[] = [];\n  public readonly components: ComponentRef<any>[] = [];\n  public readonly isStable!: Observable<boolean>;\n\n  bootstrap<C>(\n    componentOrFactory: ComponentFactory<C> | Type<C>,\n    rootSelectorOrNode?: string | any\n  ): ComponentRef<C>;\n  tick(): void;\n  attachView(viewRef: ViewRef): void;\n  detachView(viewRef: ViewRef): void;\n  ngOnDestroy();\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "createPlatformFactory",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L166-L188",
        "signature": "function createPlatformFactory(\n  parentPlatformFactory:\n    | ((extraProviders?: StaticProvider[]) => PlatformRef)\n    | null,\n  name: string,\n  providers: StaticProvider[] = []\n): (extraProviders?: StaticProvider[]) => PlatformRef;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates a factory for a platform. Can be used to provide or override `Providers` specific to\nyour applciation's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "parentPlatformFactory",
              "description": "Another platform factory to modify. Allows you to compose factories",
              "type": "(extraProviders?: StaticProvider[]) => PlatformRef"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "Identifies the new platform factory.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "providers",
              "description": "A set of dependency providers for platforms created with the new factory.",
              "type": "StaticProvider[]"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "NgProbeToken",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L132-L134",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A token for third-party components that can register themselves with NgProbe.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class NgProbeToken {}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "enableProdMode",
    "overloads": [
      {
        "file": "packages/core/src/util/is_dev_mode.ts#L43-L48",
        "signature": "function enableProdMode(): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Disable Angular's development mode, which turns off assertions and other\nchecks within the framework.\n\nOne important assertion this disables verifies that a change detection pass\ndoes not result in additional changes to any bindings (also known as\nunidirectional data flow).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "isDevMode",
    "overloads": [
      {
        "file": "packages/core/src/util/is_dev_mode.ts#L28-L31",
        "signature": "function isDevMode(): boolean;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns whether Angular is in development mode. After called once,\nthe value is locked and won't change any more.\n\nBy default, this is true, unless a user calls `enableProdMode` before calling this.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "APP_ID",
    "overloads": [
      {
        "file": "packages/core/src/application_tokens.ts#L24-L24",
        "signature": "const APP_ID: InjectionToken<string>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "PACKAGE_ROOT_URL",
    "overloads": [
      {
        "file": "packages/core/src/application_tokens.ts#L74-L74",
        "signature": "const PACKAGE_ROOT_URL: InjectionToken<string>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "PLATFORM_INITIALIZER",
    "overloads": [
      {
        "file": "packages/core/src/application_tokens.ts#L48-L48",
        "signature": "const PLATFORM_INITIALIZER: InjectionToken<(() => void)[]>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "PLATFORM_ID",
    "overloads": [
      {
        "file": "packages/core/src/application_tokens.ts#L54-L54",
        "signature": "const PLATFORM_ID: InjectionToken<Object>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "APP_BOOTSTRAP_LISTENER",
    "overloads": [
      {
        "file": "packages/core/src/application_tokens.ts#L66-L67",
        "signature": "const APP_BOOTSTRAP_LISTENER: InjectionToken<\n  ((compRef: ComponentRef<any>) => void)[]\n>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "APP_INITIALIZER",
    "overloads": [
      {
        "file": "packages/core/src/application_init.ts#L31-L31",
        "signature": "const APP_INITIALIZER: InjectionToken<(() => void)[]>;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ApplicationInitStatus",
    "overloads": [
      {
        "file": "packages/core/src/application_init.ts#L38-L90",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A class that reflects the state of running {@link APP_INITIALIZER} functions.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "donePromise",
              "description": "",
              "type": "Promise<any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "done",
              "description": "",
              "type": "false"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "runInitializers",
              "info": {
                "file": "packages/core/src/application_init.ts#L56-L89",
                "info": [],
                "signature": "runInitializers();"
              }
            }
          ]
        ],
        "signature": "class ApplicationInitStatus {\n  public readonly donePromise: Promise<any>;\n  public readonly done = false;\n\n  runInitializers();\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "DebugElement",
    "overloads": [
      {
        "file": "packages/core/src/debug/debug_node.ts#L80-L94",
        "signature": "interface DebugElement {\n  readonly name: string;\n  readonly properties: { [key: string]: any };\n  readonly attributes: { [key: string]: string | null };\n  readonly classes: { [key: string]: boolean };\n  readonly styles: { [key: string]: string | null };\n  readonly childNodes: DebugNode[];\n  readonly nativeElement: any;\n  readonly children: DebugElement[];\n\n  // inherited from DebugNode\n  readonly listeners: DebugEventListener[];\n  readonly parent: DebugElement | null;\n  readonly nativeNode: any;\n  readonly injector: Injector;\n  readonly componentInstance: any;\n  readonly context: any;\n  readonly references: { [key: string]: any };\n  readonly providerTokens: any[];\n}",
        "info": [
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "properties",
              "description": "",
              "type": "{ [key: string]: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributes",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "classes",
              "description": "",
              "type": "{ [key: string]: boolean; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styles",
              "description": "",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "childNodes",
              "description": "",
              "type": "DebugNode[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "nativeElement",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "children",
              "description": "",
              "type": "DebugElement[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "DebugEventListener",
    "overloads": [
      {
        "file": "packages/core/src/debug/debug_node.ts#L25-L27",
        "info": [["publicApi", { "__kind": "heading", "description": "\n" }]],
        "signature": "class DebugEventListener {}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "DebugNode",
    "overloads": [
      {
        "file": "packages/core/src/debug/debug_node.ts#L32-L41",
        "signature": "interface DebugNode {\n  readonly listeners: DebugEventListener[];\n  readonly parent: DebugElement | null;\n  readonly nativeNode: any;\n  readonly injector: Injector;\n  readonly componentInstance: any;\n  readonly context: any;\n  readonly references: { [key: string]: any };\n  readonly providerTokens: any[];\n}",
        "info": [
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "listeners",
              "description": "",
              "type": "DebugEventListener[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "parent",
              "description": "",
              "type": "DebugElement"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "nativeNode",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "injector",
              "description": "",
              "type": "Injector"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentInstance",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "context",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "references",
              "description": "",
              "type": "{ [key: string]: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providerTokens",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "asNativeElements",
    "overloads": [
      {
        "file": "packages/core/src/debug/debug_node.ts#L184-L186",
        "signature": "function asNativeElements(debugEls: DebugElement[]): any;",
        "info": [
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "debugEls",
              "description": "",
              "type": "DebugElement[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "getDebugNode",
    "overloads": [
      {
        "file": "packages/core/src/debug/debug_node.ts#L745-L745",
        "signature": "const getDebugNode: (nativeNode: any) => DebugNode | null;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Predicate",
    "overloads": [
      {
        "file": "packages/core/src/debug/debug_node.ts#L777-L779",
        "signature": "interface Predicate<T> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A boolean-valued function over a value, possibly including context information\nregarding that value's position in an array.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "GetTestability",
    "overloads": [
      {
        "file": "packages/core/src/testability/testability.ts#L305-L309",
        "signature": "interface GetTestability {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Adapter interface for retrieving the `Testability` service associated for a\nparticular context.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "Testability",
    "overloads": [
      {
        "file": "packages/core/src/testability/testability.ts#L57-L227",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The Testability service provides testing hooks that can be accessed from\nthe browser and by services such as Protractor. Each bootstrapped Angular\napplication on the page will have an instance of Testability."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "increasePendingRequestCount",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L105-L109",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Increases the number of pending request"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "pending requests are now tracked with zones.\n"
                    }
                  ]
                ],
                "signature": "increasePendingRequestCount(): number;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "decreasePendingRequestCount",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L115-L122",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Decreases the number of pending request"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "pending requests are now tracked with zones\n"
                    }
                  ]
                ],
                "signature": "decreasePendingRequestCount(): number;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isStable",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L127-L129",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Whether an associated application is stable\n"
                    }
                  ]
                ],
                "signature": "isStable(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "whenStable",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L198-L207",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Wait for the application to be stable with a timeout. If the timeout is reached before that\nhappens, the callback receives a list of the macro tasks that were pending, otherwise null.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "doneCb",
                      "description": "The callback to invoke when Angular is stable or the timeout expires",
                      "type": "Function"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "timeout",
                      "description": "Optional. The maximum time to wait for Angular to become stable. If not",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "updateCb",
                      "description": "Optional. If specified, this callback will be invoked whenever the set of",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getPendingRequestCount",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L213-L215",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get the number of pending requests"
                    }
                  ],
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "pending requests are now tracked with zones\n"
                    }
                  ]
                ],
                "signature": "getPendingRequestCount(): number;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "findProviders",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L223-L226",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Find providers by name"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "using",
                      "description": "The root element to search from",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "provider",
                      "description": "The name of binding variable",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "exactMatch",
                      "description": "Whether using exactMatch",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "findProviders(using: any, provider: string, exactMatch: boolean): any[];"
              }
            }
          ]
        ],
        "signature": "class Testability implements PublicTestability {\n  increasePendingRequestCount(): number;\n  decreasePendingRequestCount(): number;\n  isStable(): boolean;\n  whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void;\n  getPendingRequestCount(): number;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "TestabilityRegistry",
    "overloads": [
      {
        "file": "packages/core/src/testability/testability.ts#L233-L297",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A global registry of {@link Testability} instances for specific elements."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_applications",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerApplication",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L247-L249",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Registers an application with a testability hook so that it can be tracked"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "token",
                      "description": "token of application, root element",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "testability",
                      "description": "Testability hook",
                      "type": "Testability"
                    }
                  ]
                ],
                "signature": "registerApplication(token: any, testability: Testability);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "unregisterApplication",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L255-L257",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Unregisters an application."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "token",
                      "description": "token of application, root element",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "unregisterApplication(token: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "unregisterAllApplications",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L262-L264",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Unregisters all applications\n"
                    }
                  ]
                ],
                "signature": "unregisterAllApplications();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getTestability",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L270-L272",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get a testability hook associated with the application"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "elem",
                      "description": "root element",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getTestability(elem: any): Testability|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getAllTestabilities",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L277-L279",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get all registered testabilities\n"
                    }
                  ]
                ],
                "signature": "getAllTestabilities(): Testability[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getAllRootElements",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L284-L286",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get all registered applications(root elements)\n"
                    }
                  ]
                ],
                "signature": "getAllRootElements(): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "findTestabilityInTree",
              "info": {
                "file": "packages/core/src/testability/testability.ts#L294-L296",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Find testability of a node in the Tree"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "elem",
                      "description": "node",
                      "type": "Node"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "findInAncestors",
                      "description": "whether finding testability in ancestors if testability was not found in",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "findTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability|null;"
              }
            }
          ]
        ],
        "signature": "class TestabilityRegistry {\n  _applications = new Map<any, Testability>();\n\n  registerApplication(token: any, testability: Testability);\n  unregisterApplication(token: any);\n  unregisterAllApplications();\n  getTestability(elem: any): Testability | null;\n  getAllTestabilities(): Testability[];\n  getAllRootElements(): any[];\n  findTestabilityInTree(\n    elem: Node,\n    findInAncestors: boolean = true\n  ): Testability | null;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "setTestabilityGetter",
    "overloads": [
      {
        "file": "packages/core/src/testability/testability.ts#L323-L325",
        "signature": "function setTestabilityGetter(getter: GetTestability): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Set the {@link GetTestability} implementation used by the Angular testing framework."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "getter",
              "description": "",
              "type": "GetTestability"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "TRANSLATIONS",
    "overloads": [
      {
        "file": "packages/core/src/i18n/tokens.ts#L99-L99",
        "signature": "const TRANSLATIONS: InjectionToken<string>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "TRANSLATIONS_FORMAT",
    "overloads": [
      {
        "file": "packages/core/src/i18n/tokens.ts#L122-L122",
        "signature": "const TRANSLATIONS_FORMAT: InjectionToken<string>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "LOCALE_ID",
    "overloads": [
      {
        "file": "packages/core/src/i18n/tokens.ts#L33-L33",
        "signature": "const LOCALE_ID: InjectionToken<string>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "DEFAULT_CURRENCY_CODE",
    "overloads": [
      {
        "file": "packages/core/src/i18n/tokens.ts#L73-L73",
        "signature": "const DEFAULT_CURRENCY_CODE: InjectionToken<string>;",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "MissingTranslationStrategy",
    "overloads": [
      {
        "file": "packages/core/src/i18n/tokens.ts#L147-L151",
        "signature": "export enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\nthat the compiler should use in case of missing translations:\n- Error: throw if you have missing translations.\n- Warning (default): show a warning in the console and/or shell.\n- Ignore: do nothing.\n\nSee the [i18n guide](guide/i18n#missing-translation) for more information.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Example\n```typescript\nimport { MissingTranslationStrategy } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule, {\nmissingTranslation: MissingTranslationStrategy.Error\n});\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ApplicationModule",
    "overloads": [
      {
        "file": "packages/core/src/application_module.ts#L132-L136",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the root injector for an app with\nproviders of `@angular/core` dependencies that `ApplicationRef` needs\nto bootstrap components.\n\nRe-exported by `BrowserModule`, which is included automatically in the root\n`AppModule` when you create a new app with the CLI `new` command.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class ApplicationModule {}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "AbstractType",
    "overloads": [
      {
        "file": "packages/core/src/interface/type.ts#L33-L35",
        "signature": "interface AbstractType<T> {\n  prototype: T;\n\n  // inherited from Function\n  prototype: any;\n  readonly length: number;\n  arguments: any;\n  caller: Function;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nRepresents an abstract class `T`, if applied to a concrete class it would stop being\ninstantiatable.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "prototype",
              "description": "",
              "type": "T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "Type",
    "overloads": [
      {
        "file": "packages/core/src/interface/type.ts#L19-L19",
        "signature": "const Type: FunctionConstructor;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "EventEmitter",
    "overloads": [
      {
        "file": "packages/core/src/event_emitter.ts#L64-L93",
        "signature": "interface EventEmitter<T> {\n  __isAsync: boolean;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Use in components with the `@Output` directive to emit custom events\nsynchronously or asynchronously, and register handlers for those events\nby subscribing to an instance.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nExtends\n[RxJS `Subject`](https://rxjs.dev/api/index/class/Subject)\nfor Angular by adding the `emit()` method.\n\nIn the following example, a component defines two output properties\nthat create event emitters. When the title is clicked, the emitter\nemits an open or close event to toggle the current visibility state.\n\n```html"
            }
          ],
          [
            "Component({",
            {
              "__kind": "heading",
              "description": "\nselector: 'zippy',\ntemplate: `\n<div class=\"zippy\">\n<div (click)=\"toggle()\">Toggle</div>\n<div [hidden]=\"!visible\">\n<ng-content></ng-content>\n</div>\n</div>`})\nexport class Zippy {\nvisible: boolean = true;"
            }
          ],
          [
            "Output()",
            {
              "__kind": "heading",
              "description": "open: EventEmitter<any> = new EventEmitter();"
            }
          ],
          [
            "Output()",
            {
              "__kind": "heading",
              "description": "close: EventEmitter<any> = new EventEmitter();\n\ntoggle() {\nthis.visible = !this.visible;\nif (this.visible) {\nthis.open.emit(null);\n} else {\nthis.close.emit(null);\n}\n}\n}\n```\n\nAccess the event object with the `$event` argument passed to the output event\nhandler:\n\n```html\n<zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n```\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Observables in Angular](guide/observables-in-angular)"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "__isAsync",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ErrorHandler",
    "overloads": [
      {
        "file": "packages/core/src/error_handler.ts#L38-L79",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Provides a hook for centralized exception handling.\n\nThe default implementation of `ErrorHandler` prints error messages to the `console`. To\nintercept error handling, write a custom exception handler that replaces this default as\nappropriate for your app.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Example\n\n```\nclass MyErrorHandler implements ErrorHandler {\nhandleError(error) {\n// do something with the exception\n}\n}\n"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nproviders: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n})\nclass MyModule {}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_console",
              "description": "",
              "type": "Console"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "handleError",
              "info": {
                "file": "packages/core/src/error_handler.ts#L44-L58",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "handleError(error: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_findContext",
              "info": {
                "file": "packages/core/src/error_handler.ts#L61-L68",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "_findContext(error: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_findOriginalError",
              "info": {
                "file": "packages/core/src/error_handler.ts#L71-L78",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "Error"
                    }
                  ]
                ],
                "signature": "_findOriginalError(error: Error): any;"
              }
            }
          ]
        ],
        "signature": "class ErrorHandler {\n  _console: Console = console;\n\n  handleError(error: any): void;\n  _findContext(error: any): any;\n  _findOriginalError(error: Error): any;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "SecurityContext",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/security.ts#L18-L25",
        "signature": "export enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\nlike `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\nhandled.\n\nSee DomSanitizer for more details on security in Angular applications.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "Sanitizer",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/sanitizer.ts#L17-L25",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Sanitizer is used by the views to sanitize potentially dangerous values.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵprov",
              "description": "",
              "type": "never"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "sanitize",
              "info": {
                "file": "packages/core/src/sanitization/sanitizer.ts#L18-L18",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "SecurityContext"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string | {}"
                    }
                  ]
                ],
                "signature": "abstract sanitize(context: SecurityContext, value: {}|string|null): string|null;"
              }
            }
          ]
        ],
        "signature": "class Sanitizer {\n  static ɵprov = ɵɵdefineInjectable({\n    token: Sanitizer,\n    providedIn: \"root\",\n    factory: () => null,\n  });\n\n  abstract sanitize(\n    context: SecurityContext,\n    value: {} | string | null\n  ): string | null;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Attribute",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L270-L275",
        "signature": "interface Attribute {\n  attributeName?: string;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Attribute metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "attributeName",
              "description": "The name of the attribute whose value can be injected.",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "AfterContentChecked",
    "overloads": [
      {
        "file": "packages/core/src/interface/lifecycle_hooks.ts#L171-L178",
        "signature": "interface AfterContentChecked {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA lifecycle hook that is called after the default change detector has\ncompleted checking all content of a directive.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`AfterViewChecked`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Lifecycle hooks guide](guide/lifecycle-hooks)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following snippet shows how a component can implement this interface to\ndefine its own after-check functionality.\n\n{@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "AfterContentInit",
    "overloads": [
      {
        "file": "packages/core/src/interface/lifecycle_hooks.ts#L145-L153",
        "signature": "interface AfterContentInit {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA lifecycle hook that is called after Angular has fully initialized\nall content of a directive.\nDefine an `ngAfterContentInit()` method to handle any additional initialization tasks.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`OnInit`" }],
          ["see", { "__kind": "heading", "description": "`AfterViewInit`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Lifecycle hooks guide](guide/lifecycle-hooks)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following snippet shows how a component can implement this interface to\ndefine its own content initialization method.\n\n{@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "AfterViewChecked",
    "overloads": [
      {
        "file": "packages/core/src/interface/lifecycle_hooks.ts#L224-L231",
        "signature": "interface AfterViewChecked {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA lifecycle hook that is called after the default change detector has\ncompleted checking a component's view for changes.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`AfterContentChecked`" }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Lifecycle hooks guide](guide/lifecycle-hooks)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following snippet shows how a component can implement this interface to\ndefine its own after-check functionality.\n\n{@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "AfterViewInit",
    "overloads": [
      {
        "file": "packages/core/src/interface/lifecycle_hooks.ts#L198-L206",
        "signature": "interface AfterViewInit {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA lifecycle hook that is called after Angular has fully initialized\na component's view.\nDefine an `ngAfterViewInit()` method to handle any additional initialization tasks.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`OnInit`" }],
          ["see", { "__kind": "heading", "description": "`AfterContentInit`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Lifecycle hooks guide](guide/lifecycle-hooks)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following snippet shows how a component can implement this interface to\ndefine its own view initialization method.\n\n{@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "DoCheck",
    "overloads": [
      {
        "file": "packages/core/src/interface/lifecycle_hooks.ts#L94-L103",
        "signature": "interface DoCheck {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A lifecycle hook that invokes a custom change-detection function for a directive,\nin addition to the check performed by the default change-detector.\n\nThe default change-detection algorithm looks for differences by comparing\nbound-property values by reference across change detection runs. You can use this\nhook to check for and respond to changes by some other means.\n\nWhen the default change detector detects changes, it invokes `ngOnChanges()` if supplied,\nregardless of whether you perform additional change detection.\nTypically, you should not use both `DoCheck` and `OnChanges` to respond to\nchanges on the same input.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`OnChanges`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Lifecycle hooks guide](guide/lifecycle-hooks)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following snippet shows how a component can implement this interface\nto invoke it own change-detection cycle.\n\n{@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n\nFor a more complete example and discussion, see\n[Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "OnChanges",
    "overloads": [
      {
        "file": "packages/core/src/interface/lifecycle_hooks.ts#L28-L37",
        "signature": "interface OnChanges {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA lifecycle hook that is called when any data-bound property of a directive changes.\nDefine an `ngOnChanges()` method to handle the changes.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`DoCheck`" }],
          ["see", { "__kind": "heading", "description": "`OnInit`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Lifecycle hooks guide](guide/lifecycle-hooks)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following snippet shows how a component can implement this interface to\ndefine an on-changes handler for an input property.\n\n{@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "OnDestroy",
    "overloads": [
      {
        "file": "packages/core/src/interface/lifecycle_hooks.ts#L119-L125",
        "signature": "interface OnDestroy {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A lifecycle hook that is called when a directive, pipe, or service is destroyed.\nUse for any custom cleanup that needs to occur when the\ninstance is destroyed."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Lifecycle hooks guide](guide/lifecycle-hooks)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following snippet shows how a component can implement this interface\nto define its own custom clean-up method.\n\n{@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "OnInit",
    "overloads": [
      {
        "file": "packages/core/src/interface/lifecycle_hooks.ts#L56-L65",
        "signature": "interface OnInit {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA lifecycle hook that is called after Angular has initialized\nall data-bound properties of a directive.\nDefine an `ngOnInit()` method to handle any additional initialization tasks.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`AfterContentInit`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Lifecycle hooks guide](guide/lifecycle-hooks)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThe following snippet shows how a component can implement this interface to\ndefine its own initialization method.\n\n{@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ANALYZE_FOR_ENTRY_COMPONENTS",
    "overloads": [
      {
        "file": "packages/core/src/metadata/di.ts#L50-L50",
        "signature": "const ANALYZE_FOR_ENTRY_COMPONENTS: InjectionToken<any>;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ContentChild",
    "overloads": [
      {
        "file": "packages/core/src/metadata/di.ts#L234-L234",
        "signature": "export type ContentChild = Query;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the ContentChild metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ContentChildDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/di.ts#L193-L227",
        "signature": "interface ContentChildDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the ContentChild decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ContentChildren",
    "overloads": [
      {
        "file": "packages/core/src/metadata/di.ts#L173-L173",
        "signature": "export type ContentChildren = Query;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the ContentChildren metadata.\n\n"
            }
          ],
          ["Annotation", { "__kind": "heading", "description": "" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ContentChildrenDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/di.ts#L126-L164",
        "signature": "interface ContentChildrenDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the ContentChildren decorator / constructor function.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`ContentChildren`." }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Query",
    "overloads": [
      {
        "file": "packages/core/src/metadata/di.ts#L99-L106",
        "signature": "interface Query {\n  descendants: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n  static?: boolean;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Query metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "descendants",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "first",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "read",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isViewQuery",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "static",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ViewChild",
    "overloads": [
      {
        "file": "packages/core/src/metadata/di.ts#L362-L362",
        "signature": "export type ViewChild = Query;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the ViewChild metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ViewChildDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/di.ts#L312-L355",
        "signature": "interface ViewChildDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the ViewChild decorator / constructor function.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`ViewChild`." }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ViewChildren",
    "overloads": [
      {
        "file": "packages/core/src/metadata/di.ts#L292-L292",
        "signature": "export type ViewChildren = Query;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the ViewChildren metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ViewChildrenDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/di.ts#L257-L285",
        "signature": "interface ViewChildrenDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the ViewChildren decorator / constructor function.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`ViewChildren`.\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Component",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L457-L557",
        "signature": "interface Component {\n  changeDetection?: ChangeDetectionStrategy;\n  viewProviders?: Provider[];\n  moduleId?: string;\n  templateUrl?: string;\n  template?: string;\n  styleUrls?: string[];\n  styles?: string[];\n  animations?: any[];\n  encapsulation?: ViewEncapsulation;\n  interpolation?: [string, string];\n  entryComponents?: Array<Type<any> | any[]>;\n  preserveWhitespaces?: boolean;\n\n  // inherited from Directive\n  selector?: string;\n  inputs?: string[];\n  outputs?: string[];\n  providers?: Provider[];\n  exportAs?: string;\n  queries?: { [key: string]: any };\n  host?: { [key: string]: string };\n  jit?: true;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Supplies configuration metadata for an Angular component.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "changeDetection",
              "description": "The change-detection strategy to use for this component.\n\nWhen a component is instantiated, Angular creates a change detector,\nwhich is responsible for propagating the component's bindings.\nThe strategy is one of:\n- `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).\n- `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`.",
              "type": "ChangeDetectionStrategy"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewProviders",
              "description": "Defines the set of injectable objects that are visible to its view DOM children.\nSee [example](#injecting-a-class-with-a-view-provider).",
              "type": "Provider[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "moduleId",
              "description": "The module ID of the module that contains the component.\nThe component must be able to resolve relative URLs for templates and styles.\nSystemJS exposes the `__moduleName` variable within each module.\nIn CommonJS, this can  be set to `module.id`.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "templateUrl",
              "description": "The relative path or absolute URL of a template file for an Angular component.\nIf provided, do not supply an inline template using `template`.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "template",
              "description": "An inline template for an Angular component. If provided,\ndo not supply a template file using `templateUrl`.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styleUrls",
              "description": "One or more relative paths or absolute URLs for files containing CSS stylesheets to use\nin this component.",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styles",
              "description": "One or more inline CSS stylesheets to use\nin this component.",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "animations",
              "description": "One or more animation `trigger()` calls, containing\n`state()` and `transition()` definitions.\nSee the [Animations guide](/guide/animations) and animations API documentation.",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "encapsulation",
              "description": "An encapsulation policy for the template and CSS styles. One of:\n- `ViewEncapsulation.Native`: Deprecated. Use `ViewEncapsulation.ShadowDom` instead.\n- `ViewEncapsulation.Emulated`: Use shimmed CSS that\nemulates the native behavior.\n- `ViewEncapsulation.None`: Use global CSS without any\nencapsulation.\n- `ViewEncapsulation.ShadowDom`: Use Shadow DOM v1 to encapsulate styles.\n\nIf not supplied, the value is taken from `CompilerOptions`. The default compiler option is\n`ViewEncapsulation.Emulated`.\n\nIf the policy is set to `ViewEncapsulation.Emulated` and the component has no `styles`\nor `styleUrls` specified, the policy is automatically switched to `ViewEncapsulation.None`.",
              "type": "ViewEncapsulation"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "interpolation",
              "description": "Overrides the default encapsulation start and end delimiters (`{{` and `}}`)",
              "type": "[string, string]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entryComponents",
              "description": "A set of components that should be compiled along with\nthis component. For each component listed here,\nAngular creates a {@link ComponentFactory} and stores it in the\n{@link ComponentFactoryResolver}.",
              "type": "(any[] | Type<any>)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preserveWhitespaces",
              "description": "True to preserve or false to remove potentially superfluous whitespace characters\nfrom the compiled template. Whitespace characters are those matching the `\\s`\ncharacter class in JavaScript regular expressions. Default is false, unless\noverridden in compiler options.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ComponentDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L307-L450",
        "signature": "interface ComponentDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Component decorator interface\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Directive",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L85-L291",
        "signature": "interface Directive {\n  selector?: string;\n  inputs?: string[];\n  outputs?: string[];\n  providers?: Provider[];\n  exportAs?: string;\n  queries?: { [key: string]: any };\n  host?: { [key: string]: string };\n  jit?: true;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Directive decorator and metadata.\n"
            }
          ],
          ["Annotation", { "__kind": "heading", "description": "" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "selector",
              "description": "The CSS selector that identifies this directive in a template\nand triggers instantiation of the directive.\n\nDeclare as one of the following:\n\n- `element-name`: Select by element name.\n- `.class`: Select by class name.\n- `[attribute]`: Select by attribute name.\n- `[attribute=value]`: Select by attribute name and value.\n- `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\n- `selector1, selector2`: Select if either `selector1` or `selector2` matches.\n\nAngular only allows directives to apply on CSS selectors that do not cross\nelement boundaries.\n\nFor the following template HTML, a directive with an `input[type=text]` selector,\nwould be instantiated only on the `<input type=\"text\">` element.\n\n```html\n<form>\n  <input type=\"text\">\n  <input type=\"radio\">\n<form>\n```",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "inputs",
              "description": "Enumerates the set of data-bound input properties for a directive\n\nAngular automatically updates input properties during change detection.\nThe `inputs` property defines a set of `directiveProperty` to `bindingProperty`\nconfiguration:\n\n- `directiveProperty` specifies the component property where the value is written.\n- `bindingProperty` specifies the DOM property where the value is read from.\n\nWhen `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "outputs",
              "description": "Enumerates the set of event-bound output properties.\n\nWhen an output property emits an event, an event handler attached to that event\nin the template is invoked.\n\nThe `outputs` property defines a set of `directiveProperty` to `bindingProperty`\nconfiguration:\n\n- `directiveProperty` specifies the component property that emits events.\n- `bindingProperty` specifies the DOM property the event handler is attached to.",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "Configures the [injector](guide/glossary#injector) of this\ndirective or component with a [token](guide/glossary#di-token)\nthat maps to a [provider](guide/glossary#provider) of a dependency.",
              "type": "Provider[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportAs",
              "description": "Defines the name that can be used in the template to assign this directive to a variable.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queries",
              "description": "Configures the queries that will be injected into the directive.\n\nContent queries are set before the `ngAfterContentInit` callback is called.\nView queries are set before the `ngAfterViewInit` callback is called.",
              "type": "{ [key: string]: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "host",
              "description": "Maps class properties to host element bindings for properties,\nattributes, and events, using a set of key-value pairs.\n\nAngular automatically checks host property bindings during change detection.\nIf a binding changes, Angular updates the directive's host element.\n\nWhen the key is a property of the host element, the property value is\nthe propagated to the specified DOM property.\n\nWhen the key is a static attribute in the DOM, the attribute value\nis propagated to the specified property in the host element.\n\nFor event handling:\n- The key is the DOM event that the directive listens to.\nTo listen to global events, add the target to the event name.\nThe target can be `window`, `document` or `body`.\n- The value is the statement to execute when the event occurs. If the\nstatement evaluates to `false`, then `preventDefault` is applied on the DOM\nevent. A handler method can refer to the `$event` local variable.",
              "type": "{ [key: string]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "jit",
              "description": "When present, this directive/component is ignored by the AOT compiler.\nIt remains in distributed code, and the JIT compiler attempts to compile it\nat run time, in the browser.\nTo ensure the correct behavior, the app must import `@angular/compiler`.",
              "type": "true"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "DirectiveDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L25-L77",
        "signature": "interface DirectiveDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Directive decorator / constructor function."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "HostBinding",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L803-L808",
        "signature": "interface HostBinding {\n  hostPropertyName?: string;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the HostBinding metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostPropertyName",
              "description": "The DOM property that is bound to a data property.",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "HostBindingDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L764-L796",
        "signature": "interface HostBindingDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the HostBinding decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "HostListener",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L837-L846",
        "signature": "interface HostListener {\n  eventName?: string;\n  args?: string[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the HostListener metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "eventName",
              "description": "The DOM event to listen for.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "args",
              "description": "A set of arguments to pass to the handler method when the event occurs.",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "HostListenerDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L823-L830",
        "signature": "interface HostListenerDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the HostListener decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Input",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L698-L703",
        "signature": "interface Input {\n  bindingPropertyName?: string;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of metadata for an `Input` property.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "bindingPropertyName",
              "description": "The name of the DOM property to which the input property is bound.",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "InputDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L643-L691",
        "signature": "interface InputDecorator {}",
        "info": [["publicApi", { "__kind": "heading", "description": "\n" }]]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Output",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L743-L748",
        "signature": "interface Output {\n  bindingPropertyName?: string;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Output metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "bindingPropertyName",
              "description": "The name of the DOM property to which the output property is bound.",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "OutputDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L717-L736",
        "signature": "interface OutputDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Output decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Pipe",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L610-L629",
        "signature": "interface Pipe {\n  name: string;\n  pure?: boolean;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Pipe metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "The pipe name to use in template bindings.\nTypically uses [lowerCamelCase](guide/glossary#case-types)\nbecause the name cannot contain hyphens.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pure",
              "description": "When true, the pipe is pure, meaning that the\n`transform()` method is invoked only when its input arguments\nchange. Pipes are pure by default.\n\nIf the pipe has internal state (that is, the result\ndepends on state other than its arguments), set `pure` to false.\nIn this case, the pipe is invoked on each change-detection cycle,\neven if the arguments have not changed.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "PipeDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L575-L603",
        "signature": "interface PipeDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Pipe decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "DoBootstrap",
    "overloads": [
      {
        "file": "packages/core/src/metadata/ng_module.ts#L344-L346",
        "signature": "interface DoBootstrap {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nHook for manual bootstrapping of the application instead of using bootstrap array in @NgModule\nannotation.\n\nReference to the current application is provided as a parameter.\n\nSee [\"Bootstrapping\"](guide/bootstrapping) and [\"Entry components\"](guide/entry-components).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n```typescript\nclass AppModule implements DoBootstrap {\nngDoBootstrap(appRef: ApplicationRef) {\nappRef.bootstrap(AppComponent); // Or some other component\n}\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ModuleWithProviders",
    "overloads": [
      {
        "file": "packages/core/src/metadata/ng_module.ts#L90-L93",
        "signature": "interface ModuleWithProviders<T> {\n  ngModule: Type<T>;\n  providers?: Provider[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A wrapper around an NgModule that associates it with [providers](guide/glossary#provider\n\"Definition\"). Usage without a generic type is deprecated.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Deprecations](guide/deprecations#modulewithproviders-type-without-a-generic)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngModule",
              "description": "",
              "type": "Type<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "Provider[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "NgModule",
    "overloads": [
      {
        "file": "packages/core/src/metadata/ng_module.ts#L114-L303",
        "signature": "interface NgModule {\n  providers?: Provider[];\n  declarations?: Array<Type<any> | any[]>;\n  imports?: Array<Type<any> | ModuleWithProviders<{}> | any[]>;\n  exports?: Array<Type<any> | any[]>;\n  entryComponents?: Array<Type<any> | any[]>;\n  bootstrap?: Array<Type<any> | any[]>;\n  schemas?: Array<SchemaMetadata | any[]>;\n  id?: string;\n  jit?: true;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the NgModule metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "The set of injectable objects that are available in the injector\nof this module.",
              "type": "Provider[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "declarations",
              "description": "The set of components, directives, and pipes ([declarables](guide/glossary#declarable))\nthat belong to this module.",
              "type": "(any[] | Type<any>)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "imports",
              "description": "The set of NgModules whose exported [declarables](guide/glossary#declarable)\nare available to templates in this module.",
              "type": "(any[] | Type<any> | ModuleWithProviders<{}>)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exports",
              "description": "The set of components, directives, and pipes declared in this\nNgModule that can be used in the template of any component that is part of an\nNgModule that imports this NgModule. Exported declarations are the module's public API.\n\nA declarable belongs to one and only one NgModule.\nA module can list another module among its exports, in which case all of that module's\npublic declaration are exported.",
              "type": "(any[] | Type<any>)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "entryComponents",
              "description": "The set of components to compile when this NgModule is defined,\nso that they can be dynamically loaded into the view.\n\nFor each component listed here, Angular creates a `ComponentFactory`\nand stores it in the `ComponentFactoryResolver`.\n\nAngular automatically adds components in the module's bootstrap\nand route definitions into the `entryComponents` list. Use this\noption to add components that are bootstrapped\nusing one of the imperative techniques, such as `ViewContainerRef.createComponent()`.",
              "type": "(any[] | Type<any>)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "bootstrap",
              "description": "The set of components that are bootstrapped when\nthis module is bootstrapped. The components listed here\nare automatically added to `entryComponents`.",
              "type": "(any[] | Type<any>)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "schemas",
              "description": "The set of schemas that declare elements to be allowed in the NgModule.\nElements and properties that are neither Angular components nor directives\nmust be declared in a schema.\n\nAllowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.",
              "type": "(any[] | SchemaMetadata)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "id",
              "description": "A name or path that uniquely identifies this NgModule in `getModuleFactory`.\nIf left `undefined`, the NgModule is not registered with\n`getModuleFactory`.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "jit",
              "description": "When present, this module is ignored by the AOT compiler.\nIt remains in distributed code, and the JIT compiler attempts to compile it\nat run time, in the browser.\nTo ensure the correct behavior, the app must import `@angular/compiler`.",
              "type": "true"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "NgModuleDecorator",
    "overloads": [
      {
        "file": "packages/core/src/metadata/ng_module.ts#L101-L107",
        "signature": "interface NgModuleDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the NgModule decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "CUSTOM_ELEMENTS_SCHEMA",
    "overloads": [
      {
        "file": "packages/core/src/metadata/schema.ts#L31-L33",
        "signature": "const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "NO_ERRORS_SCHEMA",
    "overloads": [
      {
        "file": "packages/core/src/metadata/schema.ts#L40-L42",
        "signature": "const NO_ERRORS_SCHEMA: SchemaMetadata;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "SchemaMetadata",
    "overloads": [
      {
        "file": "packages/core/src/metadata/schema.ts#L19-L21",
        "signature": "interface SchemaMetadata {\n  name: string;\n}",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "A schema definition associated with an NgModule.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`@NgModule`, `CUSTOM_ELEMENTS_SCHEMA`, `NO_ERRORS_SCHEMA`\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "The name of a defined schema.",
              "type": ""
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ViewEncapsulation",
    "overloads": [
      {
        "file": "packages/core/src/metadata/view.ts#L21-L53",
        "signature": "export enum ViewEncapsulation {\n  /**\n   * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n   * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n   * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n   * selectors.\n   *\n   * This is the default option.\n   */\n  Emulated = 0,\n  /**\n   * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n   * Use the native encapsulation mechanism of the renderer.\n   *\n   * For the DOM this means using the deprecated [Shadow DOM\n   * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * creating a ShadowRoot for Component's Host Element.\n   */\n  Native = 1,\n  /**\n   * Don't provide any template or style encapsulation.\n   */\n  None = 2,\n\n  /**\n   * Use Shadow DOM to encapsulate styles.\n   *\n   * For the DOM this means using modern [Shadow\n   * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * creating a ShadowRoot for Component's Host Element.\n   */\n  ShadowDom = 3,\n}",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "Defines template and style encapsulation options available for Component's {@link Component}.\n\nSee {@link Component#encapsulation encapsulation}.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Example\n\n{@example core/ts/metadata/encapsulation.ts region='longform'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "Version",
    "overloads": [
      {
        "file": "packages/core/src/version.ts#L14-L24",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents the version of Angular\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "major",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "minor",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "patch",
              "description": "",
              "type": "string"
            }
          ]
        ],
        "signature": "class Version {\n  public readonly major: string;\n  public readonly minor: string;\n  public readonly patch: string;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "VERSION",
    "overloads": [
      {
        "file": "packages/core/src/version.ts#L29-L29",
        "signature": "const VERSION: Version;",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "InjectFlags",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/injector.ts#L15-L31",
        "signature": "export enum InjectFlags {\n  // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n\n  /** Check self and check parent injector if needed */\n  Default = 0b0000,\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n  /** Don't ascend to ancestors of the node requesting injection. */\n  Self = 0b0010,\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n}",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            { "__kind": "heading", "description": "Injection flags for DI.\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵdefineInjectable",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/defs.ts#L141-L151",
        "signature": "function ɵɵdefineInjectable<T>(opts: {\n  token: unknown;\n  providedIn?: Type<any> | \"root\" | \"platform\" | \"any\" | null;\n  factory: () => T;\n}): never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\nin which injectors (if any) it will be available.\n\nThis should be assigned to a static `ɵprov` field on a type, which will then be an\n`InjectableType`.\n\nOptions:\n* `providedIn` determines which injectors will include the injectable, by either associating it\nwith an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\nprovided in the `'root'` injector, which will be the application-level injector in most apps.\n* `factory` gives the zero argument function which will create an instance of the injectable.\nThe factory can call `inject` to access the `Injector` and request injection of dependencies.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "opts",
              "description": "",
              "type": "{ token: unknown; providedIn?: Type<any> | 'root' | 'platform' | 'any' | null; factory: () => T; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "defineInjectable",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/defs.ts#L158-L158",
        "signature": "const defineInjectable: typeof ɵɵdefineInjectable;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵdefineInjector",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/defs.ts#L180-L187",
        "signature": "function ɵɵdefineInjector(options: {\n  factory: () => any;\n  providers?: any[];\n  imports?: any[];\n}): never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Construct an `InjectorDef` which configures an injector.\n\nThis should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n`InjectorType`.\n\nOptions:\n\n* `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\ncreate the type must be provided. If that factory function needs to inject arguments, it can\nuse the `inject` function.\n* `providers`: an optional array of providers to add to the injector. Each provider must\neither have a factory or point to a type which has a `ɵprov` static property (the\ntype must be an `InjectableType`).\n* `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\nwhose providers will also be added to the injector. Locally provided types will override\nproviders from imports.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "{ factory: () => any; providers?: any[]; imports?: any[]; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "InjectableType",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/defs.ts#L89-L94",
        "signature": "interface InjectableType<T> {\n  ɵprov: never;\n\n  // inherited from Type\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A `Type` which has an `InjectableDef` static field.\n\n`InjectableDefType`s contain their own Dependency Injection metadata and are usable in an\n`InjectorDef`-based `StaticInjector.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵprov",
              "description": "Opaque type whose structure is highly version dependent. Do not rely on any properties.",
              "type": "never"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "InjectorType",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/defs.ts#L103-L108",
        "signature": "interface InjectorType<T> {\n  ɵinj: never;\n\n  // inherited from Type\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A type which has an `InjectorDef` static field.\n\n`InjectorDefTypes` can be used to configure a `StaticInjector`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵinj",
              "description": "Opaque type whose structure is highly version dependent. Do not rely on any properties.",
              "type": "never"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "forwardRef",
    "overloads": [
      {
        "file": "packages/core/src/di/forward_ref.ts#L42-L48",
        "signature": "function forwardRef(forwardRefFn: ForwardRefFn): Type<any>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Allows to refer to references which are not yet defined.\n\nFor instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\nDI is declared, but not yet defined. It is also used when the `token` which we use when creating\na query is not yet defined.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Example\n{@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "forwardRefFn",
              "description": "",
              "type": "ForwardRefFn"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "resolveForwardRef",
    "overloads": [
      {
        "file": "packages/core/src/di/forward_ref.ts#L63-L65",
        "signature": "function resolveForwardRef<T>(type: T): T;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Lazily retrieves the reference value from a forwardRef.\n\nActs as the identity function when given a non-forward-ref value.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Example\n\n{@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`forwardRef`" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ForwardRefFn",
    "overloads": [
      {
        "file": "packages/core/src/di/forward_ref.ts#L24-L26",
        "signature": "interface ForwardRefFn {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An interface that a function passed into {@link forwardRef} has to implement.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Example\n\n{@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Injectable",
    "overloads": [
      {
        "file": "packages/core/src/di/injectable.ts#L65-L78",
        "signature": "interface Injectable {\n  providedIn?: Type<any> | \"root\" | \"platform\" | \"any\" | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Injectable metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "providedIn",
              "description": "Determines which injectors will provide the injectable,\nby either associating it with an `@NgModule` or other `InjectorType`,\nor by specifying that this injectable should be provided in one of the following injectors:\n- 'root' : The application-level injector in most apps.\n- 'platform' : A special singleton platform injector shared by all\napplications on the page.\n- 'any' : Provides a unique instance in each lazy loaded module while all eagerly loaded\nmodules share one instance.",
              "type": "Type<any> | \"root\" | \"platform\" | \"any\""
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "InjectableDecorator",
    "overloads": [
      {
        "file": "packages/core/src/di/injectable.ts#L32-L58",
        "signature": "interface InjectableDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Injectable decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "InjectableProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/injectable.ts#L24-L25",
        "signature": "export type InjectableProvider =\n  | ValueSansProvider\n  | ExistingSansProvider\n  | StaticClassSansProvider\n  | ConstructorSansProvider\n  | FactorySansProvider\n  | ClassSansProvider;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Injectable providers used in `@Injectable` decorator.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "Injector",
    "overloads": [
      {
        "file": "packages/core/src/di/injector.ts#L58-L117",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Concrete injectors implement this interface. Injectors are configured\nwith [providers](guide/glossary#provider) that associate\ndependencies of various types with [injection tokens](guide/glossary#di-token).\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"DI Providers\"](guide/dependency-injection-providers)."
            }
          ],
          ["see", { "__kind": "heading", "description": "`StaticProvider`\n" }],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nThe following example creates a service injector instance.\n\n{@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n\n### Usage example\n\n{@example core/di/ts/injector_spec.ts region='Injector'}\n\n`Injector` returns itself when given `Injector` as a token:\n\n{@example core/di/ts/injector_spec.ts region='injectInjector'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "THROW_IF_NOT_FOUND",
              "description": "",
              "type": "{}"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "NULL",
              "description": "",
              "type": "Injector"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵprov",
              "description": "",
              "type": "never"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "__NG_ELEMENT_ID__",
              "description": "",
              "type": "number"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/core/src/di/injector.ts#L67-L68",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves an instance from the injector based on the provided token."
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The instance from the injector if defined, otherwise the `notFoundValue`."
                    }
                  ],
                  [
                    "throws",
                    {
                      "__kind": "heading",
                      "description": "When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "token",
                      "description": "",
                      "type": "Type<T> | InjectionToken<T> | AbstractType<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "notFoundValue",
                      "description": "",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "flags",
                      "description": "",
                      "type": "InjectFlags"
                    }
                  ]
                ],
                "signature": "abstract get<T>(   token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/core/src/di/injector.ts#L73-L73",
                "info": [
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "from v4.0.0 use Type<T> or InjectionToken<T>"
                    }
                  ],
                  [
                    "suppress",
                    { "__kind": "heading", "description": "{duplicate}\n" }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "token",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "notFoundValue",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract get(token: any, notFoundValue?: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/core/src/di/injector.ts#L67-L68",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves an instance from the injector based on the provided token."
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The instance from the injector if defined, otherwise the `notFoundValue`."
                    }
                  ],
                  [
                    "throws",
                    {
                      "__kind": "heading",
                      "description": "When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "token",
                      "description": "",
                      "type": "Type<T> | InjectionToken<T> | AbstractType<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "notFoundValue",
                      "description": "",
                      "type": "T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "flags",
                      "description": "",
                      "type": "InjectFlags"
                    }
                  ]
                ],
                "signature": "abstract get<T>(   token: Type<T>|InjectionToken<T>|AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/core/src/di/injector.ts#L73-L73",
                "info": [
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "from v4.0.0 use Type<T> or InjectionToken<T>"
                    }
                  ],
                  [
                    "suppress",
                    { "__kind": "heading", "description": "{duplicate}\n" }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "token",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "notFoundValue",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract get(token: any, notFoundValue?: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/core/src/di/injector.ts#L95-L103",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "StaticProvider[] | { providers: StaticProvider[]; parent?: Injector; name?: string; }"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parent",
                      "description": "",
                      "type": "Injector"
                    }
                  ]
                ],
                "signature": "static create(   options: StaticProvider[]|{providers: StaticProvider[], parent?: Injector, name?: string},   parent?: Injector): Injector;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/core/src/di/injector.ts#L78-L78",
                "info": [
                  [
                    "deprecated",
                    {
                      "__kind": "heading",
                      "description": "from v5 use the new signature Injector.create(options)\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "providers",
                      "description": "",
                      "type": "StaticProvider[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parent",
                      "description": "",
                      "type": "Injector"
                    }
                  ]
                ],
                "signature": "static create(providers: StaticProvider[], parent?: Injector): Injector;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/core/src/di/injector.ts#L92-L92",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates a new injector instance that provides one or more dependencies,\naccording to a given type or types of `StaticProvider`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "An object with the following properties:",
                      "type": "{ providers: StaticProvider[]; parent?: Injector; name?: string; }"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The new injector instance.\n\n"
                    }
                  ]
                ],
                "signature": "static create(options: {providers: StaticProvider[], parent?: Injector, name?: string}): Injector;"
              }
            }
          ]
        ],
        "signature": "class Injector {\n  static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n  static NULL: Injector = new NullInjector();\n  static ɵprov = ɵɵdefineInjectable({\n    token: Injector,\n    providedIn: \"any\" as any,\n    factory: () => ɵɵinject(INJECTOR),\n  });\n  static __NG_ELEMENT_ID__ = -1;\n\n  abstract get<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T>,\n    notFoundValue?: T,\n    flags?: InjectFlags\n  ): T;\n  abstract get(token: any, notFoundValue?: any): any;\n  abstract get<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T>,\n    notFoundValue?: T,\n    flags?: InjectFlags\n  ): T;\n  abstract get(token: any, notFoundValue?: any): any;\n  static create(\n    options:\n      | StaticProvider[]\n      | { providers: StaticProvider[]; parent?: Injector; name?: string },\n    parent?: Injector\n  ): Injector;\n  static create(providers: StaticProvider[], parent?: Injector): Injector;\n  static create(options: {\n    providers: StaticProvider[];\n    parent?: Injector;\n    name?: string;\n  }): Injector;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵinject",
    "overloads": [
      {
        "file": "packages/core/src/di/injector_compatibility.ts#L115-L117",
        "signature": "function ɵɵinject<T>(\n  token: Type<T> | InjectionToken<T>,\n  flags = InjectFlags.Default\n): T | null;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "Type<T> | InjectionToken<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "InjectFlags"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/di/injector_compatibility.ts#L113-L113",
        "signature": "function ɵɵinject<T>(token: Type<T> | InjectionToken<T>): T;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Generated instruction: Injects a token from the currently active injector.\n\nMust be used in the context of a factory function such as one defined for an\n`InjectionToken`. Throws an error if not called from such a context.\n\n(Additional documentation moved to `inject`, as it is the public API, and an alias for this\ninstruction)\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "inject" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "Type<T> | InjectionToken<T>"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/di/injector_compatibility.ts#L114-L114",
        "signature": "function ɵɵinject<T>(\n  token: Type<T> | InjectionToken<T>,\n  flags?: InjectFlags\n): T | null;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "Type<T> | InjectionToken<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "InjectFlags"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "inject",
    "overloads": [
      {
        "file": "packages/core/src/di/injector_compatibility.ts#L167-L167",
        "signature": "const inject: typeof ɵɵinject;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "INJECTOR",
    "overloads": [
      {
        "file": "packages/core/src/di/injector_compatibility.ts#L33-L36",
        "signature": "const INJECTOR: InjectionToken<Injector>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵinvalidFactoryDep",
    "overloads": [
      {
        "file": "packages/core/src/di/injector_compatibility.ts#L131-L141",
        "signature": "function ɵɵinvalidFactoryDep(index: number): never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Throws an error indicating that a factory function could not be generated by the compiler for a\nparticular class.\n\nThis instruction allows the actual error message to be optimized away when ngDevMode is turned\noff, saving bytes of generated code while still providing a good experience in dev mode.\n\nThe name of the class is not mentioned here, but will be in the generated factory function name\nand thus in the stack trace.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ReflectiveInjector",
    "overloads": [
      {
        "file": "packages/core/src/di/reflective_injector.ts#L58-L270",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A ReflectiveDependency injection container used for instantiating objects and resolving\ndependencies.\n\nAn `Injector` is a replacement for a `new` operator, which can automatically resolve the\nconstructor dependencies.\n\nIn typical use, application code asks for the dependencies in the constructor and they are\nresolved by the `Injector`.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Example\n\nThe following example creates an `Injector` configured to create `Engine` and `Car`.\n\n```typescript"
            }
          ],
          [
            "Injectable()",
            { "__kind": "heading", "description": "\nclass Engine {\n}\n" }
          ],
          [
            "Injectable()",
            {
              "__kind": "heading",
              "description": "\nclass Car {\nconstructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\nvar car = injector.get(Car);\nexpect(car instanceof Car).toBe(true);\nexpect(car.engine instanceof Engine).toBe(true);\n```\n\nNotice, we don't use the `new` operator because we explicitly want to have the `Injector`\nresolve all of the object's dependencies automatically.\n"
            }
          ],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "from v5 - slow and brings in a lot of code, Use `Injector.create` instead."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolve",
              "info": {
                "file": "packages/core/src/di/reflective_injector.ts#L92-L94",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Turns an array of provider definitions into an array of resolved providers.\n\nA resolution is a process of flattening multiple nested arrays and converting individual\nproviders into an array of `ResolvedReflectiveProvider`s.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\n```typescript"
                    }
                  ],
                  [
                    "Injectable()",
                    {
                      "__kind": "heading",
                      "description": "\nclass Engine {\n}\n"
                    }
                  ],
                  [
                    "Injectable()",
                    {
                      "__kind": "heading",
                      "description": "\nclass Car {\nconstructor(public engine:Engine) {}\n}\n\nvar providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n\nexpect(providers.length).toEqual(2);\n\nexpect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\nexpect(providers[0].key.displayName).toBe(\"Car\");\nexpect(providers[0].dependencies.length).toEqual(1);\nexpect(providers[0].factory).toBeDefined();\n\nexpect(providers[1].key.displayName).toBe(\"Engine\");\n});\n```\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "providers",
                      "description": "",
                      "type": "Provider[]"
                    }
                  ]
                ],
                "signature": "static resolve(providers: Provider[]): ResolvedReflectiveProvider[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveAndCreate",
              "info": {
                "file": "packages/core/src/di/reflective_injector.ts#L119-L122",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Resolves an array of providers and creates an injector from those providers.\n\nThe passed-in providers can be an array of `Type`, `Provider`,\nor a recursive array of more providers.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\n```typescript"
                    }
                  ],
                  [
                    "Injectable()",
                    {
                      "__kind": "heading",
                      "description": "\nclass Engine {\n}\n"
                    }
                  ],
                  [
                    "Injectable()",
                    {
                      "__kind": "heading",
                      "description": "\nclass Car {\nconstructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\nexpect(injector.get(Car) instanceof Car).toBe(true);\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "providers",
                      "description": "",
                      "type": "Provider[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parent",
                      "description": "",
                      "type": "Injector"
                    }
                  ]
                ],
                "signature": "static resolveAndCreate(providers: Provider[], parent?: Injector): ReflectiveInjector;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "fromResolvedProviders",
              "info": {
                "file": "packages/core/src/di/reflective_injector.ts#L147-L150",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates an injector from previously resolved providers.\n\nThis API is the recommended way to construct injectors in performance-sensitive parts.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\n```typescript"
                    }
                  ],
                  [
                    "Injectable()",
                    {
                      "__kind": "heading",
                      "description": "\nclass Engine {\n}\n"
                    }
                  ],
                  [
                    "Injectable()",
                    {
                      "__kind": "heading",
                      "description": "\nclass Car {\nconstructor(public engine:Engine) {}\n}\n\nvar providers = ReflectiveInjector.resolve([Car, Engine]);\nvar injector = ReflectiveInjector.fromResolvedProviders(providers);\nexpect(injector.get(Car) instanceof Car).toBe(true);\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "providers",
                      "description": "",
                      "type": "ResolvedReflectiveProvider[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parent",
                      "description": "",
                      "type": "Injector"
                    }
                  ]
                ],
                "signature": "static fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector):   ReflectiveInjector;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveAndCreateChild",
              "info": {
                "file": "packages/core/src/di/reflective_injector.ts#L185-L185",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Resolves an array of providers and creates a child injector from those providers.\n\n<!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n-->\n\nThe passed-in providers can be an array of `Type`, `Provider`,\nor a recursive array of more providers.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\n```typescript\nclass ParentProvider {}\nclass ChildProvider {}\n\nvar parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\nvar child = parent.resolveAndCreateChild([ChildProvider]);\n\nexpect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\nexpect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\nexpect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "providers",
                      "description": "",
                      "type": "Provider[]"
                    }
                  ]
                ],
                "signature": "abstract resolveAndCreateChild(providers: Provider[]): ReflectiveInjector;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createChildFromResolved",
              "info": {
                "file": "packages/core/src/di/reflective_injector.ts#L213-L213",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates a child injector from previously resolved providers.\n\n<!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n-->\n\nThis API is the recommended way to construct injectors in performance-sensitive parts.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\n```typescript\nclass ParentProvider {}\nclass ChildProvider {}\n\nvar parentProviders = ReflectiveInjector.resolve([ParentProvider]);\nvar childProviders = ReflectiveInjector.resolve([ChildProvider]);\n\nvar parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\nvar child = parent.createChildFromResolved(childProviders);\n\nexpect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\nexpect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\nexpect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "providers",
                      "description": "",
                      "type": "ResolvedReflectiveProvider[]"
                    }
                  ]
                ],
                "signature": "abstract createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveAndInstantiate",
              "info": {
                "file": "packages/core/src/di/reflective_injector.ts#L240-L240",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Resolves a provider and instantiates an object in the context of the injector.\n\nThe created object does not get cached by the injector.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\n```typescript"
                    }
                  ],
                  [
                    "Injectable()",
                    {
                      "__kind": "heading",
                      "description": "\nclass Engine {\n}\n"
                    }
                  ],
                  [
                    "Injectable()",
                    {
                      "__kind": "heading",
                      "description": "\nclass Car {\nconstructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\nvar car = injector.resolveAndInstantiate(Car);\nexpect(car.engine).toBe(injector.get(Engine));\nexpect(car).not.toBe(injector.resolveAndInstantiate(Car));\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "provider",
                      "description": "",
                      "type": "Provider"
                    }
                  ]
                ],
                "signature": "abstract resolveAndInstantiate(provider: Provider): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "instantiateResolved",
              "info": {
                "file": "packages/core/src/di/reflective_injector.ts#L267-L267",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Instantiates an object using a resolved provider in the context of the injector.\n\nThe created object does not get cached by the injector.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\n```typescript"
                    }
                  ],
                  [
                    "Injectable()",
                    {
                      "__kind": "heading",
                      "description": "\nclass Engine {\n}\n"
                    }
                  ],
                  [
                    "Injectable()",
                    {
                      "__kind": "heading",
                      "description": "\nclass Car {\nconstructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Engine]);\nvar carProvider = ReflectiveInjector.resolve([Car])[0];\nvar car = injector.instantiateResolved(carProvider);\nexpect(car.engine).toBe(injector.get(Engine));\nexpect(car).not.toBe(injector.instantiateResolved(carProvider));\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "provider",
                      "description": "",
                      "type": "ResolvedReflectiveProvider"
                    }
                  ]
                ],
                "signature": "abstract instantiateResolved(provider: ResolvedReflectiveProvider): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/core/src/di/reflective_injector.ts#L269-L269",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "token",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "notFoundValue",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract get(token: any, notFoundValue?: any): any;"
              }
            }
          ]
        ],
        "signature": "class ReflectiveInjector implements Injector {\n  static resolve(providers: Provider[]): ResolvedReflectiveProvider[];\n  static resolveAndCreate(\n    providers: Provider[],\n    parent?: Injector\n  ): ReflectiveInjector;\n  static fromResolvedProviders(\n    providers: ResolvedReflectiveProvider[],\n    parent?: Injector\n  ): ReflectiveInjector;\n  abstract resolveAndCreateChild(providers: Provider[]): ReflectiveInjector;\n  abstract createChildFromResolved(\n    providers: ResolvedReflectiveProvider[]\n  ): ReflectiveInjector;\n  abstract resolveAndInstantiate(provider: Provider): any;\n  abstract instantiateResolved(provider: ResolvedReflectiveProvider): any;\n  abstract get(token: any, notFoundValue?: any): any;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ClassProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L311-L322",
        "signature": "interface ClassProvider {\n  provide: any;\n  multi?: boolean;\n\n  // inherited from ClassSansProvider\n  useClass: Type<any>;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return an instance of `useClass` for a token."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n{@example core/di/ts/provider_spec.ts region='ClassProvider'}\n\nNote that following two providers are not equal:\n\n{@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}\n\n### Multi-value example\n\n{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "provide",
              "description": "An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "multi",
              "description": "When true, injector returns an array of instances. This is useful to allow multiple\nproviders spread across many files to provide configuration information to a common token.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ClassSansProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L286-L291",
        "signature": "interface ClassSansProvider {\n  useClass: Type<any>;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return a value by invoking a `useClass` function.\nBase for `ClassProvider` decorator.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "useClass",
              "description": "Class to instantiate for the `token`.",
              "type": "Type<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ConstructorProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L140-L151",
        "signature": "interface ConstructorProvider {\n  provide: Type<any>;\n  multi?: boolean;\n\n  // inherited from ConstructorSansProvider\n  deps?: any[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return an instance of a token.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n{@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n\n### Multi-value example\n\n{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "provide",
              "description": "An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.",
              "type": "Type<any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "multi",
              "description": "When true, injector returns an array of instances. This is useful to allow multiple\nproviders spread across many files to provide configuration information to a common token.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ConstructorSansProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L118-L123",
        "signature": "interface ConstructorSansProvider {\n  deps?: any[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return an instance of a token.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          ["usageNotes", { "__kind": "heading", "description": "\n\n```ts" }],
          [
            "Injectable(SomeModule,",
            {
              "__kind": "heading",
              "description": "{deps: []})\nclass MyService {}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "deps",
              "description": "A list of `token`s to be resolved by the injector.",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ExistingProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L183-L194",
        "signature": "interface ExistingProvider {\n  provide: any;\n  multi?: boolean;\n\n  // inherited from ExistingSansProvider\n  useExisting: any;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return a value of another `useExisting` token.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n{@example core/di/ts/provider_spec.ts region='ExistingProvider'}\n\n### Multi-value example\n\n{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "provide",
              "description": "An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "multi",
              "description": "When true, injector returns an array of instances. This is useful to allow multiple\nproviders spread across many files to provide configuration information to a common token.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ExistingSansProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L161-L166",
        "signature": "interface ExistingSansProvider {\n  useExisting: any;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return a value of another `useExisting` token.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`ExistingProvider`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "useExisting",
              "description": "Existing `token` to return. (Equivalent to `injector.get(useExisting)`)",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "FactoryProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L236-L247",
        "signature": "interface FactoryProvider {\n  provide: any;\n  multi?: boolean;\n\n  // inherited from FactorySansProvider\n  useFactory: Function;\n  deps?: any[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return a value by invoking a `useFactory` function."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n{@example core/di/ts/provider_spec.ts region='FactoryProvider'}\n\nDependencies can also be marked as optional:\n\n{@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}\n\n### Multi-value example\n\n{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "provide",
              "description": "An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "multi",
              "description": "When true, injector returns an array of instances. This is useful to allow multiple\nproviders spread across many files to provide configuration information to a common token.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "FactorySansProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L204-L216",
        "signature": "interface FactorySansProvider {\n  useFactory: Function;\n  deps?: any[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return a value by invoking a `useFactory` function.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`FactoryProvider`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "useFactory",
              "description": "A function to invoke to create a value for this `token`. The function is invoked with\nresolved values of `token`s in the `deps` field.",
              "type": "Function"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "deps",
              "description": "A list of `token`s to be resolved by the injector. The list of values is then\nused as arguments to the `useFactory` function.",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "Provider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L332-L333",
        "signature": "export type Provider =\n  | TypeProvider\n  | ValueProvider\n  | ClassProvider\n  | ConstructorProvider\n  | ExistingProvider\n  | FactoryProvider\n  | any[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Describes how the `Injector` should be configured."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`StaticProvider`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "StaticClassProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L91-L102",
        "signature": "interface StaticClassProvider {\n  provide: any;\n  multi?: boolean;\n\n  // inherited from StaticClassSansProvider\n  useClass: Type<any>;\n  deps: any[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return an instance of `useClass` for a token."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n{@example core/di/ts/provider_spec.ts region='StaticClassProvider'}\n\nNote that following two providers are not equal:\n\n{@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}\n\n### Multi-value example\n\n{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "provide",
              "description": "An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "multi",
              "description": "When true, injector returns an array of instances. This is useful to allow multiple\nproviders spread across many files to provide configuration information to a common token.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "StaticClassSansProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L59-L71",
        "signature": "interface StaticClassSansProvider {\n  useClass: Type<any>;\n  deps: any[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return an instance of `useClass` for a token.\nBase for `StaticClassProvider` decorator.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "useClass",
              "description": "An optional class to instantiate for the `token`. By default, the `provide`\nclass is instantiated.",
              "type": "Type<any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "deps",
              "description": "A list of `token`s to be resolved by the injector. The list of values is then\nused as arguments to the `useClass` constructor.",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "StaticProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L258-L259",
        "signature": "export type StaticProvider =\n  | ValueProvider\n  | ExistingProvider\n  | StaticClassProvider\n  | ConstructorProvider\n  | FactoryProvider\n  | any[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Describes how an `Injector` should be configured as static (that is, without reflection).\nA static provider provides tokens to an injector for various types of dependencies.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Injector.create()](/api/core/Injector#create)."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection-providers).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "TypeProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L276-L276",
        "signature": "interface TypeProvider {\n  // inherited from Type\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return an instance of `Type` when `Type' is used as the token.\n\nCreate an instance by invoking the `new` operator and supplying additional arguments.\nThis form is a short form of `TypeProvider`;\n\nFor more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n{@example core/di/ts/provider_spec.ts region='TypeProvider'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ValueProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L40-L51",
        "signature": "interface ValueProvider {\n  provide: any;\n  multi?: boolean;\n\n  // inherited from ValueSansProvider\n  useValue: any;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return a value for a token."
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[\"Dependency Injection Guide\"](guide/dependency-injection).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Example\n\n{@example core/di/ts/provider_spec.ts region='ValueProvider'}\n\n### Multi-value example\n\n{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "provide",
              "description": "An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "multi",
              "description": "When true, injector returns an array of instances. This is useful to allow multiple\nproviders spread across many files to provide configuration information to a common token.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ValueSansProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/provider.ts#L17-L22",
        "signature": "interface ValueSansProvider {\n  useValue: any;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configures the `Injector` to return a value for a token.\nBase for `ValueProvider` decorator.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "useValue",
              "description": "The value to inject.",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ResolvedReflectiveFactory",
    "overloads": [
      {
        "file": "packages/core/src/di/reflective_provider.ts#L88-L99",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An internal resolved representation of a factory function created by resolving `Provider`."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class ResolvedReflectiveFactory {}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ResolvedReflectiveProvider",
    "overloads": [
      {
        "file": "packages/core/src/di/reflective_provider.ts#L57-L72",
        "signature": "interface ResolvedReflectiveProvider {\n  key: ReflectiveKey;\n  resolvedFactories: ResolvedReflectiveFactory[];\n  multiProvider: boolean;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An internal resolved representation of a `Provider` used by the `Injector`.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nThis is usually created automatically by `Injector.resolveAndCreate`.\n\nIt can be created manually, as follows:\n\n### Example\n\n```typescript\nvar resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\nvar injector = Injector.fromResolvedProviders(resolvedProviders);\n\nexpect(injector.get('message')).toEqual('Hello');\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "key",
              "description": "A key, usually a `Type<any>`.",
              "type": "ReflectiveKey"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "resolvedFactories",
              "description": "Factory function which can return an instance of an object represented by a key.",
              "type": "ResolvedReflectiveFactory[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "multiProvider",
              "description": "Indicates if the provider is a multi-provider or a regular provider.",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ReflectiveKey",
    "overloads": [
      {
        "file": "packages/core/src/di/reflective_key.ts#L31-L56",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A unique object used for retrieving items from the {@link ReflectiveInjector}.\n\nKeys have:\n- a system-wide unique `id`.\n- a `token`.\n\n`Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\nthe\ninjector to store created objects in a more efficient way.\n\n`Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\nresolving\nproviders.\n"
            }
          ],
          [
            "deprecated",
            { "__kind": "heading", "description": "No replacement" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "displayName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/core/src/di/reflective_key.ts#L46-L48",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves a `Key` for a token.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "token",
                      "description": "",
                      "type": "Object"
                    }
                  ]
                ],
                "signature": "static get(token: Object): ReflectiveKey;"
              }
            }
          ]
        ],
        "signature": "class ReflectiveKey {\n  public readonly displayName: string;\n\n  static get(token: Object): ReflectiveKey;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "InjectionToken",
    "overloads": [
      {
        "file": "packages/core/src/di/injection_token.ts#L53-L80",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates a token that can be used in a DI Provider.\n\nUse an `InjectionToken` whenever the type you are injecting is not reified (does not have a\nruntime representation) such as when injecting an interface, callable type, array or\nparameterized type.\n\n`InjectionToken` is parameterized on `T` which is the type of object which will be returned by\nthe `Injector`. This provides additional level of type safety.\n\n```\ninterface MyInterface {...}\nvar myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n// myInterface is inferred to be MyInterface.\n```\n\nWhen creating an `InjectionToken`, you can optionally specify a factory function which returns\n(possibly by creating) a default value of the parameterized type `T`. This sets up the\n`InjectionToken` using this factory as a provider as if it was defined explicitly in the\napplication's root injector. If the factory function, which takes zero arguments, needs to inject\ndependencies, it can do so using the `inject` function. See below for an example.\n\nAdditionally, if a `factory` is specified you can also specify the `providedIn` option, which\noverrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\nmentioned above, `'root'` is the default value for `providedIn`.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Basic Example\n\n### Plain InjectionToken\n\n{@example core/di/ts/injector_spec.ts region='InjectionToken'}\n\n### Tree-shakable InjectionToken\n\n{@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngMetadataName",
              "description": "",
              "type": "\"InjectionToken\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵprov",
              "description": "",
              "type": "undefined"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/core/src/di/injection_token.ts#L77-L79",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class InjectionToken<T> {\n  readonly ngMetadataName = \"InjectionToken\";\n  readonly ɵprov: never | undefined;\n\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "InjectDecorator",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L18-L38",
        "signature": "interface InjectDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Inject decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Inject",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L45-L50",
        "signature": "interface Inject {\n  token: any;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Inject metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "token",
              "description": "A [DI token](guide/glossary#di-token) that maps to the dependency to be injected.",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "OptionalDecorator",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L66-L86",
        "signature": "interface OptionalDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Optional decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Optional",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L93-L93",
        "signature": "interface Optional {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Optional metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "SelfDecorator",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L108-L131",
        "signature": "interface SelfDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Self decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Self",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L138-L138",
        "signature": "interface Self {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Self metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "SkipSelfDecorator",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L154-L176",
        "signature": "interface SkipSelfDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the `SkipSelf` decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "SkipSelf",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L183-L183",
        "signature": "interface SkipSelf {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the `SkipSelf` metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "HostDecorator",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L198-L216",
        "signature": "interface HostDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the `Host` decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "Host",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L223-L223",
        "signature": "interface Host {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Host metadata.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "AttributeDecorator",
    "overloads": [
      {
        "file": "packages/core/src/di/metadata.ts#L239-L263",
        "signature": "interface AttributeDecorator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Type of the Attribute decorator / constructor function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "NgZone",
    "overloads": [
      {
        "file": "packages/core/src/zone/ng_zone.ts#L88-L229",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An injectable service for executing work inside or outside of the Angular zone.\n\nThe most common use of this service is to optimize performance when starting a work consisting of\none or more asynchronous tasks that don't require UI updates or error handling to be handled by\nAngular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\ncan reenter the Angular zone via {@link #run}.\n\n<!-- TODO: add/fix links to:\n- docs explaining zones and the use of zones in Angular and change-detection\n- link to runOutsideAngular/run (throughout this file!)\n-->\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Example\n\n```\nimport {Component, NgZone} from '@angular/core';\nimport {NgIf} from '@angular/common';\n"
            }
          ],
          [
            "Component({",
            {
              "__kind": "heading",
              "description": "\nselector: 'ng-zone-demo',\ntemplate: `\n<h2>Demo: NgZone</h2>\n\n<p>Progress: {{progress}}%</p>\n<p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n\n<button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n<button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n`,\n})\nexport class NgZoneDemo {\nprogress: number = 0;\nlabel: string;\n\nconstructor(private _ngZone: NgZone) {}\n\n// Loop inside the Angular zone\n// so the UI DOES refresh after each setTimeout cycle\nprocessWithinAngularZone() {\nthis.label = 'inside';\nthis.progress = 0;\nthis._increaseProgress(() => console.log('Inside Done!'));\n}\n\n// Loop outside of the Angular zone\n// so the UI DOES NOT refresh after each setTimeout cycle\nprocessOutsideOfAngularZone() {\nthis.label = 'outside';\nthis.progress = 0;\nthis._ngZone.runOutsideAngular(() => {\nthis._increaseProgress(() => {\n// reenter the Angular zone and display done\nthis._ngZone.run(() => { console.log('Outside Done!'); });\n});\n});\n}\n\n_increaseProgress(doneCallback: () => void) {\nthis.progress += 1;\nconsole.log(`Current progress: ${this.progress}%`);\n\nif (this.progress < 100) {\nwindow.setTimeout(() => this._increaseProgress(doneCallback), 10);\n} else {\ndoneCallback();\n}\n}\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "hasPendingMacrotasks",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hasPendingMicrotasks",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isStable",
              "description": "Whether there are no outstanding microtasks or macrotasks.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onUnstable",
              "description": "Notifies when code enters Angular Zone. This gets fired first on VM Turn.",
              "type": "EventEmitter<any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onMicrotaskEmpty",
              "description": "Notifies when there is no more microtasks enqueued in the current VM Turn.\nThis is a hint for Angular to do change detection, which may enqueue more microtasks.\nFor this reason this event can fire multiple times per VM Turn.",
              "type": "EventEmitter<any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onStable",
              "description": "Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\nimplies we are about to relinquish VM turn.\nThis event gets called just once.",
              "type": "EventEmitter<any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onError",
              "description": "Notifies that an error has been delivered.",
              "type": "EventEmitter<any>"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isInAngularZone",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L151-L153",
                "info": [],
                "signature": "static isInAngularZone(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "assertInAngularZone",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L155-L159",
                "info": [],
                "signature": "static assertInAngularZone(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "assertNotInAngularZone",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L161-L165",
                "info": [],
                "signature": "static assertNotInAngularZone(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "run",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L179-L181",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes the `fn` function synchronously within the Angular zone and returns value returned by\nthe function.\n\nRunning functions via `run` allows you to reenter Angular zone from a task that was executed\noutside of the Angular zone (typically started via {@link #runOutsideAngular}).\n\nAny future tasks or microtasks scheduled from within this function will continue executing from\nwithin the Angular zone.\n\nIf a synchronous error happens it will be rethrown and not reported via `onError`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(...args: any[]) => T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyThis",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyArgs",
                      "description": "",
                      "type": "any[]"
                    }
                  ]
                ],
                "signature": "run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "runTask",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L195-L203",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes the `fn` function synchronously within the Angular zone as a task and returns value\nreturned by the function.\n\nRunning functions via `run` allows you to reenter Angular zone from a task that was executed\noutside of the Angular zone (typically started via {@link #runOutsideAngular}).\n\nAny future tasks or microtasks scheduled from within this function will continue executing from\nwithin the Angular zone.\n\nIf a synchronous error happens it will be rethrown and not reported via `onError`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(...args: any[]) => T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyThis",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyArgs",
                      "description": "",
                      "type": "any[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "runGuarded",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L209-L211",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\nrethrown.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(...args: any[]) => T"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyThis",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyArgs",
                      "description": "",
                      "type": "any[]"
                    }
                  ]
                ],
                "signature": "runGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "runOutsideAngular",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L226-L228",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\nthe function.\n\nRunning functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\nwork that\ndoesn't trigger Angular change-detection or is subject to Angular's error handling.\n\nAny future tasks or microtasks scheduled from within this function will continue executing from\noutside of the Angular zone.\n\nUse {@link #run} to reenter the Angular zone and do work that updates the application model.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(...args: any[]) => T"
                    }
                  ]
                ],
                "signature": "runOutsideAngular<T>(fn: (...args: any[]) => T): T;"
              }
            }
          ]
        ],
        "signature": "class NgZone {\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly hasPendingMicrotasks: boolean = false;\n  readonly isStable: boolean = true;\n  readonly onUnstable: EventEmitter<any> = new EventEmitter(false);\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter(false);\n  readonly onStable: EventEmitter<any> = new EventEmitter(false);\n  readonly onError: EventEmitter<any> = new EventEmitter(false);\n\n  static isInAngularZone(): boolean;\n  static assertInAngularZone(): void;\n  static assertNotInAngularZone(): void;\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;\n  runTask<T>(\n    fn: (...args: any[]) => T,\n    applyThis?: any,\n    applyArgs?: any[],\n    name?: string\n  ): T;\n  runGuarded<T>(\n    fn: (...args: any[]) => T,\n    applyThis?: any,\n    applyArgs?: any[]\n  ): T;\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ɵNoopNgZone",
    "overloads": [
      {
        "file": "packages/core/src/zone/ng_zone.ts#L382-L406",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\nto framework to perform rendering.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hasPendingMicrotasks",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hasPendingMacrotasks",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isStable",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onUnstable",
              "description": "",
              "type": "EventEmitter<any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onMicrotaskEmpty",
              "description": "",
              "type": "EventEmitter<any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onStable",
              "description": "",
              "type": "EventEmitter<any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onError",
              "description": "",
              "type": "EventEmitter<any>"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "run",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L391-L393",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(...args: any[]) => any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyThis",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyArgs",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "run(fn: (...args: any[]) => any, applyThis?: any, applyArgs?: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "runGuarded",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L395-L397",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(...args: any[]) => any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyThis",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyArgs",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "runGuarded(fn: (...args: any[]) => any, applyThis?: any, applyArgs?: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "runOutsideAngular",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L399-L401",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(...args: any[]) => any"
                    }
                  ]
                ],
                "signature": "runOutsideAngular(fn: (...args: any[]) => any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "runTask",
              "info": {
                "file": "packages/core/src/zone/ng_zone.ts#L403-L405",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(...args: any[]) => any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyThis",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "applyArgs",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "runTask(fn: (...args: any[]) => any, applyThis?: any, applyArgs?: any, name?: string): any;"
              }
            }
          ]
        ],
        "signature": "class NoopNgZone implements NgZone {\n  readonly hasPendingMicrotasks: boolean = false;\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly isStable: boolean = true;\n  readonly onUnstable: EventEmitter<any> = new EventEmitter();\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter();\n  readonly onStable: EventEmitter<any> = new EventEmitter();\n  readonly onError: EventEmitter<any> = new EventEmitter();\n\n  run(fn: (...args: any[]) => any, applyThis?: any, applyArgs?: any): any;\n  runGuarded(\n    fn: (...args: any[]) => any,\n    applyThis?: any,\n    applyArgs?: any\n  ): any;\n  runOutsideAngular(fn: (...args: any[]) => any): any;\n  runTask(\n    fn: (...args: any[]) => any,\n    applyThis?: any,\n    applyArgs?: any,\n    name?: string\n  ): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "Renderer2",
    "overloads": [
      {
        "file": "packages/core/src/render/api.ts#L111-L281",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Extend this base class to implement custom rendering. By default, Angular\nrenders a template into DOM. You can use custom rendering to intercept\nrendering calls, or to render to something other than DOM.\n\nCreate your custom renderer using `RendererFactory2`.\n\nUse a custom renderer to bypass Angular's templating and\nmake custom UI changes that can't be expressed declaratively.\nFor example if you need to set a property or an attribute whose name is\nnot statically known, use the `setProperty()` or\n`setAttribute()` method.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "destroyNode",
              "description": "If null or undefined, the view engine won't call it.\nThis is used as a performance optimization for production mode.",
              "type": "(node: any) => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "__NG_ELEMENT_ID__",
              "description": "",
              "type": "() => Renderer2"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "destroy",
              "info": {
                "file": "packages/core/src/render/api.ts#L122-L122",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to destroy the renderer or the host element.\n"
                    }
                  ]
                ],
                "signature": "abstract destroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createElement",
              "info": {
                "file": "packages/core/src/render/api.ts#L129-L129",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to create an instance of the host element."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "An identifying name for the new element, unique within the namespace.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "namespace",
                      "description": "The namespace for the new element.",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    { "__kind": "heading", "description": "The new element.\n" }
                  ]
                ],
                "signature": "abstract createElement(name: string, namespace?: string|null): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createComment",
              "info": {
                "file": "packages/core/src/render/api.ts#L135-L135",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to add a comment to the DOM of the host element."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The comment text.",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The modified element.\n"
                    }
                  ]
                ],
                "signature": "abstract createComment(value: string): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createText",
              "info": {
                "file": "packages/core/src/render/api.ts#L142-L142",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to add text to the DOM of the host element."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The text string.",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The modified element.\n"
                    }
                  ]
                ],
                "signature": "abstract createText(value: string): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "appendChild",
              "info": {
                "file": "packages/core/src/render/api.ts#L154-L154",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Appends a child to a given parent node in the host element DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parent",
                      "description": "The parent node.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newChild",
                      "description": "The new child node.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract appendChild(parent: any, newChild: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "insertBefore",
              "info": {
                "file": "packages/core/src/render/api.ts#L162-L162",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to insert a child node at a given position in a parent node\nin the host element DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parent",
                      "description": "The parent node.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newChild",
                      "description": "The new child nodes.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "refChild",
                      "description": "The existing child node before which `newChild` is inserted.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract insertBefore(parent: any, newChild: any, refChild: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeChild",
              "info": {
                "file": "packages/core/src/render/api.ts#L170-L170",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to remove a child node from the host element's DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parent",
                      "description": "The parent node.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "oldChild",
                      "description": "The child node to remove.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isHostElement",
                      "description": "Optionally signal to the renderer whether this element is a host element",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "abstract removeChild(parent: any, oldChild: any, isHostElement?: boolean): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "selectRootElement",
              "info": {
                "file": "packages/core/src/render/api.ts#L181-L181",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to prepare an element to be bootstrapped\nas a root element, and return the element instance."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "selectorOrNode",
                      "description": "The DOM element.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "preserveContent",
                      "description": "Whether the contents of the root element",
                      "type": "boolean"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The root element.\n"
                    }
                  ]
                ],
                "signature": "abstract selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parentNode",
              "info": {
                "file": "packages/core/src/render/api.ts#L191-L191",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to get the parent of a given node\nin the host element's DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "The child node to query.",
                      "type": "any"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The parent node, or null if there is no parent.\nFor WebWorkers, always returns true.\nThis is because the check is synchronous,\nand the caller can't rely on checking for null.\n"
                    }
                  ]
                ],
                "signature": "abstract parentNode(node: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "nextSibling",
              "info": {
                "file": "packages/core/src/render/api.ts#L200-L200",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to get the next sibling node of a given node\nin the host element's DOM."
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The sibling node, or null if there is no sibling.\nFor WebWorkers, always returns a value.\nThis is because the check is synchronous,\nand the caller can't rely on checking for null.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract nextSibling(node: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setAttribute",
              "info": {
                "file": "packages/core/src/render/api.ts#L208-L208",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to set an attribute value for an element in the DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "The element.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "The attribute name.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "namespace",
                      "description": "The namespace.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract setAttribute(el: any, name: string, value: string, namespace?: string|null): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeAttribute",
              "info": {
                "file": "packages/core/src/render/api.ts#L216-L216",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to remove an attribute from an element in the DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "The element.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "The attribute name.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "namespace",
                      "description": "The namespace.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract removeAttribute(el: any, name: string, namespace?: string|null): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addClass",
              "info": {
                "file": "packages/core/src/render/api.ts#L222-L222",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to add a class to an element in the DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "The element.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "The class name.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract addClass(el: any, name: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeClass",
              "info": {
                "file": "packages/core/src/render/api.ts#L229-L229",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to remove a class from an element in the DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "The element.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "The class name.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract removeClass(el: any, name: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setStyle",
              "info": {
                "file": "packages/core/src/render/api.ts#L238-L238",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to set a CSS style for an element in the DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "The element.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "style",
                      "description": "The name of the style.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "flags",
                      "description": "Flags for style variations. No flags are set by default.",
                      "type": "RendererStyleFlags2"
                    }
                  ]
                ],
                "signature": "abstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeStyle",
              "info": {
                "file": "packages/core/src/render/api.ts#L246-L246",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to remove the value from a CSS style for an element in the DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "The element.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "style",
                      "description": "The name of the style.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "flags",
                      "description": "Flags for style variations to remove, if set. ???",
                      "type": "RendererStyleFlags2"
                    }
                  ]
                ],
                "signature": "abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setProperty",
              "info": {
                "file": "packages/core/src/render/api.ts#L254-L254",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to set the value of a property of an element in the DOM."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "The element.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "The property name.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract setProperty(el: any, name: string, value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setValue",
              "info": {
                "file": "packages/core/src/render/api.ts#L261-L261",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to set the value of a node in the host element."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "The node.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value.",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract setValue(node: any, value: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "listen",
              "info": {
                "file": "packages/core/src/render/api.ts#L272-L274",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Implement this callback to start an event listener."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "target",
                      "description": "The context in which to listen for events. Can be",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "The event to listen for.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callback",
                      "description": "A handler function to invoke when the event occurs.",
                      "type": "(event: any) => boolean | void"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "An \"unlisten\" function for disposing of this handler.\n"
                    }
                  ]
                ],
                "signature": "abstract listen(   target: 'window'|'document'|'body'|any, eventName: string,   callback: (event: any) => boolean | void): () => void;"
              }
            }
          ]
        ],
        "signature": "class Renderer2 {\n  destroyNode!: ((node: any) => void) | null;\n  static __NG_ELEMENT_ID__: () => Renderer2 = () => SWITCH_RENDERER2_FACTORY();\n\n  abstract destroy(): void;\n  abstract createElement(name: string, namespace?: string | null): any;\n  abstract createComment(value: string): any;\n  abstract createText(value: string): any;\n  abstract appendChild(parent: any, newChild: any): void;\n  abstract insertBefore(parent: any, newChild: any, refChild: any): void;\n  abstract removeChild(\n    parent: any,\n    oldChild: any,\n    isHostElement?: boolean\n  ): void;\n  abstract selectRootElement(\n    selectorOrNode: string | any,\n    preserveContent?: boolean\n  ): any;\n  abstract parentNode(node: any): any;\n  abstract nextSibling(node: any): any;\n  abstract setAttribute(\n    el: any,\n    name: string,\n    value: string,\n    namespace?: string | null\n  ): void;\n  abstract removeAttribute(\n    el: any,\n    name: string,\n    namespace?: string | null\n  ): void;\n  abstract addClass(el: any, name: string): void;\n  abstract removeClass(el: any, name: string): void;\n  abstract setStyle(\n    el: any,\n    style: string,\n    value: any,\n    flags?: RendererStyleFlags2\n  ): void;\n  abstract removeStyle(\n    el: any,\n    style: string,\n    flags?: RendererStyleFlags2\n  ): void;\n  abstract setProperty(el: any, name: string, value: any): void;\n  abstract setValue(node: any, value: string): void;\n  abstract listen(\n    target: \"window\" | \"document\" | \"body\" | any,\n    eventName: string,\n    callback: (event: any) => boolean | void\n  ): () => void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "RendererFactory2",
    "overloads": [
      {
        "file": "packages/core/src/render/api.ts#L55-L76",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates and initializes a custom renderer that implements the `Renderer2` base class.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "createRenderer",
              "info": {
                "file": "packages/core/src/render/api.ts#L62-L62",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates and initializes a custom renderer for a host DOM element."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "hostElement",
                      "description": "The element to render.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "The base class to implement.",
                      "type": "RendererType2"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The new custom renderer instance.\n"
                    }
                  ]
                ],
                "signature": "abstract createRenderer(hostElement: any, type: RendererType2|null): Renderer2;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "begin",
              "info": {
                "file": "packages/core/src/render/api.ts#L66-L66",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "A callback invoked when rendering has begun.\n"
                    }
                  ]
                ],
                "signature": "abstract begin?(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "end",
              "info": {
                "file": "packages/core/src/render/api.ts#L70-L70",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "A callback invoked when rendering has completed.\n"
                    }
                  ]
                ],
                "signature": "abstract end?(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "whenRenderingDone",
              "info": {
                "file": "packages/core/src/render/api.ts#L75-L75",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Use with animations test-only mode. Notifies the test when rendering has completed."
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The asynchronous result of the developer-defined function.\n"
                    }
                  ]
                ],
                "signature": "abstract whenRenderingDone?(): Promise<any>;"
              }
            }
          ]
        ],
        "signature": "class RendererFactory2 {\n  abstract createRenderer(\n    hostElement: any,\n    type: RendererType2 | null\n  ): Renderer2;\n  abstract begin?(): void;\n  abstract end?(): void;\n  abstract whenRenderingDone?(): Promise<any>;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "RendererStyleFlags2",
    "overloads": [
      {
        "file": "packages/core/src/render/api.ts#L82-L94",
        "signature": "export enum RendererStyleFlags2 {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n  /**\n   * Marks a style as important.\n   */\n  Important = 1 << 0,\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  DashCase = 1 << 1,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Flags for renderer-specific style modifiers."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "RendererType2",
    "overloads": [
      {
        "file": "packages/core/src/render/api.ts#L22-L48",
        "signature": "interface RendererType2 {\n  id: string;\n  encapsulation: ViewEncapsulation;\n  styles: (string | any[])[];\n  data: { [kind: string]: any };\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Used by `RendererFactory2` to associate custom rendering data and styles\nwith a rendering implementation."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "id",
              "description": "A unique identifying string for the new renderer, used when creating\nunique styles for encapsulation.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "encapsulation",
              "description": "The view encapsulation type, which determines how styles are applied to\nDOM elements. One of\n- `Emulated` (default): Emulate native scoping of styles.\n- `Native`: Use the native encapsulation mechanism of the renderer.\n- `ShadowDom`: Use modern [Shadow\nDOM](https://w3c.github.io/webcomponents/spec/shadow/) and\ncreate a ShadowRoot for component's host element.\n- `None`: Do not provide any template or style encapsulation.",
              "type": "ViewEncapsulation"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styles",
              "description": "Defines CSS styles to be stored on a renderer instance.",
              "type": "(string | any[])[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "data",
              "description": "Defines arbitrary developer-defined data to be stored on a renderer instance.\nThis is useful for renderers that delegate to other renderers.",
              "type": "{ [kind: string]: any; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "Compiler",
    "overloads": [
      {
        "file": "packages/core/src/linker/compiler.ts#L97-L139",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Low-level service for running the angular compiler during runtime\nto create {@link ComponentFactory}s, which\ncan later be used to create and render a Component instance.\n\nEach `@NgModule` provides an own `Compiler` to its injector,\nthat will use the directives/pipes of the ng module for compilation\nof components.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "compileModuleSync",
              "description": "Compiles the given NgModule and all of its components. All templates of the components listed\nin `entryComponents` have to be inlined.",
              "type": "<T>(moduleType: Type<T>) => NgModuleFactory<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "compileModuleAsync",
              "description": "Compiles the given NgModule and all of its components",
              "type": "<T>(moduleType: Type<T>) => Promise<NgModuleFactory<T>>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "compileModuleAndAllComponentsSync",
              "description": "Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.",
              "type": "<T>(moduleType: Type<T>) => ModuleWithComponentFactories<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "compileModuleAndAllComponentsAsync",
              "description": "Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.",
              "type": "<T>(moduleType: Type<T>) => Promise<ModuleWithComponentFactories<T>>"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCache",
              "info": {
                "file": "packages/core/src/linker/compiler.ts#L126-L126",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Clears all caches.\n"
                    }
                  ]
                ],
                "signature": "clearCache(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCacheFor",
              "info": {
                "file": "packages/core/src/linker/compiler.ts#L131-L131",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Clears the cache for the given component/ngModule.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type<any>"
                    }
                  ]
                ],
                "signature": "clearCacheFor(type: Type<any>);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getModuleId",
              "info": {
                "file": "packages/core/src/linker/compiler.ts#L136-L138",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Returns the id for a given NgModule, if one is defined and known to the compiler.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "Type<any>"
                    }
                  ]
                ],
                "signature": "getModuleId(moduleType: Type<any>): string|undefined;"
              }
            }
          ]
        ],
        "signature": "class Compiler {\n  compileModuleSync: <T>(\n    moduleType: Type<T>\n  ) => NgModuleFactory<T> = Compiler_compileModuleSync;\n  compileModuleAsync: <T>(\n    moduleType: Type<T>\n  ) => Promise<NgModuleFactory<T>> = Compiler_compileModuleAsync;\n  compileModuleAndAllComponentsSync: <T>(\n    moduleType: Type<T>\n  ) => ModuleWithComponentFactories<\n    T\n  > = Compiler_compileModuleAndAllComponentsSync;\n  compileModuleAndAllComponentsAsync: <T>(\n    moduleType: Type<T>\n  ) => Promise<\n    ModuleWithComponentFactories<T>\n  > = Compiler_compileModuleAndAllComponentsAsync;\n\n  getModuleId(moduleType: Type<any>): string | undefined;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "COMPILER_OPTIONS",
    "overloads": [
      {
        "file": "packages/core/src/linker/compiler.ts#L159-L159",
        "signature": "const COMPILER_OPTIONS: InjectionToken<CompilerOptions[]>;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "CompilerFactory",
    "overloads": [
      {
        "file": "packages/core/src/linker/compiler.ts#L166-L168",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A factory for creating a Compiler\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "createCompiler",
              "info": {
                "file": "packages/core/src/linker/compiler.ts#L167-L167",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "CompilerOptions[]"
                    }
                  ]
                ],
                "signature": "abstract createCompiler(options?: CompilerOptions[]): Compiler;"
              }
            }
          ]
        ],
        "signature": "class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "CompilerOptions",
    "overloads": [
      {
        "file": "packages/core/src/linker/compiler.ts#L146-L152",
        "signature": "export type CompilerOptions = {\n  useJit?: boolean;\n  defaultEncapsulation?: ViewEncapsulation;\n  providers?: StaticProvider[];\n  missingTranslation?: MissingTranslationStrategy;\n  preserveWhitespaces?: boolean;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Options for creating a compiler\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ModuleWithComponentFactories",
    "overloads": [
      {
        "file": "packages/core/src/linker/compiler.ts#L30-L34",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Combination of NgModuleFactory and ComponentFactorys.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class ModuleWithComponentFactories<T> {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ComponentFactory",
    "overloads": [
      {
        "file": "packages/core/src/linker/component_factory.ts#L79-L106",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Base class for a factory that can create a component dynamically.\nInstantiate a factory for a given type of component with `resolveComponentFactory()`.\nUse the resulting `ComponentFactory.create()` method to create a component of that type.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Dynamic Components](guide/dynamic-component-loader)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/core/src/linker/component_factory.ts#L103-L105",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates a new component.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "injector",
                      "description": "",
                      "type": "Injector"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "projectableNodes",
                      "description": "",
                      "type": "any[][]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rootSelectorOrNode",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ngModule",
                      "description": "",
                      "type": "NgModuleRef<any>"
                    }
                  ]
                ],
                "signature": "abstract create(   injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,   ngModule?: NgModuleRef<any>): ComponentRef<C>;"
              }
            }
          ]
        ],
        "signature": "class ComponentFactory<C> {\n  abstract create(\n    injector: Injector,\n    projectableNodes?: any[][],\n    rootSelectorOrNode?: string | any,\n    ngModule?: NgModuleRef<any>\n  ): ComponentRef<C>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ComponentRef",
    "overloads": [
      {
        "file": "packages/core/src/linker/component_factory.ts#L24-L68",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents a component created by a `ComponentFactory`.\nProvides access to the component instance and related objects,\nand provides the means of destroying the instance.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "destroy",
              "info": {
                "file": "packages/core/src/linker/component_factory.ts#L59-L59",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Destroys the component instance and all of the data structures associated with it.\n"
                    }
                  ]
                ],
                "signature": "abstract destroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onDestroy",
              "info": {
                "file": "packages/core/src/linker/component_factory.ts#L67-L67",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "A lifecycle hook that provides additional developer-defined cleanup\nfunctionality for the component."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callback",
                      "description": "A handler function that cleans up developer-defined data",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "abstract onDestroy(callback: Function): void;"
              }
            }
          ]
        ],
        "signature": "class ComponentRef<C> {\n  abstract destroy(): void;\n  abstract onDestroy(callback: Function): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ComponentFactoryResolver",
    "overloads": [
      {
        "file": "packages/core/src/linker/component_factory_resolver.ts#L45-L52",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A simple registry that maps `Components` to generated `ComponentFactory` classes\nthat can be used to create instances of components.\nUse to obtain the factory for a given component type,\nthen use the factory's `create()` method to create a component of that type.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Dynamic Components](guide/dynamic-component-loader)"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "NULL",
              "description": "",
              "type": "ComponentFactoryResolver"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveComponentFactory",
              "info": {
                "file": "packages/core/src/linker/component_factory_resolver.ts#L51-L51",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves the factory object that creates a component of the given type."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "component",
                      "description": "The component type.",
                      "type": "Type<T>"
                    }
                  ]
                ],
                "signature": "abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;"
              }
            }
          ]
        ],
        "signature": "class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = new _NullComponentFactoryResolver();\n\n  abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ElementRef",
    "overloads": [
      {
        "file": "packages/core/src/linker/element_ref.ts#L27-L60",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A wrapper around a native element inside of a View.\n\nAn `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\nelement.\n"
            }
          ],
          [
            "security",
            {
              "__kind": "heading",
              "description": "Permitting direct access to the DOM can make your application more vulnerable to\nXSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n[Security Guide](http://g.co/ng/security).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "nativeElement",
              "description": "The underlying native element or `null` if direct access to native elements is not supported\n(e.g. when the application runs in a web worker).\n\n<div class=\"callout is-critical\">\n  <header>Use with caution</header>\n  <p>\n   Use this API as the last resort when direct access to DOM is needed. Use templating and\n   data-binding provided by Angular instead. Alternatively you can take a look at {@link\nRenderer2}\n   which provides API that can safely be used even when direct access to native elements is not\n   supported.\n  </p>\n  <p>\n   Relying on direct DOM access creates tight coupling between your application and rendering\n   layers which will make it impossible to separate the two and deploy your application into a\n   web worker.\n  </p>\n</div>",
              "type": "T"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "__NG_ELEMENT_ID__",
              "description": "",
              "type": "() => ElementRef"
            }
          ]
        ],
        "signature": "class ElementRef<T = any> {\n  public nativeElement: T;\n  static __NG_ELEMENT_ID__: () => ElementRef = () =>\n    SWITCH_ELEMENT_REF_FACTORY(ElementRef);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "NgModuleFactory",
    "overloads": [
      {
        "file": "packages/core/src/linker/ng_module_factory.ts#L58-L61",
        "info": [
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/core/src/linker/ng_module_factory.ts#L60-L60",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parentInjector",
                      "description": "",
                      "type": "Injector"
                    }
                  ]
                ],
                "signature": "abstract create(parentInjector: Injector|null): NgModuleRef<T>;"
              }
            }
          ]
        ],
        "signature": "class NgModuleFactory<T> {\n  abstract create(parentInjector: Injector | null): NgModuleRef<T>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "NgModuleRef",
    "overloads": [
      {
        "file": "packages/core/src/linker/ng_module_factory.ts#L21-L47",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents an instance of an `NgModule` created by an `NgModuleFactory`.\nProvides access to the `NgModule` instance and related objects.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "destroy",
              "info": {
                "file": "packages/core/src/linker/ng_module_factory.ts#L41-L41",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Destroys the module instance and all of the data structures associated with it.\n"
                    }
                  ]
                ],
                "signature": "abstract destroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onDestroy",
              "info": {
                "file": "packages/core/src/linker/ng_module_factory.ts#L46-L46",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Registers a callback to be executed when the module is destroyed.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callback",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "abstract onDestroy(callback: () => void): void;"
              }
            }
          ]
        ],
        "signature": "class NgModuleRef<T> {\n  abstract destroy(): void;\n  abstract onDestroy(callback: () => void): void;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "getModuleFactory",
    "overloads": [
      {
        "file": "packages/core/src/linker/ng_module_factory_loader.ts#L44-L44",
        "signature": "const getModuleFactory: (id: string) => NgModuleFactory<any>;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "NgModuleFactoryLoader",
    "overloads": [
      {
        "file": "packages/core/src/linker/ng_module_factory_loader.ts#L22-L24",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Used to load ng module factories.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is\npart of its implementation. See `LoadChildren` for more details.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "load",
              "info": {
                "file": "packages/core/src/linker/ng_module_factory_loader.ts#L23-L23",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract load(path: string): Promise<NgModuleFactory<any>>;"
              }
            }
          ]
        ],
        "signature": "class NgModuleFactoryLoader {\n  abstract load(path: string): Promise<NgModuleFactory<any>>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "QueryList",
    "overloads": [
      {
        "file": "packages/core/src/linker/query_list.ts#L45-L164",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An unmodifiable list of items that Angular keeps up to date when the state\nof the application changes.\n\nThe type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\nprovide.\n\nImplements an iterable interface, therefore it can be used in both ES6\njavascript `for (var i of items)` loops as well as in Angular templates with\n`*ngFor=\"let i of myList\"`.\n\nChanges can be observed by subscribing to the changes `Observable`.\n\nNOTE: In the future this class will implement an `Observable` interface.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n### Example\n```typescript"
            }
          ],
          [
            "Component({...})",
            { "__kind": "heading", "description": "\nclass Container {" }
          ],
          [
            "ViewChildren(Item)",
            {
              "__kind": "heading",
              "description": "items:QueryList<Item>;\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "dirty",
              "description": "",
              "type": "true"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "changes",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "length",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "first",
              "description": "",
              "type": "T"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "last",
              "description": "",
              "type": "T"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "[Symbol.iterator]",
              "description": "",
              "type": "() => any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "map",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L70-L72",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "See\n[Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(item: T, index: number, array: T[]) => U"
                    }
                  ]
                ],
                "signature": "map<U>(fn: (item: T, index: number, array: T[]) => U): U[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "filter",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L78-L80",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "See\n[Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(item: T, index: number, array: T[]) => boolean"
                    }
                  ]
                ],
                "signature": "filter(fn: (item: T, index: number, array: T[]) => boolean): T[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "find",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L86-L88",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "See\n[Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(item: T, index: number, array: T[]) => boolean"
                    }
                  ]
                ],
                "signature": "find(fn: (item: T, index: number, array: T[]) => boolean): T|undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "reduce",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L94-L96",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "See\n[Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(prevValue: U, curValue: T, curIndex: number, array: T[]) => U"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "init",
                      "description": "",
                      "type": "U"
                    }
                  ]
                ],
                "signature": "reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEach",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L102-L104",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "See\n[Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(item: T, index: number, array: T[]) => void"
                    }
                  ]
                ],
                "signature": "forEach(fn: (item: T, index: number, array: T[]) => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "some",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L110-L112",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "See\n[Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(value: T, index: number, array: T[]) => boolean"
                    }
                  ]
                ],
                "signature": "some(fn: (value: T, index: number, array: T[]) => boolean): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toArray",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L117-L119",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Returns a copy of the internal results list as an Array.\n"
                    }
                  ]
                ],
                "signature": "toArray(): T[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L121-L123",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "reset",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L132-L138",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\non change detection, it will not notify of changes to the queries, unless a new change\noccurs.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "resultsTree",
                      "description": "The query results to store",
                      "type": "(any[] | T)[]"
                    }
                  ]
                ],
                "signature": "reset(resultsTree: Array<T|any[]>): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "notifyOnChanges",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L143-L145",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n"
                    }
                  ]
                ],
                "signature": "notifyOnChanges(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setDirty",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L148-L150",
                "info": [],
                "signature": "setDirty();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "destroy",
              "info": {
                "file": "packages/core/src/linker/query_list.ts#L153-L156",
                "info": [],
                "signature": "destroy(): void;"
              }
            }
          ]
        ],
        "signature": "class QueryList<T> implements Iterable<T> {\n  public readonly dirty = true;\n  public readonly changes: Observable<any> = new EventEmitter();\n  readonly length: number = 0;\n  readonly first!: T;\n  readonly last!: T;\n  [Symbol.iterator]!: () => Iterator<T>;\n\n  map<U>(fn: (item: T, index: number, array: T[]) => U): U[];\n  filter(fn: (item: T, index: number, array: T[]) => boolean): T[];\n  find(fn: (item: T, index: number, array: T[]) => boolean): T | undefined;\n  reduce<U>(\n    fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U,\n    init: U\n  ): U;\n  forEach(fn: (item: T, index: number, array: T[]) => void): void;\n  some(fn: (value: T, index: number, array: T[]) => boolean): boolean;\n  toArray(): T[];\n  toString(): string;\n  reset(resultsTree: Array<T | any[]>): void;\n  notifyOnChanges(): void;\n  setDirty();\n  destroy(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "SystemJsNgModuleLoader",
    "overloads": [
      {
        "file": "packages/core/src/linker/system_js_ng_module_factory_loader.ts#L55-L92",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is\npart of its implementation. See `LoadChildren` for more details.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "load",
              "info": {
                "file": "packages/core/src/linker/system_js_ng_module_factory_loader.ts#L63-L66",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "load(path: string): Promise<NgModuleFactory<any>>;"
              }
            }
          ]
        ],
        "signature": "class SystemJsNgModuleLoader implements NgModuleFactoryLoader {\n  load(path: string): Promise<NgModuleFactory<any>>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "SystemJsNgModuleLoaderConfig",
    "overloads": [
      {
        "file": "packages/core/src/linker/system_js_ng_module_factory_loader.ts#L30-L42",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Configuration for SystemJsNgModuleLoader.\ntoken.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`\nis part of its implementation. See `LoadChildren` for more details.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "factoryPathPrefix",
              "description": "Prefix to add when computing the name of the factory module for a given module name.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "factoryPathSuffix",
              "description": "Suffix to add when computing the name of the factory module for a given module name.",
              "type": "string"
            }
          ]
        ],
        "signature": "class SystemJsNgModuleLoaderConfig {\n  factoryPathPrefix!: string;\n  factoryPathSuffix!: string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "TemplateRef",
    "overloads": [
      {
        "file": "packages/core/src/linker/template_ref.ts#L34-L64",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents an embedded template that can be used to instantiate embedded views.\nTo instantiate embedded views based on a template, use the `ViewContainerRef`\nmethod `createEmbeddedView()`.\n\nAccess a `TemplateRef` instance by placing a directive on an `<ng-template>`\nelement (or directive prefixed with `*`). The `TemplateRef` for the embedded view\nis injected into the constructor of the directive,\nusing the `TemplateRef` token.\n\nYou can also use a `Query` to find a `TemplateRef` associated with\na component or a directive.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`ViewContainerRef`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "__NG_ELEMENT_ID__",
              "description": "",
              "type": "() => TemplateRef<any> | null"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createEmbeddedView",
              "info": {
                "file": "packages/core/src/linker/template_ref.ts#L56-L56",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Instantiates an embedded view based on this template,\nand attaches it to the view container."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "The data-binding context of the embedded view, as declared",
                      "type": "C"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The new embedded view object.\n"
                    }
                  ]
                ],
                "signature": "abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;"
              }
            }
          ]
        ],
        "signature": "class TemplateRef<C> {\n  static __NG_ELEMENT_ID__: () => TemplateRef<any> | null = () =>\n    SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef);\n\n  abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ViewContainerRef",
    "overloads": [
      {
        "file": "packages/core/src/linker/view_container_ref.ts#L35-L153",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents a container where one or more views can be attached to a component.\n\nCan contain *host views* (created by instantiating a\ncomponent with the `createComponent()` method), and *embedded views*\n(created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n\nA view container instance can contain other view containers,\ncreating a [view hierarchy](guide/glossary#view-tree).\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`ComponentRef`" }],
          [
            "see",
            { "__kind": "heading", "description": "`EmbeddedViewRef`\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "__NG_ELEMENT_ID__",
              "description": "",
              "type": "() => ViewContainerRef"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clear",
              "info": {
                "file": "packages/core/src/linker/view_container_ref.ts#L62-L62",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Destroys all views in this container.\n"
                    }
                  ]
                ],
                "signature": "abstract clear(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/core/src/linker/view_container_ref.ts#L69-L69",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves a view from this container."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "The 0-based index of the view to retrieve.",
                      "type": "number"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The `ViewRef` instance, or null if the index is out of range.\n"
                    }
                  ]
                ],
                "signature": "abstract get(index: number): ViewRef|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createEmbeddedView",
              "info": {
                "file": "packages/core/src/linker/view_container_ref.ts#L86-L87",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Instantiates an embedded view and inserts it\ninto this container."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "templateRef",
                      "description": "The HTML template that defines the view.",
                      "type": "TemplateRef<C>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "The 0-based index at which to insert the new view into this container.",
                      "type": "number"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The `ViewRef` instance for the newly created view.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "C"
                    }
                  ]
                ],
                "signature": "abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number):   EmbeddedViewRef<C>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createComponent",
              "info": {
                "file": "packages/core/src/linker/view_container_ref.ts#L102-L104",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Instantiates a single component and inserts its host view into this container.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "componentFactory",
                      "description": "The factory to use.",
                      "type": "ComponentFactory<C>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "The index at which to insert the new component's host view into this container.",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "injector",
                      "description": "The injector to use as the parent for the new component.",
                      "type": "Injector"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "projectableNodes",
                      "description": "",
                      "type": "any[][]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ngModule",
                      "description": "",
                      "type": "NgModuleRef<any>"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The new component instance, containing the host view.\n\n"
                    }
                  ]
                ],
                "signature": "abstract createComponent<C>(   componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,   projectableNodes?: any[][], ngModule?: NgModuleRef<any>): ComponentRef<C>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "insert",
              "info": {
                "file": "packages/core/src/linker/view_container_ref.ts#L114-L114",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Inserts a view into this container."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "viewRef",
                      "description": "The view to insert.",
                      "type": "ViewRef"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "The 0-based index at which to insert the view.",
                      "type": "number"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The inserted `ViewRef` instance.\n\n"
                    }
                  ]
                ],
                "signature": "abstract insert(viewRef: ViewRef, index?: number): ViewRef;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "move",
              "info": {
                "file": "packages/core/src/linker/view_container_ref.ts#L122-L122",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Moves a view to a new location in this container."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "viewRef",
                      "description": "The view to move.",
                      "type": "ViewRef"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "The 0-based index of the new location.",
                      "type": ""
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The moved `ViewRef` instance.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "currentIndex",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "indexOf",
              "info": {
                "file": "packages/core/src/linker/view_container_ref.ts#L130-L130",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Returns the index of a view within the current container."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "viewRef",
                      "description": "The view to query.",
                      "type": "ViewRef"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The 0-based index of the view's position in this container,\nor `-1` if this container doesn't contain the view.\n"
                    }
                  ]
                ],
                "signature": "abstract indexOf(viewRef: ViewRef): number;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "remove",
              "info": {
                "file": "packages/core/src/linker/view_container_ref.ts#L137-L137",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Destroys a view attached to this container"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "The 0-based index of the view to destroy.",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "abstract remove(index?: number): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "detach",
              "info": {
                "file": "packages/core/src/linker/view_container_ref.ts#L145-L145",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Detaches a view from this container without destroying it.\nUse along with `insert()` to move a view within the current container."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "The 0-based index of the view to detach.",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "abstract detach(index?: number): ViewRef|null;"
              }
            }
          ]
        ],
        "signature": "class ViewContainerRef {\n  static __NG_ELEMENT_ID__: () => ViewContainerRef = () =>\n    SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef);\n\n  abstract clear(): void;\n  abstract get(index: number): ViewRef | null;\n  abstract createEmbeddedView<C>(\n    templateRef: TemplateRef<C>,\n    context?: C,\n    index?: number\n  ): EmbeddedViewRef<C>;\n  abstract createComponent<C>(\n    componentFactory: ComponentFactory<C>,\n    index?: number,\n    injector?: Injector,\n    projectableNodes?: any[][],\n    ngModule?: NgModuleRef<any>\n  ): ComponentRef<C>;\n  abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n  abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n  abstract indexOf(viewRef: ViewRef): number;\n  abstract remove(index?: number): void;\n  abstract detach(index?: number): ViewRef | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "EmbeddedViewRef",
    "overloads": [
      {
        "file": "packages/core/src/linker/view_ref.ts#L93-L103",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents an Angular [view](guide/glossary#view) in a view container.\nAn [embedded view](guide/glossary#view-tree) can be referenced from a component\nother than the hosting component whose template defines it, or it can be defined\nindependently by a `TemplateRef`.\n\nProperties of elements in a view can change, but the structure (number and order) of elements in\na view cannot. Change the structure of elements by inserting, moving, or\nremoving nested views in a view container.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`ViewContainerRef`\n" }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nThe following template breaks down into two separate `TemplateRef` instances,\nan outer one and an inner one.\n\n```\nCount: {{items.length}}\n<ul>\n<li *ngFor=\"let  item of items\">{{item}}</li>\n</ul>\n```\n\nThis is the outer `TemplateRef`:\n\n```\nCount: {{items.length}}\n<ul>\n<ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n</ul>\n```\n\nThis is the inner `TemplateRef`:\n\n```\n<li>{{item}}</li>\n```\n\nThe outer and inner `TemplateRef` instances are assembled into views as follows:\n\n```\n<!-- ViewRef: outer-0 -->\nCount: 2\n<ul>\n<ng-template view-container-ref></ng-template>\n<!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n<!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n</ul>\n<!-- /ViewRef: outer-0 -->\n```"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class EmbeddedViewRef<C> extends ViewRef {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ViewRef",
    "overloads": [
      {
        "file": "packages/core/src/linker/view_ref.ts#L19-L38",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents an Angular [view](guide/glossary#view \"Definition\").\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link ChangeDetectorRef#usage-notes Change detection usage}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "destroy",
              "info": {
                "file": "packages/core/src/linker/view_ref.ts#L23-L23",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Destroys this view and all of the data structures associated with it.\n"
                    }
                  ]
                ],
                "signature": "abstract destroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onDestroy",
              "info": {
                "file": "packages/core/src/linker/view_ref.ts#L37-L37",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "A lifecycle hook that provides additional developer-defined cleanup\nfunctionality for views."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callback",
                      "description": "A handler function that cleans up developer-defined data",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "abstract onDestroy(callback: Function): any /** TODO #9100 */;"
              }
            }
          ]
        ],
        "signature": "class ViewRef extends ChangeDetectorRef {\n  abstract destroy(): void;\n  abstract onDestroy(callback: Function): any /** TODO #9100 */;\n}"
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ChangeDetectionStrategy",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/constants.ts#L18-L32",
        "signature": "export enum ChangeDetectionStrategy {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  OnPush = 0,\n\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  Default = 1,\n}",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "The strategy that the default change detector uses to detect changes.\nWhen set, takes effect the next time change detection is triggered.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "{@link ChangeDetectorRef#usage-notes Change detection usage}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ChangeDetectorRef",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/change_detector_ref.ts#L56-L118",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Base class that provides change detection functionality.\nA change-detection tree collects all views that are to be checked for changes.\nUse the methods to add and remove views from the tree, initiate change-detection,\nand explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nThe following examples demonstrate how to modify default change-detection behavior\nto perform explicit detection when needed.\n\n### Use `markForCheck()` with `CheckOnce` strategy\n\nThe following example sets the `OnPush` change-detection strategy for a component\n(`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\nafter an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n\n<code-example path=\"core/ts/change_detect/change-detection.ts\"\nregion=\"mark-for-check\"></code-example>\n\n### Detach change detector to limit how often check occurs\n\nThe following example defines a component with a large list of read-only data\nthat is expected to change constantly, many times per second.\nTo improve performance, we want to check and update the list\nless often than the changes actually occur. To do that, we detach\nthe component's change detector and perform an explicit local check every five seconds.\n\n<code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n\n\n### Reattaching a detached component\n\nThe following example creates a component displaying live data.\nThe component detaches its change detector from the main change detector tree\nwhen the `live` property is set to false, and reattaches it when the property\nbecomes true.\n\n<code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "__NG_ELEMENT_ID__",
              "description": "",
              "type": "() => ChangeDetectorRef"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "markForCheck",
              "info": {
                "file": "packages/core/src/change_detection/change_detector_ref.ts#L69-L69",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\nchange detection strategy, explicitly marks the view as changed so that\nit can be checked again.\n\nComponents are normally marked as dirty (in need of rerendering) when inputs\nhave changed or events have fired in the view. Call this method to ensure that\na component is checked even if these triggers have not occured.\n\n<!-- TODO: Add a link to a chapter on OnPush components -->\n\n"
                    }
                  ]
                ],
                "signature": "abstract markForCheck(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "detach",
              "info": {
                "file": "packages/core/src/change_detection/change_detector_ref.ts#L83-L83",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Detaches this view from the change-detection tree.\nA detached view is  not checked until it is reattached.\nUse in combination with `detectChanges()` to implement local change detection checks.\n\nDetached views are not checked during change detection runs until they are\nre-attached, even if they are marked as dirty.\n\n<!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n<!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\n"
                    }
                  ]
                ],
                "signature": "abstract detach(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "detectChanges",
              "info": {
                "file": "packages/core/src/change_detection/change_detector_ref.ts#L94-L94",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach\ndetach}\nto implement local change detection checks.\n\n<!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n<!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\n"
                    }
                  ]
                ],
                "signature": "abstract detectChanges(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "checkNoChanges",
              "info": {
                "file": "packages/core/src/change_detection/change_detector_ref.ts#L102-L102",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Checks the change detector and its children, and throws if any changes are detected.\n\nUse in development mode to verify that running change detection doesn't introduce\nother changes.\n"
                    }
                  ]
                ],
                "signature": "abstract checkNoChanges(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "reattach",
              "info": {
                "file": "packages/core/src/change_detection/change_detector_ref.ts#L111-L111",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Re-attaches the previously detached view to the change detection tree.\nViews are attached to the tree by default.\n\n<!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\n"
                    }
                  ]
                ],
                "signature": "abstract reattach(): void;"
              }
            }
          ]
        ],
        "signature": "class ChangeDetectorRef {\n  static __NG_ELEMENT_ID__: () => ChangeDetectorRef = () =>\n    SWITCH_CHANGE_DETECTOR_REF_FACTORY();\n\n  abstract markForCheck(): void;\n  abstract detach(): void;\n  abstract detectChanges(): void;\n  abstract checkNoChanges(): void;\n  abstract reattach(): void;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "CollectionChangeRecord",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L119-L119",
        "signature": "interface CollectionChangeRecord<V> {\n  // inherited from IterableChangeRecord\n  readonly currentIndex: number | null;\n  readonly previousIndex: number | null;\n  readonly item: V;\n  readonly trackById: any;\n}",
        "info": [
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "v4.0.0 - Use IterableChangeRecord instead."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "DefaultIterableDiffer",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L32-L565",
        "info": [
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "v4.0.0 - Should not be part of public API."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "length",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "collection",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEachItem",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L58-L63",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(record: IterableChangeRecord_<V>) => void"
                    }
                  ]
                ],
                "signature": "forEachItem(fn: (record: IterableChangeRecord_<V>) => void);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEachOperation",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L65-L115",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(item: IterableChangeRecord<V>, previousIndex: number | null, currentIndex: number | null) => void"
                    }
                  ]
                ],
                "signature": "forEachOperation(   fn: (item: IterableChangeRecord<V>, previousIndex: number|null, currentIndex: number|null) =>     void);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEachPreviousItem",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L117-L122",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(record: IterableChangeRecord_<V>) => void"
                    }
                  ]
                ],
                "signature": "forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEachAddedItem",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L124-L129",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(record: IterableChangeRecord_<V>) => void"
                    }
                  ]
                ],
                "signature": "forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEachMovedItem",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L131-L136",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(record: IterableChangeRecord_<V>) => void"
                    }
                  ]
                ],
                "signature": "forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEachRemovedItem",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L138-L143",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(record: IterableChangeRecord_<V>) => void"
                    }
                  ]
                ],
                "signature": "forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forEachIdentityChange",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L145-L150",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "(record: IterableChangeRecord_<V>) => void"
                    }
                  ]
                ],
                "signature": "forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "diff",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L152-L164",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "diff(collection: NgIterable<V>|null|undefined): DefaultIterableDiffer<V>|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onDestroy",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L166-L166",
                "info": [],
                "signature": "onDestroy();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "check",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L168-L218",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "collection",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "check(collection: NgIterable<V>): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_reset",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L236-L261",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Reset the state of the change objects to show no changes. This means set previousKey to\ncurrentKey, and clear all of the queues (additions, moves, removals).\nSet the previousIndexes of moved and added items to their currentIndexes\nReset the list of additions, moves and removals\n"
                    }
                  ],
                  ["internal", { "__kind": "heading", "description": "\n" }]
                ],
                "signature": "_reset();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_mismatch",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L273-L310",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "This is the core function which handles differences between collections.\n\n- `record` is the record which we saw at this position last time. If null then it is a new\nitem.\n- `item` is the current item in the collection\n- `index` is the position of the item in the collection\n"
                    }
                  ],
                  ["internal", { "__kind": "heading", "description": "\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "item",
                      "description": "",
                      "type": "V"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "itemTrackBy",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "_mismatch(record: IterableChangeRecord_<V>|null, item: V, itemTrackBy: any, index: number):   IterableChangeRecord_<V>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_verifyReinsertion",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L339-L350",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n\nUse case: `[a, a]` => `[b, a, a]`\n\nIf we did not have this check then the insertion of `b` would:\n1) evict first `a`\n2) insert `b` at `0` index.\n3) leave `a` at index `1` as is. <-- this is wrong!\n3) reinsert `a` at index 2. <-- this is wrong!\n\nThe correct behavior is:\n1) evict first `a`\n2) insert `b` at `0` index.\n3) reinsert `a` at index 1.\n3) move `a` at from `1` to `2`.\n\n\nDouble check that we have not evicted a duplicate item. We need to check if the item type may\nhave already been removed:\nThe insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\nat the end. Which will show up as the two 'a's switching position. This is incorrect, since a\nbetter way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\nat the end.\n"
                    }
                  ],
                  ["internal", { "__kind": "heading", "description": "\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "item",
                      "description": "",
                      "type": "V"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "itemTrackBy",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "_verifyReinsertion(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):   IterableChangeRecord_<V>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_truncate",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L359-L385",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n\n- `record` The first excess {@link IterableChangeRecord_}.\n"
                    }
                  ],
                  ["internal", { "__kind": "heading", "description": "\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ]
                ],
                "signature": "_truncate(record: IterableChangeRecord_<V>|null);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_reinsertAfter",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L388-L411",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "prevRecord",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "_reinsertAfter(   record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,   index: number): IterableChangeRecord_<V>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_moveAfter",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L414-L421",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "prevRecord",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "_moveAfter(   record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,   index: number): IterableChangeRecord_<V>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_addAfter",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L424-L440",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "prevRecord",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "_addAfter(   record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,   index: number): IterableChangeRecord_<V>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_insertAfter",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L443-L476",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "prevRecord",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "_insertAfter(   record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,   index: number): IterableChangeRecord_<V>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_remove",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L479-L481",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ]
                ],
                "signature": "_remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_unlink",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L484-L508",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ]
                ],
                "signature": "_unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_addToMoves",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L511-L530",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "toIndex",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "_addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_addIdentityChange",
              "info": {
                "file": "packages/core/src/change_detection/differs/default_iterable_differ.ts#L556-L564",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "record",
                      "description": "",
                      "type": "IterableChangeRecord_<V>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "item",
                      "description": "",
                      "type": "V"
                    }
                  ]
                ],
                "signature": "_addIdentityChange(record: IterableChangeRecord_<V>, item: V);"
              }
            }
          ]
        ],
        "signature": "class DefaultIterableDiffer<V>\n  implements IterableDiffer<V>, IterableChanges<V> {\n  public readonly length: number = 0;\n  public readonly collection!: V[] | Iterable<V> | null;\n\n  forEachItem(fn: (record: IterableChangeRecord_<V>) => void);\n  forEachOperation(\n    fn: (\n      item: IterableChangeRecord<V>,\n      previousIndex: number | null,\n      currentIndex: number | null\n    ) => void\n  );\n  forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void);\n  forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void);\n  forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void);\n  forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void);\n  forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void);\n  diff(\n    collection: NgIterable<V> | null | undefined\n  ): DefaultIterableDiffer<V> | null;\n  check(collection: NgIterable<V>): boolean;\n  _reset();\n  _mismatch(\n    record: IterableChangeRecord_<V> | null,\n    item: V,\n    itemTrackBy: any,\n    index: number\n  ): IterableChangeRecord_<V>;\n  _verifyReinsertion(\n    record: IterableChangeRecord_<V>,\n    item: V,\n    itemTrackBy: any,\n    index: number\n  ): IterableChangeRecord_<V>;\n  _truncate(record: IterableChangeRecord_<V> | null);\n  _reinsertAfter(\n    record: IterableChangeRecord_<V>,\n    prevRecord: IterableChangeRecord_<V> | null,\n    index: number\n  ): IterableChangeRecord_<V>;\n  _moveAfter(\n    record: IterableChangeRecord_<V>,\n    prevRecord: IterableChangeRecord_<V> | null,\n    index: number\n  ): IterableChangeRecord_<V>;\n  _addAfter(\n    record: IterableChangeRecord_<V>,\n    prevRecord: IterableChangeRecord_<V> | null,\n    index: number\n  ): IterableChangeRecord_<V>;\n  _insertAfter(\n    record: IterableChangeRecord_<V>,\n    prevRecord: IterableChangeRecord_<V> | null,\n    index: number\n  ): IterableChangeRecord_<V>;\n  _remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V>;\n  _unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V>;\n  _addToMoves(\n    record: IterableChangeRecord_<V>,\n    toIndex: number\n  ): IterableChangeRecord_<V>;\n  _addIdentityChange(record: IterableChangeRecord_<V>, item: V);\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "IterableChangeRecord",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L101-L113",
        "signature": "interface IterableChangeRecord<V> {\n  readonly currentIndex: number | null;\n  readonly previousIndex: number | null;\n  readonly item: V;\n  readonly trackById: any;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Record representing the item change information.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "currentIndex",
              "description": "Current index of the item in `Iterable` or null if removed.",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "previousIndex",
              "description": "Previous index of the item in `Iterable` or null if added.",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "item",
              "description": "The item.",
              "type": "V"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "trackById",
              "description": "Track by identity as computed by the `TrackByFunction`.",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "IterableChanges",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L46-L94",
        "signature": "interface IterableChanges<V> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An object describing the changes in the `Iterable` collection since last time\n`IterableDiffer#diff()` was invoked.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "IterableDiffer",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L29-L38",
        "signature": "interface IterableDiffer<V> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A strategy for tracking changes over time to an iterable. Used by {@link NgForOf} to\nrespond to changes in an iterable by effecting equivalent changes in the DOM.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "IterableDifferFactory",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L138-L141",
        "signature": "interface IterableDifferFactory {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Provides a factory for {@link IterableDiffer}.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "IterableDiffers",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L148-L219",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵprov",
              "description": "",
              "type": "never"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "factories",
              "description": "",
              "type": "IterableDifferFactory[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L164-L171",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "factories",
                      "description": "",
                      "type": "IterableDifferFactory[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parent",
                      "description": "",
                      "type": "IterableDiffers"
                    }
                  ]
                ],
                "signature": "static create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "extend",
              "info": {
                "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L193-L208",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\ninherited {@link IterableDiffers} instance with the provided factories and return a new\n{@link IterableDiffers} instance.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\nThe following example shows how to extend an existing list of factories,\nwhich will only be applied to the injector for this component and its children.\nThis step is all that's required to make a new {@link IterableDiffer} available.\n\n```"
                    }
                  ],
                  [
                    "Component({",
                    {
                      "__kind": "heading",
                      "description": "\nviewProviders: [\nIterableDiffers.extend([new ImmutableListDiffer()])\n]\n})\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "factories",
                      "description": "",
                      "type": "IterableDifferFactory[]"
                    }
                  ]
                ],
                "signature": "static extend(factories: IterableDifferFactory[]): StaticProvider;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "find",
              "info": {
                "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L210-L218",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "iterable",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "find(iterable: any): IterableDifferFactory;"
              }
            }
          ]
        ],
        "signature": "class IterableDiffers {\n  static ɵprov = ɵɵdefineInjectable({\n    token: IterableDiffers,\n    providedIn: \"root\",\n    factory: () => new IterableDiffers([new DefaultIterableDifferFactory()]),\n  });\n  factories: IterableDifferFactory[];\n\n  static create(\n    factories: IterableDifferFactory[],\n    parent?: IterableDiffers\n  ): IterableDiffers;\n  static extend(factories: IterableDifferFactory[]): StaticProvider;\n  find(iterable: any): IterableDifferFactory;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "KeyValueChangeRecord",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/keyvalue_differs.ts#L80-L95",
        "signature": "interface KeyValueChangeRecord<K, V> {\n  readonly key: K;\n  readonly currentValue: V | null;\n  readonly previousValue: V | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Record representing the item change information.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "key",
              "description": "Current key in the Map.",
              "type": "K"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "currentValue",
              "description": "Current value for the key or `null` if removed.",
              "type": "V"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "previousValue",
              "description": "Previous value for the key or `null` if added.",
              "type": "V"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "KeyValueChanges",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/keyvalue_differs.ts#L46-L73",
        "signature": "interface KeyValueChanges<K, V> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n`KeyValueDiffer#diff()` was invoked.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "KeyValueDiffer",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/keyvalue_differs.ts#L18-L38",
        "signature": "interface KeyValueDiffer<K, V> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A differ that tracks changes made to an object over time.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "KeyValueDifferFactory",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/keyvalue_differs.ts#L102-L112",
        "signature": "interface KeyValueDifferFactory {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Provides a factory for {@link KeyValueDiffer}.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "KeyValueDiffers",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/keyvalue_differs.ts#L119-L187",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵprov",
              "description": "",
              "type": "never"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "factories",
              "description": "",
              "type": "KeyValueDifferFactory[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/core/src/change_detection/differs/keyvalue_differs.ts#L136-L142",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "factories",
                      "description": "",
                      "type": "KeyValueDifferFactory[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parent",
                      "description": "",
                      "type": "KeyValueDiffers"
                    }
                  ]
                ],
                "signature": "static create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "extend",
              "info": {
                "file": "packages/core/src/change_detection/differs/keyvalue_differs.ts#L164-L178",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\ninherited {@link KeyValueDiffers} instance with the provided factories and return a new\n{@link KeyValueDiffers} instance.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\nThe following example shows how to extend an existing list of factories,\nwhich will only be applied to the injector for this component and its children.\nThis step is all that's required to make a new {@link KeyValueDiffer} available.\n\n```"
                    }
                  ],
                  [
                    "Component({",
                    {
                      "__kind": "heading",
                      "description": "\nviewProviders: [\nKeyValueDiffers.extend([new ImmutableMapDiffer()])\n]\n})\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "factories",
                      "description": "",
                      "type": "KeyValueDifferFactory[]"
                    }
                  ]
                ],
                "signature": "static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "find",
              "info": {
                "file": "packages/core/src/change_detection/differs/keyvalue_differs.ts#L180-L186",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "kv",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "find(kv: any): KeyValueDifferFactory;"
              }
            }
          ]
        ],
        "signature": "class KeyValueDiffers {\n  static ɵprov = ɵɵdefineInjectable({\n    token: KeyValueDiffers,\n    providedIn: \"root\",\n    factory: () => new KeyValueDiffers([new DefaultKeyValueDifferFactory()]),\n  });\n  factories: KeyValueDifferFactory[];\n\n  static create<S>(\n    factories: KeyValueDifferFactory[],\n    parent?: KeyValueDiffers\n  ): KeyValueDiffers;\n  static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider;\n  find(kv: any): KeyValueDifferFactory;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "NgIterable",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L21-L21",
        "signature": "export type NgIterable<T> = Array<T> | Iterable<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A type describing supported iterable types.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "PipeTransform",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/pipe_transform.ts#L33-L35",
        "signature": "interface PipeTransform {}",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "An interface that is implemented by pipes in order to perform a transformation.\nAngular invokes the `transform` method with the value of a binding\nas the first argument, and any parameters as the second argument in list form.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nIn the following example, `RepeatPipe` repeats a given value a given number of times.\n\n```ts\nimport {Pipe, PipeTransform} from '@angular/core';\n"
            }
          ],
          [
            "Pipe({name:",
            {
              "__kind": "heading",
              "description": "'repeat'})\nexport class RepeatPipe implements PipeTransform {\ntransform(value: any, times: number) {\nreturn value.repeat(times);\n}\n}\n```\n\nInvoking `{{ 'ok' | repeat:3 }}` in a template produces `okokok`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "SimpleChange",
    "overloads": [
      {
        "file": "packages/core/src/interface/simple_change.ts#L18-L26",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents a basic change from a previous to a new value for a single\nproperty on a directive instance. Passed as a value in a\n{@link SimpleChanges} object to the `ngOnChanges` hook.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`OnChanges`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "isFirstChange",
              "info": {
                "file": "packages/core/src/interface/simple_change.ts#L23-L25",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Check whether the new value is the first value assigned.\n"
                    }
                  ]
                ],
                "signature": "isFirstChange(): boolean;"
              }
            }
          ]
        ],
        "signature": "class SimpleChange {\n  isFirstChange(): boolean;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "SimpleChanges",
    "overloads": [
      {
        "file": "packages/core/src/interface/simple_change.ts#L37-L39",
        "signature": "interface SimpleChanges {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A hashtable of changes represented by {@link SimpleChange} objects stored\nat the declared property name they belong to on a Directive or Component. This is\nthe type passed to the `ngOnChanges` hook.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`OnChanges`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "TrackByFunction",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/differs/iterable_differs.ts#L129-L131",
        "signature": "interface TrackByFunction<T> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An optional function passed into the `NgForOf` directive that defines how to track\nchanges for items in an iterable.\nThe function takes the iteration index and item ID.\nWhen supplied, Angular tracks changes by the return value of the function.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "WrappedValue",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/change_detection_util.ts#L48-L73",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Indicates that the result of a {@link Pipe} transformation has changed even though the\nreference has not changed.\n\nWrapped values are unwrapped automatically during the change detection, and the unwrapped value\nis stored.\n\nExample:\n\n```\nif (this._latestValue === this._latestReturnedValue) {\nreturn this._latestReturnedValue;\n} else {\nthis._latestReturnedValue = this._latestValue;\nreturn WrappedValue.wrap(this._latestValue); // this will force update\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "from v10 stop using. (No replacement, deemed unnecessary.)\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "wrapped",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "wrap",
              "info": {
                "file": "packages/core/src/change_detection/change_detection_util.ts#L57-L59",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "static wrap(value: any): WrappedValue;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "unwrap",
              "info": {
                "file": "packages/core/src/change_detection/change_detection_util.ts#L65-L67",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Returns the underlying value of a wrapped value.\nReturns the given `value` when it is not wrapped.\n/"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "static unwrap(value: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isWrapped",
              "info": {
                "file": "packages/core/src/change_detection/change_detection_util.ts#L70-L72",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "static isWrapped(value: any): value is WrappedValue;"
              }
            }
          ]
        ],
        "signature": "class WrappedValue {\n  wrapped: any;\n\n  static wrap(value: any): WrappedValue;\n  static unwrap(value: any): any;\n  static isWrapped(value: any): value is WrappedValue;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "platformCore",
    "overloads": [
      {
        "file": "packages/core/src/platform_core_providers.ts#L28-L28",
        "signature": "const platformCore: (extraProviders?: StaticProvider[]) => PlatformRef;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵALLOW_MULTIPLE_PLATFORMS",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L123-L123",
        "signature": "const ALLOW_MULTIPLE_PLATFORMS: InjectionToken<boolean>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵAPP_ID_RANDOM_PROVIDER",
    "overloads": [
      {
        "file": "packages/core/src/application_tokens.ts#L34-L38",
        "signature": "const APP_ID_RANDOM_PROVIDER: {\n  provide: InjectionToken<string>;\n  useFactory: typeof _appIdRandomProviderFactory;\n  deps: any[];\n};",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵdefaultIterableDiffers",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/change_detection.ts#L37-L37",
        "signature": "const defaultIterableDiffers: IterableDiffers;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵdefaultKeyValueDiffers",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/change_detection.ts#L39-L39",
        "signature": "const defaultKeyValueDiffers: KeyValueDiffers;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵdevModeEqual",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/change_detection_util.ts#L11-L25",
        "signature": "function devModeEqual(a: any, b: any): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "a",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "b",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵisListLikeIterable",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/change_detection_util.ts#L75-L80",
        "signature": "function isListLikeIterable(obj: any): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "obj",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵChangeDetectorStatus",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/constants.ts#L38-L74",
        "signature": "export enum ChangeDetectorStatus {\n  /**\n   * A state in which, after calling `detectChanges()`, the change detector\n   * state becomes `Checked`, and must be explicitly invoked or reactivated.\n   */\n  CheckOnce,\n\n  /**\n   * A state in which change detection is skipped until the change detector mode\n   * becomes `CheckOnce`.\n   */\n  Checked,\n\n  /**\n   * A state in which change detection continues automatically until explicitly\n   * deactivated.\n   */\n  CheckAlways,\n\n  /**\n   * A state in which a change detector sub tree is not a part of the main tree and\n   * should be skipped.\n   */\n  Detached,\n\n  /**\n   * Indicates that the change detector encountered an error checking a binding\n   * or calling a directive lifecycle method and is now in an inconsistent state. Change\n   * detectors in this state do not detect changes.\n   */\n  Errored,\n\n  /**\n   * Indicates that the change detector has been destroyed.\n   */\n  Destroyed,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Defines the possible states of the default change detector."
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`ChangeDetectorRef`\n" }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵisDefaultChangeDetectionStrategy",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/constants.ts#L83-L87",
        "signature": "function isDefaultChangeDetectionStrategy(\n  changeDetectionStrategy: ChangeDetectionStrategy\n): boolean;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Reports whether a given strategy is currently the default for change detection."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "changeDetectionStrategy",
              "description": "The strategy to check.",
              "type": "ChangeDetectionStrategy"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "True if the given strategy is the current default, false otherwise."
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`ChangeDetectorStatus`" }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`ChangeDetectorRef`\n" }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ɵConsole",
    "overloads": [
      {
        "file": "packages/core/src/console.ts#L11-L22",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "log",
              "info": {
                "file": "packages/core/src/console.ts#L13-L16",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "log(message: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "warn",
              "info": {
                "file": "packages/core/src/console.ts#L18-L21",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "message",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "warn(message: string): void;"
              }
            }
          ]
        ],
        "signature": "class Console {\n  log(message: string): void;\n  warn(message: string): void;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵgetDebugNodeR2",
    "overloads": [
      {
        "file": "packages/core/src/debug/debug_node.ts#L756-L756",
        "signature": "const getDebugNodeR2: (nativeNode: any) => DebugNode | null;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵsetCurrentInjector",
    "overloads": [
      {
        "file": "packages/core/src/di/injector_compatibility.ts#L58-L62",
        "signature": "function setCurrentInjector(\n  injector: Injector | null | undefined\n): Injector | undefined | null;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "injector",
              "description": "",
              "type": "Injector"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵgetInjectableDef",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/defs.ts#L195-L198",
        "signature": "function getInjectableDef<T>(type: any): ɵɵInjectableDef<T> | null;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\ninherited value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "A type which may have its own (non-inherited) `ɵprov`.",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵɵInjectableDef",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/defs.ts#L29-L56",
        "signature": "interface ɵɵInjectableDef<T> {\n  providedIn: InjectorType<any> | \"root\" | \"platform\" | \"any\" | null;\n  token: unknown;\n  factory: (t?: Type<any>) => T;\n  value: T | undefined;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Information about how a type or `InjectionToken` interfaces with the DI system.\n\nAt a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\nrequesting injection of other types if necessary.\n\nOptionally, a `providedIn` parameter specifies that the given type belongs to a particular\n`InjectorDef`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\nthat the injectable does not belong to any scope.\n\nNOTE: This is a private type and should not be exported\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "providedIn",
              "description": "Specifies that the given type belongs to a particular injector:\n- `InjectorType` such as `NgModule`,\n- `'root'` the root injector\n- `'any'` all injectors.\n- `null`, does not belong to any injector. Must be explicitly listed in the injector\n  `providers`.",
              "type": "InjectorType<any> | \"root\" | \"platform\" | \"any\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "token",
              "description": "The token to which this definition belongs.\n\nNote that this may not be the same as the type that the `factory` will create.",
              "type": "unknown"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "factory",
              "description": "Factory method to execute to create an instance of the injectable.",
              "type": "(t?: Type<any>) => T"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "In a case of no explicit injector, a location where the instance of the injectable is stored.",
              "type": "T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵɵInjectorDef",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/defs.ts#L70-L79",
        "signature": "interface ɵɵInjectorDef<T> {\n  factory: () => T;\n  providers: (\n    | Type<any>\n    | ValueProvider\n    | ExistingProvider\n    | FactoryProvider\n    | ConstructorProvider\n    | StaticClassProvider\n    | ClassProvider\n    | any[]\n  )[];\n  imports: (InjectorType<any> | InjectorTypeWithProviders<any>)[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Information about the providers to be included in an `Injector` as well as how the given type\nwhich carries the information should be created by the DI system.\n\nAn `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\nstructure of providers with a defined priority (identically to how `NgModule`s also have\nan import/dependency structure).\n\nNOTE: This is a private type and should not be exported\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "factory",
              "description": "",
              "type": "() => T"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "(any[] | Type<any> | ValueProvider | ExistingProvider | FactoryProvider | ConstructorProvider | StaticClassProvider | ClassProvider)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "imports",
              "description": "",
              "type": "(InjectorType<any> | InjectorTypeWithProviders<any>)[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵINJECTOR_SCOPE",
    "overloads": [
      {
        "file": "packages/core/src/di/scope.ts#L17-L17",
        "signature": "const INJECTOR_SCOPE: InjectionToken<\"root\" | \"platform\">;",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵCurrencyIndex",
    "overloads": [
      {
        "file": "packages/core/src/i18n/locale_data_api.ts#L155-L159",
        "signature": "export const enum CurrencyIndex {\n  Symbol = 0,\n  SymbolNarrow,\n  NbOfDigits,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts)\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵExtraLocaleDataIndex",
    "overloads": [
      {
        "file": "packages/core/src/i18n/locale_data_api.ts#L146-L150",
        "signature": "export const enum ExtraLocaleDataIndex {\n  ExtraDayPeriodFormats = 0,\n  ExtraDayPeriodStandalone,\n  ExtraDayPeriodsRules,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Index of each type of locale data from the extra locale data array\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵfindLocaleData",
    "overloads": [
      {
        "file": "packages/core/src/i18n/locale_data_api.ts#L45-L65",
        "signature": "function findLocaleData(locale: string): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Finds the locale data for a given locale.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "The locale code.",
              "type": "string"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "The locale data." }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵgetLocaleCurrencyCode",
    "overloads": [
      {
        "file": "packages/core/src/i18n/locale_data_api.ts#L76-L79",
        "signature": "function getLocaleCurrencyCode(locale: string): string | null;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves the default currency code for the given locale.\n\nThe default is defined as the first currency which is still in use.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "The code of the locale whose currency code we want.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The code of the default currency for the given locale.\n\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵgetLocalePluralCase",
    "overloads": [
      {
        "file": "packages/core/src/i18n/locale_data_api.ts#L89-L92",
        "signature": "function getLocalePluralCase(locale: string): (value: number) => number;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves the plural function used by ICU expressions to determine the plural case to use\nfor a given locale."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "locale",
              "description": "A locale code for the locale format rules to use.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The plural function for the locale."
            }
          ],
          ["see", { "__kind": "heading", "description": "`NgPlural`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵLocaleDataIndex",
    "overloads": [
      {
        "file": "packages/core/src/i18n/locale_data_api.ts#L118-L141",
        "signature": "export enum LocaleDataIndex {\n  LocaleId = 0,\n  DayPeriodsFormat,\n  DayPeriodsStandalone,\n  DaysFormat,\n  DaysStandalone,\n  MonthsFormat,\n  MonthsStandalone,\n  Eras,\n  FirstDayOfWeek,\n  WeekendRange,\n  DateFormat,\n  TimeFormat,\n  DateTimeFormat,\n  NumberSymbols,\n  NumberFormats,\n  CurrencyCode,\n  CurrencySymbol,\n  CurrencyName,\n  Currencies,\n  Directionality,\n  PluralCase,\n  ExtraData,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Index of each type of locale data from the locale data array\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵregisterLocaleData",
    "overloads": [
      {
        "file": "packages/core/src/i18n/locale_data_api.ts#L23-L36",
        "signature": "function registerLocaleData(\n  data: any,\n  localeId?: string | any,\n  extraData?: any\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Register locale data to be used internally by Angular. See the\n[\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n\nThe signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "data",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "localeId",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "extraData",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵunregisterLocaleData",
    "overloads": [
      {
        "file": "packages/core/src/i18n/locale_data_api.ts#L111-L113",
        "signature": "function unregisterAllLocaleData();",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Helper function to remove all the locale data from `LOCALE_DATA`.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵDEFAULT_LOCALE_ID",
    "overloads": [
      {
        "file": "packages/core/src/i18n/localization.ts#L25-L25",
        "signature": "const DEFAULT_LOCALE_ID: \"en-US\";",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵivyEnabled",
    "overloads": [
      {
        "file": "packages/core/src/ivy_switch.ts#L11-L11",
        "signature": "const ivyEnabled: false;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ɵComponentFactory",
    "overloads": [
      {
        "file": "packages/core/src/linker/component_factory.ts#L79-L106",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Base class for a factory that can create a component dynamically.\nInstantiate a factory for a given type of component with `resolveComponentFactory()`.\nUse the resulting `ComponentFactory.create()` method to create a component of that type.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Dynamic Components](guide/dynamic-component-loader)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/core/src/linker/component_factory.ts#L103-L105",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates a new component.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "injector",
                      "description": "",
                      "type": "Injector"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "projectableNodes",
                      "description": "",
                      "type": "any[][]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rootSelectorOrNode",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ngModule",
                      "description": "",
                      "type": "NgModuleRef<any>"
                    }
                  ]
                ],
                "signature": "abstract create(   injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,   ngModule?: NgModuleRef<any>): ComponentRef<C>;"
              }
            }
          ]
        ],
        "signature": "class ComponentFactory<C> {\n  abstract create(\n    injector: Injector,\n    projectableNodes?: any[][],\n    rootSelectorOrNode?: string | any,\n    ngModule?: NgModuleRef<any>\n  ): ComponentRef<C>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ɵCodegenComponentFactoryResolver",
    "overloads": [
      {
        "file": "packages/core/src/linker/component_factory_resolver.ts#L54-L76",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveComponentFactory",
              "info": {
                "file": "packages/core/src/linker/component_factory_resolver.ts#L66-L75",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "component",
                      "description": "",
                      "type": "new (...args: any[]) => T"
                    }
                  ]
                ],
                "signature": "resolveComponentFactory<T>(component: {new(...args: any[]): T}): ComponentFactory<T>;"
              }
            }
          ]
        ],
        "signature": "class CodegenComponentFactoryResolver implements ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: {\n    new (...args: any[]): T;\n  }): ComponentFactory<T>;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵclearResolutionOfComponentResourcesQueue",
    "overloads": [
      {
        "file": "packages/core/src/metadata/resource_loading.ts#L109-L113",
        "signature": "function clearResolutionOfComponentResourcesQueue(): Map<Type<any>, Component>;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵresolveComponentResources",
    "overloads": [
      {
        "file": "packages/core/src/metadata/resource_loading.ts#L45-L86",
        "signature": "function resolveComponentResources(\n  resourceResolver: (\n    url: string\n  ) => Promise<string | { text(): Promise<string> }>\n): Promise<void>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Used to resolve resource URLs on `@Component` when used with JIT compilation.\n\nExample:\n```"
            }
          ],
          [
            "Component({",
            {
              "__kind": "heading",
              "description": "\nselector: 'my-comp',\ntemplateUrl: 'my-comp.html', // This requires asynchronous resolution\n})\nclass MyComponent{\n}\n\n// Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n// and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n\n// Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n// `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n\n// Use browser's `fetch()` function as the default resource resolution strategy.\nresolveComponentResources(fetch).then(() => {\n// After resolution all URLs have been converted into `template` strings.\nrenderComponent(MyComponent);\n});\n\n```\n\nNOTE: In AOT the resolution happens during compilation, and so there should be no need\nto call this method outside JIT mode.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "resourceResolver",
              "description": "a function which is responsible for returning a `Promise` to the",
              "type": "(url: string) => (Promise<string | {    text(): Promise<string>;}>)"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ɵReflectionCapabilities",
    "overloads": [
      {
        "file": "packages/core/src/reflection/reflection_capabilities.ts#L43-L283",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "isReflectionEnabled",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L50-L52",
                "info": [],
                "signature": "isReflectionEnabled(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "factory",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L54-L56",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "t",
                      "description": "",
                      "type": "Type<T>"
                    }
                  ]
                ],
                "signature": "factory<T>(t: Type<T>): (args: any[]) => T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_zipTypesAndAnnotations",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L59-L84",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "paramTypes",
                      "description": "",
                      "type": "any[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "paramAnnotations",
                      "description": "",
                      "type": "any[]"
                    }
                  ]
                ],
                "signature": "_zipTypesAndAnnotations(paramTypes: any[], paramAnnotations: any[]): any[][];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parameters",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L133-L145",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "Type<any>"
                    }
                  ]
                ],
                "signature": "parameters(type: Type<any>): any[][];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "annotations",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L169-L177",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "typeOrFunc",
                      "description": "",
                      "type": "Type<any>"
                    }
                  ]
                ],
                "signature": "annotations(typeOrFunc: Type<any>): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "propMetadata",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L208-L232",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "typeOrFunc",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "propMetadata(typeOrFunc: any): {[key: string]: any[]};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ownPropMetadata",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L234-L239",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "typeOrFunc",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ownPropMetadata(typeOrFunc: any): {[key: string]: any[]};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasLifecycleHook",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L241-L243",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "lcProperty",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "hasLifecycleHook(type: any, lcProperty: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "guards",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L245-L247",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "guards(type: any): {[key: string]: any};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getter",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L249-L251",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getter(name: string): GetterFn;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setter",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L253-L255",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "setter(name: string): SetterFn;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "method",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L257-L261",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "method(name: string): MethodFn;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "importUri",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L264-L271",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "importUri(type: any): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resourceUri",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L273-L275",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "resourceUri(type: any): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveIdentifier",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L277-L279",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleUrl",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "members",
                      "description": "",
                      "type": "string[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "runtime",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "resolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resolveEnum",
              "info": {
                "file": "packages/core/src/reflection/reflection_capabilities.ts#L280-L282",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "enumIdentifier",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "resolveEnum(enumIdentifier: any, name: string): any;"
              }
            }
          ]
        ],
        "signature": "class ReflectionCapabilities implements PlatformReflectionCapabilities {\n  isReflectionEnabled(): boolean;\n  factory<T>(t: Type<T>): (args: any[]) => T;\n  _zipTypesAndAnnotations(paramTypes: any[], paramAnnotations: any[]): any[][];\n  parameters(type: Type<any>): any[][];\n  annotations(typeOrFunc: Type<any>): any[];\n  propMetadata(typeOrFunc: any): { [key: string]: any[] };\n  ownPropMetadata(typeOrFunc: any): { [key: string]: any[] };\n  hasLifecycleHook(type: any, lcProperty: string): boolean;\n  guards(type: any): { [key: string]: any };\n  getter(name: string): GetterFn;\n  setter(name: string): SetterFn;\n  method(name: string): MethodFn;\n  importUri(type: any): string;\n  resourceUri(type: any): string;\n  resolveIdentifier(\n    name: string,\n    moduleUrl: string,\n    members: string[],\n    runtime: any\n  ): any;\n  resolveEnum(enumIdentifier: any, name: string): any;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ɵGetterFn",
    "overloads": [
      {
        "file": "packages/core/src/reflection/types.ts#L10-L10",
        "signature": "export type GetterFn = (obj: any) => any;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ɵMethodFn",
    "overloads": [
      {
        "file": "packages/core/src/reflection/types.ts#L11-L11",
        "signature": "export type MethodFn = (obj: any, args: any[]) => any;",
        "info": []
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ɵSetterFn",
    "overloads": [
      {
        "file": "packages/core/src/reflection/types.ts#L9-L9",
        "signature": "export type SetterFn = (obj: any, value: any) => void;",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵallowSanitizationBypassAndThrow",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L116-L125",
        "signature": "function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "BypassType"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/sanitization/bypass.ts#L106-L107",
        "signature": "function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.Html\n): value is SafeHtml;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "BypassType.Html"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/sanitization/bypass.ts#L108-L109",
        "signature": "function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.ResourceUrl\n): value is SafeResourceUrl;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "BypassType.ResourceUrl"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/sanitization/bypass.ts#L110-L111",
        "signature": "function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.Script\n): value is SafeScript;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "BypassType.Script"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/sanitization/bypass.ts#L112-L113",
        "signature": "function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.Style\n): value is SafeStyle;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "BypassType.Style"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/sanitization/bypass.ts#L114-L114",
        "signature": "function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.Url\n): value is SafeUrl;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "BypassType.Url"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/sanitization/bypass.ts#L115-L115",
        "signature": "function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "BypassType"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵBypassType",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L10-L16",
        "signature": "export const enum BypassType {\n  Url = \"URL\",\n  Html = \"HTML\",\n  ResourceUrl = \"ResourceURL\",\n  Script = \"Script\",\n  Style = \"Style\",\n}",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵgetSanitizationBypassType",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L127-L129",
        "signature": "function getSanitizationBypassType(value: any): BypassType | null;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵSafeHtml",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L30-L30",
        "signature": "interface SafeHtml {\n  // inherited from SafeValue\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use as HTML.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵSafeResourceUrl",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L58-L58",
        "signature": "interface SafeResourceUrl {\n  // inherited from SafeValue\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use as a URL to load executable code from.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵSafeScript",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L44-L44",
        "signature": "interface SafeScript {\n  // inherited from SafeValue\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use as JavaScript.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵSafeStyle",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L37-L37",
        "signature": "interface SafeStyle {\n  // inherited from SafeValue\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use as style (CSS).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵSafeUrl",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L51-L51",
        "signature": "interface SafeUrl {\n  // inherited from SafeValue\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use as a URL linking to a document.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵSafeValue",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L23-L23",
        "signature": "interface SafeValue {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use in a particular context.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵunwrapSafeValue",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L100-L103",
        "signature": "function unwrapSafeValue<T>(value: T | SafeValue): T;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "T | SafeValue"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/sanitization/bypass.ts#L98-L98",
        "signature": "function unwrapSafeValue(value: SafeValue): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "SafeValue"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/sanitization/bypass.ts#L99-L99",
        "signature": "function unwrapSafeValue<T>(value: T): T;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵ_sanitizeHtml",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/html_sanitizer.ts#L245-L287",
        "signature": "function _sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\nthe DOM in a browser environment.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defaultDoc",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "unsafeHtmlInput",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵ_sanitizeUrl",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/url_sanitizer.ts#L46-L55",
        "signature": "function _sanitizeUrl(url: string): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "url",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵmakeDecorator",
    "overloads": [
      {
        "file": "packages/core/src/util/decorators.ts#L46-L86",
        "signature": "function makeDecorator<T>(\n  name: string,\n  props?: (...args: any[]) => any,\n  parentClass?: any,\n  additionalProcessing?: (type: Type<T>) => void,\n  typeFn?: (type: Type<T>, ...args: any[]) => void\n): {\n  new (...args: any[]): any;\n  (...args: any[]): any;\n  (...args: any[]): (cls: any) => any;\n};",
        "info": [
          [
            "suppress",
            { "__kind": "heading", "description": "{globalThis}\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "props",
              "description": "",
              "type": "(...args: any[]) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "parentClass",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "additionalProcessing",
              "description": "",
              "type": "(type: Type<T>) => void"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "typeFn",
              "description": "",
              "type": "(type: Type<T>, ...args: any[]) => void"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵglobal",
    "overloads": [
      {
        "file": "packages/core/src/util/global.ts#L27-L27",
        "signature": "const _global: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵisObservable",
    "overloads": [
      {
        "file": "packages/core/src/util/lang.ts#L23-L27",
        "signature": "function isObservable(obj: any | Observable<any>): obj is Observable<any>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Determine if the argument is an Observable\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "obj",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵisPromise",
    "overloads": [
      {
        "file": "packages/core/src/util/lang.ts#L14-L18",
        "signature": "function isPromise<T = any>(obj: any): obj is Promise<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Determine if the argument is shaped like a Promise\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "obj",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵstringify",
    "overloads": [
      {
        "file": "packages/core/src/util/stringify.ts#L9-L38",
        "signature": "function stringify(token: any): string;",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵclearOverrides",
    "overloads": [
      {
        "file": "packages/core/src/view/entrypoint.ts#L28-L31",
        "signature": "function clearOverrides();",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵinitServicesIfNeeded",
    "overloads": [
      {
        "file": "packages/core/src/view/services.ts#L32-L55",
        "signature": "function initServicesIfNeeded();",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵoverrideComponentView",
    "overloads": [
      {
        "file": "packages/core/src/view/entrypoint.ts#L23-L26",
        "signature": "function overrideComponentView(\n  comp: Type<any>,\n  componentFactory: ComponentFactory<any>\n);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "comp",
              "description": "",
              "type": "Type<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "componentFactory",
              "description": "",
              "type": "ComponentFactory<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵoverrideProvider",
    "overloads": [
      {
        "file": "packages/core/src/view/entrypoint.ts#L18-L21",
        "signature": "function overrideProvider(override: ProviderOverride);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "override",
              "description": "",
              "type": "ProviderOverride"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR",
    "overloads": [
      {
        "file": "packages/core/src/view/provider.ts#L338-L338",
        "signature": "const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR: {};",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵcompileNgModuleFactory__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L58-L101",
        "signature": "function compileNgModuleFactory__POST_R3__<M>(\n  injector: Injector,\n  options: CompilerOptions,\n  moduleType: Type<M>\n): Promise<NgModuleFactory<M>>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "injector",
              "description": "",
              "type": "Injector"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "CompilerOptions"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "moduleType",
              "description": "",
              "type": "Type<M>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵisBoundToModule__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/application_ref.ts#L119-L121",
        "signature": "function isBoundToModule__POST_R3__<C>(cf: ComponentFactory<C>): boolean;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "cf",
              "description": "",
              "type": "ComponentFactory<C>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/change_detection/change_detector_ref.ts#L122-L122",
        "signature": "const SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__: typeof render3InjectChangeDetectorRef;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵgetDebugNode__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/debug/debug_node.ts#L730-L740",
        "signature": "function getDebugNode__POST_R3__(nativeNode: any): DebugNode | null;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "nativeNode",
              "description": "",
              "type": "any"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/debug/debug_node.ts#L727-L727",
        "signature": "function getDebugNode__POST_R3__(nativeNode: Element): DebugElement__POST_R3__;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "nativeNode",
              "description": "",
              "type": "Element"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/debug/debug_node.ts#L728-L728",
        "signature": "function getDebugNode__POST_R3__(nativeNode: Node): DebugNode__POST_R3__;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "nativeNode",
              "description": "",
              "type": "Node"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/debug/debug_node.ts#L729-L729",
        "signature": "function getDebugNode__POST_R3__(nativeNode: null): null;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "nativeNode",
              "description": "",
              "type": "null"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_COMPILE_INJECTABLE__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/di/injectable.ts#L106-L106",
        "signature": "const SWITCH_COMPILE_INJECTABLE__POST_R3__: typeof render3CompileInjectable;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵINJECTOR_IMPL__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/di/injector.ts#L27-L30",
        "signature": "function INJECTOR_IMPL__POST_R3__(\n  providers: StaticProvider[],\n  parent: Injector | undefined,\n  name: string\n);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "StaticProvider[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "parent",
              "description": "",
              "type": "Injector"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵNG_INJ_DEF",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/defs.ts#L272-L272",
        "signature": "const NG_INJ_DEF: string;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵNG_PROV_DEF",
    "overloads": [
      {
        "file": "packages/core/src/di/interface/defs.ts#L271-L271",
        "signature": "const NG_PROV_DEF: string;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵcreateInjector",
    "overloads": [
      {
        "file": "packages/core/src/di/r3_injector.ts#L79-L86",
        "signature": "function createInjector(\n  defType: /* InjectorType<any> */ any,\n  parent: Injector | null = null,\n  additionalProviders: StaticProvider[] | null = null,\n  name?: string\n): Injector;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "defType",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "parent",
              "description": "",
              "type": "Injector"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "additionalProviders",
              "description": "",
              "type": "StaticProvider[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_IVY_ENABLED__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/ivy_switch.ts#L9-L9",
        "signature": "const SWITCH_IVY_ENABLED__POST_R3__: true;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/linker/compiler.ts#L78-L82",
        "signature": "const Compiler_compileModuleAndAllComponentsAsync__POST_R3__: <T>(\n  moduleType: Type<T>\n) => Promise<ModuleWithComponentFactories<T>>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/linker/compiler.ts#L59-L72",
        "signature": "const Compiler_compileModuleAndAllComponentsSync__POST_R3__: <T>(\n  moduleType: Type<T>\n) => ModuleWithComponentFactories<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵCompiler_compileModuleAsync__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/linker/compiler.ts#L51-L54",
        "signature": "const Compiler_compileModuleAsync__POST_R3__: <T>(\n  moduleType: Type<T>\n) => Promise<NgModuleFactory<T>>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵCompiler_compileModuleSync__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/linker/compiler.ts#L43-L46",
        "signature": "const Compiler_compileModuleSync__POST_R3__: <T>(\n  moduleType: Type<T>\n) => NgModuleFactory<T>;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/linker/element_ref.ts#L62-L62",
        "signature": "const SWITCH_ELEMENT_REF_FACTORY__POST_R3__: typeof render3InjectElementRef;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵgetModuleFactory__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/linker/ng_module_factory_loader.ts#L32-L36",
        "signature": "function getModuleFactory__POST_R3__(id: string): NgModuleFactory<any>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "id",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵregisterNgModuleType",
    "overloads": [
      {
        "file": "packages/core/src/linker/ng_module_factory_registration.ts#L42-L57",
        "signature": "function registerNgModuleType(ngModuleType: NgModuleType);",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "ngModuleType",
              "description": "",
              "type": "NgModuleType<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/linker/template_ref.ts#L66-L66",
        "signature": "const SWITCH_TEMPLATE_REF_FACTORY__POST_R3__: typeof render3InjectTemplateRef;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/linker/view_container_ref.ts#L155-L155",
        "signature": "const SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__: typeof render3InjectViewContainerRef;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_COMPILE_COMPONENT__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L909-L909",
        "signature": "const SWITCH_COMPILE_COMPONENT__POST_R3__: typeof render3CompileComponent;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L910-L910",
        "signature": "const SWITCH_COMPILE_DIRECTIVE__POST_R3__: typeof render3CompileDirective;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_COMPILE_PIPE__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/metadata/directives.ts#L911-L911",
        "signature": "const SWITCH_COMPILE_PIPE__POST_R3__: typeof render3CompilePipe;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵNgModuleDef",
    "overloads": [
      {
        "file": "packages/core/src/metadata/ng_module.ts#L49-L80",
        "signature": "interface NgModuleDef<T> {\n  type: T;\n  bootstrap: Type<any>[] | (() => Type<any>[]);\n  declarations: Type<any>[] | (() => Type<any>[]);\n  imports: Type<any>[] | (() => Type<any>[]);\n  exports: Type<any>[] | (() => Type<any>[]);\n  transitiveCompileScopes: NgModuleTransitiveScopes | null;\n  schemas: SchemaMetadata[] | null;\n  id: string | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Runtime link information for NgModules.\n\nThis is the internal data structure used by the runtime to assemble components, directives,\npipes, and injectors.\n\nNOTE: Always use `ɵɵdefineNgModule` function to create this object,\nnever create the object directly since the shape of this object\ncan change between versions.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "Token representing the module. Used by DI.",
              "type": "T"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "bootstrap",
              "description": "List of components to bootstrap.",
              "type": "Type<any>[] | (() => Type<any>[])"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "declarations",
              "description": "List of components, directives, and pipes declared by this module.",
              "type": "Type<any>[] | (() => Type<any>[])"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "imports",
              "description": "List of modules or `ModuleWithProviders` imported by this module.",
              "type": "Type<any>[] | (() => Type<any>[])"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exports",
              "description": "List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\nmodule.",
              "type": "Type<any>[] | (() => Type<any>[])"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "transitiveCompileScopes",
              "description": "Cached value of computed `transitiveCompileScopes` for this module.\n\nThis should never be read directly, but accessed via `transitiveScopesFor`.",
              "type": "NgModuleTransitiveScopes"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "schemas",
              "description": "The set of schemas that declare elements to be allowed in the NgModule.",
              "type": "SchemaMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "id",
              "description": "Unique ID for the module with which it should be registered.",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵNgModuleTransitiveScopes",
    "overloads": [
      {
        "file": "packages/core/src/metadata/ng_module.ts#L28-L32",
        "signature": "interface NgModuleTransitiveScopes {\n  compilation: { directives: Set<any>; pipes: Set<any> };\n  exported: { directives: Set<any>; pipes: Set<any> };\n  schemas: SchemaMetadata[] | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents the expansion of an `NgModule` into its scopes.\n\nA scope is a set of directives and pipes that are visible in a particular context. Each\n`NgModule` has two scopes. The `compilation` scope is the set of directives and pipes that will\nbe recognized in the templates of components declared by the module. The `exported` scope is the\nset of directives and pipes exported by a module (that is, module B's exported scope gets added\nto module A's compilation scope when module A imports B).\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "compilation",
              "description": "",
              "type": "{ directives: any; pipes: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exported",
              "description": "",
              "type": "{ directives: any; pipes: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "schemas",
              "description": "",
              "type": "SchemaMetadata[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ɵɵNgModuleDefWithMeta",
    "overloads": [
      {
        "file": "packages/core/src/metadata/ng_module.ts#L37-L37",
        "signature": "export type ɵɵNgModuleDefWithMeta<\n  T,\n  Declarations,\n  Imports,\n  Exports\n> = NgModuleDef<T>;",
        "info": [["publicApi", { "__kind": "heading", "description": "\n" }]]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_COMPILE_NGMODULE__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/metadata/ng_module.ts#L362-L362",
        "signature": "const SWITCH_COMPILE_NGMODULE__POST_R3__: typeof render3CompileNgModule;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵSWITCH_RENDERER2_FACTORY__POST_R3__",
    "overloads": [
      {
        "file": "packages/core/src/render/api.ts#L284-L284",
        "signature": "const SWITCH_RENDERER2_FACTORY__POST_R3__: typeof render3InjectRenderer2;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵgetLContext",
    "overloads": [
      {
        "file": "packages/core/src/render3/context_discovery.ts#L41-L133",
        "signature": "function getLContext(target: any): LContext | null;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns the matching `LContext` data for a given DOM node, directive or component instance.\n\nThis function will examine the provided DOM element, component, or directive instance\\'s\nmonkey-patched property to derive the `LContext` data. Once called then the monkey-patched\nvalue will be that of the newly created `LContext`.\n\nIf the monkey-patched value is the `LView` instance then the context value for that\ntarget will be created and the monkey-patch reference will be updated. Therefore when this\nfunction is called it may mutate the provided element\\'s, component\\'s or any of the associated\ndirective\\'s monkey-patch values.\n\nIf the monkey-patch value is not detected then the code will walk up the DOM until an element\nis found which contains a monkey-patch reference. When that occurs then the provided element\nwill be updated with a new context (which is then returned). If the monkey-patch value is not\ndetected for a component/directive instance then it will throw an error (all components and\ndirectives should be automatically monkey-patched by ivy).\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "target",
              "description": "Component, Directive or DOM Node.",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵNG_COMP_DEF",
    "overloads": [
      {
        "file": "packages/core/src/render3/fields.ts#L11-L11",
        "signature": "const NG_COMP_DEF: string;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵNG_DIR_DEF",
    "overloads": [
      {
        "file": "packages/core/src/render3/fields.ts#L12-L12",
        "signature": "const NG_DIR_DEF: string;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵNG_ELEMENT_ID",
    "overloads": [
      {
        "file": "packages/core/src/render3/fields.ts#L24-L24",
        "signature": "const NG_ELEMENT_ID: string;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵNG_MOD_DEF",
    "overloads": [
      {
        "file": "packages/core/src/render3/fields.ts#L14-L14",
        "signature": "const NG_MOD_DEF: string;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵNG_PIPE_DEF",
    "overloads": [
      {
        "file": "packages/core/src/render3/fields.ts#L13-L13",
        "signature": "const NG_PIPE_DEF: string;",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵAttributeMarker",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/node.ts#L105-L233",
        "signature": "export const enum AttributeMarker {\n  /**\n   * An implicit marker which indicates that the value in the array are of `attributeKey`,\n   * `attributeValue` format.\n   *\n   * NOTE: This is implicit as it is the type when no marker is present in array. We indicate that\n   * it should not be present at runtime by the negative number.\n   */\n  ImplicitAttributes = -1,\n\n  /**\n   * Marker indicates that the following 3 values in the attributes array are:\n   * namespaceUri, attributeName, attributeValue\n   * in that order.\n   */\n  NamespaceURI = 0,\n\n  /**\n   * Signals class declaration.\n   *\n   * Each value following `Classes` designates a class name to include on the element.\n   * ## Example:\n   *\n   * Given:\n   * ```\n   * <div class=\"foo bar baz\">...<d/vi>\n   * ```\n   *\n   * the generated code is:\n   * ```\n   * var _c1 = [AttributeMarker.Classes, 'foo', 'bar', 'baz'];\n   * ```\n   */\n  Classes = 1,\n\n  /**\n   * Signals style declaration.\n   *\n   * Each pair of values following `Styles` designates a style name and value to include on the\n   * element.\n   * ## Example:\n   *\n   * Given:\n   * ```\n   * <div style=\"width:100px; height:200px; color:red\">...</div>\n   * ```\n   *\n   * the generated code is:\n   * ```\n   * var _c1 = [AttributeMarker.Styles, 'width', '100px', 'height'. '200px', 'color', 'red'];\n   * ```\n   */\n  Styles = 2,\n\n  /**\n   * Signals that the following attribute names were extracted from input or output bindings.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div moo=\"car\" [foo]=\"exp\" (bar)=\"doSth()\">\n   * ```\n   *\n   * the generated code is:\n   *\n   * ```\n   * var _c1 = ['moo', 'car', AttributeMarker.Bindings, 'foo', 'bar'];\n   * ```\n   */\n  Bindings = 3,\n\n  /**\n   * Signals that the following attribute names were hoisted from an inline-template declaration.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div *ngFor=\"let value of values; trackBy:trackBy\" dirA [dirB]=\"value\">\n   * ```\n   *\n   * the generated code for the `template()` instruction would include:\n   *\n   * ```\n   * ['dirA', '', AttributeMarker.Bindings, 'dirB', AttributeMarker.Template, 'ngFor', 'ngForOf',\n   * 'ngForTrackBy', 'let-value']\n   * ```\n   *\n   * while the generated code for the `element()` instruction inside the template function would\n   * include:\n   *\n   * ```\n   * ['dirA', '', AttributeMarker.Bindings, 'dirB']\n   * ```\n   */\n  Template = 4,\n\n  /**\n   * Signals that the following attribute is `ngProjectAs` and its value is a parsed `CssSelector`.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <h1 attr=\"value\" ngProjectAs=\"[title]\">\n   * ```\n   *\n   * the generated code for the `element()` instruction would include:\n   *\n   * ```\n   * ['attr', 'value', AttributeMarker.ProjectAs, ['', 'title', '']]\n   * ```\n   */\n  ProjectAs = 5,\n\n  /**\n   * Signals that the following attribute will be translated by runtime i18n\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div moo=\"car\" foo=\"value\" i18n-foo [bar]=\"binding\" i18n-bar>\n   * ```\n   *\n   * the generated code is:\n   *\n   * ```\n   * var _c1 = ['moo', 'car', AttributeMarker.I18n, 'foo', 'bar'];\n   */\n  I18n = 6,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A set of marker values to be used in the attributes arrays. These markers indicate that some\nitems are not regular attributes and the processing should be adapted accordingly.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵComponentDef",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/definition.ts#L290-L388",
        "signature": "interface ComponentDef<T> {\n  readonly id: string;\n  readonly template: ComponentTemplate<T>;\n  readonly consts: TConstants | null;\n  readonly ngContentSelectors?: string[];\n  readonly styles: string[];\n  readonly decls: number;\n  readonly vars: number;\n  viewQuery: ViewQueriesFunction<T> | null;\n  readonly encapsulation: ViewEncapsulation;\n  readonly data: { [kind: string]: any };\n  readonly onPush: boolean;\n  directiveDefs: DirectiveDefListOrFactory | null;\n  pipeDefs: PipeDefListOrFactory | null;\n  schemas: SchemaMetadata[] | null;\n  tView: TView | null;\n  readonly _?: never;\n\n  // inherited from DirectiveDef\n  readonly inputs: { [P in keyof T]: string };\n  readonly declaredInputs: { [P in keyof T]: string };\n  readonly outputs: { [P in keyof T]: string };\n  contentQueries: ContentQueriesFunction<T> | null;\n  viewQuery: ViewQueriesFunction<T> | null;\n  readonly hostBindings: HostBindingsFunction<T> | null;\n  readonly hostVars: number;\n  readonly hostAttrs: TAttributes | null;\n  readonly type: Type<T>;\n  providersResolver:\n    | (<U extends T>(\n        def: DirectiveDef<U>,\n        processProvidersFn?: ProcessProvidersFunction\n      ) => void)\n    | null;\n  readonly selectors: CssSelectorList;\n  readonly exportAs: string[] | null;\n  readonly factory: FactoryFn<T> | null;\n  readonly features: DirectiveDefFeature[] | null;\n  setInput:\n    | (<U extends T>(\n        this: DirectiveDef<U>,\n        instance: U,\n        value: any,\n        publicName: string,\n        privateName: string\n      ) => void)\n    | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Runtime link information for Components.\n\nThis is an internal data structure used by the render to link\ncomponents into templates.\n\nNOTE: Always use `defineComponent` function to create this object,\nnever create the object directly since the shape of this object\ncan change between versions.\n\nSee: {@link defineComponent}\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "id",
              "description": "Runtime unique component ID.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "template",
              "description": "The View template of the component.",
              "type": "ComponentTemplate<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "consts",
              "description": "Constants associated with the component's view.",
              "type": "TConstants"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngContentSelectors",
              "description": "An array of `ngContent[selector]` values that were found in the template.",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "styles",
              "description": "A set of styles that the component needs to be present for component to render correctly.",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "decls",
              "description": "The number of nodes, local refs, and pipes in this component template.\n\nUsed to calculate the length of the component's LView array, so we\ncan pre-fill the array and set the binding start index.",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "vars",
              "description": "The number of bindings in this component template (including pure fn bindings).\n\nUsed to calculate the length of the component's LView array, so we\ncan pre-fill the array and set the host binding start index.",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewQuery",
              "description": "Query-related instructions for a component.",
              "type": "ViewQueriesFunction<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "encapsulation",
              "description": "The view encapsulation type, which determines how styles are applied to\nDOM elements. One of\n- `Emulated` (default): Emulate native scoping of styles.\n- `Native`: Use the native encapsulation mechanism of the renderer.\n- `ShadowDom`: Use modern [ShadowDOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n  create a ShadowRoot for component's host element.\n- `None`: Do not provide any template or style encapsulation.",
              "type": "ViewEncapsulation"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "data",
              "description": "Defines arbitrary developer-defined data to be stored on a renderer instance.\nThis is useful for renderers that delegate to other renderers.",
              "type": "{ [kind: string]: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onPush",
              "description": "Whether or not this component's ChangeDetectionStrategy is OnPush",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "directiveDefs",
              "description": "Registry of directives and components that may be found in this view.\n\nThe property is either an array of `DirectiveDef`s or a function which returns the array of\n`DirectiveDef`s. The function is necessary to be able to support forward declarations.",
              "type": "DirectiveDefListOrFactory"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pipeDefs",
              "description": "Registry of pipes that may be found in this view.\n\nThe property is either an array of `PipeDefs`s or a function which returns the array of\n`PipeDefs`s. The function is necessary to be able to support forward declarations.",
              "type": "PipeDefListOrFactory"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "schemas",
              "description": "The set of schemas that declare elements to be allowed in the component's template.",
              "type": "SchemaMetadata[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "tView",
              "description": "Ivy runtime uses this place to store the computed tView for the component. This gets filled on\nthe first run of component.",
              "type": "TView"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_",
              "description": "Used to store the result of `noSideEffects` function so that it is not removed by closure\ncompiler. The property should never be read.",
              "type": "never"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ɵRender3ComponentFactory",
    "overloads": [
      {
        "file": "packages/core/src/render3/component_ref.ts#L106-L233",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Render3 implementation of {@link viewEngine_ComponentFactory}.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentType",
              "description": "",
              "type": "Type<any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngContentSelectors",
              "description": "",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isBoundToModule",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/core/src/render3/component_ref.ts#L134-L232",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "injector",
                      "description": "",
                      "type": "Injector"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "projectableNodes",
                      "description": "",
                      "type": "any[][]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rootSelectorOrNode",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ngModule",
                      "description": "",
                      "type": "viewEngine_NgModuleRef<any>"
                    }
                  ]
                ],
                "signature": "create(   injector: Injector, projectableNodes?: any[][]|undefined, rootSelectorOrNode?: any,   ngModule?: viewEngine_NgModuleRef<any>|undefined): viewEngine_ComponentRef<T>;"
              }
            }
          ]
        ],
        "signature": "class ComponentFactory<T> extends viewEngine_ComponentFactory<T> {\n  selector: string;\n  componentType: Type<any>;\n  ngContentSelectors: string[];\n  isBoundToModule: boolean;\n\n  create(\n    injector: Injector,\n    projectableNodes?: any[][] | undefined,\n    rootSelectorOrNode?: any,\n    ngModule?: viewEngine_NgModuleRef<any> | undefined\n  ): viewEngine_ComponentRef<T>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ɵRender3ComponentRef",
    "overloads": [
      {
        "file": "packages/core/src/render3/component_ref.ts#L256-L291",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents an instance of a Component created via a {@link ComponentFactory}.\n\n`ComponentRef` provides access to the Component Instance as well other objects related to this\nComponent Instance and allows you to destroy the Component Instance via the {@link #destroy}\nmethod.\n\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "destroyCbs",
              "description": "",
              "type": "(() => void)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "instance",
              "description": "",
              "type": "T"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostView",
              "description": "",
              "type": "ViewRef<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "changeDetectorRef",
              "description": "",
              "type": "ViewEngine_ChangeDetectorRef"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentType",
              "description": "",
              "type": "Type<T>"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "destroy",
              "info": {
                "file": "packages/core/src/render3/component_ref.ts#L278-L284",
                "info": [],
                "signature": "destroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onDestroy",
              "info": {
                "file": "packages/core/src/render3/component_ref.ts#L286-L290",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callback",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "onDestroy(callback: () => void): void;"
              }
            }
          ]
        ],
        "signature": "class ComponentRef<T> extends viewEngine_ComponentRef<T> {\n  destroyCbs: (() => void)[] | null = [];\n  instance: T;\n  hostView: ViewRef<T>;\n  changeDetectorRef: ViewEngine_ChangeDetectorRef;\n  componentType: Type<T>;\n\n  destroy(): void;\n  onDestroy(callback: () => void): void;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵComponentType",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/definition.ts#L75-L77",
        "signature": "interface ComponentType<T> {\n  ɵcmp: never;\n\n  // inherited from Type\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A subclass of `Type` which has a static `ɵcmp`:`ComponentDef` field making it\nconsumable for rendering.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵcmp",
              "description": "",
              "type": "never"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ɵCssSelectorList",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/projection.ts#L51-L51",
        "signature": "export type CssSelectorList = CssSelector[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A list of CssSelectors.\n\nA directive or component can have multiple selectors. This type is used for\ndirective defs so any of the selectors in the list will match that directive.\n\nOriginal: 'form, [ngForm]'\nParsed: [['form'], ['', 'ngForm', '']]\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵdetectChanges",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/change_detection.ts#L22-L25",
        "signature": "function detectChanges(component: {}): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Synchronously perform change detection on a component (and possibly its sub-components).\n\nThis function triggers change detection in a synchronous way on a component.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "component",
              "description": "The component which the change detection should be performed on.",
              "type": "{}"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵDirectiveDef",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/definition.ts#L153-L262",
        "signature": "interface DirectiveDef<T> {\n  readonly inputs: { [P in keyof T]: string };\n  readonly declaredInputs: { [P in keyof T]: string };\n  readonly outputs: { [P in keyof T]: string };\n  contentQueries: ContentQueriesFunction<T> | null;\n  viewQuery: ViewQueriesFunction<T> | null;\n  readonly hostBindings: HostBindingsFunction<T> | null;\n  readonly hostVars: number;\n  readonly hostAttrs: TAttributes | null;\n  readonly type: Type<T>;\n  providersResolver:\n    | (<U extends T>(\n        def: DirectiveDef<U>,\n        processProvidersFn?: ProcessProvidersFunction\n      ) => void)\n    | null;\n  readonly selectors: CssSelectorList;\n  readonly exportAs: string[] | null;\n  readonly factory: FactoryFn<T> | null;\n  readonly features: DirectiveDefFeature[] | null;\n  setInput:\n    | (<U extends T>(\n        this: DirectiveDef<U>,\n        instance: U,\n        value: any,\n        publicName: string,\n        privateName: string\n      ) => void)\n    | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Runtime link information for Directives.\n\nThis is an internal data structure used by the render to link\ndirectives into templates.\n\nNOTE: Always use `defineDirective` function to create this object,\nnever create the object directly since the shape of this object\ncan change between versions.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "Selector",
              "description": "type metadata specifying the selector of the directive or component",
              "type": ""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "inputs",
              "description": "A dictionary mapping the inputs' minified property names to their public API names, which\nare their aliases if any, or their original unminified property names\n(as in `@Input('alias') propertyName: any;`).",
              "type": "{ [P in keyof T]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "declaredInputs",
              "description": "",
              "type": "{ [P in keyof T]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "outputs",
              "description": "A dictionary mapping the outputs' minified property names to their public API names, which\nare their aliases if any, or their original unminified property names\n(as in `@Output('alias') propertyName: any;`).",
              "type": "{ [P in keyof T]: string; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "contentQueries",
              "description": "Function to create and refresh content queries associated with a given directive.",
              "type": "ContentQueriesFunction<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewQuery",
              "description": "Query-related instructions for a directive. Note that while directives don't have a\nview and as such view queries won't necessarily do anything, there might be\ncomponents that extend the directive.",
              "type": "ViewQueriesFunction<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostBindings",
              "description": "Refreshes host bindings on the associated directive.",
              "type": "HostBindingsFunction<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostVars",
              "description": "The number of bindings in this directive `hostBindings` (including pure fn bindings).\n\nUsed to calculate the length of the component's LView array, so we\ncan pre-fill the array and set the host binding start index.",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hostAttrs",
              "description": "Assign static attribute values to a host element.\n\nThis property will assign static attribute values as well as class and style\nvalues to a host element. Since attribute values can consist of different types of values, the\n`hostAttrs` array must include the values in the following format:\n\nattrs = [\n  // static attributes (like `title`, `name`, `id`...)\n  attr1, value1, attr2, value,\n\n  // a single namespace value (like `x:id`)\n  NAMESPACE_MARKER, namespaceUri1, name1, value1,\n\n  // another single namespace value (like `x:name`)\n  NAMESPACE_MARKER, namespaceUri2, name2, value2,\n\n  // a series of CSS classes that will be applied to the element (no spaces)\n  CLASSES_MARKER, class1, class2, class3,\n\n  // a series of CSS styles (property + value) that will be applied to the element\n  STYLES_MARKER, prop1, value1, prop2, value2\n]\n\nAll non-class and non-style attributes must be defined at the start of the list\nfirst before all class and style values are set. When there is a change in value\ntype (like when classes and styles are introduced) a marker must be used to separate\nthe entries. The marker values themselves are set via entries found in the\n[AttributeMarker] enum.",
              "type": "TAttributes"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "Token representing the directive. Used by DI.",
              "type": "Type<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "providersResolver",
              "description": "Function that resolves providers and publishes them into the DI system.",
              "type": "<U extends T>(def: DirectiveDef<U>, processProvidersFn?: ProcessProvidersFunction) => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "selectors",
              "description": "The selectors that will be used to match nodes to this directive.",
              "type": "CssSelectorList"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "exportAs",
              "description": "Name under which the directive is exported (for use with local references in template)",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "factory",
              "description": "Factory function used to create a new directive instance. Will be null initially.\nPopulated when the factory is first requested by directive instantiation logic.",
              "type": "FactoryFn<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "features",
              "description": "The features applied to this directive",
              "type": "DirectiveDefFeature[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "setInput",
              "description": "",
              "type": "<U extends T>(this: DirectiveDef<U>, instance: U, value: any, publicName: string, privateName: string) => void"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵDirectiveType",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/definition.ts#L83-L86",
        "signature": "interface DirectiveType<T> {\n  ɵdir: never;\n  ɵfac: () => T;\n\n  // inherited from Type\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A subclass of `Type` which has a static `ɵdir`:`DirectiveDef` field making it\nconsumable for rendering.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵdir",
              "description": "",
              "type": "never"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵfac",
              "description": "",
              "type": "() => T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵgetDirectives",
    "overloads": [
      {
        "file": "packages/core/src/render3/util/discovery_utils.ts#L195-L205",
        "signature": "function getDirectives(element: Element): {}[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves directive instances associated with a given DOM element. Does not include\ncomponent instances.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\nGiven the following DOM structure:\n```\n<my-app>\n<button my-button></button>\n<my-comp></my-comp>\n</my-app>\n```\nCalling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\ndirective that is associated with the DOM element.\n\nCalling `getDirectives` on `<my-comp>` will return an empty array.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "element",
              "description": "DOM element for which to get the directives.",
              "type": "Element"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "Array of directives associated with the element.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          ["globalApi", { "__kind": "heading", "description": "ng\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵgetHostElement",
    "overloads": [
      {
        "file": "packages/core/src/render3/util/discovery_utils.ts#L253-L255",
        "signature": "function getHostElement(componentOrDirective: {}): Element;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves the host element of a component or directive instance.\nThe host element is the DOM element that matched the selector of the directive.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "componentOrDirective",
              "description": "Component or directive instance for which the host",
              "type": "{}"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "Host element of the target.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          ["globalApi", { "__kind": "heading", "description": "ng\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵLifecycleHooksFeature",
    "overloads": [
      {
        "file": "packages/core/src/render3/component.ts#L272-L280",
        "signature": "function LifecycleHooksFeature(component: any, def: ComponentDef<any>): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Used to enable lifecycle hooks on the root component.\n\nInclude this feature when calling `renderComponent` if the root component\nyou are rendering has lifecycle hooks defined. Otherwise, the hooks won't\nbe called properly.\n\nExample:\n\n```\nrenderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "component",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "def",
              "description": "",
              "type": "ComponentDef<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵmarkDirty",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/change_detection.ts#L36-L42",
        "signature": "function markDirty(component: {}): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marks the component as dirty (needing change detection). Marking a component dirty will\nschedule a change detection on it at some point in the future.\n\nMarking an already dirty component as dirty won't do anything. Only one outstanding change\ndetection can be scheduled per component tree.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "component",
              "description": "Component to mark as dirty.",
              "type": "{}"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ɵNgModuleFactory",
    "overloads": [
      {
        "file": "packages/core/src/render3/ng_module_ref.ts#L96-L132",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "create",
              "info": {
                "file": "packages/core/src/render3/ng_module_ref.ts#L129-L131",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parentInjector",
                      "description": "",
                      "type": "Injector"
                    }
                  ]
                ],
                "signature": "create(parentInjector: Injector|null): viewEngine_NgModuleRef<T>;"
              }
            }
          ]
        ],
        "signature": "class NgModuleFactory<T> extends viewEngine_NgModuleFactory<T> {\n  create(parentInjector: Injector | null): viewEngine_NgModuleRef<T>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "core",
    "name": "ɵRender3NgModuleRef",
    "overloads": [
      {
        "file": "packages/core/src/render3/ng_module_ref.ts#L30-L94",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "_bootstrapComponents",
              "description": "",
              "type": "Type<any>[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_r3Injector",
              "description": "",
              "type": "R3Injector"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "injector",
              "description": "",
              "type": "Injector"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "instance",
              "description": "",
              "type": "T"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "destroyCbs",
              "description": "",
              "type": "(() => void)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "componentFactoryResolver",
              "description": "",
              "type": "ComponentFactoryResolver"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/core/src/render3/ng_module_ref.ts#L75-L81",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "token",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "notFoundValue",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "injectFlags",
                      "description": "",
                      "type": "InjectFlags"
                    }
                  ]
                ],
                "signature": "get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND,   injectFlags: InjectFlags = InjectFlags.Default): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "destroy",
              "info": {
                "file": "packages/core/src/render3/ng_module_ref.ts#L83-L89",
                "info": [],
                "signature": "destroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onDestroy",
              "info": {
                "file": "packages/core/src/render3/ng_module_ref.ts#L90-L93",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callback",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "onDestroy(callback: () => void): void;"
              }
            }
          ]
        ],
        "signature": "class NgModuleRef<T>\n  extends viewEngine_NgModuleRef<T>\n  implements InternalNgModuleRef<T> {\n  _bootstrapComponents: Type<any>[] = [];\n  _r3Injector: R3Injector;\n  injector: Injector = this;\n  instance: T;\n  destroyCbs: (() => void)[] | null = [];\n  readonly componentFactoryResolver: ComponentFactoryResolver = new ComponentFactoryResolver(\n    this\n  );\n\n  get(\n    token: any,\n    notFoundValue: any = Injector.THROW_IF_NOT_FOUND,\n    injectFlags: InjectFlags = InjectFlags.Default\n  ): any;\n  destroy(): void;\n  onDestroy(callback: () => void): void;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵNgModuleType",
    "overloads": [
      {
        "file": "packages/core/src/render3/ng_module_ref.ts#L26-L28",
        "signature": "interface NgModuleType<T = any> {\n  ɵmod: NgModuleDef<T>;\n\n  // inherited from Type\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "ɵmod",
              "description": "",
              "type": "NgModuleDef<T>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵNO_CHANGE",
    "overloads": [
      {
        "file": "packages/core/src/render3/tokens.ts#L9-L12",
        "signature": "interface NO_CHANGE {\n  __brand__: \"NO_CHANGE\";\n}",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "__brand__",
              "description": "",
              "type": "\"NO_CHANGE\""
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵPipeDef",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/definition.ts#L402-L429",
        "signature": "interface PipeDef<T> {\n  type: Type<T>;\n  readonly name: string;\n  factory: FactoryFn<T> | null;\n  readonly pure: boolean;\n  onDestroy: (() => void) | null;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Runtime link information for Pipes.\n\nThis is an internal data structure used by the renderer to link\npipes into templates.\n\nNOTE: Always use `definePipe` function to create this object,\nnever create the object directly since the shape of this object\ncan change between versions.\n\nSee: {@link definePipe}\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "Token representing the pipe.",
              "type": "Type<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "Pipe name.\n\nUsed to resolve pipe in templates.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "factory",
              "description": "Factory function used to create a new pipe instance. Will be null initially.\nPopulated when the factory is first requested by pipe instantiation logic.",
              "type": "FactoryFn<T>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pure",
              "description": "Whether or not the pipe is pure.\n\nPure pipes result only depends on the pipe input and not on internal\nstate of the pipe.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onDestroy",
              "description": "",
              "type": "() => void"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵrenderComponent",
    "overloads": [
      {
        "file": "packages/core/src/render3/component.ts#L109-L158",
        "signature": "function renderComponent<T>(\n  componentType:\n    | ComponentType<T>\n    | Type<T> /* Type as workaround for: Microsoft/TypeScript/issues/4881 */,\n  opts: CreateComponentOptions = {}\n): T;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Bootstraps a Component into an existing host element and returns an instance\nof the component.\n\nUse this function to bootstrap a component into the DOM tree. Each invocation\nof this function will create a separate tree of components, injectors and\nchange detection cycles and lifetimes. To dynamically insert a new component\ninto an existing tree such that it shares the same injection, change detection\nand object lifetime, use {@link ViewContainer#createComponent}.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "componentType",
              "description": "Component to bootstrap",
              "type": "ComponentType<T> | Type<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "options",
              "description": "Optional parameters which control bootstrapping",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "opts",
              "description": "",
              "type": "CreateComponentOptions"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵRenderFlags",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/definition.ts#L63-L69",
        "signature": "export const enum RenderFlags {\n  /* Whether to run the creation block (e.g. create elements and directives) */\n  Create = 0b01,\n\n  /* Whether to run the update block (e.g. refresh bindings) */\n  Update = 0b10,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Flags passed into template functions to determine which blocks (i.e. creation, update)\nshould be executed.\n\nTypically, a template runs both the creation block and the update block on initialization and\nsubsequent runs only execute the update block. However, dynamically created views require that\nthe creation block be executed separately from the update block (for backwards compat).\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵsetClassMetadata",
    "overloads": [
      {
        "file": "packages/core/src/render3/metadata.ts#L27-L70",
        "signature": "function setClassMetadata(\n  type: Type<any>,\n  decorators: any[] | null,\n  ctorParameters: (() => any[]) | null,\n  propDecorators: { [field: string]: any } | null\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Adds decorator, constructor, and property metadata to a given type via static metadata fields\non the type.\n\nThese metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n\nCalls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\ntree-shaken away during production builds.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "Type<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "decorators",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "ctorParameters",
              "description": "",
              "type": "() => any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propDecorators",
              "description": "",
              "type": "{ [field: string]: any; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵsetLocaleId",
    "overloads": [
      {
        "file": "packages/core/src/render3/i18n.ts#L1405-L1410",
        "signature": "function setLocaleId(localeId: string);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Sets the locale id that will be used for translations and ICU expressions.\nThis is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\nbut is now defined as a global value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "localeId",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵstore",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/storage.ts#L14-L23",
        "signature": "function store<T>(tView: TView, lView: LView, index: number, value: T): void;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "tView",
              "description": "",
              "type": "TView"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "lView",
              "description": "",
              "type": "LView"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "T"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵwhenRendered",
    "overloads": [
      {
        "file": "packages/core/src/render3/component.ts#L298-L300",
        "signature": "function whenRendered(component: any): Promise<null>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Wait on component until it is rendered.\n\nThis function returns a `Promise` which is resolved when the component's\nchange detection is executed. This is determined by finding the scheduler\nassociated with the `component`'s render tree and waiting until the scheduler\nflushes. If nothing is scheduled, the function returns a resolved promise.\n\nExample:\n```\nawait whenRendered(myComponent);\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "component",
              "description": "Component to wait upon",
              "type": "any"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "Promise which resolves when the component is rendered.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵadvance",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/advance.ts#L37-L40",
        "signature": "function ɵɵadvance(delta: number): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Advances to an element for later binding instructions.\n\nUsed in conjunction with instructions like {@link property} to act on elements with specified\nindices, for example those created with {@link element} or {@link elementStart}.\n\n```ts\n(rf: RenderFlags, ctx: any) => {\nif (rf & 1) {\ntext(0, 'Hello');\ntext(1, 'Goodbye')\nelement(2, 'div');\n}\nif (rf & 2) {\nadvance(2); // Advance twice to the <div>.\nproperty('title', 'test');\n}\n}\n```"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "delta",
              "description": "Number of elements to advance forwards by.",
              "type": "number"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵattribute",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/attribute.ts#L28-L40",
        "signature": "function ɵɵattribute(\n  name: string,\n  value: any,\n  sanitizer?: SanitizerFn | null,\n  namespace?: string\n): typeof ɵɵattribute;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Updates the value of or removes a bound attribute on an Element.\n\nUsed in the case of `[attr.title]=\"value\"`\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "name The name of the attribute.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "value The attribute is removed when value is `null` or `undefined`.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional function used to sanitize the value.",
              "type": "SanitizerFn"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespace",
              "description": "Optional namespace to use when setting the attribute.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵattributeInterpolate1",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/attribute_interpolation.ts#L40-L53",
        "signature": "function ɵɵattributeInterpolate1(\n  attrName: string,\n  prefix: string,\n  v0: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n  namespace?: string\n): typeof ɵɵattributeInterpolate1;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated attribute on an element with single bound value surrounded by text.\n\nUsed when the value passed to a property has 1 interpolated value in it:\n\n```html\n<div attr.title=\"prefix{{v0}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrName",
              "description": "The name of the attribute to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespace",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵattributeInterpolate2",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/attribute_interpolation.ts#L81-L94",
        "signature": "function ɵɵattributeInterpolate2(\n  attrName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n  namespace?: string\n): typeof ɵɵattributeInterpolate2;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated attribute on an element with 2 bound values surrounded by text.\n\nUsed when the value passed to a property has 2 interpolated values in it:\n\n```html\n<div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrName",
              "description": "The name of the attribute to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespace",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵattributeInterpolate3",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/attribute_interpolation.ts#L125-L139",
        "signature": "function ɵɵattributeInterpolate3(\n  attrName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n  namespace?: string\n): typeof ɵɵattributeInterpolate3;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated attribute on an element with 3 bound values surrounded by text.\n\nUsed when the value passed to a property has 3 interpolated values in it:\n\n```html\n<div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵattributeInterpolate3(\n'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrName",
              "description": "The name of the attribute to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespace",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵattributeInterpolate4",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/attribute_interpolation.ts#L172-L187",
        "signature": "function ɵɵattributeInterpolate4(\n  attrName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n  namespace?: string\n): typeof ɵɵattributeInterpolate4;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated attribute on an element with 4 bound values surrounded by text.\n\nUsed when the value passed to a property has 4 interpolated values in it:\n\n```html\n<div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵattributeInterpolate4(\n'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrName",
              "description": "The name of the attribute to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespace",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵattributeInterpolate5",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/attribute_interpolation.ts#L222-L238",
        "signature": "function ɵɵattributeInterpolate5(\n  attrName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n  namespace?: string\n): typeof ɵɵattributeInterpolate5;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated attribute on an element with 5 bound values surrounded by text.\n\nUsed when the value passed to a property has 5 interpolated values in it:\n\n```html\n<div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵattributeInterpolate5(\n'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrName",
              "description": "The name of the attribute to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespace",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵattributeInterpolate6",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/attribute_interpolation.ts#L275-L291",
        "signature": "function ɵɵattributeInterpolate6(\n  attrName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n  namespace?: string\n): typeof ɵɵattributeInterpolate6;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated attribute on an element with 6 bound values surrounded by text.\n\nUsed when the value passed to a property has 6 interpolated values in it:\n\n```html\n<div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵattributeInterpolate6(\n'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrName",
              "description": "The name of the attribute to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespace",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵattributeInterpolate7",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/attribute_interpolation.ts#L330-L346",
        "signature": "function ɵɵattributeInterpolate7(\n  attrName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n  namespace?: string\n): typeof ɵɵattributeInterpolate7;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated attribute on an element with 7 bound values surrounded by text.\n\nUsed when the value passed to a property has 7 interpolated values in it:\n\n```html\n<div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵattributeInterpolate7(\n'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrName",
              "description": "The name of the attribute to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespace",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵattributeInterpolate8",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/attribute_interpolation.ts#L387-L403",
        "signature": "function ɵɵattributeInterpolate8(\n  attrName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  i6: string,\n  v7: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n  namespace?: string\n): typeof ɵɵattributeInterpolate8;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated attribute on an element with 8 bound values surrounded by text.\n\nUsed when the value passed to a property has 8 interpolated values in it:\n\n```html\n<div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵattributeInterpolate8(\n'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrName",
              "description": "The name of the attribute to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i6",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v7",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespace",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵattributeInterpolateV",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/attribute_interpolation.ts#L431-L450",
        "signature": "function ɵɵattributeInterpolateV(\n  attrName: string,\n  values: any[],\n  sanitizer?: SanitizerFn,\n  namespace?: string\n): typeof ɵɵattributeInterpolateV;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n\nUsed when the number of interpolated values exceeds 8.\n\n```html\n<div\ntitle=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵattributeInterpolateV(\n'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n'suffix']);\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrName",
              "description": "The name of the attribute to update.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "The collection of values and the strings in-between those values, beginning with",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespace",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassMap",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/styling.ts#L136-L139",
        "signature": "function ɵɵclassMap(\n  classes:\n    | { [className: string]: boolean | undefined | null }\n    | string\n    | undefined\n    | null\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update class bindings using an object literal or class-string on an element.\n\nThis instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\nWhen classes are applied to the element they will then be updated with\nrespect to any styles/classes set via `classProp`. If any\nclasses are set to falsy then they will be removed from the element.\n\nNote that the styling instruction will not be applied until `stylingApply` is called.\nNote that this will the provided classMap value to the host element if this function is called\nwithin a host binding.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "classes",
              "description": "A key/value map or string of CSS classes that will be added to the",
              "type": "string | { [className: string]: boolean; }"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassMapInterpolate1",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/class_map_interpolation.ts#L37-L41",
        "signature": "function ɵɵclassMapInterpolate1(prefix: string, v0: any, suffix: string): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated class on an element with single bound value surrounded by text.\n\nUsed when the value passed to a property has 1 interpolated value in it:\n\n```html\n<div class=\"prefix{{v0}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassMapInterpolate2",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/class_map_interpolation.ts#L66-L71",
        "signature": "function ɵɵclassMapInterpolate2(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated class on an element with 2 bound values surrounded by text.\n\nUsed when the value passed to a property has 2 interpolated values in it:\n\n```html\n<div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassMapInterpolate3",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/class_map_interpolation.ts#L99-L104",
        "signature": "function ɵɵclassMapInterpolate3(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated class on an element with 3 bound values surrounded by text.\n\nUsed when the value passed to a property has 3 interpolated values in it:\n\n```html\n<div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵclassMapInterpolate3(\n'prefix', v0, '-', v1, '-', v2, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassMapInterpolate4",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/class_map_interpolation.ts#L134-L140",
        "signature": "function ɵɵclassMapInterpolate4(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated class on an element with 4 bound values surrounded by text.\n\nUsed when the value passed to a property has 4 interpolated values in it:\n\n```html\n<div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵclassMapInterpolate4(\n'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassMapInterpolate5",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/class_map_interpolation.ts#L172-L179",
        "signature": "function ɵɵclassMapInterpolate5(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated class on an element with 5 bound values surrounded by text.\n\nUsed when the value passed to a property has 5 interpolated values in it:\n\n```html\n<div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵclassMapInterpolate5(\n'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassMapInterpolate6",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/class_map_interpolation.ts#L213-L220",
        "signature": "function ɵɵclassMapInterpolate6(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated class on an element with 6 bound values surrounded by text.\n\nUsed when the value passed to a property has 6 interpolated values in it:\n\n```html\n<div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵclassMapInterpolate6(\n'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassMapInterpolate7",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/class_map_interpolation.ts#L256-L263",
        "signature": "function ɵɵclassMapInterpolate7(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated class on an element with 7 bound values surrounded by text.\n\nUsed when the value passed to a property has 7 interpolated values in it:\n\n```html\n<div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵclassMapInterpolate7(\n'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassMapInterpolate8",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/class_map_interpolation.ts#L301-L309",
        "signature": "function ɵɵclassMapInterpolate8(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  i6: string,\n  v7: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated class on an element with 8 bound values surrounded by text.\n\nUsed when the value passed to a property has 8 interpolated values in it:\n\n```html\n<div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵclassMapInterpolate8(\n'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i6",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v7",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassMapInterpolateV",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/class_map_interpolation.ts#L334-L338",
        "signature": "function ɵɵclassMapInterpolateV(values: any[]): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update an interpolated class on an element with 9 or more bound values surrounded by text.\n\nUsed when the number of interpolated values exceeds 8.\n\n```html\n<div\nclass=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵclassMapInterpolateV(\n['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n'suffix']);\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "The collection of values and the strings in-between those values, beginning with",
              "type": "any[]"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵclassProp",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/styling.ts#L72-L75",
        "signature": "function ɵɵclassProp(\n  className: string,\n  value: boolean | undefined | null\n): typeof ɵɵclassProp;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update a class binding on an element with the provided value.\n\nThis instruction is meant to handle the `[class.foo]=\"exp\"` case and,\ntherefore, the class binding itself must already be allocated using\n`styling` within the creation block.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "A valid CSS class (only one).",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "A true/false value which will turn the class on or off.",
              "type": "boolean"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "className",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ɵɵComponentDefWithMeta",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/definition.ts#L267-L271",
        "signature": "export type ɵɵComponentDefWithMeta<\n  T,\n  Selector extends String,\n  ExportAs extends string[],\n  InputMap extends { [key: string]: string },\n  OutputMap extends { [key: string]: string },\n  QueryFields extends string[],\n  NgContentSelectors extends string[]\n> = ComponentDef<T>;",
        "info": [["codeGenApi", { "__kind": "heading", "description": "\n" }]]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵcontentQuery",
    "overloads": [
      {
        "file": "packages/core/src/render3/query.ts#L500-L506",
        "signature": "function ɵɵcontentQuery<T>(\n  directiveIndex: number,\n  predicate: Type<any> | InjectionToken<unknown> | string[],\n  descend: boolean,\n  read?: any\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Registers a QueryList, associated with a content query, for later refresh (part of a view\nrefresh).\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "directiveIndex",
              "description": "Current directive index",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "The type for which the query will search",
              "type": "Type<any> | InjectionToken<unknown> | string[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "descend",
              "description": "Whether or not to descend into children",
              "type": "boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "read",
              "description": "What to save in the query",
              "type": "any"
            }
          ],
          ["returns", { "__kind": "heading", "description": "QueryList<T>\n" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵCopyDefinitionFeature",
    "overloads": [
      {
        "file": "packages/core/src/render3/features/copy_definition_feature.ts#L67-L93",
        "signature": "function ɵɵCopyDefinitionFeature(\n  definition: DirectiveDef<any> | ComponentDef<any>\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\ndefinition.\n\nThis exists primarily to support ngcc migration of an existing View Engine pattern, where an\nentire decorator is inherited from a parent to a child class. When ngcc detects this case, it\ngenerates a skeleton definition on the child class, and applies this feature.\n\nThe `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\nincluding things like the component template function.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "definition",
              "description": "The definition of a child class which inherits from a parent class with its",
              "type": "DirectiveDef<any> | ComponentDef<any>"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵdefineComponent",
    "overloads": [
      {
        "file": "packages/core/src/render3/definition.ts#L48-L352",
        "signature": "function ɵɵdefineComponent<T>(componentDefinition: {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this component. */\n  selectors?: CssSelectorList;\n\n  /**\n   * The number of nodes, local refs, and pipes in this component template.\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the binding start index.\n   */\n  decls: number;\n\n  /**\n   * The number of bindings in this component template (including pure fn bindings).\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  vars: number;\n\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n   *\n   * Given:\n   * ```\n   * class MyComponent {\n   *   @Input()\n   *   publicInput1: string;\n   *\n   *   @Input('publicInput2')\n   *   declaredInput2: string;\n   * }\n   * ```\n   *\n   * is described as:\n   * ```\n   * {\n   *   publicInput1: 'publicInput1',\n   *   declaredInput2: ['publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * Which the minifier may translate to:\n   * ```\n   * {\n   *   minifiedPublicInput1: 'publicInput1',\n   *   minifiedDeclaredInput2: ['publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * This allows the render to re-construct the minified, public, and declared names\n   * of properties.\n   *\n   * NOTE:\n   *  - Because declared and public name are usually same we only generate the array\n   *    `['public', 'declared']` format when they differ.\n   *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n   *    inconsistent behavior in that it uses declared names rather than minified or public. For\n   *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n   *    API will be simplified to be consistent with `output`.\n   */\n  inputs?: { [P in keyof T]?: string | [string, string] };\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: { [P in keyof T]?: string };\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: HostBindingsFunction<T>;\n\n  /**\n   * The number of bindings in this directive `hostBindings` (including pure fn bindings).\n   *\n   * Used to calculate the length of the component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  hostVars?: number;\n\n  /**\n   * Assign static attribute values to a host element.\n   *\n   * This property will assign static attribute values as well as class and style\n   * values to a host element. Since attribute values can consist of different types of values, the\n   * `hostAttrs` array must include the values in the following format:\n   *\n   * attrs = [\n   *\n   *   attr1, value1, attr2, value,\n   *\n   *\n   *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n   *\n   *\n   *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n   *\n   *\n   *   CLASSES_MARKER, class1, class2, class3,\n   *\n   *\n   *   STYLES_MARKER, prop1, value1, prop2, value2\n   * ]\n   *\n   * All non-class and non-style attributes must be defined at the start of the list\n   * first before all class and style values are set. When there is a change in value\n   * type (like when classes and styles are introduced) a marker must be used to separate\n   * the entries. The marker values themselves are set via entries found in the\n   * [AttributeMarker] enum.\n   */\n  hostAttrs?: TAttributes;\n\n  /**\n   * Function to create instances of content queries associated with a given directive.\n   */\n  contentQueries?: ContentQueriesFunction<T>;\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string[];\n\n  /**\n   * Template function use for rendering DOM.\n   *\n   * This function has following structure.\n   *\n   * ```\n   * function Template<T>(ctx:T, creationMode: boolean) {\n   *   if (creationMode) {\n   *\n   *   }\n   *\n   * }\n   * ```\n   *\n   * Common instructions are:\n   * Creation mode instructions:\n   *  - `elementStart`, `elementEnd`\n   *  - `text`\n   *  - `container`\n   *  - `listener`\n   *\n   * Binding update instructions:\n   * - `bind`\n   * - `elementAttribute`\n   * - `elementProperty`\n   * - `elementClass`\n   * - `elementStyle`\n   *\n   */\n  template: ComponentTemplate<T>;\n\n  /**\n   * Constants for the nodes in the component's view.\n   * Includes attribute arrays, local definition arrays etc.\n   */\n  consts?: TConstants;\n\n  /**\n   * An array of `ngContent[selector]` values that were found in the template.\n   */\n  ngContentSelectors?: string[];\n\n  /**\n   * Additional set of instructions specific to view query processing. This could be seen as a\n   * set of instruction to be inserted into the template function.\n   *\n   * Query-related instructions need to be pulled out to a specific function as a timing of\n   * execution is different as compared to all other instructions (after change detection hooks but\n   * before view hooks).\n   */\n  viewQuery?: ViewQueriesFunction<T> | null;\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}\n   */\n  features?: ComponentDefFeature[];\n\n  /**\n   * Defines template and style encapsulation options available for Component's {@link Component}.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   *\n   * see: animation\n   */\n  data?: { [kind: string]: any };\n\n  /**\n   * A set of styles that the component needs to be present for component to render correctly.\n   */\n  styles?: string[];\n\n  /**\n   * The strategy that the default change detector uses to detect changes.\n   * When set, takes effect the next time change detection is triggered.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Registry of directives and components that may be found in this component's view.\n   *\n   * The property is either an array of `DirectiveDef`s or a function which returns the array of\n   * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n   */\n  directives?: DirectiveTypesOrFactory | null;\n\n  /**\n   * Registry of pipes that may be found in this component's view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   */\n  pipes?: PipeTypesOrFactory | null;\n\n  /**\n   * The set of schemas that declare elements to be allowed in the component's template.\n   */\n  schemas?: SchemaMetadata[] | null;\n}): never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create a component definition object.\n\n\n# Example\n```\nclass MyDirective {\n// Generated by Angular Template Compiler\n// [Symbol] syntax will not be supported by TypeScript until v2.7\nstatic ɵcmp = defineComponent({\n...\n});\n}\n```"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "componentDefinition",
              "description": "",
              "type": "{ type: Type<T>; selectors?: CssSelectorList; decls: number; vars: number; inputs?: { [P in keyof T]?: string | [string, string]; }; outputs?: { [P in keyof T]?: string; }; hostBindings?: HostBindingsFunction<T>; hostVars?: number; hostAttrs?: TAttributes; contentQueries?: ContentQueriesFunction<T>; exportAs?: string[]; template: ComponentTemplate<T>; consts?: TConstants; ngContentSelectors?: string[]; viewQuery?: ViewQueriesFunction<T> | null; features?: ComponentDefFeature[]; encapsulation?: ViewEncapsulation; data?: { [kind: string]: any; }; styles?: string[]; changeDetection?: ChangeDetectionStrategy; directives?: DirectiveTypesOrFactory | null; pipes?: PipeTypesOrFactory | null; schemas?: SchemaMetadata[] | null; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵɵdefineDirective",
    "overloads": [
      {
        "file": "packages/core/src/render3/definition.ts#L552-L688",
        "signature": "const ɵɵdefineDirective: <T>(directiveDefinition: {\n  type: Type<T>;\n  selectors?: CssSelectorList;\n  inputs?: { [P in keyof T]?: string | [string, string] };\n  outputs?: { [P in keyof T]?: string };\n  features?: DirectiveDefFeature[];\n  hostBindings?: HostBindingsFunction<T>;\n  hostVars?: number;\n  hostAttrs?: TAttributes;\n  contentQueries?: ContentQueriesFunction<T>;\n  viewQuery?: ViewQueriesFunction<T>;\n  exportAs?: string[];\n}) => never;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵdefineNgModule",
    "overloads": [
      {
        "file": "packages/core/src/render3/definition.ts#L385-L426",
        "signature": "function ɵɵdefineNgModule<T>(def: {\n  /** Token representing the module. Used by DI. */\n  type: T;\n\n  /** List of components to bootstrap. */\n  bootstrap?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of components, directives, and pipes declared by this module. */\n  declarations?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of modules or `ModuleWithProviders` imported by this module. */\n  imports?: Type<any>[] | (() => Type<any>[]);\n\n  /**\n   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n   * module.\n   */\n  exports?: Type<any>[] | (() => Type<any>[]);\n\n  /** The set of schemas that declare elements to be allowed in the NgModule. */\n  schemas?: SchemaMetadata[] | null;\n\n  /** Unique ID for the module that is used with `getModuleFactory`. */\n  id?: string | null;\n}): never;",
        "info": [
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "def",
              "description": "",
              "type": "{ type: T; bootstrap?: Type<any>[] | (() => Type<any>[]); declarations?: Type<any>[] | (() => Type<any>[]); imports?: Type<any>[] | (() => Type<any>[]); exports?: Type<any>[] | (() => Type<any>[]); schemas?: SchemaMetadata[] | null; id?: string | null; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵdefinePipe",
    "overloads": [
      {
        "file": "packages/core/src/render3/definition.ts#L706-L723",
        "signature": "function ɵɵdefinePipe<T>(pipeDef: {\n  /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n  name: string;\n\n  /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n  type: Type<T>;\n\n  /** Whether the pipe is pure. */\n  pure?: boolean;\n}): never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create a pipe definition object.\n\n# Example\n```\nclass MyPipe implements PipeTransform {\n// Generated by Angular Template Compiler\nstatic ɵpipe = definePipe({\n...\n});\n}\n```"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pipeDef",
              "description": "Pipe definition generated by the compiler",
              "type": "{ name: string; type: Type<T>; pure?: boolean; }"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ɵɵDirectiveDefWithMeta",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/definition.ts#L132-L137",
        "signature": "export type ɵɵDirectiveDefWithMeta<\n  T,\n  Selector extends string,\n  ExportAs extends string[],\n  InputMap extends { [key: string]: string },\n  OutputMap extends { [key: string]: string },\n  QueryFields extends string[]\n> = DirectiveDef<T>;",
        "info": [["codeGenApi", { "__kind": "heading", "description": "\n" }]]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵdirectiveInject",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/di.ts#L41-L50",
        "signature": "function ɵɵdirectiveInject<T>(\n  token: Type<T> | InjectionToken<T>,\n  flags = InjectFlags.Default\n): T | null;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "Type<T> | InjectionToken<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "InjectFlags"
            }
          ]
        ]
      },
      {
        "file": "packages/core/src/render3/instructions/di.ts#L39-L39",
        "signature": "function ɵɵdirectiveInject<T>(token: Type<T> | InjectionToken<T>): T;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns the value associated to the given token from the injectors.\n\n`directiveInject` is intended to be used for directive, component and pipe factories.\nAll other injection use `inject` which does not walk the node injector tree.\n\nUsage example (in factory function):\n\n```ts\nclass SomeDirective {\nconstructor(directive: DirectiveA) {}\n\nstatic ɵdir = ɵɵdefineDirective({\ntype: SomeDirective,\nfactory: () => new SomeDirective(ɵɵdirectiveInject(DirectiveA))\n});\n}\n```"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "the type or token to inject",
              "type": "Type<T> | InjectionToken<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "Injection flags",
              "type": ""
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "the value from the injector or `null` when not found\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      },
      {
        "file": "packages/core/src/render3/instructions/di.ts#L40-L40",
        "signature": "function ɵɵdirectiveInject<T>(\n  token: Type<T> | InjectionToken<T>,\n  flags: InjectFlags\n): T;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "Type<T> | InjectionToken<T>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "InjectFlags"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵdisableBindings",
    "overloads": [
      {
        "file": "packages/core/src/render3/state.ts#L232-L234",
        "signature": "function ɵɵdisableBindings(): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Disables directive matching on element.\n\n* Example:\n```\n<my-comp my-directive>\nShould match component / directive.\n</my-comp>\n<div ngNonBindable>\n<!-- ɵɵdisableBindings() -->\n<my-comp my-directive>\nShould not match component / directive because we are in ngNonBindable.\n</my-comp>\n<!-- ɵɵenableBindings() -->\n</div>\n```\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵelement",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/element.ts#L174-L178",
        "signature": "function ɵɵelement(\n  index: number,\n  name: string,\n  attrsIndex?: number | null,\n  localRefsIndex?: number\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an empty element using {@link elementStart} and {@link elementEnd}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Index of the element in the data array",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "Name of the DOM Node",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrsIndex",
              "description": "Index of the element's attributes in the `consts` array.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "localRefsIndex",
              "description": "Index of the element's local references in the `consts` array.",
              "type": "number"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵelementContainer",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/element_container.ts#L132-L136",
        "signature": "function ɵɵelementContainer(\n  index: number,\n  attrsIndex?: number | null,\n  localRefsIndex?: number\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an empty logical container using {@link elementContainerStart}\nand {@link elementContainerEnd}\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Index of the element in the LView array",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrsIndex",
              "description": "Index of the container attributes in the `consts` array.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "localRefsIndex",
              "description": "Index of the container's local references in the `consts` array.",
              "type": "number"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵelementContainerEnd",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/element_container.ts#L101-L120",
        "signature": "function ɵɵelementContainerEnd(): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Mark the end of the <ng-container>.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵelementContainerStart",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/element_container.ts#L63-L94",
        "signature": "function ɵɵelementContainerStart(\n  index: number,\n  attrsIndex?: number | null,\n  localRefsIndex?: number\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\nThe instruction must later be followed by `elementContainerEnd()` call.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Index of the element in the LView array",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrsIndex",
              "description": "Index of the container attributes in the `consts` array.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "localRefsIndex",
              "description": "Index of the container's local references in the `consts` array.",
              "type": "number"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵelementEnd",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/element.ts#L130-L162",
        "signature": "function ɵɵelementEnd(): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Mark the end of the element.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵelementStart",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/element.ts#L71-L123",
        "signature": "function ɵɵelementStart(\n  index: number,\n  name: string,\n  attrsIndex?: number | null,\n  localRefsIndex?: number\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create DOM element. The instruction must later be followed by `elementEnd()` call.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Index of the element in the LView array",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "Name of the DOM Node",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrsIndex",
              "description": "Index of the element's attributes in the `consts` array.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "localRefsIndex",
              "description": "Index of the element's local references in the `consts` array.",
              "type": "number"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵenableBindings",
    "overloads": [
      {
        "file": "packages/core/src/render3/state.ts#L209-L211",
        "signature": "function ɵɵenableBindings(): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Enables directive matching on elements.\n\n* Example:\n```\n<my-comp my-directive>\nShould match component / directive.\n</my-comp>\n<div ngNonBindable>\n<!-- ɵɵdisableBindings() -->\n<my-comp my-directive>\nShould not match component / directive because we are in ngNonBindable.\n</my-comp>\n<!-- ɵɵenableBindings() -->\n</div>\n```\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ɵɵFactoryDef",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/definition.ts#L276-L276",
        "signature": "export type ɵɵFactoryDef<\n  T,\n  CtorDependencies extends CtorDependency[]\n> = () => T;",
        "info": [["codeGenApi", { "__kind": "heading", "description": "\n" }]]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵgetCurrentView",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/get_current_view.ts#L20-L22",
        "signature": "function ɵɵgetCurrentView(): OpaqueViewState;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns the current OpaqueViewState instance.\n\nUsed in conjunction with the restoreView() instruction to save a snapshot\nof the current view and restore it when listeners are invoked. This allows\nwalking the declaration view tree in listeners to get vars from parent views.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵgetFactoryOf",
    "overloads": [
      {
        "file": "packages/core/src/render3/di.ts#L643-L659",
        "signature": "function ɵɵgetFactoryOf<T>(type: Type<any>): FactoryFn<T> | null;",
        "info": [
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "Type<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵgetInheritedFactory",
    "overloads": [
      {
        "file": "packages/core/src/render3/di.ts#L664-L693",
        "signature": "function ɵɵgetInheritedFactory<T>(type: Type<any>): (type: Type<T>) => T;",
        "info": [
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "Type<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵhostProperty",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/host_property.ts#L30-L41",
        "signature": "function ɵɵhostProperty<T>(\n  propName: string,\n  value: T,\n  sanitizer?: SanitizerFn | null\n): typeof ɵɵhostProperty;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update a property on a host element. Only applies to native node properties, not inputs.\n\nOperates on the element selected by index via the {@link select} instruction.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "Name of property. Because it is going to DOM, this is not subject to",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "New value to write.",
              "type": "T"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional function used to sanitize the value.",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "This function returns itself so that it may be chained\n(e.g. `property('name', ctx.name)('title', ctx.title)`)\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵi18n",
    "overloads": [
      {
        "file": "packages/core/src/render3/i18n.ts#L1020-L1023",
        "signature": "function ɵɵi18n(\n  index: number,\n  message: string,\n  subTemplateIndex?: number\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUse this instruction to create a translation block that doesn't contain any placeholder.\nIt calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n\nThe translation `message` is the value which is locale specific. The translation string may\ncontain placeholders which associate inner elements and sub-templates within the translation.\n\nThe translation `message` placeholders are:\n- `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\ninterpolated into. The placeholder `index` points to the expression binding index. An optional\n`block` that matches the sub-template in which it was declared.\n- `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\nand end of DOM element that were embedded in the original translation block. The placeholder\n`index` points to the element index in the template instructions set. An optional `block` that\nmatches the sub-template in which it was declared.\n- `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\nsplit up and translated separately in each angular template function. The `index` points to the\n`template` instruction index. A `block` that matches the sub-template in which it was declared.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "A unique index of the translation in the static block.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "message",
              "description": "The translation message.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "subTemplateIndex",
              "description": "Optional sub-template index in the `message`.",
              "type": "number"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵi18nApply",
    "overloads": [
      {
        "file": "packages/core/src/render3/i18n.ts#L1122-L1143",
        "signature": "function ɵɵi18nApply(index: number);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Updates a translation block or an i18n attribute when the bindings have changed.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}",
              "type": "number"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵi18nAttributes",
    "overloads": [
      {
        "file": "packages/core/src/render3/i18n.ts#L1033-L1038",
        "signature": "function ɵɵi18nAttributes(index: number, values: string[]): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marks a list of attributes as translatable.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "A unique index in the static block",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "",
              "type": "string[]"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵi18nEnd",
    "overloads": [
      {
        "file": "packages/core/src/render3/i18n.ts#L696-L703",
        "signature": "function ɵɵi18nEnd(): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\ninto the render tree, moves the placeholder nodes and removes the deleted nodes.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵi18nExp",
    "overloads": [
      {
        "file": "packages/core/src/render3/i18n.ts#L1105-L1112",
        "signature": "function ɵɵi18nExp<T>(value: T): typeof ɵɵi18nExp;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Stores the values of the bindings during each update cycle in order to determine if we need to\nupdate the translated nodes.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "The binding's value",
              "type": "T"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "This function returns itself so that it may be chained\n(e.g. `i18nExp(ctx.name)(ctx.title)`)\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵi18nPostprocess",
    "overloads": [
      {
        "file": "packages/core/src/render3/i18n.ts#L598-L688",
        "signature": "function ɵɵi18nPostprocess(\n  message: string,\n  replacements: { [key: string]: string | string[] } = {}\n): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Handles message string post-processing for internationalization.\n\nHandles message string post-processing by transforming it from intermediate\nformat (that might contain some markers that we need to replace) to the final\nform, consumable by i18nStart instruction. Post processing steps include:\n\n1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n2. Replace all ICU vars (like \"VAR_PLURAL\")\n3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\nin case multiple ICUs have the same placeholder name\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "message",
              "description": "Raw translation string for post processing",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "replacements",
              "description": "Set of replacements that should be applied",
              "type": "{ [key: string]: string | string[]; }"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "Transformed string that can be consumed by i18nStart instruction\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵi18nStart",
    "overloads": [
      {
        "file": "packages/core/src/render3/i18n.ts#L363-L372",
        "signature": "function ɵɵi18nStart(\n  index: number,\n  message: string,\n  subTemplateIndex?: number\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marks a block of text as translatable.\n\nThe instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\nThe translation `message` is the value which is locale specific. The translation string may\ncontain placeholders which associate inner elements and sub-templates within the translation.\n\nThe translation `message` placeholders are:\n- `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\ninterpolated into. The placeholder `index` points to the expression binding index. An optional\n`block` that matches the sub-template in which it was declared.\n- `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\nand end of DOM element that were embedded in the original translation block. The placeholder\n`index` points to the element index in the template instructions set. An optional `block` that\nmatches the sub-template in which it was declared.\n- `�!{index}(:{block})�`/`�/!{index}(:{block})�`: *Projection Placeholder*:  Marks the\nbeginning and end of <ng-content> that was embedded in the original translation block.\nThe placeholder `index` points to the element index in the template instructions set.\nAn optional `block` that matches the sub-template in which it was declared.\n- `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\nsplit up and translated separately in each angular template function. The `index` points to the\n`template` instruction index. A `block` that matches the sub-template in which it was declared.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "A unique index of the translation in the static block.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "message",
              "description": "The translation message.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "subTemplateIndex",
              "description": "Optional sub-template index in the `message`.",
              "type": "number"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵInheritDefinitionFeature",
    "overloads": [
      {
        "file": "packages/core/src/render3/features/inherit_definition_feature.ts#L30-L108",
        "signature": "function ɵɵInheritDefinitionFeature(\n  definition: DirectiveDef<any> | ComponentDef<any>\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Merges the definition from a super class to a sub class."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "definition",
              "description": "The definition that is a SubClass of another directive of component",
              "type": "DirectiveDef<any> | ComponentDef<any>"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵinjectAttribute",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/di.ts#L57-L59",
        "signature": "function ɵɵinjectAttribute(attrNameToInject: string): string | null;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Facade for the attribute injection from DI.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrNameToInject",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵinjectPipeChangeDetectorRef",
    "overloads": [
      {
        "file": "packages/core/src/render3/view_engine_compatibility_prebound.ts#L37-L44",
        "signature": "function ɵɵinjectPipeChangeDetectorRef(\n  flags = InjectFlags.Default\n): ChangeDetectorRef | null;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Returns the appropriate `ChangeDetectorRef` for a pipe.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "InjectFlags"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵinvalidFactory",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/di.ts#L73-L77",
        "signature": "function ɵɵinvalidFactory(): never;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Throws an error indicating that a factory function could not be generated by the compiler for a\nparticular class.\n\nThis instruction allows the actual error message to be optimized away when ngDevMode is turned\noff, saving bytes of generated code while still providing a good experience in dev mode.\n\nThe name of the class is not mentioned here, but will be in the generated factory function name\nand thus in the stack trace.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵlistener",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/listener.ts#L39-L48",
        "signature": "function ɵɵlistener(\n  eventName: string,\n  listenerFn: (e?: any) => any,\n  useCapture = false,\n  eventTargetResolver?: GlobalTargetResolver\n): typeof ɵɵlistener;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Adds an event listener to the current node.\n\nIf an output exists on one of the node's directives, it also subscribes to the output\nand saves the subscription for later cleanup.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "eventName",
              "description": "Name of the event",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "listenerFn",
              "description": "The function to be called when event emits",
              "type": "(e?: any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "useCapture",
              "description": "Whether or not to use capture in event listener",
              "type": "boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "eventTargetResolver",
              "description": "Function that returns global target information in case this listener",
              "type": "GlobalTargetResolver"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵloadQuery",
    "overloads": [
      {
        "file": "packages/core/src/render3/query.ts#L547-L549",
        "signature": "function ɵɵloadQuery<T>(): QueryList<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Loads a QueryList corresponding to the current view or content query.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵnamespaceHTML",
    "overloads": [
      {
        "file": "packages/core/src/render3/state.ts#L581-L583",
        "signature": "function ɵɵnamespaceHTML();",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Sets the namespace used to create elements to `null`, which forces element creation to use\n`createElement` rather than `createElementNS`.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵnamespaceMathML",
    "overloads": [
      {
        "file": "packages/core/src/render3/state.ts#L571-L573",
        "signature": "function ɵɵnamespaceMathML();",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵnamespaceSVG",
    "overloads": [
      {
        "file": "packages/core/src/render3/state.ts#L562-L564",
        "signature": "function ɵɵnamespaceSVG();",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵnextContext",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/next_context.ts#L22-L24",
        "signature": "function ɵɵnextContext<T = any>(level: number = 1): T;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves a context at the level specified and saves it as the global, contextViewData.\nWill get the next level up if level is not specified.\n\nThis is used to save contexts of parent views so they can be bound in embedded views, or\nin conjunction with reference() to bind a ref from a parent view.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "level",
              "description": "The relative level of the view from which to grab context compared to contextVewData",
              "type": "number"
            }
          ],
          ["returns", { "__kind": "heading", "description": "context\n" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵNgOnChangesFeature",
    "overloads": [
      {
        "file": "packages/core/src/render3/features/ng_onchanges_feature.ts#L36-L38",
        "signature": "function ɵɵNgOnChangesFeature<T>(): DirectiveDefFeature;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The NgOnChangesFeature decorates a component with support for the ngOnChanges\nlifecycle hook, so it should be included in any component that implements\nthat hook.\n\nIf the component or directive uses inheritance, the NgOnChangesFeature MUST\nbe included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\ninherited properties will not be propagated to the ngOnChanges lifecycle\nhook.\n\nExample usage:\n\n```\nstatic ɵcmp = defineComponent({\n...\ninputs: {name: 'publicName'},\nfeatures: [NgOnChangesFeature]\n});\n```\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpipe",
    "overloads": [
      {
        "file": "packages/core/src/render3/pipe.ts#L34-L60",
        "signature": "function ɵɵpipe(index: number, pipeName: string): any;",
        "info": [
          [
            "description",
            { "__kind": "heading", "description": "Create a pipe.\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Pipe index where the pipe will be stored.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pipeName",
              "description": "The name of the pipe",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "T the instance of the pipe.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpipeBind1",
    "overloads": [
      {
        "file": "packages/core/src/render3/pipe.ts#L94-L103",
        "signature": "function ɵɵpipeBind1(index: number, slotOffset: number, v1: any): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Invokes a pipe with 1 arguments.\n\nThis instruction acts as a guard to {@link PipeTransform#transform} invoking\nthe pipe only when an input to the pipe changes.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Pipe index where the pipe was stored on creation.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset in the reserved slot space",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "1st argument to {@link PipeTransform#transform}.",
              "type": "any"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpipeBind2",
    "overloads": [
      {
        "file": "packages/core/src/render3/pipe.ts#L118-L127",
        "signature": "function ɵɵpipeBind2(index: number, slotOffset: number, v1: any, v2: any): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Invokes a pipe with 2 arguments.\n\nThis instruction acts as a guard to {@link PipeTransform#transform} invoking\nthe pipe only when an input to the pipe changes.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Pipe index where the pipe was stored on creation.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset in the reserved slot space",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "1st argument to {@link PipeTransform#transform}.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "2nd argument to {@link PipeTransform#transform}.",
              "type": "any"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpipeBind3",
    "overloads": [
      {
        "file": "packages/core/src/render3/pipe.ts#L143-L152",
        "signature": "function ɵɵpipeBind3(\n  index: number,\n  slotOffset: number,\n  v1: any,\n  v2: any,\n  v3: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Invokes a pipe with 3 arguments.\n\nThis instruction acts as a guard to {@link PipeTransform#transform} invoking\nthe pipe only when an input to the pipe changes.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Pipe index where the pipe was stored on creation.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset in the reserved slot space",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "1st argument to {@link PipeTransform#transform}.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "2nd argument to {@link PipeTransform#transform}.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "4rd argument to {@link PipeTransform#transform}.",
              "type": "any"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpipeBind4",
    "overloads": [
      {
        "file": "packages/core/src/render3/pipe.ts#L169-L179",
        "signature": "function ɵɵpipeBind4(\n  index: number,\n  slotOffset: number,\n  v1: any,\n  v2: any,\n  v3: any,\n  v4: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Invokes a pipe with 4 arguments.\n\nThis instruction acts as a guard to {@link PipeTransform#transform} invoking\nthe pipe only when an input to the pipe changes.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Pipe index where the pipe was stored on creation.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset in the reserved slot space",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "1st argument to {@link PipeTransform#transform}.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "2nd argument to {@link PipeTransform#transform}.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "3rd argument to {@link PipeTransform#transform}.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "4th argument to {@link PipeTransform#transform}.",
              "type": "any"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpipeBindV",
    "overloads": [
      {
        "file": "packages/core/src/render3/pipe.ts#L193-L202",
        "signature": "function ɵɵpipeBindV(\n  index: number,\n  slotOffset: number,\n  values: [any, ...any[]]\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Invokes a pipe with variable number of arguments.\n\nThis instruction acts as a guard to {@link PipeTransform#transform} invoking\nthe pipe only when an input to the pipe changes.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Pipe index where the pipe was stored on creation.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset in the reserved slot space",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "Array of arguments to pass to {@link PipeTransform#transform} method.",
              "type": "[any, ...any[]]"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "core",
    "name": "ɵɵPipeDefWithMeta",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/definition.ts#L434-L434",
        "signature": "export type ɵɵPipeDefWithMeta<T, Name extends string> = PipeDef<T>;",
        "info": [["codeGenApi", { "__kind": "heading", "description": "\n" }]]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵprojection",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/projection.ts#L123-L141",
        "signature": "function ɵɵprojection(\n  nodeIndex: number,\n  selectorIndex: number = 0,\n  attrs?: TAttributes\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\nto the projectionDef instruction.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "nodeIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "selectorIndex:",
              "description": "",
              "type": ""
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "selectorIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrs",
              "description": "",
              "type": "TAttributes"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵprojectionDef",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/projection.ts#L75-L104",
        "signature": "function ɵɵprojectionDef(projectionSlots?: ProjectionSlots): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\nIt takes all the selectors from the entire component's template and decides where\neach projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\nbacked by a selector).\n\nThis function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\nun-parsed form.\n\nThe parsed form is needed for efficient matching of a node against a given CSS selector.\nThe un-parsed, textual form is needed for support of the ngProjectAs attribute.\n\nHaving a CSS selector in 2 different formats is not ideal, but alternatives have even more\ndrawbacks:\n- having only a textual form would require runtime parsing of CSS selectors;\n- we can't have only a parsed as we can't re-construct textual form from it (as entered by a\ntemplate author).\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "projectionSlots?",
              "description": "A collection of projection slots. A projection slot can be based",
              "type": ""
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "projectionSlots",
              "description": "",
              "type": "ProjectionSlots"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵproperty",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property.ts#L35-L47",
        "signature": "function ɵɵproperty<T>(\n  propName: string,\n  value: T,\n  sanitizer?: SanitizerFn | null\n): typeof ɵɵproperty;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update a property on a selected element.\n\nOperates on the element selected by index via the {@link select} instruction.\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "Name of property. Because it is going to DOM, this is not subject to",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "New value to write.",
              "type": "T"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional function used to sanitize the value.",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "This function returns itself so that it may be chained\n(e.g. `property('name', ctx.name)('title', ctx.title)`)\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpropertyInterpolate",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property_interpolation.ts#L46-L50",
        "signature": "function ɵɵpropertyInterpolate(\n  propName: string,\n  v0: any,\n  sanitizer?: SanitizerFn\n): typeof ɵɵpropertyInterpolate;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated property on an element with a lone bound value\n\nUsed when the value passed to a property has 1 interpolated value in it, an no additional text\nsurrounds that interpolated value:\n\n```html\n<div title=\"{{v0}}\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵpropertyInterpolate('title', v0);\n```\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "The name of the property to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpropertyInterpolate1",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property_interpolation.ts#L81-L96",
        "signature": "function ɵɵpropertyInterpolate1(\n  propName: string,\n  prefix: string,\n  v0: any,\n  suffix: string,\n  sanitizer?: SanitizerFn\n): typeof ɵɵpropertyInterpolate1;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated property on an element with single bound value surrounded by text.\n\nUsed when the value passed to a property has 1 interpolated value in it:\n\n```html\n<div title=\"prefix{{v0}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n```\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "The name of the property to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpropertyInterpolate2",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property_interpolation.ts#L128-L143",
        "signature": "function ɵɵpropertyInterpolate2(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  suffix: string,\n  sanitizer?: SanitizerFn\n): typeof ɵɵpropertyInterpolate2;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated property on an element with 2 bound values surrounded by text.\n\nUsed when the value passed to a property has 2 interpolated values in it:\n\n```html\n<div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n```\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "The name of the property to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpropertyInterpolate3",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property_interpolation.ts#L178-L193",
        "signature": "function ɵɵpropertyInterpolate3(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  suffix: string,\n  sanitizer?: SanitizerFn\n): typeof ɵɵpropertyInterpolate3;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated property on an element with 3 bound values surrounded by text.\n\nUsed when the value passed to a property has 3 interpolated values in it:\n\n```html\n<div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵpropertyInterpolate3(\n'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n```\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "The name of the property to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpropertyInterpolate4",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property_interpolation.ts#L230-L245",
        "signature": "function ɵɵpropertyInterpolate4(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  suffix: string,\n  sanitizer?: SanitizerFn\n): typeof ɵɵpropertyInterpolate4;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated property on an element with 4 bound values surrounded by text.\n\nUsed when the value passed to a property has 4 interpolated values in it:\n\n```html\n<div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵpropertyInterpolate4(\n'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n```\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "The name of the property to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpropertyInterpolate5",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property_interpolation.ts#L284-L301",
        "signature": "function ɵɵpropertyInterpolate5(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  suffix: string,\n  sanitizer?: SanitizerFn\n): typeof ɵɵpropertyInterpolate5;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated property on an element with 5 bound values surrounded by text.\n\nUsed when the value passed to a property has 5 interpolated values in it:\n\n```html\n<div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵpropertyInterpolate5(\n'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n```\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "The name of the property to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpropertyInterpolate6",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property_interpolation.ts#L342-L359",
        "signature": "function ɵɵpropertyInterpolate6(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  suffix: string,\n  sanitizer?: SanitizerFn\n): typeof ɵɵpropertyInterpolate6;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated property on an element with 6 bound values surrounded by text.\n\nUsed when the value passed to a property has 6 interpolated values in it:\n\n```html\n<div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵpropertyInterpolate6(\n'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n```\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "The name of the property to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpropertyInterpolate7",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property_interpolation.ts#L402-L420",
        "signature": "function ɵɵpropertyInterpolate7(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  suffix: string,\n  sanitizer?: SanitizerFn\n): typeof ɵɵpropertyInterpolate7;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated property on an element with 7 bound values surrounded by text.\n\nUsed when the value passed to a property has 7 interpolated values in it:\n\n```html\n<div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵpropertyInterpolate7(\n'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n```\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "The name of the property to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpropertyInterpolate8",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property_interpolation.ts#L465-L483",
        "signature": "function ɵɵpropertyInterpolate8(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  i6: string,\n  v7: any,\n  suffix: string,\n  sanitizer?: SanitizerFn\n): typeof ɵɵpropertyInterpolate8;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated property on an element with 8 bound values surrounded by text.\n\nUsed when the value passed to a property has 8 interpolated values in it:\n\n```html\n<div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵpropertyInterpolate8(\n'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n```\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "The name of the property to update",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i6",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v7",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpropertyInterpolateV",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/property_interpolation.ts#L515-L535",
        "signature": "function ɵɵpropertyInterpolateV(\n  propName: string,\n  values: any[],\n  sanitizer?: SanitizerFn\n): typeof ɵɵpropertyInterpolateV;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update an interpolated property on an element with 9 or more bound values surrounded by text.\n\nUsed when the number of interpolated values exceeds 8.\n\n```html\n<div\ntitle=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n```\n\nIts compiled representation is::\n\n```ts\nɵɵpropertyInterpolateV(\n'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n'suffix']);\n```\n\nIf the property name also exists as an input property on one of the element's directives,\nthe component property will be set instead of the element property. This check must\nbe conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "The name of the property to update.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "The collection of values and the strings inbetween those values, beginning with a",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional sanitizer function",
              "type": "SanitizerFn"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵProvidersFeature",
    "overloads": [
      {
        "file": "packages/core/src/render3/features/providers_feature.ts#L44-L54",
        "signature": "function ɵɵProvidersFeature<T>(\n  providers: Provider[],\n  viewProviders: Provider[] = []\n);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "This feature resolves the providers of a directive (or component),\nand publish them into the DI system, making it visible to others for injection.\n\nFor example:\n```ts\nclass ComponentWithProviders {\nconstructor(private greeter: GreeterDE) {}\n\nstatic ɵcmp = defineComponent({\ntype: ComponentWithProviders,\nselectors: [['component-with-providers']],\nfactory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\ndecls: 1,\nvars: 1,\ntemplate: function(fs: RenderFlags, ctx: ComponentWithProviders) {\nif (fs & RenderFlags.Create) {\nɵɵtext(0);\n}\nif (fs & RenderFlags.Update) {\nɵɵtextInterpolate(ctx.greeter.greet());\n}\n},\nfeatures: [ProvidersFeature([GreeterDE])]\n});\n}\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "definition",
              "description": "",
              "type": ""
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "Provider[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "viewProviders",
              "description": "",
              "type": "Provider[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpureFunction0",
    "overloads": [
      {
        "file": "packages/core/src/render3/pure_function.ts#L45-L51",
        "signature": "function ɵɵpureFunction0<T>(\n  slotOffset: number,\n  pureFn: () => T,\n  thisArg?: any\n): T;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Bindings for pure functions are stored after regular bindings.\n\n|-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n------------------------------------------------------------------------------------------\n| nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n------------------------------------------------------------------------------------------\n^                      ^\nTView.bindingStartIndex      TView.expandoStartIndex\n\nPure function instructions are given an offset from the binding root. Adding the offset to the\nbinding root gives the first index where the bindings are stored. In component views, the binding\nroot is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\nany directive instances + any hostVars in directives evaluated before it.\n\nSee VIEW_DATA.md for more information about host binding resolution.\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the value hasn't been saved, calls the pure function to store and return the\nvalue. If it has been saved, returns the saved value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset from binding root to the reserved slot",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pureFn",
              "description": "Function that returns a value",
              "type": "() => T"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "Optional calling context of pureFn",
              "type": "any"
            }
          ],
          ["returns", { "__kind": "heading", "description": "value\n" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpureFunction1",
    "overloads": [
      {
        "file": "packages/core/src/render3/pure_function.ts#L65-L68",
        "signature": "function ɵɵpureFunction1(\n  slotOffset: number,\n  pureFn: (v: any) => any,\n  exp: any,\n  thisArg?: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the value of the provided exp has changed, calls the pure function to return\nan updated value. Or if the value has not changed, returns cached value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset from binding root to the reserved slot",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pureFn",
              "description": "Function that returns an updated value",
              "type": "(v: any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp",
              "description": "Updated expression value",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "Optional calling context of pureFn",
              "type": "any"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "Updated or cached value\n" }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpureFunction2",
    "overloads": [
      {
        "file": "packages/core/src/render3/pure_function.ts#L83-L88",
        "signature": "function ɵɵpureFunction2(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any) => any,\n  exp1: any,\n  exp2: any,\n  thisArg?: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the value of any provided exp has changed, calls the pure function to return\nan updated value. Or if no values have changed, returns cached value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset from binding root to the reserved slot",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pureFn",
              "description": "",
              "type": "(v1: any, v2: any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "Optional calling context of pureFn",
              "type": "any"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "Updated or cached value\n" }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpureFunction3",
    "overloads": [
      {
        "file": "packages/core/src/render3/pure_function.ts#L104-L109",
        "signature": "function ɵɵpureFunction3(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  thisArg?: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the value of any provided exp has changed, calls the pure function to return\nan updated value. Or if no values have changed, returns cached value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset from binding root to the reserved slot",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pureFn",
              "description": "",
              "type": "(v1: any, v2: any, v3: any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "Optional calling context of pureFn",
              "type": "any"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "Updated or cached value\n" }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpureFunction4",
    "overloads": [
      {
        "file": "packages/core/src/render3/pure_function.ts#L126-L131",
        "signature": "function ɵɵpureFunction4(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any, v4: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  thisArg?: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the value of any provided exp has changed, calls the pure function to return\nan updated value. Or if no values have changed, returns cached value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset from binding root to the reserved slot",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pureFn",
              "description": "",
              "type": "(v1: any, v2: any, v3: any, v4: any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "Optional calling context of pureFn",
              "type": "any"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "Updated or cached value\n" }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpureFunction5",
    "overloads": [
      {
        "file": "packages/core/src/render3/pure_function.ts#L149-L161",
        "signature": "function ɵɵpureFunction5(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  exp5: any,\n  thisArg?: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the value of any provided exp has changed, calls the pure function to return\nan updated value. Or if no values have changed, returns cached value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset from binding root to the reserved slot",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pureFn",
              "description": "",
              "type": "(v1: any, v2: any, v3: any, v4: any, v5: any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "Optional calling context of pureFn",
              "type": "any"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "Updated or cached value\n" }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpureFunction6",
    "overloads": [
      {
        "file": "packages/core/src/render3/pure_function.ts#L180-L192",
        "signature": "function ɵɵpureFunction6(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  exp5: any,\n  exp6: any,\n  thisArg?: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the value of any provided exp has changed, calls the pure function to return\nan updated value. Or if no values have changed, returns cached value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset from binding root to the reserved slot",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pureFn",
              "description": "",
              "type": "(v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "Optional calling context of pureFn",
              "type": "any"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "Updated or cached value\n" }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpureFunction7",
    "overloads": [
      {
        "file": "packages/core/src/render3/pure_function.ts#L212-L225",
        "signature": "function ɵɵpureFunction7(\n  slotOffset: number,\n  pureFn: (\n    v1: any,\n    v2: any,\n    v3: any,\n    v4: any,\n    v5: any,\n    v6: any,\n    v7: any\n  ) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  exp5: any,\n  exp6: any,\n  exp7: any,\n  thisArg?: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the value of any provided exp has changed, calls the pure function to return\nan updated value. Or if no values have changed, returns cached value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset from binding root to the reserved slot",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pureFn",
              "description": "",
              "type": "(v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp7",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "Optional calling context of pureFn",
              "type": "any"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "Updated or cached value\n" }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpureFunction8",
    "overloads": [
      {
        "file": "packages/core/src/render3/pure_function.ts#L246-L260",
        "signature": "function ɵɵpureFunction8(\n  slotOffset: number,\n  pureFn: (\n    v1: any,\n    v2: any,\n    v3: any,\n    v4: any,\n    v5: any,\n    v6: any,\n    v7: any,\n    v8: any\n  ) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  exp5: any,\n  exp6: any,\n  exp7: any,\n  exp8: any,\n  thisArg?: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "If the value of any provided exp has changed, calls the pure function to return\nan updated value. Or if no values have changed, returns cached value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset from binding root to the reserved slot",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pureFn",
              "description": "",
              "type": "(v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp7",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exp8",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "Optional calling context of pureFn",
              "type": "any"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "Updated or cached value\n" }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵpureFunctionV",
    "overloads": [
      {
        "file": "packages/core/src/render3/pure_function.ts#L277-L280",
        "signature": "function ɵɵpureFunctionV(\n  slotOffset: number,\n  pureFn: (...v: any[]) => any,\n  exps: any[],\n  thisArg?: any\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "pureFunction instruction that can support any number of bindings.\n\nIf the value of any provided exp has changed, calls the pure function to return\nan updated value. Or if no values have changed, returns cached value.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "slotOffset",
              "description": "the offset from binding root to the reserved slot",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pureFn",
              "description": "A pure function that takes binding values and builds an object or array",
              "type": "(...v: any[]) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "exps",
              "description": "An array of binding values",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "thisArg",
              "description": "Optional calling context of pureFn",
              "type": "any"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "Updated or cached value\n" }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵqueryRefresh",
    "overloads": [
      {
        "file": "packages/core/src/render3/query.ts#L424-L446",
        "signature": "function ɵɵqueryRefresh(queryList: QueryList<any>): boolean;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Refreshes a query by combining matches from all active views and removing matches from deleted\nviews.\n"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "`true` if a query got dirty during change detection or if this is a static query\nresolving in creation mode, `false` otherwise.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "queryList",
              "description": "",
              "type": "QueryList<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵreference",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/storage.ts#L35-L38",
        "signature": "function ɵɵreference<T>(index: number);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves a local reference from the current contextViewData.\n\nIf the reference to retrieve is in a parent view, this instruction is used in conjunction\nwith a nextContext() call, which walks up the tree and updates the contextViewData instance.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "The index of the local ref in contextViewData.",
              "type": "number"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵresolveBody",
    "overloads": [
      {
        "file": "packages/core/src/render3/util/misc_utils.ts#L67-L69",
        "signature": "function ɵɵresolveBody(element: RElement & { ownerDocument: Document });",
        "info": [
          ["description", { "__kind": "heading", "description": "" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "element",
              "description": "",
              "type": "RElement & { ownerDocument: Document; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵresolveDocument",
    "overloads": [
      {
        "file": "packages/core/src/render3/util/misc_utils.ts#L59-L61",
        "signature": "function ɵɵresolveDocument(element: RElement & { ownerDocument: Document });",
        "info": [
          ["description", { "__kind": "heading", "description": "" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "element",
              "description": "",
              "type": "RElement & { ownerDocument: Document; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵresolveWindow",
    "overloads": [
      {
        "file": "packages/core/src/render3/util/misc_utils.ts#L51-L53",
        "signature": "function ɵɵresolveWindow(element: RElement & { ownerDocument: Document });",
        "info": [
          ["description", { "__kind": "heading", "description": "" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "element",
              "description": "",
              "type": "RElement & { ownerDocument: Document; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵrestoreView",
    "overloads": [
      {
        "file": "packages/core/src/render3/state.ts#L261-L263",
        "signature": "function ɵɵrestoreView(viewToRestore: OpaqueViewState);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Restores `contextViewData` to the given OpaqueViewState instance.\n\nUsed in conjunction with the getCurrentView() instruction to save a snapshot\nof the current view and restore it when listeners are invoked. This allows\nwalking the declaration view tree in listeners to get vars from parent views.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "viewToRestore",
              "description": "The OpaqueViewState instance to restore.",
              "type": "OpaqueViewState"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵselect",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/advance.ts#L47-L50",
        "signature": "function ɵɵselect(index: number): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Selects an element for later binding instructions."
            }
          ],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "No longer being generated, but still used in unit tests."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵsetComponentScope",
    "overloads": [
      {
        "file": "packages/core/src/render3/definition.ts#L357-L362",
        "signature": "function ɵɵsetComponentScope(\n  type: ComponentType<any>,\n  directives: Type<any>[],\n  pipes: Type<any>[]\n): void;",
        "info": [
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "ComponentType<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "directives",
              "description": "",
              "type": "Type<any>[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "pipes",
              "description": "",
              "type": "Type<any>[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵsetNgModuleScope",
    "overloads": [
      {
        "file": "packages/core/src/render3/definition.ts#L438-L457",
        "signature": "function ɵɵsetNgModuleScope(\n  type: any,\n  scope: {\n    /** List of components, directives, and pipes declared by this module. */\n    declarations?: Type<any>[] | (() => Type<any>[]);\n\n    /** List of modules or `ModuleWithProviders` imported by this module. */\n    imports?: Type<any>[] | (() => Type<any>[]);\n\n    /**\n     * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n     * module.\n     */\n    exports?: Type<any>[] | (() => Type<any>[]);\n  }\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Adds the module metadata that is necessary to compute the module's transitive scope to an\nexisting module definition.\n\nScope metadata of modules is not used in production builds, so calls to this function can be\nmarked pure to tree-shake it from the bundle, allowing for all referenced declarations\nto become eligible for tree-shaking as well.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "scope",
              "description": "",
              "type": "{ declarations?: Type<any>[] | (() => Type<any>[]); imports?: Type<any>[] | (() => Type<any>[]); exports?: Type<any>[] | (() => Type<any>[]); }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstaticContentQuery",
    "overloads": [
      {
        "file": "packages/core/src/render3/query.ts#L520-L526",
        "signature": "function ɵɵstaticContentQuery<T>(\n  directiveIndex: number,\n  predicate: Type<any> | InjectionToken<unknown> | string[],\n  descend: boolean,\n  read?: any\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Registers a QueryList, associated with a static content query, for later refresh\n(part of a view refresh).\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "directiveIndex",
              "description": "Current directive index",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "The type for which the query will search",
              "type": "Type<any> | InjectionToken<unknown> | string[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "descend",
              "description": "Whether or not to descend into children",
              "type": "boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "read",
              "description": "What to save in the query",
              "type": "any"
            }
          ],
          ["returns", { "__kind": "heading", "description": "QueryList<T>\n" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstaticViewQuery",
    "overloads": [
      {
        "file": "packages/core/src/render3/query.ts#L457-L460",
        "signature": "function ɵɵstaticViewQuery<T>(\n  predicate: Type<any> | InjectionToken<unknown> | string[],\n  descend: boolean,\n  read?: any\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates new QueryList for a static view query.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "The type for which the query will search",
              "type": "Type<any> | InjectionToken<unknown> | string[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "descend",
              "description": "Whether or not to descend into children",
              "type": "boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "read",
              "description": "What to save in the query",
              "type": "any"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleMap",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/styling.ts#L97-L99",
        "signature": "function ɵɵstyleMap(\n  styles: { [styleName: string]: any } | string | undefined | null\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update style bindings using an object literal on an element.\n\nThis instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\nWhen styles are applied to the element they will then be updated with respect to\nany styles/classes set via `styleProp`. If any styles are set to falsy\nthen they will be removed from the element.\n\nNote that the styling instruction will not be applied until `stylingApply` is called.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styles",
              "description": "A key/value style map of the styles that will be applied to the given element.",
              "type": "string | { [styleName: string]: any; }"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleMapInterpolate1",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_map_interpolation.ts#L35-L39",
        "signature": "function ɵɵstyleMapInterpolate1(prefix: string, v0: any, suffix: string): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style on an element with single bound value surrounded by text.\n\nUsed when the value passed to a property has 1 interpolated value in it:\n\n```html\n<div style=\"key: {{v0}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleMapInterpolate2",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_map_interpolation.ts#L64-L69",
        "signature": "function ɵɵstyleMapInterpolate2(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style on an element with 2 bound values surrounded by text.\n\nUsed when the value passed to a property has 2 interpolated values in it:\n\n```html\n<div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleMapInterpolate3",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_map_interpolation.ts#L97-L102",
        "signature": "function ɵɵstyleMapInterpolate3(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style on an element with 3 bound values surrounded by text.\n\nUsed when the value passed to a property has 3 interpolated values in it:\n\n```html\n<div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstyleMapInterpolate3(\n'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleMapInterpolate4",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_map_interpolation.ts#L132-L138",
        "signature": "function ɵɵstyleMapInterpolate4(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style on an element with 4 bound values surrounded by text.\n\nUsed when the value passed to a property has 4 interpolated values in it:\n\n```html\n<div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstyleMapInterpolate4(\n'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleMapInterpolate5",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_map_interpolation.ts#L170-L177",
        "signature": "function ɵɵstyleMapInterpolate5(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style on an element with 5 bound values surrounded by text.\n\nUsed when the value passed to a property has 5 interpolated values in it:\n\n```html\n<div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstyleMapInterpolate5(\n'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleMapInterpolate6",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_map_interpolation.ts#L213-L220",
        "signature": "function ɵɵstyleMapInterpolate6(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style on an element with 6 bound values surrounded by text.\n\nUsed when the value passed to a property has 6 interpolated values in it:\n\n```html\n<div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\nkey5: {{v5}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstyleMapInterpolate6(\n'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleMapInterpolate7",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_map_interpolation.ts#L258-L265",
        "signature": "function ɵɵstyleMapInterpolate7(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style on an element with 7 bound values surrounded by text.\n\nUsed when the value passed to a property has 7 interpolated values in it:\n\n```html\n<div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\nkey6: {{v6}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstyleMapInterpolate7(\n'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n'; key6: ', v6, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleMapInterpolate8",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_map_interpolation.ts#L305-L313",
        "signature": "function ɵɵstyleMapInterpolate8(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  i6: string,\n  v7: any,\n  suffix: string\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style on an element with 8 bound values surrounded by text.\n\nUsed when the value passed to a property has 8 interpolated values in it:\n\n```html\n<div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\nkey6: {{v6}}; key7: {{v7}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstyleMapInterpolate8(\n'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n'; key6: ', v6, '; key7: ', v7, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i6",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v7",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleMapInterpolateV",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_map_interpolation.ts#L339-L343",
        "signature": "function ɵɵstyleMapInterpolateV(values: any[]): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update an interpolated style on an element with 9 or more bound values surrounded by text.\n\nUsed when the number of interpolated values exceeds 8.\n\n```html\n<div\nclass=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\nkey6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstyleMapInterpolateV(\n['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n'; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "The collection of values and the strings in-between those values, beginning with",
              "type": "any[]"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstyleProp",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/styling.ts#L50-L55",
        "signature": "function ɵɵstyleProp(\n  prop: string,\n  value: string | number | SafeValue | undefined | null,\n  suffix?: string | null\n): typeof ɵɵstyleProp;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update a style binding on an element with the provided value.\n\nIf the style value is falsy then it will be removed from the element\n(or assigned a different value depending if there are any styles placed\non the element with `styleMap` or any static styles that are\npresent from when the element was created with `styling`).\n\nNote that the styling element is updated as part of `stylingApply`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "A valid CSS property.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "New value to write (`null` or an empty string to remove).",
              "type": "string | number | SafeValue"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Optional suffix. Used with scalar values to add unit such as `px`.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstylePropInterpolate1",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_prop_interpolation.ts#L40-L47",
        "signature": "function ɵɵstylePropInterpolate1(\n  prop: string,\n  prefix: string,\n  v0: any,\n  suffix: string,\n  valueSuffix?: string | null\n): typeof ɵɵstylePropInterpolate1;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style property on an element with single bound value surrounded by text.\n\nUsed when the value passed to a property has 1 interpolated value in it:\n\n```html\n<div style.color=\"prefix{{v0}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styleIndex",
              "description": "Index of style to update. This index value refers to the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "valueSuffix",
              "description": "Optional suffix. Used with scalar values to add unit such as `px`.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstylePropInterpolate2",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_prop_interpolation.ts#L77-L84",
        "signature": "function ɵɵstylePropInterpolate2(\n  prop: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  suffix: string,\n  valueSuffix?: string | null\n): typeof ɵɵstylePropInterpolate2;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style property on an element with 2 bound values surrounded by text.\n\nUsed when the value passed to a property has 2 interpolated values in it:\n\n```html\n<div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styleIndex",
              "description": "Index of style to update. This index value refers to the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "valueSuffix",
              "description": "Optional suffix. Used with scalar values to add unit such as `px`.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstylePropInterpolate3",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_prop_interpolation.ts#L116-L123",
        "signature": "function ɵɵstylePropInterpolate3(\n  prop: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  suffix: string,\n  valueSuffix?: string | null\n): typeof ɵɵstylePropInterpolate3;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style property on an element with 3 bound values surrounded by text.\n\nUsed when the value passed to a property has 3 interpolated values in it:\n\n```html\n<div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styleIndex",
              "description": "Index of style to update. This index value refers to the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "valueSuffix",
              "description": "Optional suffix. Used with scalar values to add unit such as `px`.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstylePropInterpolate4",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_prop_interpolation.ts#L157-L164",
        "signature": "function ɵɵstylePropInterpolate4(\n  prop: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  suffix: string,\n  valueSuffix?: string | null\n): typeof ɵɵstylePropInterpolate4;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style property on an element with 4 bound values surrounded by text.\n\nUsed when the value passed to a property has 4 interpolated values in it:\n\n```html\n<div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styleIndex",
              "description": "Index of style to update. This index value refers to the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "valueSuffix",
              "description": "Optional suffix. Used with scalar values to add unit such as `px`.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstylePropInterpolate5",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_prop_interpolation.ts#L200-L209",
        "signature": "function ɵɵstylePropInterpolate5(\n  prop: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  suffix: string,\n  valueSuffix?: string | null\n): typeof ɵɵstylePropInterpolate5;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style property on an element with 5 bound values surrounded by text.\n\nUsed when the value passed to a property has 5 interpolated values in it:\n\n```html\n<div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styleIndex",
              "description": "Index of style to update. This index value refers to the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "valueSuffix",
              "description": "Optional suffix. Used with scalar values to add unit such as `px`.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstylePropInterpolate6",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_prop_interpolation.ts#L247-L256",
        "signature": "function ɵɵstylePropInterpolate6(\n  prop: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  suffix: string,\n  valueSuffix?: string | null\n): typeof ɵɵstylePropInterpolate6;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style property on an element with 6 bound values surrounded by text.\n\nUsed when the value passed to a property has 6 interpolated values in it:\n\n```html\n<div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styleIndex",
              "description": "Index of style to update. This index value refers to the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "valueSuffix",
              "description": "Optional suffix. Used with scalar values to add unit such as `px`.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstylePropInterpolate7",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_prop_interpolation.ts#L297-L306",
        "signature": "function ɵɵstylePropInterpolate7(\n  prop: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  suffix: string,\n  valueSuffix?: string | null\n): typeof ɵɵstylePropInterpolate7;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style property on an element with 7 bound values surrounded by text.\n\nUsed when the value passed to a property has 7 interpolated values in it:\n\n```html\n<div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstylePropInterpolate7(\n0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styleIndex",
              "description": "Index of style to update. This index value refers to the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "valueSuffix",
              "description": "Optional suffix. Used with scalar values to add unit such as `px`.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstylePropInterpolate8",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_prop_interpolation.ts#L349-L358",
        "signature": "function ɵɵstylePropInterpolate8(\n  prop: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  i6: string,\n  v7: any,\n  suffix: string,\n  valueSuffix?: string | null\n): typeof ɵɵstylePropInterpolate8;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate an interpolated style property on an element with 8 bound values surrounded by text.\n\nUsed when the value passed to a property has 8 interpolated values in it:\n\n```html\n<div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n'-', v7, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styleIndex",
              "description": "Index of style to update. This index value refers to the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i6",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v7",
              "description": "Value checked for change.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "valueSuffix",
              "description": "Optional suffix. Used with scalar values to add unit such as `px`.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵstylePropInterpolateV",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/style_prop_interpolation.ts#L390-L396",
        "signature": "function ɵɵstylePropInterpolateV(\n  prop: string,\n  values: any[],\n  valueSuffix?: string | null\n): typeof ɵɵstylePropInterpolateV;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update an interpolated style property on an element with 9 or more bound values surrounded by\ntext.\n\nUsed when the number of interpolated values exceeds 8.\n\n```html\n<div\nstyle.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵstylePropInterpolateV(\n0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n'suffix']);\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styleIndex",
              "description": "Index of style to update. This index value refers to the",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "The collection of values and the strings in-between those values, beginning with",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "valueSuffix",
              "description": "Optional suffix. Used with scalar values to add unit such as `px`.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵsyntheticHostListener",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/listener.ts#L71-L82",
        "signature": "function ɵɵsyntheticHostListener(\n  eventName: string,\n  listenerFn: (e?: any) => any,\n  useCapture = false,\n  eventTargetResolver?: GlobalTargetResolver\n): typeof ɵɵsyntheticHostListener;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n\nThis instruction is for compatibility purposes and is designed to ensure that a\nsynthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\nin the component's renderer. Normally all host listeners are evaluated with the\nparent component's renderer, but, in the case of animation @triggers, they need\nto be evaluated with the sub component's renderer (because that's where the\nanimation triggers are defined).\n\nDo not use this instruction as a replacement for `listener`. This instruction\nonly exists to ensure compatibility with the ViewEngine's host binding behavior.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "eventName",
              "description": "Name of the event",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "listenerFn",
              "description": "The function to be called when event emits",
              "type": "(e?: any) => any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "useCapture",
              "description": "Whether or not to use capture in event listener",
              "type": "boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "eventTargetResolver",
              "description": "Function that returns global target information in case this listener",
              "type": "GlobalTargetResolver"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵsyntheticHostProperty",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/host_property.ts#L65-L79",
        "signature": "function ɵɵsyntheticHostProperty<T>(\n  propName: string,\n  value: T | NO_CHANGE,\n  sanitizer?: SanitizerFn | null\n): typeof ɵɵsyntheticHostProperty;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n\nThis instruction is for compatibility purposes and is designed to ensure that a\nsynthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\nthe component's renderer. Normally all host bindings are evaluated with the parent\ncomponent's renderer, but, in the case of animation @triggers, they need to be\nevaluated with the sub component's renderer (because that's where the animation\ntriggers are defined).\n\nDo not use this instruction as a replacement for `elementProperty`. This instruction\nonly exists to ensure compatibility with the ViewEngine's host binding behavior.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "The index of the element to update in the data array",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propName",
              "description": "Name of property. Because it is going to DOM, this is not subject to",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "New value to write.",
              "type": "T | NO_CHANGE"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "sanitizer",
              "description": "An optional function used to sanitize the value.",
              "type": "SanitizerFn"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtemplate",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/template.ts#L71-L98",
        "signature": "function ɵɵtemplate(\n  index: number,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  tagName?: string | null,\n  attrsIndex?: number | null,\n  localRefsIndex?: number | null,\n  localRefExtractor?: LocalRefExtractor\n);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n\n<ng-template #foo>\n<div></div>\n</ng-template>\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "The index of the container in the data array",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "templateFn",
              "description": "Inline template",
              "type": "ComponentTemplate<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "decls",
              "description": "The number of nodes, local refs, and pipes for this template",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "vars",
              "description": "The number of bindings for this template",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "tagName",
              "description": "The name of the container element, if applicable",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "attrsIndex",
              "description": "Index of template attributes in the `consts` array.",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "localRefs",
              "description": "Index of the local references in the `consts` array.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "localRefExtractor",
              "description": "A function which extracts local-refs values from the template.",
              "type": "LocalRefExtractor"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "localRefsIndex",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtemplateRefExtractor",
    "overloads": [
      {
        "file": "packages/core/src/render3/view_engine_compatibility_prebound.ts#L27-L29",
        "signature": "function ɵɵtemplateRefExtractor(tNode: TNode, currentView: LView);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n`<ng-template>` element.\n"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "tNode",
              "description": "",
              "type": "TNode"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "currentView",
              "description": "",
              "type": "LView"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtext",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text.ts#L25-L45",
        "signature": "function ɵɵtext(index: number, value: string = \"\"): void;",
        "info": [
          [
            "description",
            { "__kind": "heading", "description": "Create static text node\n" }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "Index of the node in the data array",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "Static string value to write.",
              "type": "string"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtextInterpolate",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text_interpolation.ts#L35-L38",
        "signature": "function ɵɵtextInterpolate(v0: any): typeof ɵɵtextInterpolate;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate text content with a lone bound value\n\nUsed when a text node has 1 interpolated value in it, an no additional text\nsurrounds that interpolated value:\n\n```html\n<div>{{v0}}</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵtextInterpolate(v0);\n```"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["see", { "__kind": "heading", "description": "textInterpolateV" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtextInterpolate1",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text_interpolation.ts#L60-L68",
        "signature": "function ɵɵtextInterpolate1(\n  prefix: string,\n  v0: any,\n  suffix: string\n): typeof ɵɵtextInterpolate1;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate text content with single bound value surrounded by other text.\n\nUsed when a text node has 1 interpolated value in it:\n\n```html\n<div>prefix{{v0}}suffix</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵtextInterpolate1('prefix', v0, 'suffix');\n```"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["see", { "__kind": "heading", "description": "textInterpolateV" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtextInterpolate2",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text_interpolation.ts#L89-L97",
        "signature": "function ɵɵtextInterpolate2(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  suffix: string\n): typeof ɵɵtextInterpolate2;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate text content with 2 bound values surrounded by other text.\n\nUsed when a text node has 2 interpolated values in it:\n\n```html\n<div>prefix{{v0}}-{{v1}}suffix</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n```"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["see", { "__kind": "heading", "description": "textInterpolateV" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtextInterpolate3",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text_interpolation.ts#L119-L128",
        "signature": "function ɵɵtextInterpolate3(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  suffix: string\n): typeof ɵɵtextInterpolate3;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate text content with 3 bound values surrounded by other text.\n\nUsed when a text node has 3 interpolated values in it:\n\n```html\n<div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵtextInterpolate3(\n'prefix', v0, '-', v1, '-', v2, 'suffix');\n```"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["see", { "__kind": "heading", "description": "textInterpolateV" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtextInterpolate4",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text_interpolation.ts#L150-L159",
        "signature": "function ɵɵtextInterpolate4(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  suffix: string\n): typeof ɵɵtextInterpolate4;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate text content with 4 bound values surrounded by other text.\n\nUsed when a text node has 4 interpolated values in it:\n\n```html\n<div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵtextInterpolate4(\n'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n```"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["see", { "__kind": "heading", "description": "ɵɵtextInterpolateV" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtextInterpolate5",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text_interpolation.ts#L181-L190",
        "signature": "function ɵɵtextInterpolate5(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  suffix: string\n): typeof ɵɵtextInterpolate5;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate text content with 5 bound values surrounded by other text.\n\nUsed when a text node has 5 interpolated values in it:\n\n```html\n<div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵtextInterpolate5(\n'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n```"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["see", { "__kind": "heading", "description": "textInterpolateV" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtextInterpolate6",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text_interpolation.ts#L214-L224",
        "signature": "function ɵɵtextInterpolate6(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  suffix: string\n): typeof ɵɵtextInterpolate6;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate text content with 6 bound values surrounded by other text.\n\nUsed when a text node has 6 interpolated values in it:\n\n```html\n<div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵtextInterpolate6(\n'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "Static value used for concatenation only.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "Value checked for change. @returns itself, so that it may be chained.",
              "type": "any"
            }
          ],
          ["see", { "__kind": "heading", "description": "textInterpolateV" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtextInterpolate7",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text_interpolation.ts#L246-L257",
        "signature": "function ɵɵtextInterpolate7(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  suffix: string\n): typeof ɵɵtextInterpolate7;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate text content with 7 bound values surrounded by other text.\n\nUsed when a text node has 7 interpolated values in it:\n\n```html\n<div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵtextInterpolate7(\n'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n```"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["see", { "__kind": "heading", "description": "textInterpolateV" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtextInterpolate8",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text_interpolation.ts#L279-L290",
        "signature": "function ɵɵtextInterpolate8(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  i6: string,\n  v7: any,\n  suffix: string\n): typeof ɵɵtextInterpolate8;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nUpdate text content with 8 bound values surrounded by other text.\n\nUsed when a text node has 8 interpolated values in it:\n\n```html\n<div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵtextInterpolate8(\n'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n```"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["see", { "__kind": "heading", "description": "textInterpolateV" }],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "prefix",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v0",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i0",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i1",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i2",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i3",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i4",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i5",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "i6",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "v7",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "suffix",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵtextInterpolateV",
    "overloads": [
      {
        "file": "packages/core/src/render3/instructions/text_interpolation.ts#L316-L323",
        "signature": "function ɵɵtextInterpolateV(values: any[]): typeof ɵɵtextInterpolateV;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Update text content with 9 or more bound values other surrounded by text.\n\nUsed when the number of interpolated values exceeds 8.\n\n```html\n<div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n```\n\nIts compiled representation is:\n\n```ts\nɵɵtextInterpolateV(\n['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n'suffix']);\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "The collection of values and the strings in between those values, beginning with",
              "type": "any[]"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "itself, so that it may be chained."
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵviewQuery",
    "overloads": [
      {
        "file": "packages/core/src/render3/query.ts#L471-L474",
        "signature": "function ɵɵviewQuery<T>(\n  predicate: Type<any> | InjectionToken<unknown> | string[],\n  descend: boolean,\n  read?: any\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates new QueryList, stores the reference in LView and returns QueryList.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "predicate",
              "description": "The type for which the query will search",
              "type": "Type<any> | InjectionToken<unknown> | string[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "descend",
              "description": "Whether or not to descend into children",
              "type": "boolean"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "read",
              "description": "What to save in the query",
              "type": "any"
            }
          ],
          ["codeGenApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵLContext",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/context.ts#L28-L59",
        "signature": "interface LContext {\n  lView: LView;\n  nodeIndex: number;\n  native: RNode;\n  component: {} | null | undefined;\n  directives: any[] | null | undefined;\n  localRefs: { [key: string]: any } | null | undefined;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The internal view context which is specific to a given DOM element, directive or\ncomponent instance. Each value in here (besides the LView and element node details)\ncan be present, null or undefined. If undefined then it implies the value has not been\nlooked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n\nEach value will get filled when the respective value is examined within the getContext\nfunction. The component, element and each directive instance will share the same instance\nof the context.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "lView",
              "description": "The component's parent view data.",
              "type": "LView"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "nodeIndex",
              "description": "The index instance of the node.",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "native",
              "description": "The instance of the DOM node that is attached to the lNode.",
              "type": "RNode"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "component",
              "description": "The instance of the Component node.",
              "type": "{}"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "directives",
              "description": "The list of active directives that exist on this element.",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "localRefs",
              "description": "The map of local references (local reference name => element or directive instance) that exist\non this element.",
              "type": "{ [key: string]: any; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵsetDocument",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/document.ts#L34-L36",
        "signature": "function setDocument(document: Document | undefined): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Tell ivy what the `document` is for this platform.\n\nIt is only necessary to call this if the current platform is not a browser.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "document",
              "description": "The object representing the global `document` in this environment.",
              "type": "Document"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵPlayer",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/player.ts#L12-L20",
        "signature": "interface Player {\n  parent?: Player | null;\n  state: PlayState;\n}",
        "info": [
          [
            "license",
            {
              "__kind": "heading",
              "description": "\nCopyright Google LLC All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n"
            }
          ],
          [
            "description",
            {
              "__kind": "heading",
              "description": "A shared interface which contains an animation player\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "parent",
              "description": "",
              "type": "Player"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "state",
              "description": "",
              "type": "PlayState"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵPlayerFactory",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/player.ts#L55-L57",
        "signature": "interface PlayerFactory {\n  __brand__: \"Brand for PlayerFactory that nothing will match\";\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Used as a reference to build a player from a styling template binding\n(`[style]` and `[class]`).\n\nThe `fn` function will be called once any styling-related changes are\nevaluated on an element and is expected to return a player that will\nbe then run on the element.\n\n`[style]`, `[style.prop]`, `[class]` and `[class.name]` template bindings\nall accept a `PlayerFactory` as input and this player factories.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "'__brand__'",
              "description": "",
              "type": "\"Brand for PlayerFactory that nothing will match\""
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵPlayerHandler",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/player.ts#L96-L107",
        "signature": "interface PlayerHandler {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Designed to be used as an injection service to capture all animation players.\n\nWhen present all animation players will be passed into the flush method below.\nThis feature is designed to service application-wide animation testing, live\ndebugging as well as custom animation choreographing tools.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵPlayState",
    "overloads": [
      {
        "file": "packages/core/src/render3/interfaces/player.ts#L70-L76",
        "signature": "export const enum PlayState {\n  Pending = 0,\n  Running = 1,\n  Paused = 2,\n  Finished = 100,\n  Destroyed = 200,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The state of a given player\n\nDo not change the increasing nature of the numbers since the player\ncode may compare state by checking if a number is higher or lower than\na certain numeric value.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵcompileComponent",
    "overloads": [
      {
        "file": "packages/core/src/render3/jit/directive.ts#L40-L136",
        "signature": "function compileComponent(type: Type<any>, metadata: Component): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Compile an Angular component according to its decorator metadata, and patch the resulting\ncomponent def (ɵcmp) onto the component type.\n\nCompilation may be asynchronous (due to the need to resolve URLs for the component template or\nother resources, for example). In the event that compilation is not immediate, `compileComponent`\nwill enqueue resource resolution into a global queue and will fail to return the `ɵcmp`\nuntil the global queue has been resolved with a call to `resolveComponentResources`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "Type<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "metadata",
              "description": "",
              "type": "Component"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵcompileDirective",
    "overloads": [
      {
        "file": "packages/core/src/render3/jit/directive.ts#L150-L170",
        "signature": "function compileDirective(type: Type<any>, directive: Directive | null): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Compile an Angular directive according to its decorator metadata, and patch the resulting\ndirective def onto the component type.\n\nIn the event that compilation is not immediate, `compileDirective` will return a `Promise` which\nwill resolve when compilation completes and the directive becomes usable.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "Type<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "directive",
              "description": "",
              "type": "Directive"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵresetJitOptions",
    "overloads": [
      {
        "file": "packages/core/src/render3/jit/jit_options.ts#L39-L41",
        "signature": "function resetJitOptions(): void;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵcompileNgModule",
    "overloads": [
      {
        "file": "packages/core/src/render3/jit/module.ts#L85-L93",
        "signature": "function compileNgModule(moduleType: Type<any>, ngModule: NgModule = {}): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Compiles a module in JIT mode.\n\nThis function automatically gets called when a class has a `@NgModule` decorator.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "moduleType",
              "description": "",
              "type": "Type<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "ngModule",
              "description": "",
              "type": "NgModule"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵcompileNgModuleDefs",
    "overloads": [
      {
        "file": "packages/core/src/render3/jit/module.ts#L101-L168",
        "signature": "function compileNgModuleDefs(\n  moduleType: NgModuleType,\n  ngModule: NgModule,\n  allowDuplicateDeclarationsInRoot: boolean = false\n): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Compiles and adds the `ɵmod` and `ɵinj` properties to the module class.\n\nIt's possible to compile a module via this API which will allow duplicate declarations in its\nroot.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "moduleType",
              "description": "",
              "type": "NgModuleType<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "ngModule",
              "description": "",
              "type": "NgModule"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "allowDuplicateDeclarationsInRoot",
              "description": "",
              "type": "boolean"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵflushModuleScopingQueueAsMuchAsPossible",
    "overloads": [
      {
        "file": "packages/core/src/render3/jit/module.ts#L49-L66",
        "signature": "function flushModuleScopingQueueAsMuchAsPossible();",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Loops over queued module definitions, if a given module definition has all of its\ndeclarations resolved, it dequeues that module definition and sets the scope on\nits declarations.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵpatchComponentDefWithScope",
    "overloads": [
      {
        "file": "packages/core/src/render3/jit/module.ts#L414-L431",
        "signature": "function patchComponentDefWithScope<C>(\n  componentDef: ComponentDef<C>,\n  transitiveScopes: NgModuleTransitiveScopes\n);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Patch the definition of a component with directives and pipes from the compilation scope of\na given module.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "componentDef",
              "description": "",
              "type": "ComponentDef<C>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "transitiveScopes",
              "description": "",
              "type": "NgModuleTransitiveScopes"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵresetCompiledComponents",
    "overloads": [
      {
        "file": "packages/core/src/render3/jit/module.ts#L361-L365",
        "signature": "function resetCompiledComponents(): void;",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵtransitiveScopesFor",
    "overloads": [
      {
        "file": "packages/core/src/render3/jit/module.ts#L442-L528",
        "signature": "function transitiveScopesFor<T>(moduleType: Type<T>): NgModuleTransitiveScopes;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n\nThis operation is memoized and the result is cached on the module's definition. This function can\nbe called on modules with components that have not fully compiled yet, but the result should not\nbe used until they have.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "moduleType",
              "description": "module that transitive scope should be calculated for.",
              "type": "Type<T>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵcompilePipe",
    "overloads": [
      {
        "file": "packages/core/src/render3/jit/pipe.ts#L17-L48",
        "signature": "function compilePipe(type: Type<any>, meta: Pipe): void;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "Type<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "meta",
              "description": "",
              "type": "Pipe"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵpublishDefaultGlobalUtils",
    "overloads": [
      {
        "file": "packages/core/src/render3/util/global_utils.ts#L40-L53",
        "signature": "function publishDefaultGlobalUtils();",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Publishes a collection of default debug tools onto`window.ng`.\n\nThese functions are available globally when Angular is in development\nmode and are automatically stripped away from prod mode is on.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵpublishGlobalUtil",
    "overloads": [
      {
        "file": "packages/core/src/render3/util/global_utils.ts#L63-L79",
        "signature": "function publishGlobalUtil(name: string, fn: Function): void;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Publishes the given function to `window.ng` so that it can be\nused from the browser console when an application is not in production.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fn",
              "description": "",
              "type": "Function"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵbypassSanitizationTrustHtml",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L140-L142",
        "signature": "function bypassSanitizationTrustHtml(trustedHtml: string): SafeHtml;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Mark `html` string as trusted.\n\nThis function wraps the trusted string in `String` and brands it in a way which makes it\nrecognizable to {@link htmlSanitizer} to be trusted implicitly.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "trustedHtml",
              "description": "`html` string which needs to be implicitly trusted.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "a `html` which has been branded to be implicitly trusted.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵbypassSanitizationTrustResourceUrl",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L188-L190",
        "signature": "function bypassSanitizationTrustResourceUrl(\n  trustedResourceUrl: string\n): SafeResourceUrl;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Mark `url` string as trusted.\n\nThis function wraps the trusted string in `String` and brands it in a way which makes it\nrecognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "trustedResourceUrl",
              "description": "`url` string which needs to be implicitly trusted.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "a `url` which has been branded to be implicitly trusted.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵbypassSanitizationTrustScript",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L164-L166",
        "signature": "function bypassSanitizationTrustScript(trustedScript: string): SafeScript;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Mark `script` string as trusted.\n\nThis function wraps the trusted string in `String` and brands it in a way which makes it\nrecognizable to {@link scriptSanitizer} to be trusted implicitly.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "trustedScript",
              "description": "`script` string which needs to be implicitly trusted.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "a `script` which has been branded to be implicitly trusted.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵbypassSanitizationTrustStyle",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L152-L154",
        "signature": "function bypassSanitizationTrustStyle(trustedStyle: string): SafeStyle;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Mark `style` string as trusted.\n\nThis function wraps the trusted string in `String` and brands it in a way which makes it\nrecognizable to {@link styleSanitizer} to be trusted implicitly.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "trustedStyle",
              "description": "`style` string which needs to be implicitly trusted.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "a `style` hich has been branded to be implicitly trusted.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵbypassSanitizationTrustUrl",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/bypass.ts#L176-L178",
        "signature": "function bypassSanitizationTrustUrl(trustedUrl: string): SafeUrl;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Mark `url` string as trusted.\n\nThis function wraps the trusted string in `String` and brands it in a way which makes it\nrecognizable to {@link urlSanitizer} to be trusted implicitly.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "trustedUrl",
              "description": "`url` string which needs to be implicitly trusted.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "a `url`  which has been branded to be implicitly trusted.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵsanitizeHtml",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/sanitization.ts#L37-L46",
        "signature": "function ɵɵsanitizeHtml(unsafeHtml: any): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\ndangerous content.\n\nThis method parses the `html` and locates potentially dangerous content (such as urls and\njavascript) and removes it.\n\nIt is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "unsafeHtml",
              "description": "untrusted `html`, typically from the user.",
              "type": "any"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "`html` string which is safe to display to user, because all of the dangerous javascript\nand urls have been removed.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵsanitizeResourceUrl",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/sanitization.ts#L108-L117",
        "signature": "function ɵɵsanitizeResourceUrl(unsafeResourceUrl: any): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A `url` sanitizer which only lets trusted `url`s through.\n\nThis passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "unsafeResourceUrl",
              "description": "untrusted `url`, typically from the user.",
              "type": "any"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "`url` string which is safe to bind to the `src` properties such as `<img src>`, because\nonly trusted `url`s have been allowed to pass.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵsanitizeScript",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/sanitization.ts#L131-L140",
        "signature": "function ɵɵsanitizeScript(unsafeScript: any): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A `script` sanitizer which only lets trusted javascript through.\n\nThis passes only `script`s marked trusted by calling {@link\nbypassSanitizationTrustScript}.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "unsafeScript",
              "description": "untrusted `script`, typically from the user.",
              "type": "any"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "`url` string which is safe to bind to the `<script>` element such as `<img src>`,\nbecause only trusted `scripts` have been allowed to pass.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵsanitizeStyle",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/sanitization.ts#L59-L68",
        "signature": "function ɵɵsanitizeStyle(unsafeStyle: any): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\ndangerous content.\n\nIt is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "unsafeStyle",
              "description": "untrusted `style`, typically from the user.",
              "type": "any"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "`style` string which is safe to bind to the `style` properties.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵsanitizeUrl",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/sanitization.ts#L86-L95",
        "signature": "function ɵɵsanitizeUrl(unsafeUrl: any): string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\ndangerous\ncontent.\n\nThis method parses the `url` and locates potentially dangerous content (such as javascript) and\nremoves it.\n\nIt is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "unsafeUrl",
              "description": "untrusted `url`, typically from the user.",
              "type": "any"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "`url` string which is safe to bind to the `src` properties such as `<img src>`, because\nall of the dangerous javascript has been removed.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵɵsanitizeUrlOrResourceUrl",
    "overloads": [
      {
        "file": "packages/core/src/sanitization/sanitization.ts#L174-L176",
        "signature": "function ɵɵsanitizeUrlOrResourceUrl(\n  unsafeUrl: any,\n  tag: string,\n  prop: string\n): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Sanitizes URL, selecting sanitizer function based on tag and property names.\n\nThis function is used in case we can't define security context at compile time, when only prop\nname is available. This happens when we generate host bindings for Directives/Components. The\nhost element is unknown at compile time, so we defer calculation of specific sanitizer to\nruntime.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "unsafeUrl",
              "description": "untrusted `url`, typically from the user.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "tag",
              "description": "target element tag name.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "prop",
              "description": "name of the property that contains the value.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "`url` string which is safe to bind.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵregisterModuleFactory",
    "overloads": [
      {
        "file": "packages/core/src/linker/ng_module_factory_registration.ts#L29-L33",
        "signature": "function registerModuleFactory(id: string, factory: NgModuleFactory<any>);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Registers a loaded module. Should only be called from generated NgModuleFactory code."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "id",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "factory",
              "description": "",
              "type": "NgModuleFactory<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵand",
    "overloads": [
      {
        "file": "packages/core/src/view/element.ts#L16-L62",
        "signature": "function anchorDef(\n  flags: NodeFlags,\n  matchedQueriesDsl: null | [string | number, QueryValueType][],\n  ngContentIndex: null | number,\n  childCount: number,\n  handleEvent?: null | ElementHandleEventFn,\n  templateFactory?: ViewDefinitionFactory\n): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "NodeFlags"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "matchedQueriesDsl",
              "description": "",
              "type": "[string | number, QueryValueType][]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "ngContentIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "childCount",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "handleEvent",
              "description": "",
              "type": "ElementHandleEventFn"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "templateFactory",
              "description": "",
              "type": "ViewDefinitionFactory"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵArgumentType",
    "overloads": [
      {
        "file": "packages/core/src/view/types.ts#L98-L101",
        "signature": "export const enum ArgumentType {\n  Inline = 0,\n  Dynamic = 1,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵBindingFlags",
    "overloads": [
      {
        "file": "packages/core/src/view/types.ts#L226-L237",
        "signature": "export const enum BindingFlags {\n  TypeElementAttribute = 1 << 0,\n  TypeElementClass = 1 << 1,\n  TypeElementStyle = 1 << 2,\n  TypeProperty = 1 << 3,\n  SyntheticProperty = 1 << 4,\n  SyntheticHostProperty = 1 << 5,\n  CatSyntheticProperty = SyntheticProperty | SyntheticHostProperty,\n\n  // mutually exclusive values...\n  Types = TypeElementAttribute |\n    TypeElementClass |\n    TypeElementStyle |\n    TypeProperty,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵccf",
    "overloads": [
      {
        "file": "packages/core/src/view/refs.ts#L33-L39",
        "signature": "function createComponentFactory(\n  selector: string,\n  componentType: Type<any>,\n  viewDefFactory: ViewDefinitionFactory,\n  inputs: { [propName: string]: string } | null,\n  outputs: { [propName: string]: string },\n  ngContentSelectors: string[]\n): ComponentFactory<any>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "selector",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "componentType",
              "description": "",
              "type": "Type<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "viewDefFactory",
              "description": "",
              "type": "ViewDefinitionFactory"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "inputs",
              "description": "",
              "type": "{ [propName: string]: string; }"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "outputs",
              "description": "",
              "type": "{ [propName: string]: string; }"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "ngContentSelectors",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵcmf",
    "overloads": [
      {
        "file": "packages/core/src/view/entrypoint.ts#L35-L39",
        "signature": "function createNgModuleFactory(\n  ngModuleType: Type<any>,\n  bootstrapComponents: Type<any>[],\n  defFactory: NgModuleDefinitionFactory\n): NgModuleFactory<any>;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "ngModuleType",
              "description": "",
              "type": "Type<any>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "bootstrapComponents",
              "description": "",
              "type": "Type<any>[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "defFactory",
              "description": "",
              "type": "NgModuleDefinitionFactory"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵcrt",
    "overloads": [
      {
        "file": "packages/core/src/view/util.ts#L46-L57",
        "signature": "function createRendererType2(values: {\n  styles: (string | any[])[];\n  encapsulation: ViewEncapsulation;\n  data: { [kind: string]: any[] };\n}): RendererType2;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "values",
              "description": "",
              "type": "{ styles: (string | any[])[]; encapsulation: ViewEncapsulation; data: { [kind: string]: any[]; }; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵDepFlags",
    "overloads": [
      {
        "file": "packages/core/src/view/types.ts#L310-L316",
        "signature": "export const enum DepFlags {\n  None = 0,\n  SkipSelf = 1 << 0,\n  Optional = 1 << 1,\n  Self = 1 << 2,\n  Value = 1 << 3,\n}",
        "info": [
          [
            "description",
            { "__kind": "heading", "description": "Bitmask for DI flags\n" }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵdid",
    "overloads": [
      {
        "file": "packages/core/src/view/provider.ts#L30-L59",
        "signature": "function directiveDef(\n  checkIndex: number,\n  flags: NodeFlags,\n  matchedQueries: null | [string | number, QueryValueType][],\n  childCount: number,\n  ctor: any,\n  deps: ([DepFlags, any] | any)[],\n  props?: null | { [name: string]: [number, string] },\n  outputs?: null | { [name: string]: string }\n): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "checkIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "NodeFlags"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "matchedQueries",
              "description": "",
              "type": "[string | number, QueryValueType][]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "childCount",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "ctor",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "deps",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "props",
              "description": "",
              "type": "{ [name: string]: [number, string]; }"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "outputs",
              "description": "",
              "type": "{ [name: string]: string; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵeld",
    "overloads": [
      {
        "file": "packages/core/src/view/element.ts#L64-L157",
        "signature": "function elementDef(\n  checkIndex: number,\n  flags: NodeFlags,\n  matchedQueriesDsl: null | [string | number, QueryValueType][],\n  ngContentIndex: null | number,\n  childCount: number,\n  namespaceAndName: string | null,\n  fixedAttrs: null | [string, string][] = [],\n  bindings?: null | [BindingFlags, string, string | SecurityContext | null][],\n  outputs?: null | [string, string][],\n  handleEvent?: null | ElementHandleEventFn,\n  componentView?: null | ViewDefinitionFactory,\n  componentRendererType?: RendererType2 | null\n): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "checkIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "NodeFlags"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "matchedQueriesDsl",
              "description": "",
              "type": "[string | number, QueryValueType][]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "ngContentIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "childCount",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "namespaceAndName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "fixedAttrs",
              "description": "",
              "type": "[string, string][]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "bindings",
              "description": "",
              "type": "[BindingFlags, string, string | SecurityContext][]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "outputs",
              "description": "",
              "type": "[string, string][]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "handleEvent",
              "description": "",
              "type": "ElementHandleEventFn"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "componentView",
              "description": "",
              "type": "ViewDefinitionFactory"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "componentRendererType",
              "description": "",
              "type": "RendererType2"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵEMPTY_ARRAY",
    "overloads": [
      {
        "file": "packages/core/src/view/util.ts#L444-L444",
        "signature": "const EMPTY_ARRAY: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "core",
    "name": "ɵEMPTY_MAP",
    "overloads": [
      {
        "file": "packages/core/src/view/util.ts#L445-L445",
        "signature": "const EMPTY_MAP: { [key: string]: any };",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵgetComponentViewDefinitionFactory",
    "overloads": [
      {
        "file": "packages/core/src/view/refs.ts#L41-L44",
        "signature": "function getComponentViewDefinitionFactory(\n  componentFactory: ComponentFactory<any>\n): ViewDefinitionFactory;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "componentFactory",
              "description": "",
              "type": "ComponentFactory<any>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵinlineInterpolate",
    "overloads": [
      {
        "file": "packages/core/src/view/util.ts#L402-L438",
        "signature": "function inlineInterpolate(\n  valueCount: number,\n  c0: string,\n  a1: any,\n  c1: string,\n  a2?: any,\n  c2?: string,\n  a3?: any,\n  c3?: string,\n  a4?: any,\n  c4?: string,\n  a5?: any,\n  c5?: string,\n  a6?: any,\n  c6?: string,\n  a7?: any,\n  c7?: string,\n  a8?: any,\n  c8?: string,\n  a9?: any,\n  c9?: string\n): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "valueCount",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c0",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "a1",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c1",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "a2",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c2",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "a3",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c3",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "a4",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c4",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "a5",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c5",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "a6",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c6",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "a7",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c7",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "a8",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c8",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "a9",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "c9",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵinterpolate",
    "overloads": [
      {
        "file": "packages/core/src/view/util.ts#L394-L400",
        "signature": "function interpolate(valueCount: number, constAndInterp: string[]): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "valueCount",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "constAndInterp",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵmod",
    "overloads": [
      {
        "file": "packages/core/src/view/ng_module.ts#L44-L67",
        "signature": "function moduleDef(providers: NgModuleProviderDef[]): NgModuleDefinition;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "providers",
              "description": "",
              "type": "NgModuleProviderDef[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵmpd",
    "overloads": [
      {
        "file": "packages/core/src/view/ng_module.ts#L27-L42",
        "signature": "function moduleProvideDef(\n  flags: NodeFlags,\n  token: any,\n  value: any,\n  deps: ([DepFlags, any] | any)[]\n): NgModuleProviderDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "NodeFlags"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "deps",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵncd",
    "overloads": [
      {
        "file": "packages/core/src/view/ng_content.ts#L12-L40",
        "signature": "function ngContentDef(ngContentIndex: null | number, index: number): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "ngContentIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵNodeFlags",
    "overloads": [
      {
        "file": "packages/core/src/view/types.ts#L173-L215",
        "signature": "export const enum NodeFlags {\n  None = 0,\n  TypeElement = 1 << 0,\n  TypeText = 1 << 1,\n  ProjectedTemplate = 1 << 2,\n  CatRenderNode = TypeElement | TypeText,\n  TypeNgContent = 1 << 3,\n  TypePipe = 1 << 4,\n  TypePureArray = 1 << 5,\n  TypePureObject = 1 << 6,\n  TypePurePipe = 1 << 7,\n  CatPureExpression = TypePureArray | TypePureObject | TypePurePipe,\n  TypeValueProvider = 1 << 8,\n  TypeClassProvider = 1 << 9,\n  TypeFactoryProvider = 1 << 10,\n  TypeUseExistingProvider = 1 << 11,\n  LazyProvider = 1 << 12,\n  PrivateProvider = 1 << 13,\n  TypeDirective = 1 << 14,\n  Component = 1 << 15,\n  CatProviderNoDirective = TypeValueProvider |\n    TypeClassProvider |\n    TypeFactoryProvider |\n    TypeUseExistingProvider,\n  CatProvider = CatProviderNoDirective | TypeDirective,\n  OnInit = 1 << 16,\n  OnDestroy = 1 << 17,\n  DoCheck = 1 << 18,\n  OnChanges = 1 << 19,\n  AfterContentInit = 1 << 20,\n  AfterContentChecked = 1 << 21,\n  AfterViewInit = 1 << 22,\n  AfterViewChecked = 1 << 23,\n  EmbeddedViews = 1 << 24,\n  ComponentView = 1 << 25,\n  TypeContentQuery = 1 << 26,\n  TypeViewQuery = 1 << 27,\n  StaticQuery = 1 << 28,\n  DynamicQuery = 1 << 29,\n  TypeNgModule = 1 << 30,\n  CatQuery = TypeContentQuery | TypeViewQuery,\n\n  // mutually exclusive values...\n  Types = CatRenderNode |\n    TypeNgContent |\n    TypePipe |\n    CatPureExpression |\n    CatProvider |\n    CatQuery,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Bitmask for NodeDef.flags.\nNaming convention:\n- `Type...`: flags that are mutually exclusive\n- `Cat...`: union of multiple `Type...` (short for category).\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵnov",
    "overloads": [
      {
        "file": "packages/core/src/view/refs.ts#L375-L386",
        "signature": "function nodeValue(view: ViewData, index: number): any;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "view",
              "description": "",
              "type": "ViewData"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "index",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵpid",
    "overloads": [
      {
        "file": "packages/core/src/view/provider.ts#L61-L64",
        "signature": "function pipeDef(\n  flags: NodeFlags,\n  ctor: any,\n  deps: ([DepFlags, any] | any)[]\n): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "NodeFlags"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "ctor",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "deps",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵprd",
    "overloads": [
      {
        "file": "packages/core/src/view/provider.ts#L66-L70",
        "signature": "function providerDef(\n  flags: NodeFlags,\n  matchedQueries: null | [string | number, QueryValueType][],\n  token: any,\n  value: any,\n  deps: ([DepFlags, any] | any)[]\n): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "NodeFlags"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "matchedQueries",
              "description": "",
              "type": "[string | number, QueryValueType][]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "token",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "deps",
              "description": "",
              "type": "any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵpad",
    "overloads": [
      {
        "file": "packages/core/src/view/pure_expression.ts#L19-L21",
        "signature": "function pureArrayDef(checkIndex: number, argCount: number): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "checkIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "argCount",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵpod",
    "overloads": [
      {
        "file": "packages/core/src/view/pure_expression.ts#L23-L34",
        "signature": "function pureObjectDef(\n  checkIndex: number,\n  propToIndex: { [p: string]: number }\n): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "checkIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "propToIndex",
              "description": "",
              "type": "{ [p: string]: number; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵppd",
    "overloads": [
      {
        "file": "packages/core/src/view/pure_expression.ts#L14-L17",
        "signature": "function purePipeDef(checkIndex: number, argCount: number): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "checkIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "argCount",
              "description": "",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵQueryBindingType",
    "overloads": [
      {
        "file": "packages/core/src/view/types.ts#L334-L337",
        "signature": "export const enum QueryBindingType {\n  First = 0,\n  All = 1,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵqud",
    "overloads": [
      {
        "file": "packages/core/src/view/query.ts#L15-L51",
        "signature": "function queryDef(\n  flags: NodeFlags,\n  id: number,\n  bindings: { [propName: string]: QueryBindingType }\n): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "NodeFlags"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "id",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "bindings",
              "description": "",
              "type": "{ [propName: string]: QueryBindingType; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵQueryValueType",
    "overloads": [
      {
        "file": "packages/core/src/view/types.ts#L251-L257",
        "signature": "export const enum QueryValueType {\n  ElementRef = 0,\n  RenderElement = 1,\n  TemplateRef = 2,\n  ViewContainerRef = 3,\n  Provider = 4,\n}",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵted",
    "overloads": [
      {
        "file": "packages/core/src/view/text.ts#L12-L53",
        "signature": "function textDef(\n  checkIndex: number,\n  ngContentIndex: number | null,\n  staticText: string[]\n): NodeDef;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "checkIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "ngContentIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "staticText",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵunv",
    "overloads": [
      {
        "file": "packages/core/src/view/util.ts#L31-L39",
        "signature": "function unwrapValue(\n  view: ViewData,\n  nodeIdx: number,\n  bindingIdx: number,\n  value: any\n): any;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "view",
              "description": "",
              "type": "ViewData"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "nodeIdx",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "bindingIdx",
              "description": "",
              "type": "number"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "core",
    "name": "ɵvid",
    "overloads": [
      {
        "file": "packages/core/src/view/view.ts#L23-L155",
        "signature": "function viewDef(\n  flags: ViewFlags,\n  nodes: NodeDef[],\n  updateDirectives?: null | ViewUpdateFn,\n  updateRenderer?: null | ViewUpdateFn\n): ViewDefinition;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "ViewFlags"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "nodes",
              "description": "",
              "type": "NodeDef[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "updateDirectives",
              "description": "",
              "type": "ViewUpdateFn"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "updateRenderer",
              "description": "",
              "type": "ViewUpdateFn"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "core",
    "name": "ɵViewDefinition",
    "overloads": [
      {
        "file": "packages/core/src/view/types.ts#L59-L81",
        "signature": "interface ViewDefinition {\n  flags: ViewFlags;\n  updateDirectives: ViewUpdateFn;\n  updateRenderer: ViewUpdateFn;\n  handleEvent: ViewHandleEventFn;\n  nodes: NodeDef[];\n  nodeFlags: NodeFlags;\n  rootNodeFlags: NodeFlags;\n  lastRenderRootNode: NodeDef | null;\n  bindingCount: number;\n  outputCount: number;\n  nodeMatchedQueries: number;\n\n  // inherited from Definition\n  factory: DF | null;\n}",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "flags",
              "description": "",
              "type": "ViewFlags"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "updateDirectives",
              "description": "",
              "type": "ViewUpdateFn"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "updateRenderer",
              "description": "",
              "type": "ViewUpdateFn"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "handleEvent",
              "description": "",
              "type": "ViewHandleEventFn"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "nodes",
              "description": "Order: Depth first.\nEspecially providers are before elements / anchors.",
              "type": "NodeDef[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "nodeFlags",
              "description": "aggregated NodeFlags for all nodes",
              "type": "NodeFlags"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "rootNodeFlags",
              "description": "",
              "type": "NodeFlags"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "lastRenderRootNode",
              "description": "",
              "type": "NodeDef"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "bindingCount",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "outputCount",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "nodeMatchedQueries",
              "description": "Binary or of all query ids that are matched by one of the nodes.\nThis includes query ids from templates as well.\nUsed as a bloom filter.",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "EnumDeclaration",
    "module": "core",
    "name": "ɵViewFlags",
    "overloads": [
      {
        "file": "packages/core/src/view/types.ts#L110-L113",
        "signature": "export const enum ViewFlags {\n  None = 0,\n  OnPush = 1 << 1,\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Bitmask for ViewDefinition.flags.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "elements",
    "name": "createCustomElement",
    "overloads": [
      {
        "file": "packages/elements/src/create-custom-element.ts#L125-L251",
        "signature": "function createCustomElement<P>(\n  component: Type<any>,\n  config: NgElementConfig\n): NgElementConstructor<P>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Creates a custom element class based on an Angular component.\n\nBuilds a class that encapsulates the functionality of the provided component and\nuses the configuration information to provide more context to the class.\nTakes the component factory's inputs and outputs to convert them to the proper\ncustom element API and add hooks to input changes.\n\nThe configuration's injector is the initial injector set on the class,\nand used by default for each created instance.This behavior can be overridden with the\nstatic property to affect all newly created instances, or as a constructor argument for\none-off creations.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "component",
              "description": "The component to transform.",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "config",
              "description": "A configuration that provides initialization information to the created class.",
              "type": "NgElementConfig"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "The custom-element construction class, which can be registered with\na browser's `CustomElementRegistry`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "elements",
    "name": "NgElement",
    "overloads": [
      {
        "file": "packages/elements/src/create-custom-element.ts#L42-L73",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Implements the functionality needed for a custom element.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "attributeChangedCallback",
              "info": {
                "file": "packages/elements/src/create-custom-element.ts#L61-L62",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Prototype for a handler that responds to a change in an observed attribute."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "attrName",
                      "description": "The name of the attribute that has changed.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "oldValue",
                      "description": "The previous value of the attribute.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newValue",
                      "description": "The new value of the attribute.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "namespace",
                      "description": "The namespace in which the attribute is defined.",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    { "__kind": "heading", "description": "Nothing.\n" }
                  ]
                ],
                "signature": "abstract attributeChangedCallback(   attrName: string, oldValue: string|null, newValue: string, namespace?: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "connectedCallback",
              "info": {
                "file": "packages/elements/src/create-custom-element.ts#L67-L67",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Prototype for a handler that responds to the insertion of the custom element in the DOM."
                    }
                  ],
                  [
                    "returns",
                    { "__kind": "heading", "description": "Nothing.\n" }
                  ]
                ],
                "signature": "abstract connectedCallback(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "disconnectedCallback",
              "info": {
                "file": "packages/elements/src/create-custom-element.ts#L72-L72",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Prototype for a handler that responds to the deletion of the custom element from the DOM."
                    }
                  ],
                  [
                    "returns",
                    { "__kind": "heading", "description": "Nothing.\n" }
                  ]
                ],
                "signature": "abstract disconnectedCallback(): void;"
              }
            }
          ]
        ],
        "signature": "class NgElement extends HTMLElement {\n  abstract attributeChangedCallback(\n    attrName: string,\n    oldValue: string | null,\n    newValue: string,\n    namespace?: string\n  ): void;\n  abstract connectedCallback(): void;\n  abstract disconnectedCallback(): void;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "elements",
    "name": "NgElementConfig",
    "overloads": [
      {
        "file": "packages/elements/src/create-custom-element.ts#L93-L103",
        "signature": "interface NgElementConfig {\n  injector: Injector;\n  strategyFactory?: NgElementStrategyFactory;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A configuration that initializes an NgElementConstructor with the\ndependencies and strategy it needs to transform a component into\na custom element class.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "injector",
              "description": "The injector to use for retrieving the component's factory.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "strategyFactory",
              "description": "An optional custom strategy factory to use instead of the default.\nThe strategy controls how the transformation is performed.",
              "type": "NgElementStrategyFactory"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "elements",
    "name": "NgElementConstructor",
    "overloads": [
      {
        "file": "packages/elements/src/create-custom-element.ts#L23-L35",
        "signature": "interface NgElementConstructor<P> {\n  readonly observedAttributes: string[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Prototype for a class constructor based on an Angular component\nthat can be used for custom element registration. Implemented and returned\nby the {@link createCustomElement createCustomElement() function}.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "observedAttributes",
              "description": "An array of observed attribute names for the custom element,\nderived by transforming input property names from the source component.",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "elements",
    "name": "WithProperties",
    "overloads": [
      {
        "file": "packages/elements/src/create-custom-element.ts#L82-L84",
        "signature": "export type WithProperties<P> = {\n  [property in keyof P]: P[property];\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Additional type information that can be added to the NgElement class,\nfor properties that are added based\non the inputs and methods of the underlying component.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "elements",
    "name": "NgElementStrategy",
    "overloads": [
      {
        "file": "packages/elements/src/element-strategy.ts#L27-L34",
        "signature": "interface NgElementStrategy {\n  events: Observable<NgElementStrategyEvent>;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Underlying strategy used by the NgElement to create/destroy the component and react to input\nchanges.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "events",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "elements",
    "name": "NgElementStrategyEvent",
    "overloads": [
      {
        "file": "packages/elements/src/element-strategy.ts#L16-L19",
        "signature": "interface NgElementStrategyEvent {\n  name: string;\n  value: any;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Interface for the events emitted through the NgElementStrategy.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "elements",
    "name": "NgElementStrategyFactory",
    "overloads": [
      {
        "file": "packages/elements/src/element-strategy.ts#L41-L44",
        "signature": "interface NgElementStrategyFactory {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Factory used to create new strategies for each NgElement instance.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "elements",
    "name": "VERSION",
    "overloads": [
      {
        "file": "packages/elements/src/version.ts#L13-L13",
        "signature": "const VERSION: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "ɵInternalFormsSharedModule",
    "overloads": [
      {
        "file": "packages/forms/src/directives.ts#L76-L81",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n"
            }
          ]
        ],
        "signature": "class ɵInternalFormsSharedModule {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "AbstractControlDirective",
    "overloads": [
      {
        "file": "packages/forms/src/directives/abstract_control_directive.ts#L21-L240",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nBase class for control directives.\n\nThis class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "reset",
              "info": {
                "file": "packages/forms/src/directives/abstract_control_directive.ts#L172-L174",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nResets the control with the provided value if the control is present.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "reset(value: any = undefined): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasError",
              "info": {
                "file": "packages/forms/src/directives/abstract_control_directive.ts#L206-L208",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nReports whether the control with the given path has the error specified.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "errorCode",
                      "description": "The code of the error to check",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "A list of control names that designates how to move from the current control",
                      "type": "string | (string | number)[]"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\nFor example, for the following `FormGroup`:\n\n```\nform = new FormGroup({\naddress: new FormGroup({ street: new FormControl() })\n});\n```\n\nThe path to the 'street' control from the root form would be 'address' -> 'street'.\n\nIt can be provided to this method in one of two formats:\n\n1. An array of string control names, e.g. `['address', 'street']`\n1. A period-delimited list of control names in one string, e.g. `'address.street'`\n\nIf no path is given, this method checks for the error on the current control.\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "whether the given error is present in the control at the given path.\n\nIf the control is not present, false is returned.\n"
                    }
                  ]
                ],
                "signature": "hasError(errorCode: string, path?: Array<string|number>|string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getError",
              "info": {
                "file": "packages/forms/src/directives/abstract_control_directive.ts#L237-L239",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nReports error data for the control with the given path.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "errorCode",
                      "description": "The code of the error to check",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "A list of control names that designates how to move from the current control",
                      "type": "string | (string | number)[]"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\nFor example, for the following `FormGroup`:\n\n```\nform = new FormGroup({\naddress: new FormGroup({ street: new FormControl() })\n});\n```\n\nThe path to the 'street' control from the root form would be 'address' -> 'street'.\n\nIt can be provided to this method in one of two formats:\n\n1. An array of string control names, e.g. `['address', 'street']`\n1. A period-delimited list of control names in one string, e.g. `'address.street'`\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "error data for that particular error. If the control or error is not present,\nnull is returned.\n"
                    }
                  ]
                ],
                "signature": "getError(errorCode: string, path?: Array<string|number>|string): any;"
              }
            }
          ]
        ],
        "signature": "class AbstractControlDirective {\n  reset(value: any = undefined): void;\n  hasError(errorCode: string, path?: Array<string | number> | string): boolean;\n  getError(errorCode: string, path?: Array<string | number> | string): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "AbstractFormGroupDirective",
    "overloads": [
      {
        "file": "packages/forms/src/directives/abstract_form_group_directive.ts#L26-L118",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_parent",
              "description": "",
              "type": "ControlContainer"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_validators",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_asyncValidators",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnInit",
              "info": {
                "file": "packages/forms/src/directives/abstract_form_group_directive.ts#L60-L63",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nAn internal callback method triggered on the instance after the inputs are set.\nRegisters the group with its parent group.\n"
                    }
                  ]
                ],
                "signature": "ngOnInit(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/forms/src/directives/abstract_form_group_directive.ts#L70-L74",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nAn internal callback method triggered before the instance is destroyed.\nRemoves the group from its parent group.\n"
                    }
                  ]
                ],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_checkParentType",
              "info": {
                "file": "packages/forms/src/directives/abstract_form_group_directive.ts#L117-L117",
                "info": [],
                "signature": "_checkParentType(): void;"
              }
            }
          ]
        ],
        "signature": "class AbstractFormGroupDirective\n  extends ControlContainer\n  implements OnInit, OnDestroy {\n  _parent!: ControlContainer;\n  _validators!: any[];\n  _asyncValidators!: any[];\n\n  ngOnInit(): void;\n  ngOnDestroy(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "CheckboxControlValueAccessor",
    "overloads": [
      {
        "file": "packages/forms/src/directives/checkbox_value_accessor.ts#L42-L100",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\nelement.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Using a checkbox with a reactive form.\n\nThe following example shows how to use a checkbox with a reactive form.\n\n```ts\nconst rememberLoginControl = new FormControl();\n```\n\n```\n<input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n```\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "onChange",
              "description": "",
              "type": "(_: any) => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onTouched",
              "description": "",
              "type": "() => void"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "writeValue",
              "info": {
                "file": "packages/forms/src/directives/checkbox_value_accessor.ts#L68-L70",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"checked\" property on the input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The checked value",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "writeValue(value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnChange",
              "info": {
                "file": "packages/forms/src/directives/checkbox_value_accessor.ts#L78-L80",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control value changes.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "(_: any) => {}"
                    }
                  ]
                ],
                "signature": "registerOnChange(fn: (_: any) => {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnTouched",
              "info": {
                "file": "packages/forms/src/directives/checkbox_value_accessor.ts#L88-L90",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control is touched.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => {}"
                    }
                  ]
                ],
                "signature": "registerOnTouched(fn: () => {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setDisabledState",
              "info": {
                "file": "packages/forms/src/directives/checkbox_value_accessor.ts#L97-L99",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"disabled\" property on the input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isDisabled",
                      "description": "The disabled value",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setDisabledState(isDisabled: boolean): void;"
              }
            }
          ]
        ],
        "signature": "class CheckboxControlValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  writeValue(value: any): void;\n  registerOnChange(fn: (_: any) => {}): void;\n  registerOnTouched(fn: () => {}): void;\n  setDisabledState(isDisabled: boolean): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "ControlContainer",
    "overloads": [
      {
        "file": "packages/forms/src/directives/control_container.ts#L20-L43",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA base class for directives that contain multiple registered instances of `NgControl`.\nOnly used by the forms module.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string | number"
            }
          ]
        ],
        "signature": "class ControlContainer extends AbstractControlDirective {\n  name!: string | number | null;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "forms",
    "name": "ControlValueAccessor",
    "overloads": [
      {
        "file": "packages/forms/src/directives/control_value_accessor.ts#L23-L132",
        "signature": "interface ControlValueAccessor {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nDefines an interface that acts as a bridge between the Angular forms API and a\nnative element in the DOM.\n\nImplement this interface to create a custom form control directive\nthat integrates with Angular forms.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "DefaultValueAccessor\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "forms",
    "name": "NG_VALUE_ACCESSOR",
    "overloads": [
      {
        "file": "packages/forms/src/directives/control_value_accessor.ts#L141-L141",
        "signature": "const NG_VALUE_ACCESSOR: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "forms",
    "name": "COMPOSITION_BUFFER_MODE",
    "overloads": [
      {
        "file": "packages/forms/src/directives/default_value_accessor.ts#L35-L35",
        "signature": "const COMPOSITION_BUFFER_MODE: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "DefaultValueAccessor",
    "overloads": [
      {
        "file": "packages/forms/src/directives/default_value_accessor.ts#L62-L156",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nThe default `ControlValueAccessor` for writing a value and listening to changes on input\nelements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n`NgModel` directives.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Using the default value accessor\n\nThe following example shows how to use an input element that activates the default value accessor\n(in this case, a text field).\n\n```ts\nconst firstNameControl = new FormControl();\n```\n\n```\n<input type=\"text\" [formControl]=\"firstNameControl\">\n```\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "onChange",
              "description": "",
              "type": "(_: any) => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onTouched",
              "description": "",
              "type": "() => void"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "writeValue",
              "info": {
                "file": "packages/forms/src/directives/default_value_accessor.ts#L105-L108",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"value\" property on the input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The checked value",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "writeValue(value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnChange",
              "info": {
                "file": "packages/forms/src/directives/default_value_accessor.ts#L116-L118",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control value changes.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "(_: any) => void"
                    }
                  ]
                ],
                "signature": "registerOnChange(fn: (_: any) => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnTouched",
              "info": {
                "file": "packages/forms/src/directives/default_value_accessor.ts#L126-L128",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control is touched.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "registerOnTouched(fn: () => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setDisabledState",
              "info": {
                "file": "packages/forms/src/directives/default_value_accessor.ts#L135-L137",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"disabled\" property on the input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isDisabled",
                      "description": "The disabled value",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setDisabledState(isDisabled: boolean): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_handleInput",
              "info": {
                "file": "packages/forms/src/directives/default_value_accessor.ts#L140-L144",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "_handleInput(value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_compositionStart",
              "info": {
                "file": "packages/forms/src/directives/default_value_accessor.ts#L147-L149",
                "info": [],
                "signature": "_compositionStart(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_compositionEnd",
              "info": {
                "file": "packages/forms/src/directives/default_value_accessor.ts#L152-L155",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "_compositionEnd(value: any): void;"
              }
            }
          ]
        ],
        "signature": "class DefaultValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  writeValue(value: any): void;\n  registerOnChange(fn: (_: any) => void): void;\n  registerOnTouched(fn: () => void): void;\n  setDisabledState(isDisabled: boolean): void;\n  _handleInput(value: any): void;\n  _compositionStart(): void;\n  _compositionEnd(value: any): void;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "forms",
    "name": "Form",
    "overloads": [
      {
        "file": "packages/forms/src/directives/form_interface.ts#L24-L81",
        "signature": "interface Form {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nAn interface implemented by `FormGroupDirective` and `NgForm` directives.\n\nOnly used by the `ReactiveFormsModule` and `FormsModule`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "NgControl",
    "overloads": [
      {
        "file": "packages/forms/src/directives/ng_control.ts#L26-L90",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA base class that all `FormControl`-based directives extend. It binds a `FormControl`\nobject to a DOM element.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_parent",
              "description": "",
              "type": "ControlContainer"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string | number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "valueAccessor",
              "description": "",
              "type": "ControlValueAccessor"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_rawValidators",
              "description": "",
              "type": "(Validator | ValidatorFn)[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_rawAsyncValidators",
              "description": "",
              "type": "(AsyncValidator | AsyncValidatorFn)[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "viewToModelUpdate",
              "info": {
                "file": "packages/forms/src/directives/ng_control.ts#L89-L89",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nThe callback method to update the model from the view when requested\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newValue",
                      "description": "The new value for the view",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "abstract viewToModelUpdate(newValue: any): void;"
              }
            }
          ]
        ],
        "signature": "class NgControl extends AbstractControlDirective {\n  _parent: ControlContainer | null = null;\n  name: string | number | null = null;\n  valueAccessor: ControlValueAccessor | null = null;\n  _rawValidators: Array<Validator | ValidatorFn> = [];\n  _rawAsyncValidators: Array<AsyncValidator | AsyncValidatorFn> = [];\n\n  abstract viewToModelUpdate(newValue: any): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "NgControlStatus",
    "overloads": [
      {
        "file": "packages/forms/src/directives/ng_control_status.ts#L78-L83",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nDirective automatically applied to Angular form controls that sets CSS classes\nbased on control status.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### CSS classes applied\n\nThe following classes are applied as the properties become true:\n\n* ng-valid\n* ng-invalid\n* ng-pending\n* ng-pristine\n* ng-dirty\n* ng-untouched\n* ng-touched\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class NgControlStatus extends AbstractControlStatus {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "NgControlStatusGroup",
    "overloads": [
      {
        "file": "packages/forms/src/directives/ng_control_status.ts#L96-L105",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nDirective automatically applied to Angular form groups that sets CSS classes\nbased on control status (valid/invalid/dirty/etc).\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`NgControlStatus`\n" }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class NgControlStatusGroup extends AbstractControlStatus {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "NgForm",
    "overloads": [
      {
        "file": "packages/forms/src/directives/ng_form.ts#L92-L333",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nCreates a top-level `FormGroup` instance and binds it to a form\nto track aggregate form value and validation status.\n\nAs soon as you import the `FormsModule`, this directive becomes active by default on\nall `<form>` tags.  You don't need to add a special selector.\n\nYou optionally export the directive into a local template variable using `ngForm` as the key\n(ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n`FormGroup` instance are duplicated on the directive itself, so a reference to it\ngives you access to the aggregate value and validity status of the form, as well as\nuser interaction properties like `dirty` and `touched`.\n\nTo register child controls with the form, use `NgModel` with a `name`\nattribute. You may use `NgModelGroup` to create sub-groups within the form.\n\nIf necessary, listen to the directive's `ngSubmit` event to be notified when the user has\ntriggered a form submission. The `ngSubmit` event emits the original form\nsubmission event.\n\nIn template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\nTo import the `FormsModule` but skip its usage in some forms,\nfor example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\ntags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\nunnecessary because the `<form>` tags are inert. In that case, you would\nrefrain from using the `formGroup` directive.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Listening for form submission\n\nThe following example shows how to capture the form values from the \"ngSubmit\" event.\n\n{@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n\n### Setting the update options\n\nThe following example shows you how to change the \"updateOn\" option from its default using\nngFormOptions.\n\n```html\n<form [ngFormOptions]=\"{updateOn: 'blur'}\">\n<input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n</form>\n```\n\n### Native DOM validation UI\n\nIn order to prevent the native DOM form validation UI from interfering with Angular's form\nvalidation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n`FormModule` or `ReactiveFormModule` are imported into the application.\nIf you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n`ngNativeValidate` attribute to the `<form>` element:\n\n```html\n<form ngNativeValidate>\n...\n</form>\n```\n"
            }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "submitted",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "form",
              "description": "",
              "type": "FormGroup"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngSubmit",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "{ updateOn?: FormHooks; }"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngAfterViewInit",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L144-L146",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nLifecycle method called after the view is initialized. For internal use only.\n"
                    }
                  ]
                ],
                "signature": "ngAfterViewInit();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addControl",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L188-L197",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod that sets up the control directive in this group, re-calculates its value\nand validity, and adds the instance to the internal list of directives.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `NgModel` directive instance.",
                      "type": "NgModel"
                    }
                  ]
                ],
                "signature": "addControl(dir: NgModel): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getControl",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L205-L207",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRetrieves the `FormControl` instance from the provided `NgModel` directive.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `NgModel` directive instance.",
                      "type": "NgModel"
                    }
                  ]
                ],
                "signature": "getControl(dir: NgModel): FormControl;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeControl",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L215-L223",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRemoves the `NgModel` instance from the internal list of directives\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `NgModel` directive instance.",
                      "type": "NgModel"
                    }
                  ]
                ],
                "signature": "removeControl(dir: NgModel): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addFormGroup",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L231-L239",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nAdds a new `NgModelGroup` directive instance to the form.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `NgModelGroup` directive instance.",
                      "type": "NgModelGroup"
                    }
                  ]
                ],
                "signature": "addFormGroup(dir: NgModelGroup): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeFormGroup",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L247-L254",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRemoves the `NgModelGroup` directive instance from the form.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `NgModelGroup` directive instance.",
                      "type": "NgModelGroup"
                    }
                  ]
                ],
                "signature": "removeFormGroup(dir: NgModelGroup): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getFormGroup",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L262-L264",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRetrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `NgModelGroup` directive instance.",
                      "type": "NgModelGroup"
                    }
                  ]
                ],
                "signature": "getFormGroup(dir: NgModelGroup): FormGroup;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "updateModel",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L272-L277",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the new value for the provided `NgControl` directive.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `NgControl` directive instance.",
                      "type": "NgControl"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value for the directive's control.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "updateModel(dir: NgControl, value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setValue",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L285-L287",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nSets the value for this `FormGroup`.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value",
                      "type": "{ [key: string]: any; }"
                    }
                  ]
                ],
                "signature": "setValue(value: {[key: string]: any}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onSubmit",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L296-L301",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod called when the \"submit\" event is triggered on the form.\nTriggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "$event",
                      "description": "The \"submit\" event object",
                      "type": "Event"
                    }
                  ]
                ],
                "signature": "onSubmit($event: Event): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onReset",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L307-L309",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod called when the \"reset\" event is triggered on the form.\n"
                    }
                  ]
                ],
                "signature": "onReset(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resetForm",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L317-L320",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nResets the form to an initial value and resets its submitted status.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value for the form.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "resetForm(value: any = undefined): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_findContainer",
              "info": {
                "file": "packages/forms/src/directives/ng_form.ts#L329-L332",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "_findContainer(path: string[]): FormGroup;"
              }
            }
          ]
        ],
        "signature": "class NgForm extends ControlContainer implements Form, AfterViewInit {\n  public readonly submitted: boolean = false;\n  form: FormGroup;\n  ngSubmit = new EventEmitter();\n  @Input(\"ngFormOptions\") options!: { updateOn?: FormHooks };\n\n  ngAfterViewInit();\n  addControl(dir: NgModel): void;\n  getControl(dir: NgModel): FormControl;\n  removeControl(dir: NgModel): void;\n  addFormGroup(dir: NgModelGroup): void;\n  removeFormGroup(dir: NgModelGroup): void;\n  getFormGroup(dir: NgModelGroup): FormGroup;\n  updateModel(dir: NgControl, value: any): void;\n  setValue(value: { [key: string]: any }): void;\n  onSubmit($event: Event): boolean;\n  onReset(): void;\n  resetForm(value: any = undefined): void;\n  _findContainer(path: string[]): FormGroup;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "NgModel",
    "overloads": [
      {
        "file": "packages/forms/src/directives/ng_model.ts#L131-L355",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nCreates a `FormControl` instance from a domain model and binds it\nto a form control element.\n\nThe `FormControl` instance tracks the value, user interaction, and\nvalidation status of the control and keeps the view synced with the model. If used\nwithin a parent form, the directive also registers itself with the form as a child\ncontrol.\n\nThis directive is used by itself or as part of a larger form. Use the\n`ngModel` selector to activate it.\n\nIt accepts a domain model as an optional `Input`. If you have a one-way binding\nto `ngModel` with `[]` syntax, changing the value of the domain model in the component\nclass sets the value in the view. If you have a two-way binding with `[()]` syntax\n(also known as 'banana-box syntax'), the value in the UI always syncs back to\nthe domain model in your class.\n\nTo inspect the properties of the associated `FormControl` (like validity state),\nexport the directive into a local template variable using `ngModel` as the key (ex:\n`#myVar=\"ngModel\"`). You then access the control using the directive's `control` property, but\nmost properties used (like `valid` and `dirty`) fall through to the control anyway for direct\naccess. See a full list of properties directly available in `AbstractControlDirective`.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`RadioControlValueAccessor`"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`SelectControlValueAccessor`\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Using ngModel on a standalone control\n\nThe following examples show a simple standalone control using `ngModel`:\n\n{@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n\nWhen using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\nso that the control can be registered with the parent form under that name.\n\nIn the context of a parent form, it's often unnecessary to include one-way or two-way binding,\nas the parent form syncs the value for you. You access its properties by exporting it into a\nlocal template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\nneeded on form submission.\n\nIf you do need to populate initial values into your form, using a one-way binding for\n`ngModel` tends to be sufficient as long as you use the exported form's value rather\nthan the domain model's value on submit.\n\n### Using ngModel within a form\n\nThe following example shows controls using `ngModel` within a form:\n\n{@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n\n### Using a standalone ngModel within a group\n\nThe following example shows you how to use a standalone ngModel control\nwithin a form. This controls the display of the form, but doesn't contain form data.\n\n```html\n<form>\n<input name=\"login\" ngModel placeholder=\"Login\">\n<input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n</form>\n<!-- form value: {login: ''} -->\n```\n\n### Setting the ngModel name attribute through options\n\nThe following example shows you an alternate way to set the name attribute. The name attribute is\nused within a custom form component, and the name `@Input` property serves a different purpose.\n\n```html\n<form>\n<my-person-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n</my-person-control>\n</form>\n<!-- form value: {user: ''} -->\n```\n"
            }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "control",
              "description": "",
              "type": "FormControl"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngAcceptInputType_isDisabled",
              "description": "",
              "type": "string | boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_registered",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewModel",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isDisabled",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "model",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "options",
              "description": "",
              "type": "{ name?: string; standalone?: boolean; updateOn?: FormHooks; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "update",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/forms/src/directives/ng_model.ts#L223-L234",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nA lifecycle method called when the directive's inputs change. For internal use\nonly.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "A object of key/value pairs for the set of changed inputs.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: SimpleChanges);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/forms/src/directives/ng_model.ts#L241-L243",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nLifecycle method called before the directive's instance is destroyed. For internal\nuse only.\n"
                    }
                  ]
                ],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "viewToModelUpdate",
              "info": {
                "file": "packages/forms/src/directives/ng_model.ts#L286-L289",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nSets the new value for the view model and emits an `ngModelChange` event.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newValue",
                      "description": "The new value emitted by `ngModelChange`.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "viewToModelUpdate(newValue: any): void;"
              }
            }
          ]
        ],
        "signature": "class NgModel extends NgControl implements OnChanges, OnDestroy {\n  public readonly control: FormControl = new FormControl();\n  static ngAcceptInputType_isDisabled: boolean | string;\n  _registered = false;\n  viewModel: any;\n  @Input() name!: string;\n  @Input(\"disabled\") isDisabled!: boolean;\n  @Input(\"ngModel\") model: any;\n  @Input(\"ngModelOptions\") options!: {\n    name?: string;\n    standalone?: boolean;\n    updateOn?: FormHooks;\n  };\n  @Output(\"ngModelChange\") update = new EventEmitter();\n\n  ngOnChanges(changes: SimpleChanges);\n  ngOnDestroy(): void;\n  viewToModelUpdate(newValue: any): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "NgModelGroup",
    "overloads": [
      {
        "file": "packages/forms/src/directives/ng_model_group.ts#L49-L75",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nCreates and binds a `FormGroup` instance to a DOM element.\n\nThis directive can only be used as a child of `NgForm` (within `<form>` tags).\n\nUse this directive to validate a sub-group of your form separately from the\nrest of your form, or if some values in your domain model make more sense\nto consume together in a nested object.\n\nProvide a name for the sub-group and it will become the key\nfor the sub-group in the form's full value. If you need direct access, export the directive into\na local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Consuming controls in a grouping\n\nThe following example shows you how to combine controls together in a sub-group\nof the form.\n\n{@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n"
            }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_checkParentType",
              "info": {
                "file": "packages/forms/src/directives/ng_model_group.ts#L70-L74",
                "info": [],
                "signature": "_checkParentType(): void;"
              }
            }
          ]
        ],
        "signature": "class NgModelGroup\n  extends AbstractFormGroupDirective\n  implements OnInit, OnDestroy {\n  @Input(\"ngModelGroup\") name!: string;\n\n  _checkParentType(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "ɵNgNoValidate",
    "overloads": [
      {
        "file": "packages/forms/src/directives/ng_no_validate_directive.ts#L28-L33",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nAdds `novalidate` attribute to all forms by default.\n\n`novalidate` is used to disable browser's native form validation.\n\nIf you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n\n```\n<form ngNativeValidate></form>\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule\n" }]
        ],
        "signature": "class ɵNgNoValidate {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "NumberValueAccessor",
    "overloads": [
      {
        "file": "packages/forms/src/directives/number_value_accessor.ts#L43-L106",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nThe `ControlValueAccessor` for writing a number value and listening to number input changes.\nThe value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\ndirectives.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Using a number input with a reactive form.\n\nThe following example shows how to use a number input with a reactive form.\n\n```ts\nconst totalCountControl = new FormControl();\n```\n\n```\n<input type=\"number\" [formControl]=\"totalCountControl\">\n```\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "onChange",
              "description": "",
              "type": "(_: any) => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onTouched",
              "description": "",
              "type": "() => void"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "writeValue",
              "info": {
                "file": "packages/forms/src/directives/number_value_accessor.ts#L70-L74",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"value\" property on the input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The checked value",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "writeValue(value: number): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnChange",
              "info": {
                "file": "packages/forms/src/directives/number_value_accessor.ts#L82-L86",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control value changes.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "(_: number | null) => void"
                    }
                  ]
                ],
                "signature": "registerOnChange(fn: (_: number|null) => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnTouched",
              "info": {
                "file": "packages/forms/src/directives/number_value_accessor.ts#L94-L96",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control is touched.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "registerOnTouched(fn: () => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setDisabledState",
              "info": {
                "file": "packages/forms/src/directives/number_value_accessor.ts#L103-L105",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"disabled\" property on the input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isDisabled",
                      "description": "The disabled value",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setDisabledState(isDisabled: boolean): void;"
              }
            }
          ]
        ],
        "signature": "class NumberValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  writeValue(value: number): void;\n  registerOnChange(fn: (_: number | null) => void): void;\n  registerOnTouched(fn: () => void): void;\n  setDisabledState(isDisabled: boolean): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "RadioControlValueAccessor",
    "overloads": [
      {
        "file": "packages/forms/src/directives/radio_control_value_accessor.ts#L90-L228",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nThe `ControlValueAccessor` for writing radio control values and listening to radio control\nchanges. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n`NgModel` directives.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Using radio buttons with reactive form directives\n\nThe follow example shows how to use radio buttons in a reactive form. When using radio buttons in\na reactive form, radio buttons in the same group should have the same `formControlName`.\nProviding a `name` attribute is optional.\n\n{@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_state",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_control",
              "description": "",
              "type": "NgControl"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_fn",
              "description": "",
              "type": "Function"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onChange",
              "description": "",
              "type": "() => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onTouched",
              "description": "",
              "type": "() => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "formControlName",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnInit",
              "info": {
                "file": "packages/forms/src/directives/radio_control_value_accessor.ts#L148-L152",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nA lifecycle method called when the directive is initialized. For internal use only.\n"
                    }
                  ]
                ],
                "signature": "ngOnInit(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/forms/src/directives/radio_control_value_accessor.ts#L158-L160",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nLifecycle method called before the directive's instance is destroyed. For internal use only.\n"
                    }
                  ]
                ],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "writeValue",
              "info": {
                "file": "packages/forms/src/directives/radio_control_value_accessor.ts#L168-L171",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nSets the \"checked\" property value on the radio input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The checked value",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "writeValue(value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnChange",
              "info": {
                "file": "packages/forms/src/directives/radio_control_value_accessor.ts#L179-L185",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control value changes.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "(_: any) => {}"
                    }
                  ]
                ],
                "signature": "registerOnChange(fn: (_: any) => {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "fireUncheck",
              "info": {
                "file": "packages/forms/src/directives/radio_control_value_accessor.ts#L192-L194",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"value\" on the radio input element and unchecks it.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "fireUncheck(value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnTouched",
              "info": {
                "file": "packages/forms/src/directives/radio_control_value_accessor.ts#L202-L204",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control is touched.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => {}"
                    }
                  ]
                ],
                "signature": "registerOnTouched(fn: () => {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setDisabledState",
              "info": {
                "file": "packages/forms/src/directives/radio_control_value_accessor.ts#L211-L213",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"disabled\" property on the input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isDisabled",
                      "description": "The disabled value",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setDisabledState(isDisabled: boolean): void;"
              }
            }
          ]
        ],
        "signature": "class RadioControlValueAccessor\n  implements ControlValueAccessor, OnDestroy, OnInit {\n  _state!: boolean;\n  _control!: NgControl;\n  _fn!: Function;\n  onChange = () => {};\n  onTouched = () => {};\n  @Input() name!: string;\n  @Input() formControlName!: string;\n  @Input() value: any;\n\n  ngOnInit(): void;\n  ngOnDestroy(): void;\n  writeValue(value: any): void;\n  registerOnChange(fn: (_: any) => {}): void;\n  fireUncheck(value: any): void;\n  registerOnTouched(fn: () => {}): void;\n  setDisabledState(isDisabled: boolean): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "RangeValueAccessor",
    "overloads": [
      {
        "file": "packages/forms/src/directives/range_value_accessor.ts#L43-L108",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nThe `ControlValueAccessor` for writing a range value and listening to range input changes.\nThe value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\ndirectives.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Using a range input with a reactive form\n\nThe following example shows how to use a range input with a reactive form.\n\n```ts\nconst ageControl = new FormControl();\n```\n\n```\n<input type=\"range\" [formControl]=\"ageControl\">\n```\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "onChange",
              "description": "",
              "type": "(_: any) => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onTouched",
              "description": "",
              "type": "() => void"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "writeValue",
              "info": {
                "file": "packages/forms/src/directives/range_value_accessor.ts#L74-L76",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"value\" property on the input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The checked value",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "writeValue(value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnChange",
              "info": {
                "file": "packages/forms/src/directives/range_value_accessor.ts#L84-L88",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control value changes.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "(_: number | null) => void"
                    }
                  ]
                ],
                "signature": "registerOnChange(fn: (_: number|null) => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnTouched",
              "info": {
                "file": "packages/forms/src/directives/range_value_accessor.ts#L96-L98",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control is touched.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "registerOnTouched(fn: () => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setDisabledState",
              "info": {
                "file": "packages/forms/src/directives/range_value_accessor.ts#L105-L107",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"disabled\" property on the range input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isDisabled",
                      "description": "The disabled value",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setDisabledState(isDisabled: boolean): void;"
              }
            }
          ]
        ],
        "signature": "class RangeValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  writeValue(value: any): void;\n  registerOnChange(fn: (_: number | null) => void): void;\n  registerOnTouched(fn: () => void): void;\n  setDisabledState(isDisabled: boolean): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "FormControlDirective",
    "overloads": [
      {
        "file": "packages/forms/src/directives/reactive_directives/form_control_directive.ts#L53-L188",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nSynchronizes a standalone `FormControl` instance to a form control element.\n\nNote that support for using the `ngModel` input property and `ngModelChange` event with reactive\nform directives was deprecated in Angular v6 and is scheduled for removal in\na future version of Angular.\nFor details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Reactive Forms Guide](guide/reactive-forms)"
            }
          ],
          ["see", { "__kind": "heading", "description": "`FormControl`" }],
          [
            "see",
            { "__kind": "heading", "description": "`AbstractControl`\n" }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nThe following example shows how to register a standalone control and set its value.\n\n{@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewModel",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "form",
              "description": "",
              "type": "FormControl"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "model",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "update",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_ngModelWarningSentOnce",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_ngModelWarningSent",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_control_directive.ts#L124-L137",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nA lifecycle method called when the directive's inputs change. For internal use\nonly.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "A object of key/value pairs for the set of changed inputs.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: SimpleChanges): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "viewToModelUpdate",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_control_directive.ts#L180-L183",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nSets the new value for the view model and emits an `ngModelChange` event.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newValue",
                      "description": "The new value for the view model.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "viewToModelUpdate(newValue: any): void;"
              }
            }
          ]
        ],
        "signature": "class FormControlDirective extends NgControl implements OnChanges {\n  viewModel: any;\n  @Input(\"formControl\") form!: FormControl;\n  @Input(\"ngModel\") model: any;\n  @Output(\"ngModelChange\") update = new EventEmitter();\n  static _ngModelWarningSentOnce = false;\n  _ngModelWarningSent = false;\n\n  ngOnChanges(changes: SimpleChanges): void;\n  viewToModelUpdate(newValue: any): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "FormControlName",
    "overloads": [
      {
        "file": "packages/forms/src/directives/reactive_directives/form_control_name.ts#L64-L233",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nSyncs a `FormControl` in an existing `FormGroup` to a form control\nelement by name.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Reactive Forms Guide](guide/reactive-forms)"
            }
          ],
          ["see", { "__kind": "heading", "description": "`FormControl`" }],
          [
            "see",
            { "__kind": "heading", "description": "`AbstractControl`\n" }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Register `FormControl` within a group\n\nThe following example shows how to register multiple form controls within a form group\nand set their value.\n\n{@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n\nTo see `formControlName` examples with different form control types, see:\n\n* Radio buttons: `RadioControlValueAccessor`\n* Selects: `SelectControlValueAccessor`\n\n### Use with ngModel is deprecated\n\nSupport for using the `ngModel` input property and `ngModelChange` event with reactive\nform directives has been deprecated in Angular v6 and is scheduled for removal in\na future version of Angular.\n\nFor details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "viewModel",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "control",
              "description": "",
              "type": "FormControl"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string | number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "model",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "update",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_ngModelWarningSentOnce",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_ngModelWarningSent",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_control_name.ts#L149-L156",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nA lifecycle method called when the directive's inputs change. For internal use only.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "A object of key/value pairs for the set of changed inputs.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: SimpleChanges);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_control_name.ts#L162-L166",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nLifecycle method called before the directive's instance is destroyed. For internal use only.\n"
                    }
                  ]
                ],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "viewToModelUpdate",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_control_name.ts#L174-L177",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nSets the new value for the view model and emits an `ngModelChange` event.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newValue",
                      "description": "The new value for the view model.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "viewToModelUpdate(newValue: any): void;"
              }
            }
          ]
        ],
        "signature": "class FormControlName extends NgControl implements OnChanges, OnDestroy {\n  viewModel: any;\n  readonly control!: FormControl;\n  @Input(\"formControlName\") name!: string | number | null;\n  @Input(\"ngModel\") model: any;\n  @Output(\"ngModelChange\") update = new EventEmitter();\n  static _ngModelWarningSentOnce = false;\n  _ngModelWarningSent = false;\n\n  ngOnChanges(changes: SimpleChanges);\n  ngOnDestroy(): void;\n  viewToModelUpdate(newValue: any): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "FormGroupDirective",
    "overloads": [
      {
        "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L49-L298",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nBinds an existing `FormGroup` to a DOM element.\n\nThis directive accepts an existing `FormGroup` instance. It will then use this\n`FormGroup` instance to match any child `FormControl`, `FormGroup`,\nand `FormArray` instances to child `FormControlName`, `FormGroupName`,\nand `FormArrayName` directives.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Reactive Forms Guide](guide/reactive-forms)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`AbstractControl`\n\n### Register Form Group\n\nThe following example registers a `FormGroup` with first name and last name controls,\nand listens for the *ngSubmit* event when the button is clicked.\n\n{@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "submitted",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "directives",
              "description": "",
              "type": "FormControlName[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "form",
              "description": "",
              "type": "FormGroup"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "ngSubmit",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L95-L102",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nA lifecycle method called when the directive's inputs change. For internal use only.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "A object of key/value pairs for the set of changed inputs.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: SimpleChanges): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addControl",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L136-L142",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod that sets up the control directive in this group, re-calculates its value\nand validity, and adds the instance to the internal list of directives.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `FormControlName` directive instance.",
                      "type": "FormControlName"
                    }
                  ]
                ],
                "signature": "addControl(dir: FormControlName): FormControl;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getControl",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L150-L152",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRetrieves the `FormControl` instance from the provided `FormControlName` directive\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `FormControlName` directive instance.",
                      "type": "FormControlName"
                    }
                  ]
                ],
                "signature": "getControl(dir: FormControlName): FormControl;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeControl",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L160-L162",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRemoves the `FormControlName` instance from the internal list of directives\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `FormControlName` directive instance.",
                      "type": "FormControlName"
                    }
                  ]
                ],
                "signature": "removeControl(dir: FormControlName): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addFormGroup",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L169-L173",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Adds a new `FormGroupName` directive instance to the form.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `FormGroupName` directive instance.",
                      "type": "FormGroupName"
                    }
                  ]
                ],
                "signature": "addFormGroup(dir: FormGroupName): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeFormGroup",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L180-L180",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "No-op method to remove the form group.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `FormGroupName` directive instance.",
                      "type": "FormGroupName"
                    }
                  ]
                ],
                "signature": "removeFormGroup(dir: FormGroupName): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getFormGroup",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L188-L190",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRetrieves the `FormGroup` for a provided `FormGroupName` directive instance\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `FormGroupName` directive instance.",
                      "type": "FormGroupName"
                    }
                  ]
                ],
                "signature": "getFormGroup(dir: FormGroupName): FormGroup;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addFormArray",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L197-L201",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Adds a new `FormArrayName` directive instance to the form.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `FormArrayName` directive instance.",
                      "type": "FormArrayName"
                    }
                  ]
                ],
                "signature": "addFormArray(dir: FormArrayName): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeFormArray",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L208-L208",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "No-op method to remove the form array.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `FormArrayName` directive instance.",
                      "type": "FormArrayName"
                    }
                  ]
                ],
                "signature": "removeFormArray(dir: FormArrayName): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getFormArray",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L216-L218",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRetrieves the `FormArray` for a provided `FormArrayName` directive instance.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `FormArrayName` directive instance.",
                      "type": "FormArrayName"
                    }
                  ]
                ],
                "signature": "getFormArray(dir: FormArrayName): FormArray;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "updateModel",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L226-L229",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the new value for the provided `FormControlName` directive.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "dir",
                      "description": "The `FormControlName` directive instance.",
                      "type": "FormControlName"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value for the directive's control.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "updateModel(dir: FormControlName, value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onSubmit",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L238-L243",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod called with the \"submit\" event is triggered on the form.\nTriggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "$event",
                      "description": "The \"submit\" event object",
                      "type": "Event"
                    }
                  ]
                ],
                "signature": "onSubmit($event: Event): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onReset",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L249-L251",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod called when the \"reset\" event is triggered on the form.\n"
                    }
                  ]
                ],
                "signature": "onReset(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resetForm",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L259-L262",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nResets the form to an initial value and resets its submitted status.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value for the form.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "resetForm(value: any = undefined): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_updateDomValue",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_directive.ts#L266-L277",
                "info": [],
                "signature": "_updateDomValue();"
              }
            }
          ]
        ],
        "signature": "class FormGroupDirective extends ControlContainer implements Form, OnChanges {\n  public readonly submitted: boolean = false;\n  directives: FormControlName[] = [];\n  @Input(\"formGroup\") form: FormGroup = null!;\n  @Output() ngSubmit = new EventEmitter();\n\n  ngOnChanges(changes: SimpleChanges): void;\n  addControl(dir: FormControlName): FormControl;\n  getControl(dir: FormControlName): FormControl;\n  removeControl(dir: FormControlName): void;\n  addFormGroup(dir: FormGroupName): void;\n  getFormGroup(dir: FormGroupName): FormGroup;\n  addFormArray(dir: FormArrayName): void;\n  getFormArray(dir: FormArrayName): FormArray;\n  updateModel(dir: FormControlName, value: any): void;\n  onSubmit($event: Event): boolean;\n  onReset(): void;\n  resetForm(value: any = undefined): void;\n  _updateDomValue();\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "FormArrayName",
    "overloads": [
      {
        "file": "packages/forms/src/directives/reactive_directives/form_group_name.ts#L134-L235",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nSyncs a nested `FormArray` to a DOM element.\n\nThis directive is designed to be used with a parent `FormGroupDirective` (selector:\n`[formGroup]`).\n\nIt accepts the string name of the nested `FormArray` you want to link, and\nwill look for a `FormArray` registered with that name in the parent\n`FormGroup` instance you passed into `FormGroupDirective`.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Reactive Forms Guide](guide/reactive-forms)"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`AbstractControl`\n" }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Example\n\n{@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_parent",
              "description": "",
              "type": "ControlContainer"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_validators",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_asyncValidators",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string | number"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnInit",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_name.ts#L173-L176",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nA lifecycle method called when the directive's inputs are initialized. For internal use only.\n"
                    }
                  ],
                  [
                    "throws",
                    {
                      "__kind": "heading",
                      "description": "If the directive does not have a valid parent.\n"
                    }
                  ]
                ],
                "signature": "ngOnInit(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_name.ts#L182-L186",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nA lifecycle method called before the directive's instance is destroyed. For internal use only.\n"
                    }
                  ]
                ],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ]
        ],
        "signature": "class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n  _parent: ControlContainer;\n  _validators: any[];\n  _asyncValidators: any[];\n  @Input(\"formArrayName\") name!: string | number | null;\n\n  ngOnInit(): void;\n  ngOnDestroy(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "FormGroupName",
    "overloads": [
      {
        "file": "packages/forms/src/directives/reactive_directives/form_group_name.ts#L73-L103",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nSyncs a nested `FormGroup` to a DOM element.\n\nThis directive can only be used with a parent `FormGroupDirective`.\n\nIt accepts the string name of the nested `FormGroup` to link, and\nlooks for a `FormGroup` registered with that name in the parent\n`FormGroup` instance you passed into `FormGroupDirective`.\n\nUse nested form groups to validate a sub-group of a\nform separately from the rest or to group the values of certain\ncontrols into their own nested object.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Reactive Forms Guide](guide/reactive-forms)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Access the group by name\n\nThe following example uses the {@link AbstractControl#get get} method to access the\nassociated `FormGroup`\n\n```ts\nthis.form.get('name');\n```\n\n### Access individual controls in the group\n\nThe following example uses the {@link AbstractControl#get get} method to access\nindividual controls within the group using dot syntax.\n\n```ts\nthis.form.get('name.first');\n```\n\n### Register a nested `FormGroup`.\n\nThe following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\nand provides methods to retrieve the nested `FormGroup` and individual controls.\n\n{@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "name",
              "description": "",
              "type": "string | number"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_checkParentType",
              "info": {
                "file": "packages/forms/src/directives/reactive_directives/form_group_name.ts#L98-L102",
                "info": [],
                "signature": "_checkParentType(): void;"
              }
            }
          ]
        ],
        "signature": "class FormGroupName\n  extends AbstractFormGroupDirective\n  implements OnInit, OnDestroy {\n  @Input(\"formGroupName\") name!: string | number | null;\n\n  _checkParentType(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "NgSelectOption",
    "overloads": [
      {
        "file": "packages/forms/src/directives/select_control_value_accessor.ts#L206-L260",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nMarks `<option>` as dynamic, so Angular can be notified when options change.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`SelectControlValueAccessor`\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "id",
              "description": "",
              "type": "string"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_setElementValue",
              "info": {
                "file": "packages/forms/src/directives/select_control_value_accessor.ts#L246-L248",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "_setElementValue(value: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/forms/src/directives/select_control_value_accessor.ts#L254-L259",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nLifecycle method called before the directive's instance is destroyed. For internal use only.\n"
                    }
                  ]
                ],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ]
        ],
        "signature": "class NgSelectOption implements OnDestroy {\n  id!: string;\n\n  _setElementValue(value: string): void;\n  ngOnDestroy(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "SelectControlValueAccessor",
    "overloads": [
      {
        "file": "packages/forms/src/directives/select_control_value_accessor.ts#L86-L194",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nThe `ControlValueAccessor` for writing select control values and listening to select control\nchanges. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n`NgModel` directives.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Using select controls in a reactive form\n\nThe following examples show how to use a select control in a reactive form.\n\n{@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n\n### Using select controls in a template-driven form\n\nTo use a select in a template-driven form, simply add an `ngModel` and a `name`\nattribute to the main `<select>` tag.\n\n{@example forms/ts/selectControl/select_control_example.ts region='Component'}\n\n### Customizing option selection\n\nAngular uses object identity to select option. It's possible for the identities of items\nto change while the data does not. This can happen, for example, if the items are produced\nfrom an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\nsecond response will produce objects with different identities.\n\nTo customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n`compareWith` takes a **function** which has two arguments: `option1` and `option2`.\nIf `compareWith` is given, Angular selects option by the return value of the function.\n\n```ts\nconst selectedCountriesControl = new FormControl();\n```\n\n```\n<select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n<option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n{{country.name}}\n</option>\n</select>\n\ncompareFn(c1: Country, c2: Country): boolean {\nreturn c1 && c2 ? c1.id === c2.id : c1 === c2;\n}\n```\n\n**Note:** We listen to the 'change' event because 'input' events aren't fired\nfor selects in Firefox and IE:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1024350\nhttps://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_optionMap",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_idCounter",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onChange",
              "description": "",
              "type": "(_: any) => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onTouched",
              "description": "",
              "type": "() => void"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "writeValue",
              "info": {
                "file": "packages/forms/src/directives/select_control_value_accessor.ts#L134-L142",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"value\" property on the input element. The \"selectedIndex\"\nproperty is also set if an ID is provided on the option element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The checked value",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "writeValue(value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnChange",
              "info": {
                "file": "packages/forms/src/directives/select_control_value_accessor.ts#L150-L155",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control value changes.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "(value: any) => any"
                    }
                  ]
                ],
                "signature": "registerOnChange(fn: (value: any) => any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnTouched",
              "info": {
                "file": "packages/forms/src/directives/select_control_value_accessor.ts#L163-L165",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control is touched.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => any"
                    }
                  ]
                ],
                "signature": "registerOnTouched(fn: () => any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setDisabledState",
              "info": {
                "file": "packages/forms/src/directives/select_control_value_accessor.ts#L172-L174",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"disabled\" property on the select input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isDisabled",
                      "description": "The disabled value",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setDisabledState(isDisabled: boolean): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_registerOption",
              "info": {
                "file": "packages/forms/src/directives/select_control_value_accessor.ts#L177-L179",
                "info": [],
                "signature": "_registerOption(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_getOptionId",
              "info": {
                "file": "packages/forms/src/directives/select_control_value_accessor.ts#L182-L187",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "_getOptionId(value: any): string|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_getOptionValue",
              "info": {
                "file": "packages/forms/src/directives/select_control_value_accessor.ts#L190-L193",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "valueString",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "_getOptionValue(valueString: string): any;"
              }
            }
          ]
        ],
        "signature": "class SelectControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  _optionMap: Map<string, any> = new Map<string, any>();\n  _idCounter: number = 0;\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  writeValue(value: any): void;\n  registerOnChange(fn: (value: any) => any): void;\n  registerOnTouched(fn: () => any): void;\n  setDisabledState(isDisabled: boolean): void;\n  _registerOption(): string;\n  _getOptionId(value: any): string | null;\n  _getOptionValue(valueString: string): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "SelectMultipleControlValueAccessor",
    "overloads": [
      {
        "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L78-L222",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nThe `ControlValueAccessor` for writing multi-select control values and listening to multi-select\ncontrol changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n`NgModel` directives.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`SelectControlValueAccessor`\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Using a multi-select control\n\nThe follow example shows you how to use a multi-select control with a reactive form.\n\n```ts\nconst countryControl = new FormControl();\n```\n\n```\n<select multiple name=\"countries\" [formControl]=\"countryControl\">\n<option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n{{ country.name }}\n</option>\n</select>\n```\n\n### Customizing option selection\n\nTo customize the default option comparison algorithm, `<select>` supports `compareWith` input.\nSee the `SelectControlValueAccessor` for usage.\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_optionMap",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_idCounter",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onChange",
              "description": "",
              "type": "(_: any) => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onTouched",
              "description": "",
              "type": "() => void"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "writeValue",
              "info": {
                "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L132-L147",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nSets the \"value\" property on one or of more\nof the select's options.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The value",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "writeValue(value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnChange",
              "info": {
                "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L156-L181",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control value changes\nand writes an array of the selected options.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "(value: any) => any"
                    }
                  ]
                ],
                "signature": "registerOnChange(fn: (value: any) => any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnTouched",
              "info": {
                "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L189-L191",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a function called when the control is touched.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => any"
                    }
                  ]
                ],
                "signature": "registerOnTouched(fn: () => any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setDisabledState",
              "info": {
                "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L198-L200",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the \"disabled\" property on the select input element.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "isDisabled",
                      "description": "The disabled value",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "setDisabledState(isDisabled: boolean): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_registerOption",
              "info": {
                "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L203-L207",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "ɵNgSelectMultipleOption"
                    }
                  ]
                ],
                "signature": "_registerOption(value: ɵNgSelectMultipleOption): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_getOptionId",
              "info": {
                "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L210-L215",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "_getOptionId(value: any): string|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_getOptionValue",
              "info": {
                "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L218-L221",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "valueString",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "_getOptionValue(valueString: string): any;"
              }
            }
          ]
        ],
        "signature": "class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  _optionMap: Map<string, ɵNgSelectMultipleOption> = new Map<\n    string,\n    ɵNgSelectMultipleOption\n  >();\n  _idCounter: number = 0;\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  writeValue(value: any): void;\n  registerOnChange(fn: (value: any) => any): void;\n  registerOnTouched(fn: () => any): void;\n  setDisabledState(isDisabled: boolean): void;\n  _registerOption(value: ɵNgSelectMultipleOption): string;\n  _getOptionId(value: any): string | null;\n  _getOptionValue(valueString: string): any;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "ɵNgSelectMultipleOption",
    "overloads": [
      {
        "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L234-L298",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nMarks `<option>` as dynamic, so Angular can be notified when options change.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`SelectMultipleControlValueAccessor`\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "id",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_value",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_setElementValue",
              "info": {
                "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L279-L281",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "_setElementValue(value: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_setSelected",
              "info": {
                "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L284-L286",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "selected",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "_setSelected(selected: boolean);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/forms/src/directives/select_multiple_control_value_accessor.ts#L292-L297",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nLifecycle method called before the directive's instance is destroyed. For internal use only.\n"
                    }
                  ]
                ],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ]
        ],
        "signature": "class ɵNgSelectMultipleOption implements OnDestroy {\n  id!: string;\n  _value: any;\n\n  _setElementValue(value: string): void;\n  _setSelected(selected: boolean);\n  ngOnDestroy(): void;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "forms",
    "name": "AsyncValidator",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L100-L112",
        "signature": "interface AsyncValidator {\n  // inherited from Validator\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nAn interface implemented by classes that perform asynchronous validation.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Provide a custom async validator directive\n\nThe following example implements the `AsyncValidator` interface to create an\nasync validator directive with a custom error key.\n\n```typescript\nimport { of } from 'rxjs';\n"
            }
          ],
          [
            "Directive({",
            {
              "__kind": "heading",
              "description": "\nselector: '[customAsyncValidator]',\nproviders: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\ntrue}]\n})\nclass CustomAsyncValidatorDirective implements AsyncValidator {\nvalidate(control: AbstractControl): Observable<ValidationErrors|null> {\nreturn of({'custom': true});\n}\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "forms",
    "name": "AsyncValidatorFn",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L326-L328",
        "signature": "interface AsyncValidatorFn {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA function that receives a control and returns a Promise or observable\nthat emits validation errors if present, otherwise null.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "CheckboxRequiredValidator",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L220-L235",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A Directive that adds the `required` validator to checkbox controls marked with the\n`required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Form Validation](guide/form-validation)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Adding a required checkbox validator using template-driven forms\n\nThe following example shows how to add a checkbox required validator to an input attached to an\nngModel binding.\n\n```\n<input type=\"checkbox\" name=\"active\" ngModel required>\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule\n" }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "validate",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L232-L234",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod that validates whether or not the checkbox has been checked.\nReturns the validation result if enabled, otherwise null.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "validate(control: AbstractControl): ValidationErrors|null;"
              }
            }
          ]
        ],
        "signature": "class CheckboxRequiredValidator extends RequiredValidator {\n  validate(control: AbstractControl): ValidationErrors | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "EmailValidator",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L270-L306",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A directive that adds the `email` validator to controls marked with the\n`email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Form Validation](guide/form-validation)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Adding an email validator\n\nThe following example shows how to add an email validator to an input attached to an ngModel\nbinding.\n\n```\n<input type=\"email\" name=\"email\" ngModel email>\n<input type=\"email\" name=\"email\" ngModel email=\"true\">\n<input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule\n" }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "validate",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L293-L295",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod that validates whether an email address is valid.\nReturns the validation result if enabled, otherwise null.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "validate(control: AbstractControl): ValidationErrors|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnValidatorChange",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L303-L305",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a callback function to call when the validator inputs change.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "registerOnValidatorChange(fn: () => void): void;"
              }
            }
          ]
        ],
        "signature": "class EmailValidator implements Validator {\n  validate(control: AbstractControl): ValidationErrors | null;\n  registerOnValidatorChange(fn: () => void): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "MaxLengthValidator",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L447-L500",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A directive that adds max length validation to controls marked with the\n`maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Form Validation](guide/form-validation)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Adding a maximum length validator\n\nThe following example shows how to add a maximum length validator to an input attached to an\nngModel binding.\n\n```html\n<input name=\"firstName\" ngModel maxlength=\"25\">\n```\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "maxlength",
              "description": "",
              "type": "string | number"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L470-L475",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nA lifecycle method called when the directive's inputs change. For internal use\nonly.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "A object of key/value pairs for the set of changed inputs.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: SimpleChanges): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "validate",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L482-L484",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod that validates whether the value exceeds\nthe maximum length requirement.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "validate(control: AbstractControl): ValidationErrors|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnValidatorChange",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L492-L494",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a callback function to call when the validator inputs change.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "registerOnValidatorChange(fn: () => void): void;"
              }
            }
          ]
        ],
        "signature": "class MaxLengthValidator implements Validator, OnChanges {\n  @Input()\n  maxlength!: string | number;\n\n  ngOnChanges(changes: SimpleChanges): void;\n  validate(control: AbstractControl): ValidationErrors | null;\n  registerOnValidatorChange(fn: () => void): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "MinLengthValidator",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L361-L414",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A directive that adds minimum length validation to controls marked with the\n`minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Form Validation](guide/form-validation)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Adding a minimum length validator\n\nThe following example shows how to add a minimum length validator to an input attached to an\nngModel binding.\n\n```html\n<input name=\"firstName\" ngModel minlength=\"4\">\n```\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "minlength",
              "description": "",
              "type": "string | number"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L384-L389",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nA lifecycle method called when the directive's inputs change. For internal use\nonly.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "A object of key/value pairs for the set of changed inputs.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: SimpleChanges): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "validate",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L396-L398",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod that validates whether the value meets a minimum length\nrequirement. Returns the validation result if enabled, otherwise null.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "validate(control: AbstractControl): ValidationErrors|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnValidatorChange",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L406-L408",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a callback function to call when the validator inputs change.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "registerOnValidatorChange(fn: () => void): void;"
              }
            }
          ]
        ],
        "signature": "class MinLengthValidator implements Validator, OnChanges {\n  @Input()\n  minlength!: string | number;\n\n  ngOnChanges(changes: SimpleChanges): void;\n  validate(control: AbstractControl): ValidationErrors | null;\n  registerOnValidatorChange(fn: () => void): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "PatternValidator",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L536-L588",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA directive that adds regex pattern validation to controls marked with the\n`pattern` attribute. The regex must match the entire control value.\nThe directive is provided with the `NG_VALIDATORS` multi-provider list.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Form Validation](guide/form-validation)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Adding a pattern validator\n\nThe following example shows how to add a pattern validator to an input attached to an\nngModel binding.\n\n```html\n<input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n```\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "pattern",
              "description": "",
              "type": "string | RegExp"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L559-L564",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nA lifecycle method called when the directive's inputs change. For internal use\nonly.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "A object of key/value pairs for the set of changed inputs.",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: SimpleChanges): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "validate",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L571-L573",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod that validates whether the value matches the\nthe pattern requirement.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "validate(control: AbstractControl): ValidationErrors|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnValidatorChange",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L581-L583",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a callback function to call when the validator inputs change.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "registerOnValidatorChange(fn: () => void): void;"
              }
            }
          ]
        ],
        "signature": "class PatternValidator implements Validator, OnChanges {\n  @Input()\n  pattern!: string | RegExp;\n\n  ngOnChanges(changes: SimpleChanges): void;\n  validate(control: AbstractControl): ValidationErrors | null;\n  registerOnValidatorChange(fn: () => void): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "RequiredValidator",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L154-L196",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA directive that adds the `required` validator to any controls marked with the\n`required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Form Validation](guide/form-validation)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Adding a required validator using template-driven forms\n\n```\n<input name=\"fullName\" ngModel required>\n```\n"
            }
          ],
          ["ngModule", { "__kind": "heading", "description": "FormsModule" }],
          [
            "ngModule",
            { "__kind": "heading", "description": "ReactiveFormsModule" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "validate",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L183-L185",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nMethod that validates whether the control is empty.\nReturns the validation result if enabled, otherwise null.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "validate(control: AbstractControl): ValidationErrors|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnValidatorChange",
              "info": {
                "file": "packages/forms/src/directives/validators.ts#L193-L195",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nRegisters a callback function to call when the validator inputs change.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The callback function",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "registerOnValidatorChange(fn: () => void): void;"
              }
            }
          ]
        ],
        "signature": "class RequiredValidator implements Validator {\n  validate(control: AbstractControl): ValidationErrors | null;\n  registerOnValidatorChange(fn: () => void): void;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "forms",
    "name": "ValidationErrors",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L22-L24",
        "signature": "export type ValidationErrors = {\n  [key: string]: any;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nDefines the map of errors returned from failed validation checks.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "forms",
    "name": "Validator",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L51-L70",
        "signature": "interface Validator {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nAn interface implemented by classes that perform synchronous validation.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Provide a custom validator\n\nThe following example implements the `Validator` interface to create a\nvalidator directive with a custom error key.\n\n```typescript"
            }
          ],
          [
            "Directive({",
            {
              "__kind": "heading",
              "description": "\nselector: '[customValidator]',\nproviders: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n})\nclass CustomValidatorDirective implements Validator {\nvalidate(control: AbstractControl): ValidationErrors|null {\nreturn {'custom': true};\n}\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "forms",
    "name": "ValidatorFn",
    "overloads": [
      {
        "file": "packages/forms/src/directives/validators.ts#L315-L317",
        "signature": "interface ValidatorFn {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA function that receives a control and synchronously returns a map of\nvalidation errors if present, otherwise null.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "FormBuilder",
    "overloads": [
      {
        "file": "packages/forms/src/form_builder.ts#L33-L157",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nCreates an `AbstractControl` from a user-specified configuration.\n\nThe `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n`FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\nforms.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Reactive Forms Guide](/guide/reactive-forms)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "group",
              "info": {
                "file": "packages/forms/src/form_builder.ts#L56-L79",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nConstruct a new `FormGroup` instance.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "controlsConfig",
                      "description": "A collection of child controls. The key for each child is the name",
                      "type": "{ [key: string]: any; }"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "Configuration options object for the `FormGroup`. The object can",
                      "type": "AbstractControlOptions | { [key: string]: any; }"
                    }
                  ]
                ],
                "signature": "group(   controlsConfig: {[key: string]: any},   options: AbstractControlOptions|{[key: string]: any}|null = null): FormGroup;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "control",
              "info": {
                "file": "packages/forms/src/form_builder.ts#L104-L108",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nConstruct a new `FormControl` with the given state, validators and options.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "formState",
                      "description": "Initializes the control with an initial state value, or",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "validatorOrOpts",
                      "description": "A synchronous validator function, or an array of",
                      "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "asyncValidator",
                      "description": "A single async validator or array of async validator",
                      "type": "AsyncValidatorFn | AsyncValidatorFn[]"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Initialize a control as disabled\n\nThe following example returns a control with an initial value in a disabled state.\n\n<code-example path=\"forms/ts/formBuilder/form_builder_example.ts\" region=\"disabled-control\">\n</code-example>\n"
                    }
                  ]
                ],
                "signature": "control(   formState: any, validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,   asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormControl;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "array",
              "info": {
                "file": "packages/forms/src/form_builder.ts#L124-L130",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Constructs a new `FormArray` from the given array of configurations,\nvalidators and options.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "controlsConfig",
                      "description": "An array of child controls or control configs. Each",
                      "type": "any[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "validatorOrOpts",
                      "description": "A synchronous validator function, or an array of",
                      "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "asyncValidator",
                      "description": "A single async validator or array of async validator",
                      "type": "AsyncValidatorFn | AsyncValidatorFn[]"
                    }
                  ]
                ],
                "signature": "array(   controlsConfig: any[],   validatorOrOpts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null,   asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormArray;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_reduceControls",
              "info": {
                "file": "packages/forms/src/form_builder.ts#L133-L139",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "controlsConfig",
                      "description": "",
                      "type": "{ [k: string]: any; }"
                    }
                  ]
                ],
                "signature": "_reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl};"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_createControl",
              "info": {
                "file": "packages/forms/src/form_builder.ts#L142-L156",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "controlConfig",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "_createControl(controlConfig: any): AbstractControl;"
              }
            }
          ]
        ],
        "signature": "class FormBuilder {\n  group(\n    controlsConfig: { [key: string]: any },\n    options: AbstractControlOptions | { [key: string]: any } | null = null\n  ): FormGroup;\n  control(\n    formState: any,\n    validatorOrOpts?:\n      | ValidatorFn\n      | ValidatorFn[]\n      | AbstractControlOptions\n      | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ): FormControl;\n  array(\n    controlsConfig: any[],\n    validatorOrOpts?:\n      | ValidatorFn\n      | ValidatorFn[]\n      | AbstractControlOptions\n      | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ): FormArray;\n  _reduceControls(controlsConfig: {\n    [k: string]: any;\n  }): { [key: string]: AbstractControl };\n  _createControl(controlConfig: any): AbstractControl;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "AbstractControl",
    "overloads": [
      {
        "file": "packages/forms/src/model.ts#L153-L1023",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n\nIt provides some of the shared behavior that all controls and groups of controls have, like\nrunning validators, calculating status, and resetting state. It also defines the properties\nthat are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\ninstantiated directly.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Forms Guide](/guide/forms)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Reactive Forms Guide](/guide/reactive-forms)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Dynamic Forms Guide](/guide/dynamic-form)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_pendingDirty",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_hasOwnPendingAsyncValidator",
              "description": "Indicates that a control has its own pending asynchronous validation in progress.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_pendingTouched",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_onCollectionChange",
              "description": "",
              "type": "() => void"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_updateOn",
              "description": "",
              "type": "FormHooks"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "value",
              "description": "The current value of the control.\n\n* For a `FormControl`, the current value.\n* For an enabled `FormGroup`, the values of enabled controls as an object\nwith a key-value pair for each member of the group.\n* For a disabled `FormGroup`, the values of all controls as an object\nwith a key-value pair for each member of the group.\n* For a `FormArray`, the values of enabled controls as an array.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "status",
              "description": "The validation status of the control. There are four possible\nvalidation status values:\n\n* **VALID**: This control has passed all validation checks.\n* **INVALID**: This control has failed at least one validation check.\n* **PENDING**: This control is in the midst of conducting a validation check.\n* **DISABLED**: This control is exempt from validation checks.\n\nThese status values are mutually exclusive, so a control cannot be\nboth valid AND invalid or invalid AND disabled.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "errors",
              "description": "An object containing any errors generated by failing validation,\nor null if there are no errors.",
              "type": "ValidationErrors"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pristine",
              "description": "A control is `pristine` if the user has not yet changed\nthe value in the UI.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "touched",
              "description": "True if the control is marked as `touched`.\n\nA control is marked `touched` once the user has triggered\na `blur` event on it.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "valueChanges",
              "description": "A multicasting observable that emits an event every time the value of the control changes, in\nthe UI or programmatically. It also emits an event each time you call enable() or disable()\nwithout passing along {emitEvent: false} as a function argument.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "statusChanges",
              "description": "A multicasting observable that emits an event every time the validation `status` of the control\nrecalculates.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_onDisabledChange",
              "description": "",
              "type": "Function[]"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setValidators",
              "info": {
                "file": "packages/forms/src/model.ts#L434-L437",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the synchronous validators that are active on this control.  Calling\nthis overwrites any existing sync validators.\n\nWhen you add or remove a validator at run time, you must call\n`updateValueAndValidity()` for the new validation to take effect.\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newValidator",
                      "description": "",
                      "type": "ValidatorFn | ValidatorFn[]"
                    }
                  ]
                ],
                "signature": "setValidators(newValidator: ValidatorFn|ValidatorFn[]|null): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setAsyncValidators",
              "info": {
                "file": "packages/forms/src/model.ts#L447-L450",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the async validators that are active on this control. Calling this\noverwrites any existing async validators.\n\nWhen you add or remove a validator at run time, you must call\n`updateValueAndValidity()` for the new validation to take effect.\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newValidator",
                      "description": "",
                      "type": "AsyncValidatorFn | AsyncValidatorFn[]"
                    }
                  ]
                ],
                "signature": "setAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]|null): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearValidators",
              "info": {
                "file": "packages/forms/src/model.ts#L459-L461",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Empties out the sync validator list.\n\nWhen you add or remove a validator at run time, you must call\n`updateValueAndValidity()` for the new validation to take effect.\n\n"
                    }
                  ]
                ],
                "signature": "clearValidators(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearAsyncValidators",
              "info": {
                "file": "packages/forms/src/model.ts#L470-L472",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Empties out the async validator list.\n\nWhen you add or remove a validator at run time, you must call\n`updateValueAndValidity()` for the new validation to take effect.\n\n"
                    }
                  ]
                ],
                "signature": "clearAsyncValidators(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "markAsTouched",
              "info": {
                "file": "packages/forms/src/model.ts#L487-L493",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Marks the control as `touched`. A control is touched by focus and\nblur events that do not change the value.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`markAsUntouched()`"
                    }
                  ],
                  [
                    "see",
                    { "__kind": "heading", "description": "`markAsDirty()`" }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`markAsPristine()`\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "Configuration options that determine how the control propagates changes",
                      "type": "{ onlySelf?: boolean; }"
                    }
                  ]
                ],
                "signature": "markAsTouched(opts: {onlySelf?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "markAllAsTouched",
              "info": {
                "file": "packages/forms/src/model.ts#L499-L503",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Marks the control and all its descendant controls as `touched`."
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`markAsTouched()`\n"
                    }
                  ]
                ],
                "signature": "markAllAsTouched(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "markAsUntouched",
              "info": {
                "file": "packages/forms/src/model.ts#L520-L531",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Marks the control as `untouched`.\n\nIf the control has any children, also marks all children as `untouched`\nand recalculates the `touched` status of all parent controls.\n"
                    }
                  ],
                  [
                    "see",
                    { "__kind": "heading", "description": "`markAsTouched()`" }
                  ],
                  [
                    "see",
                    { "__kind": "heading", "description": "`markAsDirty()`" }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`markAsPristine()`\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "Configuration options that determine how the control propagates changes",
                      "type": "{ onlySelf?: boolean; }"
                    }
                  ]
                ],
                "signature": "markAsUntouched(opts: {onlySelf?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "markAsDirty",
              "info": {
                "file": "packages/forms/src/model.ts#L546-L552",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Marks the control as `dirty`. A control becomes dirty when\nthe control's value is changed through the UI; compare `markAsTouched`.\n"
                    }
                  ],
                  [
                    "see",
                    { "__kind": "heading", "description": "`markAsTouched()`" }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`markAsUntouched()`"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`markAsPristine()`\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "Configuration options that determine how the control propagates changes",
                      "type": "{ onlySelf?: boolean; }"
                    }
                  ]
                ],
                "signature": "markAsDirty(opts: {onlySelf?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "markAsPristine",
              "info": {
                "file": "packages/forms/src/model.ts#L570-L581",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Marks the control as `pristine`.\n\nIf the control has any children, marks all children as `pristine`,\nand recalculates the `pristine` status of all parent\ncontrols.\n"
                    }
                  ],
                  [
                    "see",
                    { "__kind": "heading", "description": "`markAsTouched()`" }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`markAsUntouched()`"
                    }
                  ],
                  [
                    "see",
                    { "__kind": "heading", "description": "`markAsDirty()`\n" }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "Configuration options that determine how the control emits events after",
                      "type": "{ onlySelf?: boolean; }"
                    }
                  ]
                ],
                "signature": "markAsPristine(opts: {onlySelf?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "markAsPending",
              "info": {
                "file": "packages/forms/src/model.ts#L599-L609",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Marks the control as `pending`.\n\nA control is pending while the control performs async validation.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "{@link AbstractControl.status}\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "Configuration options that determine how the control propagates changes and",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "markAsPending(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "disable",
              "info": {
                "file": "packages/forms/src/model.ts#L628-L647",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Disables the control. This means the control is exempt from validation checks and\nexcluded from the aggregate value of any parent. Its status is `DISABLED`.\n\nIf the control has children, all children are also disabled.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "{@link AbstractControl.status}\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "Configuration options that determine how the control propagates",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "disable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "enable",
              "info": {
                "file": "packages/forms/src/model.ts#L667-L680",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Enables the control. This means the control is included in validation checks and\nthe aggregate value of its parent. Its status recalculates based on its value and\nits validators.\n\nBy default, if the control has children, all children are enabled.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "{@link AbstractControl.status}\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "Configure options that control how the control propagates changes and",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "enable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setParent",
              "info": {
                "file": "packages/forms/src/model.ts#L696-L698",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "parent",
                      "description": "Sets the parent of the control",
                      "type": "FormGroup | FormArray"
                    }
                  ]
                ],
                "signature": "setParent(parent: FormGroup|FormArray): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setValue",
              "info": {
                "file": "packages/forms/src/model.ts#L703-L703",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the value of the control. Abstract method (implemented in sub-classes).\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "Object"
                    }
                  ]
                ],
                "signature": "abstract setValue(value: any, options?: Object): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "patchValue",
              "info": {
                "file": "packages/forms/src/model.ts#L708-L708",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Patches the value of the control. Abstract method (implemented in sub-classes).\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "Object"
                    }
                  ]
                ],
                "signature": "abstract patchValue(value: any, options?: Object): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "reset",
              "info": {
                "file": "packages/forms/src/model.ts#L713-L713",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Resets the control. Abstract method (implemented in sub-classes).\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "Object"
                    }
                  ]
                ],
                "signature": "abstract reset(value?: any, options?: Object): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "updateValueAndValidity",
              "info": {
                "file": "packages/forms/src/model.ts#L729-L751",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Recalculates the value and validation status of the control.\n\nBy default, it also updates the value and validity of its ancestors.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "Configuration options determine how the control propagates changes and emits events",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "updateValueAndValidity(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_updateTreeValidity",
              "info": {
                "file": "packages/forms/src/model.ts#L754-L757",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "",
                      "type": "{ emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "_updateTreeValidity(opts: {emitEvent?: boolean} = {emitEvent: true});"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setErrors",
              "info": {
                "file": "packages/forms/src/model.ts#L812-L815",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets errors on a form control when running validations manually, rather than automatically.\n\nCalling `setErrors` also updates the validity of the parent control.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Manually set the errors for a control\n\n```\nconst login = new FormControl('someLogin');\nlogin.setErrors({\nnotUnique: true\n});\n\nexpect(login.valid).toEqual(false);\nexpect(login.errors).toEqual({ notUnique: true });\n\nlogin.setValue('someOtherLogin');\n\nexpect(login.valid).toEqual(true);\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "errors",
                      "description": "",
                      "type": "ValidationErrors"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "",
                      "type": "{ emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "setErrors(errors: ValidationErrors|null, opts: {emitEvent?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/forms/src/model.ts#L834-L836",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves a child control given the control's name or path.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "A dot-delimited string or array of string/number values that define the path to the",
                      "type": "string | (string | number)[]"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Retrieve a nested control\n\nFor example, to get a `name` control nested within a `person` sub-group:\n\n* `this.form.get('person.name');`\n\n-OR-\n\n* `this.form.get(['person', 'name']);`\n"
                    }
                  ]
                ],
                "signature": "get(path: Array<string|number>|string): AbstractControl|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getError",
              "info": {
                "file": "packages/forms/src/model.ts#L865-L868",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nReports error data for the control with the given path.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "errorCode",
                      "description": "The code of the error to check",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "A list of control names that designates how to move from the current control",
                      "type": "string | (string | number)[]"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\nFor example, for the following `FormGroup`:\n\n```\nform = new FormGroup({\naddress: new FormGroup({ street: new FormControl() })\n});\n```\n\nThe path to the 'street' control from the root form would be 'address' -> 'street'.\n\nIt can be provided to this method in one of two formats:\n\n1. An array of string control names, e.g. `['address', 'street']`\n1. A period-delimited list of control names in one string, e.g. `'address.street'`\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "error data for that particular error. If the control or error is not present,\nnull is returned.\n"
                    }
                  ]
                ],
                "signature": "getError(errorCode: string, path?: Array<string|number>|string): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasError",
              "info": {
                "file": "packages/forms/src/model.ts#L900-L902",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nReports whether the control with the given path has the error specified.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "errorCode",
                      "description": "The code of the error to check",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "path",
                      "description": "A list of control names that designates how to move from the current control",
                      "type": "string | (string | number)[]"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\nFor example, for the following `FormGroup`:\n\n```\nform = new FormGroup({\naddress: new FormGroup({ street: new FormControl() })\n});\n```\n\nThe path to the 'street' control from the root form would be 'address' -> 'street'.\n\nIt can be provided to this method in one of two formats:\n\n1. An array of string control names, e.g. `['address', 'street']`\n1. A period-delimited list of control names in one string, e.g. `'address.street'`\n\nIf no path is given, this method checks for the error on the current control.\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "whether the given error is present in the control at the given path.\n\nIf the control is not present, false is returned.\n"
                    }
                  ]
                ],
                "signature": "hasError(errorCode: string, path?: Array<string|number>|string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_updateControlsErrors",
              "info": {
                "file": "packages/forms/src/model.ts#L918-L928",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "emitEvent",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "_updateControlsErrors(emitEvent: boolean): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_initObservables",
              "info": {
                "file": "packages/forms/src/model.ts#L931-L934",
                "info": [],
                "signature": "_initObservables();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_updateValue",
              "info": {
                "file": "packages/forms/src/model.ts#L946-L946",
                "info": [],
                "signature": "abstract _updateValue(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_forEachChild",
              "info": {
                "file": "packages/forms/src/model.ts#L949-L949",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cb",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "abstract _forEachChild(cb: Function): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_anyControls",
              "info": {
                "file": "packages/forms/src/model.ts#L952-L952",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "condition",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "abstract _anyControls(condition: Function): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_allControlsDisabled",
              "info": {
                "file": "packages/forms/src/model.ts#L955-L955",
                "info": [],
                "signature": "abstract _allControlsDisabled(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_syncPendingControls",
              "info": {
                "file": "packages/forms/src/model.ts#L958-L958",
                "info": [],
                "signature": "abstract _syncPendingControls(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_anyControlsHaveStatus",
              "info": {
                "file": "packages/forms/src/model.ts#L961-L963",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "status",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "_anyControlsHaveStatus(status: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_anyControlsDirty",
              "info": {
                "file": "packages/forms/src/model.ts#L966-L968",
                "info": [],
                "signature": "_anyControlsDirty(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_anyControlsTouched",
              "info": {
                "file": "packages/forms/src/model.ts#L971-L973",
                "info": [],
                "signature": "_anyControlsTouched(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_updatePristine",
              "info": {
                "file": "packages/forms/src/model.ts#L976-L982",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "",
                      "type": "{ onlySelf?: boolean; }"
                    }
                  ]
                ],
                "signature": "_updatePristine(opts: {onlySelf?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_updateTouched",
              "info": {
                "file": "packages/forms/src/model.ts#L985-L991",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "",
                      "type": "{ onlySelf?: boolean; }"
                    }
                  ]
                ],
                "signature": "_updateTouched(opts: {onlySelf?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_isBoxedValue",
              "info": {
                "file": "packages/forms/src/model.ts#L997-L1000",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "formState",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "_isBoxedValue(formState: any): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_registerOnCollectionChange",
              "info": {
                "file": "packages/forms/src/model.ts#L1003-L1005",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "() => void"
                    }
                  ]
                ],
                "signature": "_registerOnCollectionChange(fn: () => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_setUpdateStrategy",
              "info": {
                "file": "packages/forms/src/model.ts#L1008-L1012",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "",
                      "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions"
                    }
                  ]
                ],
                "signature": "_setUpdateStrategy(opts?: ValidatorFn|ValidatorFn[]|AbstractControlOptions|null): void;"
              }
            }
          ]
        ],
        "signature": "class AbstractControl {\n  _pendingDirty!: boolean;\n  _hasOwnPendingAsyncValidator = false;\n  _pendingTouched!: boolean;\n  _onCollectionChange = () => {};\n  _updateOn!: FormHooks;\n  public readonly value: any;\n  public readonly status!: string;\n  public readonly errors!: ValidationErrors | null;\n  public readonly pristine: boolean = true;\n  public readonly touched: boolean = false;\n  public readonly valueChanges!: Observable<any>;\n  public readonly statusChanges!: Observable<any>;\n  _onDisabledChange: Function[] = [];\n\n  setValidators(newValidator: ValidatorFn | ValidatorFn[] | null): void;\n  setAsyncValidators(\n    newValidator: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ): void;\n  clearValidators(): void;\n  clearAsyncValidators(): void;\n  markAsTouched(opts: { onlySelf?: boolean } = {}): void;\n  markAllAsTouched(): void;\n  markAsUntouched(opts: { onlySelf?: boolean } = {}): void;\n  markAsDirty(opts: { onlySelf?: boolean } = {}): void;\n  markAsPristine(opts: { onlySelf?: boolean } = {}): void;\n  markAsPending(opts: { onlySelf?: boolean; emitEvent?: boolean } = {}): void;\n  disable(opts: { onlySelf?: boolean; emitEvent?: boolean } = {}): void;\n  enable(opts: { onlySelf?: boolean; emitEvent?: boolean } = {}): void;\n  setParent(parent: FormGroup | FormArray): void;\n  abstract setValue(value: any, options?: Object): void;\n  abstract patchValue(value: any, options?: Object): void;\n  abstract reset(value?: any, options?: Object): void;\n  updateValueAndValidity(\n    opts: { onlySelf?: boolean; emitEvent?: boolean } = {}\n  ): void;\n  _updateTreeValidity(opts: { emitEvent?: boolean } = { emitEvent: true });\n  setErrors(\n    errors: ValidationErrors | null,\n    opts: { emitEvent?: boolean } = {}\n  ): void;\n  get(path: Array<string | number> | string): AbstractControl | null;\n  getError(errorCode: string, path?: Array<string | number> | string): any;\n  hasError(errorCode: string, path?: Array<string | number> | string): boolean;\n  _updateControlsErrors(emitEvent: boolean): void;\n  _initObservables();\n  abstract _updateValue(): void;\n  abstract _forEachChild(cb: Function): void;\n  abstract _anyControls(condition: Function): boolean;\n  abstract _allControlsDisabled(): boolean;\n  abstract _syncPendingControls(): boolean;\n  _anyControlsHaveStatus(status: string): boolean;\n  _anyControlsDirty(): boolean;\n  _anyControlsTouched(): boolean;\n  _updatePristine(opts: { onlySelf?: boolean } = {}): void;\n  _updateTouched(opts: { onlySelf?: boolean } = {}): void;\n  _isBoxedValue(formState: any): boolean;\n  _registerOnCollectionChange(fn: () => void): void;\n  _setUpdateStrategy(\n    opts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null\n  ): void;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "forms",
    "name": "AbstractControlOptions",
    "overloads": [
      {
        "file": "packages/forms/src/model.ts#L113-L129",
        "signature": "interface AbstractControlOptions {\n  validators?: ValidatorFn | ValidatorFn[] | null;\n  asyncValidators?: AsyncValidatorFn | AsyncValidatorFn[] | null;\n  updateOn?: \"change\" | \"blur\" | \"submit\";\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Interface for options provided to an `AbstractControl`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "validators",
              "description": "",
              "type": "ValidatorFn | ValidatorFn[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "asyncValidators",
              "description": "",
              "type": "AsyncValidatorFn | AsyncValidatorFn[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "updateOn",
              "description": "",
              "type": "\"change\" | \"blur\" | \"submit\""
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "FormArray",
    "overloads": [
      {
        "file": "packages/forms/src/model.ts#L1804-L2158",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Tracks the value and validity state of an array of `FormControl`,\n`FormGroup` or `FormArray` instances.\n\nA `FormArray` aggregates the values of each child `FormControl` into an array.\nIt calculates its status by reducing the status values of its children. For example, if one of\nthe controls in a `FormArray` is invalid, the entire array becomes invalid.\n\n`FormArray` is one of the three fundamental building blocks used to define forms in Angular,\nalong with `FormControl` and `FormGroup`.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Create an array of form controls\n\n```\nconst arr = new FormArray([\nnew FormControl('Nancy', Validators.minLength(2)),\nnew FormControl('Drew'),\n]);\n\nconsole.log(arr.value);   // ['Nancy', 'Drew']\nconsole.log(arr.status);  // 'VALID'\n```\n\n### Create a form array with array-level validators\n\nYou include array-level validators and async validators. These come in handy\nwhen you want to perform validation that considers the value of more than one child\ncontrol.\n\nThe two types of validators are passed in separately as the second and third arg\nrespectively, or together as part of an options object.\n\n```\nconst arr = new FormArray([\nnew FormControl('Nancy'),\nnew FormControl('Drew')\n], {validators: myValidator, asyncValidators: myAsyncValidator});\n```\n\n### Set the updateOn property for all controls in a form array\n\nThe options object is used to set a default value for each child\ncontrol's `updateOn` property. If you set `updateOn` to `'blur'` at the\narray level, all child controls default to 'blur', unless the child\nhas explicitly specified a different `updateOn` value.\n\n```ts\nconst arr = new FormArray([\nnew FormControl()\n], {updateOn: 'blur'});\n```\n\n### Adding or removing controls from a form array\n\nTo change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\nin `FormArray` itself. These methods ensure the controls are properly tracked in the\nform's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\nthe `FormArray` directly, as that result in strange and unexpected behavior such\nas broken change detection.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "at",
              "info": {
                "file": "packages/forms/src/model.ts#L1834-L1836",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get the `AbstractControl` at the given `index` in the array.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "Index in the array to retrieve the control",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "at(index: number): AbstractControl;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "push",
              "info": {
                "file": "packages/forms/src/model.ts#L1843-L1848",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Insert a new `AbstractControl` at the end of the array.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "Form control to be inserted",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "push(control: AbstractControl): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "insert",
              "info": {
                "file": "packages/forms/src/model.ts#L1856-L1861",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Insert a new `AbstractControl` at the given `index` in the array.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "Index in the array to insert the control",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "Form control to be inserted",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "insert(index: number, control: AbstractControl): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeAt",
              "info": {
                "file": "packages/forms/src/model.ts#L1868-L1872",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove the control at the given `index` in the array.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "Index in the array to remove the control",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "removeAt(index: number): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setControl",
              "info": {
                "file": "packages/forms/src/model.ts#L1880-L1891",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Replace an existing control.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "Index in the array to replace the control",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "The `AbstractControl` control to replace the existing control",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "setControl(index: number, control: AbstractControl): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setValue",
              "info": {
                "file": "packages/forms/src/model.ts#L1935-L1942",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the value of the `FormArray`. It accepts an array that matches\nthe structure of the control.\n\nThis method performs strict checks, and throws an error if you try\nto set the value of a control that doesn't exist or if you exclude the\nvalue of a control.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Set the values for the controls in the form array\n\n```\nconst arr = new FormArray([\nnew FormControl(),\nnew FormControl()\n]);\nconsole.log(arr.value);   // [null, null]\n\narr.setValue(['Nancy', 'Drew']);\nconsole.log(arr.value);   // ['Nancy', 'Drew']\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "Array of values for the controls",
                      "type": "any[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "Configure options that determine how the control propagates changes and",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "setValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "patchValue",
              "info": {
                "file": "packages/forms/src/model.ts#L1978-L1985",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Patches the value of the `FormArray`. It accepts an array that matches the\nstructure of the control, and does its best to match the values to the correct\ncontrols in the group.\n\nIt accepts both super-sets and sub-sets of the array without throwing an error.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Patch the values for controls in a form array\n\n```\nconst arr = new FormArray([\nnew FormControl(),\nnew FormControl()\n]);\nconsole.log(arr.value);   // [null, null]\n\narr.patchValue(['Nancy']);\nconsole.log(arr.value);   // ['Nancy', null]\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "Array of latest values for the controls",
                      "type": "any[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "Configure options that determine how the control propagates changes and",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "patchValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "reset",
              "info": {
                "file": "packages/forms/src/model.ts#L2033-L2040",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\nvalue of all descendants to null or null maps.\n\nYou reset to a specific form state by passing in an array of states\nthat matches the structure of the control. The state is a standalone value\nor a form state object with both a value and a disabled status.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Reset the values in a form array\n\n```ts\nconst arr = new FormArray([\nnew FormControl(),\nnew FormControl()\n]);\narr.reset(['name', 'last name']);\n\nconsole.log(this.arr.value);  // ['name', 'last name']\n```\n\n### Reset the values in a form array and the disabled status for the first control\n\n```\nthis.arr.reset([\n{value: 'name', disabled: true},\n'last'\n]);\n\nconsole.log(this.arr.value);  // ['name', 'last name']\nconsole.log(this.arr.get(0).status);  // 'DISABLED'\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "Array of values for the controls",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "Configure options that determine how the control propagates changes and",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "reset(value: any = [], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getRawValue",
              "info": {
                "file": "packages/forms/src/model.ts#L2048-L2052",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "The aggregate value of the array, including any disabled controls.\n\nReports all values regardless of disabled status.\nFor enabled controls only, the `value` property is the best way to get the value of the array.\n"
                    }
                  ]
                ],
                "signature": "getRawValue(): any[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clear",
              "info": {
                "file": "packages/forms/src/model.ts#L2084-L2089",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove all controls in the `FormArray`.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Remove all elements from a FormArray\n\n```ts\nconst arr = new FormArray([\nnew FormControl(),\nnew FormControl()\n]);\nconsole.log(arr.length);  // 2\n\narr.clear();\nconsole.log(arr.length);  // 0\n```\n\nIt's a simpler and more efficient alternative to removing all elements one by one:\n\n```ts\nconst arr = new FormArray([\nnew FormControl(),\nnew FormControl()\n]);\n\nwhile (arr.length) {\narr.removeAt(0);\n}\n```\n"
                    }
                  ]
                ],
                "signature": "clear(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_syncPendingControls",
              "info": {
                "file": "packages/forms/src/model.ts#L2092-L2098",
                "info": [],
                "signature": "_syncPendingControls(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_throwIfControlMissing",
              "info": {
                "file": "packages/forms/src/model.ts#L2101-L2111",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "index",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "_throwIfControlMissing(index: number): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_forEachChild",
              "info": {
                "file": "packages/forms/src/model.ts#L2114-L2118",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cb",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "_forEachChild(cb: Function): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_updateValue",
              "info": {
                "file": "packages/forms/src/model.ts#L2121-L2125",
                "info": [],
                "signature": "_updateValue(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_anyControls",
              "info": {
                "file": "packages/forms/src/model.ts#L2128-L2130",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "condition",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "_anyControls(condition: Function): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_setUpControls",
              "info": {
                "file": "packages/forms/src/model.ts#L2133-L2135",
                "info": [],
                "signature": "_setUpControls(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_checkAllValuesPresent",
              "info": {
                "file": "packages/forms/src/model.ts#L2138-L2144",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "_checkAllValuesPresent(value: any): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_allControlsDisabled",
              "info": {
                "file": "packages/forms/src/model.ts#L2147-L2152",
                "info": [],
                "signature": "_allControlsDisabled(): boolean;"
              }
            }
          ]
        ],
        "signature": "class FormArray extends AbstractControl {\n  at(index: number): AbstractControl;\n  push(control: AbstractControl): void;\n  insert(index: number, control: AbstractControl): void;\n  removeAt(index: number): void;\n  setControl(index: number, control: AbstractControl): void;\n  setValue(\n    value: any[],\n    options: { onlySelf?: boolean; emitEvent?: boolean } = {}\n  ): void;\n  patchValue(\n    value: any[],\n    options: { onlySelf?: boolean; emitEvent?: boolean } = {}\n  ): void;\n  reset(\n    value: any = [],\n    options: { onlySelf?: boolean; emitEvent?: boolean } = {}\n  ): void;\n  getRawValue(): any[];\n  clear(): void;\n  _syncPendingControls(): boolean;\n  _throwIfControlMissing(index: number): void;\n  _forEachChild(cb: Function): void;\n  _updateValue(): void;\n  _anyControls(condition: Function): boolean;\n  _setUpControls(): void;\n  _checkAllValuesPresent(value: any): void;\n  _allControlsDisabled(): boolean;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "FormControl",
    "overloads": [
      {
        "file": "packages/forms/src/model.ts#L1122-L1310",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Tracks the value and validation status of an individual form control.\n\nThis is one of the three fundamental building blocks of Angular forms, along with\n`FormGroup` and `FormArray`. It extends the `AbstractControl` class that\nimplements most of the base functionality for accessing the value, validation status,\nuser interactions and events. See [usage examples below](#usage-notes).\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`AbstractControl`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Reactive Forms Guide](guide/reactive-forms)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Usage Notes](#usage-notes)\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Initializing Form Controls\n\nInstantiate a `FormControl`, with an initial value.\n\n```ts\nconst control = new FormControl('some value');\nconsole.log(control.value);     // 'some value'\n``\n\nThe following example initializes the control with a form state object. The `value`\nand `disabled` keys are required in this case.\n\n```ts\nconst control = new FormControl({ value: 'n/a', disabled: true });\nconsole.log(control.value);     // 'n/a'\nconsole.log(control.status);    // 'DISABLED'\n```\n\nThe following example initializes the control with a sync validator.\n\n```ts\nconst control = new FormControl('', Validators.required);\nconsole.log(control.value);      // ''\nconsole.log(control.status);     // 'INVALID'\n```\n\nThe following example initializes the control using an options object.\n\n```ts\nconst control = new FormControl('', {\nvalidators: Validators.required,\nasyncValidators: myAsyncValidator\n});\n```\n\n### Configure the control to update on a blur event\n\nSet the `updateOn` option to `'blur'` to update on the blur `event`.\n\n```ts\nconst control = new FormControl('', { updateOn: 'blur' });\n```\n\n### Configure the control to update on a submit event\n\nSet the `updateOn` option to `'submit'` to update on a submit `event`.\n\n```ts\nconst control = new FormControl('', { updateOn: 'submit' });\n```\n\n### Reset the control back to an initial value\n\nYou reset to a specific form state by passing through a standalone\nvalue or a form state object that contains both a value and a disabled state\n(these are the only two properties that cannot be calculated).\n\n```ts\nconst control = new FormControl('Nancy');\n\nconsole.log(control.value); // 'Nancy'\n\ncontrol.reset('Drew');\n\nconsole.log(control.value); // 'Drew'\n```\n\n### Reset the control back to an initial value and disabled\n\n```\nconst control = new FormControl('Nancy');\n\nconsole.log(control.value); // 'Nancy'\nconsole.log(control.status); // 'VALID'\n\ncontrol.reset({ value: 'Drew', disabled: true });\n\nconsole.log(control.value); // 'Drew'\nconsole.log(control.status); // 'DISABLED'\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_onChange",
              "description": "",
              "type": "Function[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_pendingValue",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_pendingChange",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setValue",
              "info": {
                "file": "packages/forms/src/model.ts#L1179-L1191",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets a new value for the form control.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value for the control.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "Configuration options that determine how the control propagates changes",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; emitModelToViewChange?: boolean; emitViewToModelChange?: boolean; }"
                    }
                  ]
                ],
                "signature": "setValue(value: any, options: {  onlySelf?: boolean,  emitEvent?: boolean,  emitModelToViewChange?: boolean,  emitViewToModelChange?: boolean } = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "patchValue",
              "info": {
                "file": "packages/forms/src/model.ts#L1202-L1209",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Patches the value of a control.\n\nThis function is functionally the same as {@link FormControl#setValue setValue} at this level.\nIt exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n`FormArrays`, where it does behave differently.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`setValue` for options\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; emitModelToViewChange?: boolean; emitViewToModelChange?: boolean; }"
                    }
                  ]
                ],
                "signature": "patchValue(value: any, options: {  onlySelf?: boolean,  emitEvent?: boolean,  emitModelToViewChange?: boolean,  emitViewToModelChange?: boolean } = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "reset",
              "info": {
                "file": "packages/forms/src/model.ts#L1229-L1235",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Resets the form control, marking it `pristine` and `untouched`, and setting\nthe value to null.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "formState",
                      "description": "Resets the control with an initial value,",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "Configuration options that determine how the control propagates changes",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "reset(formState: any = null, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_updateValue",
              "info": {
                "file": "packages/forms/src/model.ts#L1240-L1240",
                "info": [
                  ["internal", { "__kind": "heading", "description": "\n" }]
                ],
                "signature": "_updateValue();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_anyControls",
              "info": {
                "file": "packages/forms/src/model.ts#L1245-L1247",
                "info": [
                  ["internal", { "__kind": "heading", "description": "\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "condition",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "_anyControls(condition: Function): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_allControlsDisabled",
              "info": {
                "file": "packages/forms/src/model.ts#L1252-L1254",
                "info": [
                  ["internal", { "__kind": "heading", "description": "\n" }]
                ],
                "signature": "_allControlsDisabled(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnChange",
              "info": {
                "file": "packages/forms/src/model.ts#L1261-L1263",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register a listener for change events.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The method that is called when the value changes",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "registerOnChange(fn: Function): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_clearChangeFns",
              "info": {
                "file": "packages/forms/src/model.ts#L1268-L1272",
                "info": [
                  ["internal", { "__kind": "heading", "description": "\n" }]
                ],
                "signature": "_clearChangeFns(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerOnDisabledChange",
              "info": {
                "file": "packages/forms/src/model.ts#L1279-L1281",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register a listener for disabled events.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "The method that is called when the disabled status changes.",
                      "type": "(isDisabled: boolean) => void"
                    }
                  ]
                ],
                "signature": "registerOnDisabledChange(fn: (isDisabled: boolean) => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_forEachChild",
              "info": {
                "file": "packages/forms/src/model.ts#L1286-L1286",
                "info": [
                  ["internal", { "__kind": "heading", "description": "\n" }],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cb",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "_forEachChild(cb: Function): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_syncPendingControls",
              "info": {
                "file": "packages/forms/src/model.ts#L1289-L1299",
                "info": [],
                "signature": "_syncPendingControls(): boolean;"
              }
            }
          ]
        ],
        "signature": "class FormControl extends AbstractControl {\n  _onChange: Function[] = [];\n  _pendingValue: any;\n  _pendingChange: any;\n\n  setValue(\n    value: any,\n    options: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n      emitModelToViewChange?: boolean;\n      emitViewToModelChange?: boolean;\n    } = {}\n  ): void;\n  patchValue(\n    value: any,\n    options: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n      emitModelToViewChange?: boolean;\n      emitViewToModelChange?: boolean;\n    } = {}\n  ): void;\n  reset(\n    formState: any = null,\n    options: { onlySelf?: boolean; emitEvent?: boolean } = {}\n  ): void;\n  _anyControls(condition: Function): boolean;\n  _allControlsDisabled(): boolean;\n  registerOnChange(fn: Function): void;\n  _clearChangeFns(): void;\n  registerOnDisabledChange(fn: (isDisabled: boolean) => void): void;\n  _syncPendingControls(): boolean;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "FormGroup",
    "overloads": [
      {
        "file": "packages/forms/src/model.ts#L1384-L1738",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Tracks the value and validity state of a group of `FormControl` instances.\n\nA `FormGroup` aggregates the values of each child `FormControl` into one object,\nwith each control name as the key.  It calculates its status by reducing the status values\nof its children. For example, if one of the controls in a group is invalid, the entire\ngroup becomes invalid.\n\n`FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\nalong with `FormControl` and `FormArray`.\n\nWhen instantiating a `FormGroup`, pass in a collection of child controls as the first\nargument. The key for each child registers the name for the control.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Create a form group with 2 controls\n\n```\nconst form = new FormGroup({\nfirst: new FormControl('Nancy', Validators.minLength(2)),\nlast: new FormControl('Drew'),\n});\n\nconsole.log(form.value);   // {first: 'Nancy', last; 'Drew'}\nconsole.log(form.status);  // 'VALID'\n```\n\n### Create a form group with a group-level validator\n\nYou include group-level validators as the second arg, or group-level async\nvalidators as the third arg. These come in handy when you want to perform validation\nthat considers the value of more than one child control.\n\n```\nconst form = new FormGroup({\npassword: new FormControl('', Validators.minLength(2)),\npasswordConfirm: new FormControl('', Validators.minLength(2)),\n}, passwordMatchValidator);\n\n\nfunction passwordMatchValidator(g: FormGroup) {\nreturn g.get('password').value === g.get('passwordConfirm').value\n? null : {'mismatch': true};\n}\n```\n\nLike `FormControl` instances, you choose to pass in\nvalidators and async validators as part of an options object.\n\n```\nconst form = new FormGroup({\npassword: new FormControl('')\npasswordConfirm: new FormControl('')\n}, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n```\n\n### Set the updateOn property for all controls in a form group\n\nThe options object is used to set a default value for each child\ncontrol's `updateOn` property. If you set `updateOn` to `'blur'` at the\ngroup level, all child controls default to 'blur', unless the child\nhas explicitly specified a different `updateOn` value.\n\n```ts\nconst c = new FormGroup({\none: new FormControl()\n}, { updateOn: 'blur' });\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "registerControl",
              "info": {
                "file": "packages/forms/src/model.ts#L1418-L1424",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Registers a control with the group's list of controls.\n\nThis method does not update the value or validity of the control.\nUse {@link FormGroup#addControl addControl} instead.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "The control name to register in the collection",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "Provides the control for the given name",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "registerControl(name: string, control: AbstractControl): AbstractControl;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addControl",
              "info": {
                "file": "packages/forms/src/model.ts#L1434-L1438",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Add a control to this group.\n\nThis method also updates the value and validity of the control.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "The control name to add to the collection",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "Provides the control for the given name",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "addControl(name: string, control: AbstractControl): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeControl",
              "info": {
                "file": "packages/forms/src/model.ts#L1445-L1450",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove a control from this group.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "The control name to remove from the collection",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "removeControl(name: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setControl",
              "info": {
                "file": "packages/forms/src/model.ts#L1458-L1464",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Replace an existing control.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "The control name to replace in the collection",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "Provides the control for the given name",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "setControl(name: string, control: AbstractControl): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "contains",
              "info": {
                "file": "packages/forms/src/model.ts#L1476-L1478",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Check whether there is an enabled control with the given name in the group.\n\nReports false for disabled controls. If you'd like to check for existence in the group\nonly, use {@link AbstractControl#get get} instead.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "controlName",
                      "description": "The control name to check for existence in the collection",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "false for disabled controls, true otherwise.\n"
                    }
                  ]
                ],
                "signature": "contains(controlName: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setValue",
              "info": {
                "file": "packages/forms/src/model.ts#L1515-L1523",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets the value of the `FormGroup`. It accepts an object that matches\nthe structure of the group, with control names as keys.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Set the complete value for the form group\n\n```\nconst form = new FormGroup({\nfirst: new FormControl(),\nlast: new FormControl()\n});\n\nconsole.log(form.value);   // {first: null, last: null}\n\nform.setValue({first: 'Nancy', last: 'Drew'});\nconsole.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n```\n"
                    }
                  ],
                  [
                    "throws",
                    {
                      "__kind": "heading",
                      "description": "When strict checks fail, such as setting the value of a control\nthat doesn't exist or if you exclude a value of a control that does exist.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The new value for the control that matches the structure of the group.",
                      "type": "{ [key: string]: any; }"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "Configuration options that determine how the control propagates changes",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "setValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):   void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "patchValue",
              "info": {
                "file": "packages/forms/src/model.ts#L1558-L1566",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Patches the value of the `FormGroup`. It accepts an object with control\nnames as keys, and does its best to match the values to the correct controls\nin the group.\n\nIt accepts both super-sets and sub-sets of the group without throwing an error.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Patch the value for a form group\n\n```\nconst form = new FormGroup({\nfirst: new FormControl(),\nlast: new FormControl()\n});\nconsole.log(form.value);   // {first: null, last: null}\n\nform.patchValue({first: 'Nancy'});\nconsole.log(form.value);   // {first: 'Nancy', last: null}\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "The object that matches the structure of the group.",
                      "type": "{ [key: string]: any; }"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "Configuration options that determine how the control propagates changes and",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ]
                ],
                "signature": "patchValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):   void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "reset",
              "info": {
                "file": "packages/forms/src/model.ts#L1625-L1632",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\nthe value of all descendants to null.\n\nYou reset to a specific form state by passing in a map of states\nthat matches the structure of your form, with control names as keys. The state\nis a standalone value or a form state object with both a value and a disabled\nstatus.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "Resets the control with an initial value,",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "Configuration options that determine how the control propagates changes",
                      "type": "{ onlySelf?: boolean; emitEvent?: boolean; }"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Reset the form group values\n\n```ts\nconst form = new FormGroup({\nfirst: new FormControl('first name'),\nlast: new FormControl('last name')\n});\n\nconsole.log(form.value);  // {first: 'first name', last: 'last name'}\n\nform.reset({ first: 'name', last: 'last name' });\n\nconsole.log(form.value);  // {first: 'name', last: 'last name'}\n```\n\n### Reset the form group values and disabled status\n\n```\nconst form = new FormGroup({\nfirst: new FormControl('first name'),\nlast: new FormControl('last name')\n});\n\nform.reset({\nfirst: {value: 'name', disabled: true},\nlast: 'last'\n});\n\nconsole.log(this.form.value);  // {first: 'name', last: 'last name'}\nconsole.log(this.form.get('first').status);  // 'DISABLED'\n```\n"
                    }
                  ]
                ],
                "signature": "reset(value: any = {}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getRawValue",
              "info": {
                "file": "packages/forms/src/model.ts#L1641-L1647",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "The aggregate value of the `FormGroup`, including any disabled controls.\n\nRetrieves all values regardless of disabled status.\nThe `value` property is the best way to get the value of the group, because\nit excludes disabled controls in the `FormGroup`.\n"
                    }
                  ]
                ],
                "signature": "getRawValue(): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_syncPendingControls",
              "info": {
                "file": "packages/forms/src/model.ts#L1650-L1656",
                "info": [],
                "signature": "_syncPendingControls(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_throwIfControlMissing",
              "info": {
                "file": "packages/forms/src/model.ts#L1659-L1669",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "_throwIfControlMissing(name: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_forEachChild",
              "info": {
                "file": "packages/forms/src/model.ts#L1672-L1674",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "cb",
                      "description": "",
                      "type": "(v: any, k: string) => void"
                    }
                  ]
                ],
                "signature": "_forEachChild(cb: (v: any, k: string) => void): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_setUpControls",
              "info": {
                "file": "packages/forms/src/model.ts#L1677-L1682",
                "info": [],
                "signature": "_setUpControls(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_updateValue",
              "info": {
                "file": "packages/forms/src/model.ts#L1685-L1687",
                "info": [],
                "signature": "_updateValue(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_anyControls",
              "info": {
                "file": "packages/forms/src/model.ts#L1690-L1698",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "condition",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "_anyControls(condition: Function): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_reduceValue",
              "info": {
                "file": "packages/forms/src/model.ts#L1701-L1709",
                "info": [],
                "signature": "_reduceValue();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_reduceChildren",
              "info": {
                "file": "packages/forms/src/model.ts#L1712-L1718",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "initValue",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "_reduceChildren(initValue: any, fn: Function);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_allControlsDisabled",
              "info": {
                "file": "packages/forms/src/model.ts#L1721-L1728",
                "info": [],
                "signature": "_allControlsDisabled(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_checkAllValuesPresent",
              "info": {
                "file": "packages/forms/src/model.ts#L1731-L1737",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "_checkAllValuesPresent(value: any): void;"
              }
            }
          ]
        ],
        "signature": "class FormGroup extends AbstractControl {\n  registerControl(name: string, control: AbstractControl): AbstractControl;\n  addControl(name: string, control: AbstractControl): void;\n  removeControl(name: string): void;\n  setControl(name: string, control: AbstractControl): void;\n  contains(controlName: string): boolean;\n  setValue(\n    value: { [key: string]: any },\n    options: { onlySelf?: boolean; emitEvent?: boolean } = {}\n  ): void;\n  patchValue(\n    value: { [key: string]: any },\n    options: { onlySelf?: boolean; emitEvent?: boolean } = {}\n  ): void;\n  reset(\n    value: any = {},\n    options: { onlySelf?: boolean; emitEvent?: boolean } = {}\n  ): void;\n  getRawValue(): any;\n  _syncPendingControls(): boolean;\n  _throwIfControlMissing(name: string): void;\n  _forEachChild(cb: (v: any, k: string) => void): void;\n  _setUpControls(): void;\n  _updateValue(): void;\n  _anyControls(condition: Function): boolean;\n  _reduceValue();\n  _reduceChildren(initValue: any, fn: Function);\n  _allControlsDisabled(): boolean;\n  _checkAllValuesPresent(value: any): void;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "forms",
    "name": "NG_ASYNC_VALIDATORS",
    "overloads": [
      {
        "file": "packages/forms/src/validators.ts#L65-L66",
        "signature": "const NG_ASYNC_VALIDATORS: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "forms",
    "name": "NG_VALIDATORS",
    "overloads": [
      {
        "file": "packages/forms/src/validators.ts#L54-L54",
        "signature": "const NG_VALIDATORS: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "Validators",
    "overloads": [
      {
        "file": "packages/forms/src/validators.ts#L112-L463",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nProvides a set of built-in validators that can be used by form controls.\n\nA validator is a function that processes a `FormControl` or collection of\ncontrols and returns an error map or null. A null map means that validation has passed.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Form Validation](/guide/form-validation)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "min",
              "info": {
                "file": "packages/forms/src/validators.ts#L134-L144",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nValidator that requires the control's value to be greater than or equal to the provided number.\nThe validator exists only as a function and not as a directive.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Validate against a minimum of 3\n\n```typescript\nconst control = new FormControl(2, Validators.min(3));\n\nconsole.log(control.errors); // {min: {min: 3, actual: 2}}\n```\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A validator function that returns an error map with the\n`min` property if the validation check fails, otherwise `null`.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "min",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "static min(min: number): ValidatorFn;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "max",
              "info": {
                "file": "packages/forms/src/validators.ts#L167-L177",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nValidator that requires the control's value to be less than or equal to the provided number.\nThe validator exists only as a function and not as a directive.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Validate against a maximum of 15\n\n```typescript\nconst control = new FormControl(16, Validators.max(15));\n\nconsole.log(control.errors); // {max: {max: 15, actual: 16}}\n```\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A validator function that returns an error map with the\n`max` property if the validation check fails, otherwise `null`.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "max",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "static max(max: number): ValidatorFn;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "required",
              "info": {
                "file": "packages/forms/src/validators.ts#L199-L201",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nValidator that requires the control have a non-empty value.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Validate that the field is non-empty\n\n```typescript\nconst control = new FormControl('', Validators.required);\n\nconsole.log(control.errors); // {required: true}\n```\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "An error map with the `required` property\nif the validation check fails, otherwise `null`.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "static required(control: AbstractControl): ValidationErrors|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "requiredTrue",
              "info": {
                "file": "packages/forms/src/validators.ts#L224-L226",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nValidator that requires the control's value be true. This validator is commonly\nused for required checkboxes.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Validate that the field value is true\n\n```typescript\nconst control = new FormControl('', Validators.requiredTrue);\n\nconsole.log(control.errors); // {required: true}\n```\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "An error map that contains the `required` property\nset to `true` if the validation check fails, otherwise `null`.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "static requiredTrue(control: AbstractControl): ValidationErrors|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "email",
              "info": {
                "file": "packages/forms/src/validators.ts#L264-L269",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nValidator that requires the control's value pass an email validation test.\n\nTests the value using a [regular\nexpression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\npattern suitable for common usecases. The pattern is based on the definition of a valid email\naddress in the [WHATWG HTML\nspecification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\nsome enhancements to incorporate more RFC rules (such as rules related to domain names and the\nlengths of different parts of the address).\n\nThe differences from the WHATWG version include:\n- Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).\n- Disallow `local-part` to be longer than 64 characters.\n- Disallow the whole address to be longer than 254 characters.\n\nIf this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\nvalidate the value against a different pattern.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Validate that the field matches a valid email pattern\n\n```typescript\nconst control = new FormControl('bad@', Validators.email);\n\nconsole.log(control.errors); // {email: true}\n```\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "An error map with the `email` property\nif the validation check fails, otherwise `null`.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "static email(control: AbstractControl): ValidationErrors|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "minLength",
              "info": {
                "file": "packages/forms/src/validators.ts#L301-L313",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nValidator that requires the length of the control's value to be greater than or equal\nto the provided minimum length. This validator is also provided by default if you use the\nthe HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used\nonly for types that have a numeric `length` property, such as strings or arrays. The\n`minLength` validator logic is also not invoked for values when their `length` property is 0\n(for example in case of an empty string or an empty array), to support optional controls. You\ncan use the standard `required` validator if empty values should not be considered valid.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Validate that the field has a minimum of 3 characters\n\n```typescript\nconst control = new FormControl('ng', Validators.minLength(3));\n\nconsole.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n```\n\n```html\n<input minlength=\"5\">\n```\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A validator function that returns an error map with the\n`minlength` if the validation check fails, otherwise `null`.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "minLength",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "static minLength(minLength: number): ValidatorFn;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "maxLength",
              "info": {
                "file": "packages/forms/src/validators.ts#L342-L348",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nValidator that requires the length of the control's value to be less than or equal\nto the provided maximum length. This validator is also provided by default if you use the\nthe HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used\nonly for types that have a numeric `length` property, such as strings or arrays.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Validate that the field has maximum of 5 characters\n\n```typescript\nconst control = new FormControl('Angular', Validators.maxLength(5));\n\nconsole.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n```\n\n```html\n<input maxlength=\"5\">\n```\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A validator function that returns an error map with the\n`maxlength` property if the validation check fails, otherwise `null`.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "maxLength",
                      "description": "",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "static maxLength(maxLength: number): ValidatorFn;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "pattern",
              "info": {
                "file": "packages/forms/src/validators.ts#L380-L406",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nValidator that requires the control's value to match a regex pattern. This validator is also\nprovided by default if you use the HTML5 `pattern` attribute.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n### Validate that the field only contains letters or spaces\n\n```typescript\nconst control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n\nconsole.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n```\n\n```html\n<input pattern=\"[a-zA-Z ]*\">\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "pattern",
                      "description": "A regular expression to be used as is to test the values, or a string.",
                      "type": "string | RegExp"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A validator function that returns an error map with the\n`pattern` property if the validation check fails, otherwise `null`.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ]
                ],
                "signature": "static pattern(pattern: string|RegExp): ValidatorFn;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "nullValidator",
              "info": {
                "file": "packages/forms/src/validators.ts#L415-L417",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nValidator that performs no operation.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "control",
                      "description": "",
                      "type": "AbstractControl"
                    }
                  ]
                ],
                "signature": "static nullValidator(control: AbstractControl): ValidationErrors|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compose",
              "info": {
                "file": "packages/forms/src/validators.ts#L432-L440",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "validators",
                      "description": "",
                      "type": "ValidatorFn[]"
                    }
                  ]
                ],
                "signature": "static compose(validators: (ValidatorFn|null|undefined)[]|null): ValidatorFn|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compose",
              "info": {
                "file": "packages/forms/src/validators.ts#L430-L430",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nCompose multiple validators into a single function that returns the union\nof the individual error maps for the provided control.\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A validator function that returns an error map with the\nmerged error maps of the validators if the validation check fails, otherwise `null`.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "validators",
                      "description": "",
                      "type": "null"
                    }
                  ]
                ],
                "signature": "static compose(validators: null): null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compose",
              "info": {
                "file": "packages/forms/src/validators.ts#L431-L431",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "validators",
                      "description": "",
                      "type": "ValidatorFn[]"
                    }
                  ]
                ],
                "signature": "static compose(validators: (ValidatorFn|null|undefined)[]): ValidatorFn|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "composeAsync",
              "info": {
                "file": "packages/forms/src/validators.ts#L453-L462",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nCompose multiple async validators into a single function that returns the union\nof the individual error objects for the provided control.\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A validator function that returns an error map with the\nmerged error objects of the async validators if the validation check fails, otherwise `null`.\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "`updateValueAndValidity()`\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "validators",
                      "description": "",
                      "type": "AsyncValidatorFn[]"
                    }
                  ]
                ],
                "signature": "static composeAsync(validators: (AsyncValidatorFn|null)[]): AsyncValidatorFn|null;"
              }
            }
          ]
        ],
        "signature": "class Validators {\n  static min(min: number): ValidatorFn;\n  static max(max: number): ValidatorFn;\n  static required(control: AbstractControl): ValidationErrors | null;\n  static requiredTrue(control: AbstractControl): ValidationErrors | null;\n  static email(control: AbstractControl): ValidationErrors | null;\n  static minLength(minLength: number): ValidatorFn;\n  static maxLength(maxLength: number): ValidatorFn;\n  static pattern(pattern: string | RegExp): ValidatorFn;\n  static nullValidator(control: AbstractControl): ValidationErrors | null;\n  static compose(\n    validators: (ValidatorFn | null | undefined)[] | null\n  ): ValidatorFn | null;\n  static compose(validators: null): null;\n  static compose(\n    validators: (ValidatorFn | null | undefined)[]\n  ): ValidatorFn | null;\n  static composeAsync(\n    validators: (AsyncValidatorFn | null)[]\n  ): AsyncValidatorFn | null;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "forms",
    "name": "VERSION",
    "overloads": [
      {
        "file": "packages/forms/src/version.ts#L20-L20",
        "signature": "const VERSION: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "FormsModule",
    "overloads": [
      {
        "file": "packages/forms/src/form_providers.ts#L24-L30",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Exports the required providers and directives for template-driven forms,\nmaking them available for import by NgModules that import this module.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Forms Overview](/guide/forms-overview)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Template-driven Forms Guide](/guide/forms)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class FormsModule {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "forms",
    "name": "ReactiveFormsModule",
    "overloads": [
      {
        "file": "packages/forms/src/form_providers.ts#L41-L65",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Exports the required infrastructure and directives for reactive forms,\nmaking them available for import by NgModules that import this module.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Forms Overview](guide/forms-overview)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Reactive Forms Guide](guide/reactive-forms)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "withConfig",
              "info": {
                "file": "packages/forms/src/form_providers.ts#L55-L64",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "\nProvides options for configuring the reactive forms module.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "An object of configuration options",
                      "type": "{ warnOnNgModelWithFormControl: 'never' | 'once' | 'always'; }"
                    }
                  ]
                ],
                "signature": "static withConfig(opts: {  /** @deprecated as of v6 */ warnOnNgModelWithFormControl: 'never'|'once'|'always' }): ModuleWithProviders<ReactiveFormsModule>;"
              }
            }
          ]
        ],
        "signature": "class ReactiveFormsModule {\n  static withConfig(opts: {\n    /** @deprecated as of v6 */ warnOnNgModelWithFormControl:\n      | \"never\"\n      | \"once\"\n      | \"always\";\n  }): ModuleWithProviders<ReactiveFormsModule>;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "language-service",
    "name": "createLanguageService",
    "overloads": [
      {
        "file": "packages/language-service/src/language_service.ts#L23-L25",
        "signature": "function createLanguageService(host: TypeScriptServiceHost);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create an instance of an Angular `LanguageService`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "host",
              "description": "",
              "type": "TypeScriptServiceHost"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "language-service",
    "name": "Declaration",
    "overloads": [
      {
        "file": "packages/language-service/src/types.ts#L90-L111",
        "signature": "interface Declaration {\n  readonly type: StaticSymbol;\n  readonly declarationSpan: Span;\n  readonly metadata: CompileDirectiveMetadata;\n  readonly errors: DeclarationError[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Information about the component declarations.\n\nA file might contain a declaration without a template because the file contains only\ntemplateUrl references. However, the component declaration might contain errors that\nneed to be reported such as the template string is missing or the component is not\ndeclared in a module. These error should be reported on the declaration, not the\ntemplate.\n\nA host type; see `LanguageServiceHost`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "The static symbol of the compponent being declared.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "declarationSpan",
              "description": "The span of the declaration annotation reference (e.g. the 'Component' or 'Directive'\nreference).",
              "type": "Span"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "metadata",
              "description": "Reference to the compiler directive metadata for the declaration.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "errors",
              "description": "Error reported trying to get the metadata.",
              "type": "DeclarationError[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "language-service",
    "name": "Definition",
    "overloads": [
      {
        "file": "packages/language-service/src/symbols.ts#L43-L43",
        "signature": "export type Definition = Location[] | undefined;",
        "info": [
          [
            "description",
            { "__kind": "heading", "description": "A defnition location(s).\n" }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "language-service",
    "name": "Diagnostic",
    "overloads": [
      {
        "file": "packages/language-service/src/types.ts#L228-L243",
        "signature": "interface Diagnostic {\n  kind: ts.DiagnosticCategory;\n  span: Span;\n  message: string | DiagnosticMessageChain;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An template diagnostic message to display.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "kind",
              "description": "The kind of diagnostic message",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "span",
              "description": "The source span that should be highlighted.",
              "type": "Span"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "message",
              "description": "The text of the diagnostic message to display or a chain of messages.",
              "type": "string | DiagnosticMessageChain"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "language-service",
    "name": "LanguageService",
    "overloads": [
      {
        "file": "packages/language-service/src/types.ts#L254-L257",
        "signature": "export type LanguageService = Pick<\n  ts.LanguageService,\n  | \"getCompletionsAtPosition\"\n  | \"getDefinitionAndBoundSpan\"\n  | \"getQuickInfoAtPosition\"\n  | \"getSemanticDiagnostics\"\n  | \"getReferencesAtPosition\"\n>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An instance of an Angular language service created by `createLanguageService()`.\n\nThe Angular language service implements a subset of methods defined in\nThe Angular language service implements a subset of methods defined by\nthe TypeScript language service.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "language-service",
    "name": "LanguageServiceHost",
    "overloads": [
      {
        "file": "packages/language-service/src/types.ts#L140-L166",
        "signature": "interface LanguageServiceHost {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The host for a `LanguageService`. This provides all the `LanguageService` requires to respond\nto the `LanguageService` requests.\n\nThis interface describes the requirements of the `LanguageService` on its host.\n\nThe host interface is host language agnostic.\n\nAdding optional member to this interface or any interface that is described as a\n`LanguageServiceHost` interface is not considered a breaking change as defined by SemVer.\nRemoving a method or changing a member from required to optional will also not be considered a\nbreaking change.\n\nIf a member is deprecated it will be changed to optional in a minor release before it is\nremoved in a major release.\n\nAdding a required member or changing a method's parameters, is considered a breaking change and\nwill only be done when breaking changes are allowed. When possible, a new optional member will\nbe added and the old member will be deprecated. The new member will then be made required in\nand the old member will be removed only when breaking changes are allowed.\n\nWhile an interface is marked as experimental breaking-changes will be allowed between minor\nreleases. After an interface is marked as stable breaking-changes will only be allowed between\nmajor releases. No breaking changes are allowed between patch releases.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "language-service",
    "name": "Span",
    "overloads": [
      {
        "file": "packages/language-service/src/symbols.ts#L18-L30",
        "signature": "interface Span {\n  start: number;\n  end: number;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The range of a span of text in a source file.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "start",
              "description": "The first code-point of the span as an offset relative to the beginning of the source assuming\na UTF-16 encoding.",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "end",
              "description": "The first code-point after the span as an offset relative to the beginning of the source\nassuming a UTF-16 encoding.",
              "type": "number"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "language-service",
    "name": "TemplateSource",
    "overloads": [
      {
        "file": "packages/language-service/src/types.ts#L25-L55",
        "signature": "interface TemplateSource {\n  readonly source: string;\n  readonly span: Span;\n  readonly type: StaticSymbol;\n  readonly members: SymbolTable;\n  readonly query: SymbolQuery;\n  readonly fileName: string;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The information `LanguageService` needs from the `LanguageServiceHost` to describe the content of\na template and the language context the template is in.\n\nA host interface; see `LanguageServiceHost`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "source",
              "description": "The source of the template.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "span",
              "description": "The span of the template within the source file.",
              "type": "Span"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "A static symbol for the template's component.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "members",
              "description": "The `SymbolTable` for the members of the component.",
              "type": "SymbolTable"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "query",
              "description": "A `SymbolQuery` for the context of the template.",
              "type": "SymbolQuery"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "fileName",
              "description": "Name of the file that contains the template. Could be `.html` or `.ts`.",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "language-service",
    "name": "TypeScriptServiceHost",
    "overloads": [
      {
        "file": "packages/language-service/src/typescript_host.ts#L58-L597",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An implementation of a `LanguageServiceHost` for a TypeScript project.\n\nThe `TypeScriptServiceHost` implements the Angular `LanguageServiceHost` using\nthe TypeScript language services.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "getExternalTemplates",
              "info": {
                "file": "packages/language-service/src/typescript_host.ts#L157-L159",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Return all known external templates.\n"
                    }
                  ]
                ],
                "signature": "getExternalTemplates(): string[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getAnalyzedModules",
              "info": {
                "file": "packages/language-service/src/typescript_host.ts#L168-L209",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Checks whether the program has changed and returns all analyzed modules.\nIf program has changed, invalidate all caches and update fileToComponent\nand templateReferences.\nIn addition to returning information about NgModules, this method plays the\nsame role as 'synchronizeHostData' in tsserver.\n"
                    }
                  ]
                ],
                "signature": "getAnalyzedModules(): NgAnalyzedModules;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getTemplates",
              "info": {
                "file": "packages/language-service/src/typescript_host.ts#L281-L304",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Find all templates in the specified `file`."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "TS or HTML file",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getTemplates(fileName: string): TemplateSource[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getDeclarations",
              "info": {
                "file": "packages/language-service/src/typescript_host.ts#L313-L350",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Return metadata about all class declarations in the file that are Angular\ndirectives. Potential matches are `@NgModule`, `@Component`, `@Directive`,\n`@Pipes`, etc. class declarations.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "TS file",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getDeclarations(fileName: string): Declaration[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getSourceFile",
              "info": {
                "file": "packages/language-service/src/typescript_host.ts#L352-L357",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getSourceFile(fileName: string): tss.SourceFile|undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getTemplateAstAtPosition",
              "info": {
                "file": "packages/language-service/src/typescript_host.ts#L465-L485",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Return the parsed template for the template at the specified `position`."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fileName",
                      "description": "TS or HTML file",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "position",
                      "description": "Position of the template in the TS file, otherwise ignored.",
                      "type": "number"
                    }
                  ]
                ],
                "signature": "getTemplateAstAtPosition(fileName: string, position: number): AstResult|undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getTemplateAst",
              "info": {
                "file": "packages/language-service/src/typescript_host.ts#L524-L557",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Parse the `template` and return its AST, if any."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "template",
                      "description": "template to be parsed",
                      "type": "TemplateSource"
                    }
                  ]
                ],
                "signature": "getTemplateAst(template: TemplateSource): AstResult|undefined;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "log",
              "info": {
                "file": "packages/language-service/src/typescript_host.ts#L564-L568",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Log the specified `msg` to file at INFO level. If logging is not enabled\nthis method is a no-op."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "msg",
                      "description": "Log message",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "log(msg: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "error",
              "info": {
                "file": "packages/language-service/src/typescript_host.ts#L575-L579",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Log the specified `msg` to file at ERROR level. If logging is not enabled\nthis method is a no-op."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "msg",
                      "description": "error message",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "error(msg: string);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "debug",
              "info": {
                "file": "packages/language-service/src/typescript_host.ts#L586-L596",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Log debugging info to file at INFO level, only if verbose setting is turned\non. Otherwise, this method is a no-op."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "msg",
                      "description": "debugging message",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "debug(msg: string);"
              }
            }
          ]
        ],
        "signature": "class TypeScriptServiceHost implements LanguageServiceHost {\n  getExternalTemplates(): string[];\n  getAnalyzedModules(): NgAnalyzedModules;\n  getTemplates(fileName: string): TemplateSource[];\n  getDeclarations(fileName: string): Declaration[];\n  getSourceFile(fileName: string): tss.SourceFile | undefined;\n  getTemplateAstAtPosition(\n    fileName: string,\n    position: number\n  ): AstResult | undefined;\n  getTemplateAst(template: TemplateSource): AstResult | undefined;\n  log(msg: string);\n  error(msg: string);\n  debug(msg: string);\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "language-service",
    "name": "createLanguageServiceFromTypescript",
    "overloads": [
      {
        "file": "packages/language-service/src/typescript_host.ts#L22-L27",
        "signature": "function createLanguageServiceFromTypescript(\n  host: tss.LanguageServiceHost,\n  service: tss.LanguageService\n): LanguageService;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create a `LanguageServiceHost`\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "host",
              "description": "",
              "type": "any"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "service",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "language-service",
    "name": "getExternalFiles",
    "overloads": [
      {
        "file": "packages/language-service/src/ts_plugin.ts#L25-L34",
        "signature": "function getExternalFiles(project: tss.server.Project): string[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "This function is called by tsserver to retrieve the external (non-TS) files\nthat should belong to the specified `project`. For Angular, these files are\nexternal templates. This is called once when the project is loaded, then\nevery time when the program is updated."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "project",
              "description": "Project for which external files should be retrieved.",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "language-service",
    "name": "create",
    "overloads": [
      {
        "file": "packages/language-service/src/ts_plugin.ts#L36-L125",
        "signature": "function create(info: tss.server.PluginCreateInfo): tss.LanguageService;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "info",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "clearTranslations",
    "overloads": [
      {
        "file": "packages/localize/src/translate.ts#L54-L57",
        "signature": "function clearTranslations();",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Remove all translations for `$localize`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "loadTranslations",
    "overloads": [
      {
        "file": "packages/localize/src/translate.ts#L36-L47",
        "signature": "function loadTranslations(translations: Record<MessageId, TargetMessage>);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Load translations for `$localize`.\n\nThe given `translations` are processed and added to a lookup based on their `MessageId`.\nA new translation will overwrite a previous translation if it has the same `MessageId`.\n\n* If a message is generated by the Angular compiler from an `i18n` marker in a template, the\n`MessageId` is passed through to the `$localize` call as a custom `MessageId`. The `MessageId`\nwill match what is extracted into translation files.\n\n* If the translation is from a call to `$localize` in application code, and no custom `MessageId`\nis provided, then the `MessageId` can be generated by passing the tagged string message-parts\nto the `parseMessage()` function (not currently public API).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "translations",
              "description": "",
              "type": "Record<string, string>"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "ɵfindEndOfBlock",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/messages.ts#L260-L273",
        "signature": "function findEndOfBlock(cooked: string, raw: string): number;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Find the end of a \"marked block\" indicated by the first non-escaped colon.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "cooked",
              "description": "The cooked string (where escaped chars have been processed)",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "raw",
              "description": "The raw string (where escape sequences are still in place)",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "the index of the end of block marker"
            }
          ],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "an error if the block is unterminated\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "ɵisMissingTranslationError",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/translations.ts#L32-L34",
        "signature": "function isMissingTranslationError(e: any): e is MissingTranslationError;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "e",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "ɵmakeParsedTranslation",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/translations.ts#L113-L124",
        "signature": "function makeParsedTranslation(\n  messageParts: string[],\n  placeholderNames: string[] = []\n): ParsedTranslation;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create a `ParsedTranslation` from a set of `messageParts` and `placeholderNames`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "messageParts",
              "description": "The message parts to appear in the ParsedTranslation.",
              "type": "string[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "placeholderNames",
              "description": "The names of the placeholders to intersperse between the `messageParts`.",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "ɵmakeTemplateObject",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/translations.ts#L132-L135",
        "signature": "function makeTemplateObject(\n  cooked: string[],\n  raw: string[]\n): TemplateStringsArray;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create the specialized array that is passed to tagged-string tag functions.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "cooked",
              "description": "The message parts with their escape codes processed.",
              "type": "string[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "raw",
              "description": "The message parts with their escaped codes as-is.",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "localize",
    "name": "ɵMessageId",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/messages.ts#L40-L40",
        "signature": "export type MessageId = string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A string that uniquely identifies a message, to be used for matching translations.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "localize",
    "name": "ɵMissingTranslationError",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/translations.ts#L25-L30",
        "info": [],
        "signature": "class MissingTranslationError extends Error {}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "localize",
    "name": "ɵParsedMessage",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/messages.ts#L110-L129",
        "signature": "interface ParsedMessage {\n  id: MessageId;\n  substitutions: Record<string, any>;\n  messageParts: string[];\n  placeholderNames: string[];\n\n  // inherited from MessageMetadata\n  text: string;\n  id?: MessageId;\n  legacyIds?: string[];\n  meaning?: string;\n  description?: string;\n  location?: SourceLocation;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Information parsed from a `$localize` tagged string that is used to translate it.\n\nFor example:\n\n```\nconst name = 'Jo Bloggs';\n$localize`Hello ${name}:title!`;\n```\n\nMay be parsed into:\n\n```\n{\nid: '6998194507597730591',\nsubstitutions: { title: 'Jo Bloggs' },\nmessageString: 'Hello {$title}!',\n}\n```\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "id",
              "description": "The key used to look up the appropriate translation target.\n\nIn `ParsedMessage` this is a required field, whereas it is optional in `MessageMetadata`.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "substitutions",
              "description": "A mapping of placeholder names to substitution values.",
              "type": "Record<string, any>"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "messageParts",
              "description": "The static parts of the message.",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "placeholderNames",
              "description": "The names of the placeholders that will be replaced with substitutions.",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "localize",
    "name": "ɵParsedTranslation",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/translations.ts#L15-L18",
        "signature": "interface ParsedTranslation {\n  messageParts: TemplateStringsArray;\n  placeholderNames: string[];\n\n  // inherited from MessageMetadata\n  text: string;\n  id?: MessageId;\n  legacyIds?: string[];\n  meaning?: string;\n  description?: string;\n  location?: SourceLocation;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A translation message that has been processed to extract the message parts and placeholders.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "messageParts",
              "description": "",
              "type": "TemplateStringsArray"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "placeholderNames",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "localize",
    "name": "ɵParsedTranslations",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/translations.ts#L23-L23",
        "signature": "export type ParsedTranslations = Record<MessageId, ParsedTranslation>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The internal structure used by the runtime localization to translate messages.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "ɵparseMessage",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/messages.ts#L136-L167",
        "signature": "function parseMessage(\n  messageParts: TemplateStringsArray,\n  expressions?: readonly any[],\n  location?: SourceLocation\n): ParsedMessage;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Parse a `$localize` tagged string into a structure that can be used for translation.\n\nSee `ParsedMessage` for an example.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "messageParts",
              "description": "",
              "type": "TemplateStringsArray"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "expressions",
              "description": "",
              "type": "readonly any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "location",
              "description": "",
              "type": "SourceLocation"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "ɵparseMetadata",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/messages.ts#L195-L212",
        "signature": "function parseMetadata(cooked: string, raw: string): MessageMetadata;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Parse the given message part (`cooked` + `raw`) to extract the message metadata from the text.\n\nIf the message part has a metadata block this function will extract the `meaning`,\n`description`, `customId` and `legacyId` (if provided) from the block. These metadata properties\nare serialized in the string delimited by `|`, `@@` and `␟` respectively.\n\n(Note that `␟` is the `LEGACY_ID_INDICATOR` - see `constants.ts`.)\n\nFor example:\n\n```ts\n`:meaning|description@@custom-id`\n`:meaning|@@custom-id`\n`:meaning|description`\n`description@@custom-id`\n`meaning|`\n`description`\n`@@custom-id`\n`:meaning|description@@custom-id␟legacy-id-1␟legacy-id-2`\n```\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "cooked",
              "description": "The cooked version of the message part to parse.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "raw",
              "description": "The raw version of the message part to parse.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "A object containing any metadata that was parsed from the message part.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "ɵparseTranslation",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/translations.ts#L90-L105",
        "signature": "function parseTranslation(messageString: TargetMessage): ParsedTranslation;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Parse the `messageParts` and `placeholderNames` out of a target `message`.\n\nUsed by `loadTranslations()` to convert target message strings into a structure that is more\nappropriate for doing translation.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "message",
              "description": "the message to be parsed.",
              "type": ""
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "messageString",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "localize",
    "name": "ɵSourceLocation",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/messages.ts#L47-L51",
        "signature": "interface SourceLocation {\n  start: { line: number; column: number };\n  end: { line: number; column: number };\n  file: AbsoluteFsPath;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The location of the message in the source file.\n\nThe `line` and `column` values for the `start` and `end` properties are zero-based.\n"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "start",
              "description": "",
              "type": "{ line: number; column: number; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "end",
              "description": "",
              "type": "{ line: number; column: number; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "file",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "localize",
    "name": "ɵSourceMessage",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/messages.ts#L26-L26",
        "signature": "export type SourceMessage = string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A string containing a translation source message.\n\nI.E. the message that indicates what will be translated from.\n\nUses `{$placeholder-name}` to indicate a placeholder.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "ɵsplitBlock",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/messages.ts#L234-L244",
        "signature": "function splitBlock(\n  cooked: string,\n  raw: string\n): { text: string; block?: string };",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Split a message part (`cooked` + `raw`) into an optional delimited \"block\" off the front and the\nrest of the text of the message part.\n\nBlocks appear at the start of message parts. They are delimited by a colon `:` character at the\nstart and end of the block.\n\nIf the block is in the first message part then it will be metadata about the whole message:\nmeaning, description, id.  Otherwise it will be metadata about the immediately preceding\nsubstitution: placeholder name.\n\nSince blocks are optional, it is possible that the content of a message block actually starts\nwith a block marker. In this case the marker must be escaped `\\:`.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "cooked",
              "description": "The cooked version of the message part to parse.",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "raw",
              "description": "The raw version of the message part to parse.",
              "type": "string"
            }
          ],
          [
            "returns",
            {
              "__kind": "heading",
              "description": "An object containing the `text` of the message part and the text of the `block`, if it\nexists."
            }
          ],
          [
            "throws",
            {
              "__kind": "heading",
              "description": "an error if the `block` is unterminated\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "localize",
    "name": "ɵTargetMessage",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/messages.ts#L35-L35",
        "signature": "export type TargetMessage = string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A string containing a translation target message.\n\nI.E. the message that indicates what will be translated to.\n\nUses `{$placeholder-name}` to indicate a placeholder.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "localize",
    "name": "ɵtranslate",
    "overloads": [
      {
        "file": "packages/localize/src/utils/src/translations.ts#L52-L80",
        "signature": "function translate(\n  translations: Record<string, ParsedTranslation>,\n  messageParts: TemplateStringsArray,\n  substitutions: readonly any[]\n): [TemplateStringsArray, readonly any[]];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Translate the text of the `$localize` tagged-string (i.e. `messageParts` and\n`substitutions`) using the given `translations`.\n\nThe tagged-string is parsed to extract its `messageId` which is used to find an appropriate\n`ParsedTranslation`. If this doesn't match and there are legacy ids then try matching a\ntranslation using those.\n\nIf one is found then it is used to translate the message into a new set of `messageParts` and\n`substitutions`.\nThe translation may reorder (or remove) substitutions as appropriate.\n\nIf there is no translation with a matching message id then an error is thrown.\nIf a translation contains a placeholder that is not found in the message being translated then an\nerror is thrown.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "translations",
              "description": "",
              "type": "Record<string, ParsedTranslation>"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "messageParts",
              "description": "",
              "type": "TemplateStringsArray"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "substitutions",
              "description": "",
              "type": "readonly any[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "BrowserModule",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser.ts#L103-L130",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Exports required infrastructure for all Angular apps.\nIncluded by default in all Angular apps created with the CLI\n`new` command.\nRe-exports `CommonModule` and `ApplicationModule`, making their\nexports and providers available to all apps.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "withServerTransition",
              "info": {
                "file": "packages/platform-browser/src/browser.ts#L120-L129",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Configures a browser-based app to transition from a server-rendered app, if\none is present on the page.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "params",
                      "description": "An object containing an identifier for the app to transition.",
                      "type": "{ appId: string; }"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n"
                    }
                  ]
                ],
                "signature": "static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule>;"
              }
            }
          ]
        ],
        "signature": "class BrowserModule {\n  static withServerTransition(params: {\n    appId: string;\n  }): ModuleWithProviders<BrowserModule>;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "platformBrowser",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser.ts#L66-L67",
        "signature": "const platformBrowser: (extraProviders?: StaticProvider[]) => any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "Meta",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/meta.ts#L65-L195",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A service for managing HTML `<meta>` tags.\n\nProperties of the `MetaDefinition` object match the attributes of the\nHTML `<meta>` tag. These tags define document metadata that is important for\nthings like configuring a Content Security Policy, defining browser compatibility\nand security settings, setting HTTP Headers, defining rich content for social sharing,\nand Search Engine Optimization (SEO).\n\nTo identify specific `<meta>` tags in a document, use an attribute selection\nstring in the format `\"tag_attribute='value string'\"`.\nFor example, an `attrSelector` value of `\"name='description'\"` matches a tag\nwhose `name` attribute has the value `\"description\"`.\nSelectors are used with the `querySelector()` Document method,\nin the format `meta[{attrSelector}]`.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "addTag",
              "info": {
                "file": "packages/platform-browser/src/browser/meta.ts#L81-L84",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves or creates a specific `<meta>` tag element in the current HTML document.\nIn searching for an existing tag, Angular attempts to match the `name` or `property` attribute\nvalues in the provided tag definition, and verifies that all other attribute values are equal.\nIf an existing element is found, it is returned and is not modified in any way."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tag",
                      "description": "The definition of a `<meta>` element to match or create.",
                      "type": "MetaDefinition"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "forceCreation",
                      "description": "True to create a new element without checking whether one already exists.",
                      "type": "boolean"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The existing element with the same attributes and values if found,\nthe new element if no match is found, or `null` if the tag parameter is not defined.\n"
                    }
                  ]
                ],
                "signature": "addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addTags",
              "info": {
                "file": "packages/platform-browser/src/browser/meta.ts#L94-L102",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\nIn searching for an existing tag, Angular attempts to match the `name` or `property` attribute\nvalues in the provided tag definition, and verifies that all other attribute values are equal."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tags",
                      "description": "An array of tag definitions to match or create.",
                      "type": "MetaDefinition[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "forceCreation",
                      "description": "True to create new elements without checking whether they already exist.",
                      "type": "boolean"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The matching elements if found, or the new elements.\n"
                    }
                  ]
                ],
                "signature": "addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getTag",
              "info": {
                "file": "packages/platform-browser/src/browser/meta.ts#L110-L113",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves a `<meta>` tag element in the current HTML document."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "attrSelector",
                      "description": "The tag attribute and value to match against, in the format",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The matching element, if any.\n"
                    }
                  ]
                ],
                "signature": "getTag(attrSelector: string): HTMLMetaElement|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getTags",
              "info": {
                "file": "packages/platform-browser/src/browser/meta.ts#L121-L125",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves a set of `<meta>` tag elements in the current HTML document."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "attrSelector",
                      "description": "The tag attribute and value to match against, in the format",
                      "type": "string"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The matching elements, if any.\n"
                    }
                  ]
                ],
                "signature": "getTags(attrSelector: string): HTMLMetaElement[];"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "updateTag",
              "info": {
                "file": "packages/platform-browser/src/browser/meta.ts#L136-L144",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Modifies an existing `<meta>` tag element in the current HTML document."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tag",
                      "description": "The tag description with which to replace the existing tag content.",
                      "type": "MetaDefinition"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "selector",
                      "description": "A tag attribute and value to match against, to identify",
                      "type": "string"
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "The modified element.\n"
                    }
                  ]
                ],
                "signature": "updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeTag",
              "info": {
                "file": "packages/platform-browser/src/browser/meta.ts#L151-L153",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Removes an existing `<meta>` tag element from the current HTML document."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "attrSelector",
                      "description": "A tag attribute and value to match against, to identify",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "removeTag(attrSelector: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeTagElement",
              "info": {
                "file": "packages/platform-browser/src/browser/meta.ts#L159-L163",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Removes an existing `<meta>` tag element from the current HTML document."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "meta",
                      "description": "The tag definition to match against to identify an existing tag.",
                      "type": "HTMLMetaElement"
                    }
                  ]
                ],
                "signature": "removeTagElement(meta: HTMLMetaElement): void;"
              }
            }
          ]
        ],
        "signature": "class Meta {\n  addTag(\n    tag: MetaDefinition,\n    forceCreation: boolean = false\n  ): HTMLMetaElement | null;\n  addTags(\n    tags: MetaDefinition[],\n    forceCreation: boolean = false\n  ): HTMLMetaElement[];\n  getTag(attrSelector: string): HTMLMetaElement | null;\n  getTags(attrSelector: string): HTMLMetaElement[];\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null;\n  removeTag(attrSelector: string): void;\n  removeTagElement(meta: HTMLMetaElement): void;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "platform-browser",
    "name": "MetaDefinition",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/meta.ts#L21-L34",
        "signature": "export type MetaDefinition = {\n  charset?: string;\n  content?: string;\n  httpEquiv?: string;\n  id?: string;\n  itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} & {\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents the attributes of an HTML `<meta>` element. The element itself is\nrepresented by the internal `HTMLMetaElement`.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)"
            }
          ],
          ["see", { "__kind": "heading", "description": "`Meta`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "Title",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/title.ts#L30-L47",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A service that can be used to get and set the title of a current HTML document.\n\nSince an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\nit is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n(representing the `<title>` tag). Instead, this service can be used to set and get the current\ntitle value.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "getTitle",
              "info": {
                "file": "packages/platform-browser/src/browser/title.ts#L36-L38",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get the title of the current HTML document.\n"
                    }
                  ]
                ],
                "signature": "getTitle(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setTitle",
              "info": {
                "file": "packages/platform-browser/src/browser/title.ts#L44-L46",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Set the title of the current HTML document."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newTitle",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "setTitle(newTitle: string);"
              }
            }
          ]
        ],
        "signature": "class Title {\n  getTitle(): string;\n  setTitle(newTitle: string);\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "platform-browser",
    "name": "disableDebugTools",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/tools/tools.ts#L38-L40",
        "signature": "function disableDebugTools(): void;",
        "info": [
          [
            "description",
            { "__kind": "heading", "description": "Disables Angular tools.\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "platform-browser",
    "name": "enableDebugTools",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/tools/tools.ts#L28-L31",
        "signature": "function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Enabled Angular debug tools that are accessible via your browser's\ndeveloper console.\n\nUsage:\n\n1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n1. Type `ng.` (usually the console will show auto-complete suggestion)\n1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\nthen hit Enter.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "ref",
              "description": "",
              "type": "any"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "BrowserTransferStateModule",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/transfer_state.ts#L167-L171",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "NgModule to install on the client side while using the `TransferState` to transfer state from\nserver to client.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class BrowserTransferStateModule {}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "platform-browser",
    "name": "makeStateKey",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/transfer_state.ts#L64-L66",
        "signature": "function makeStateKey<T = void>(key: string): StateKey<T>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n\nExample:\n\n```\nconst COUNTER_KEY = makeStateKey<number>('counter');\nlet value = 10;\n\ntransferState.set(COUNTER_KEY, value);\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "param",
            {
              "__kind": "table",
              "label": "key",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "platform-browser",
    "name": "StateKey",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/transfer_state.ts#L48-L48",
        "signature": "export type StateKey<T> = string & { __not_a_string: never };",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A type-safe key to use with `TransferState`.\n\nExample:\n\n```\nconst COUNTER_KEY = makeStateKey<number>('counter');\nlet value = 10;\n\ntransferState.set(COUNTER_KEY, value);\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "TransferState",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/transfer_state.ts#L81-L144",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A key value store that is transferred from the application on the server side to the application\non the client side.\n\n`TransferState` will be available as an injectable token. To use it import\n`ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n\nThe values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\nboolean, number, string, null and non-class objects will be serialized and deserialzied in a\nnon-lossy manner.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "init",
              "info": {
                "file": "packages/platform-browser/src/browser/transfer_state.ts#L87-L91",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "initState",
                      "description": "",
                      "type": "{}"
                    }
                  ]
                ],
                "signature": "static init(initState: {});"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/platform-browser/src/browser/transfer_state.ts#L96-L98",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Get the value corresponding to a key. Return `defaultValue` if key is not found.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "StateKey<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "defaultValue",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "get<T>(key: StateKey<T>, defaultValue: T): T;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "set",
              "info": {
                "file": "packages/platform-browser/src/browser/transfer_state.ts#L103-L105",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Set the value corresponding to a key.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "StateKey<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "T"
                    }
                  ]
                ],
                "signature": "set<T>(key: StateKey<T>, value: T): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "remove",
              "info": {
                "file": "packages/platform-browser/src/browser/transfer_state.ts#L110-L112",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Remove a key from the store.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "StateKey<T>"
                    }
                  ]
                ],
                "signature": "remove<T>(key: StateKey<T>): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasKey",
              "info": {
                "file": "packages/platform-browser/src/browser/transfer_state.ts#L117-L119",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Test whether a key exists in the store.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "StateKey<T>"
                    }
                  ]
                ],
                "signature": "hasKey<T>(key: StateKey<T>);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onSerialize",
              "info": {
                "file": "packages/platform-browser/src/browser/transfer_state.ts#L124-L126",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register a callback to provide the value for a key when `toJson` is called.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "key",
                      "description": "",
                      "type": "StateKey<T>"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callback",
                      "description": "",
                      "type": "() => T"
                    }
                  ]
                ],
                "signature": "onSerialize<T>(key: StateKey<T>, callback: () => T): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toJson",
              "info": {
                "file": "packages/platform-browser/src/browser/transfer_state.ts#L131-L143",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Serialize the current state of the store to JSON.\n"
                    }
                  ]
                ],
                "signature": "toJson(): string;"
              }
            }
          ]
        ],
        "signature": "class TransferState {\n  static init(initState: {});\n  get<T>(key: StateKey<T>, defaultValue: T): T;\n  set<T>(key: StateKey<T>, value: T): void;\n  remove<T>(key: StateKey<T>): void;\n  hasKey<T>(key: StateKey<T>);\n  onSerialize<T>(key: StateKey<T>, callback: () => T): void;\n  toJson(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "By",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/debug/by.ts#L19-L59",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Predicates for use with {@link DebugElement}'s query functions.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "all",
              "info": {
                "file": "packages/platform-browser/src/dom/debug/by.ts#L28-L30",
                "info": [
                  [
                    "description",
                    { "__kind": "heading", "description": "Match all nodes.\n" }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\n{@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n"
                    }
                  ]
                ],
                "signature": "static all(): Predicate<DebugNode>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "css",
              "info": {
                "file": "packages/platform-browser/src/dom/debug/by.ts#L40-L46",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Match elements by the given CSS selector.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\n{@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "selector",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "static css(selector: string): Predicate<DebugElement>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "directive",
              "info": {
                "file": "packages/platform-browser/src/dom/debug/by.ts#L56-L58",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Match nodes that have the given directive present.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n### Example\n\n{@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "static directive(type: Type<any>): Predicate<DebugNode>;"
              }
            }
          ]
        ],
        "signature": "class By {\n  static all(): Predicate<DebugNode>;\n  static css(selector: string): Predicate<DebugElement>;\n  static directive(type: Type<any>): Predicate<DebugNode>;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "EVENT_MANAGER_PLUGINS",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/event_manager.ts#L17-L18",
        "signature": "const EVENT_MANAGER_PLUGINS: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "EventManager",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/event_manager.ts#L26-L91",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An injectable service that provides event management for Angular\nthrough a browser plug-in.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "addEventListener",
              "info": {
                "file": "packages/platform-browser/src/dom/events/event_manager.ts#L48-L51",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Registers a handler for a specific element and event.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "element",
                      "description": "The HTML element to receive event notifications.",
                      "type": "HTMLElement"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "The name of the event to listen for.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "handler",
                      "description": "A function to call when the notification occurs. Receives the",
                      "type": "Function"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A callback function that can be used to remove the handler.\n"
                    }
                  ]
                ],
                "signature": "addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addGlobalEventListener",
              "info": {
                "file": "packages/platform-browser/src/dom/events/event_manager.ts#L62-L65",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Registers a global handler for an event in a target view.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "target",
                      "description": "A target for global event notifications. One of \"window\", \"document\", or \"body\".",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "The name of the event to listen for.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "handler",
                      "description": "A function to call when the notification occurs. Receives the",
                      "type": "Function"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A callback function that can be used to remove the handler.\n"
                    }
                  ]
                ],
                "signature": "addGlobalEventListener(target: string, eventName: string, handler: Function): Function;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getZone",
              "info": {
                "file": "packages/platform-browser/src/dom/events/event_manager.ts#L70-L72",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Retrieves the compilation zone in which event listeners are registered.\n"
                    }
                  ]
                ],
                "signature": "getZone(): NgZone;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_findPluginFor",
              "info": {
                "file": "packages/platform-browser/src/dom/events/event_manager.ts#L75-L90",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "_findPluginFor(eventName: string): EventManagerPlugin;"
              }
            }
          ]
        ],
        "signature": "class EventManager {\n  addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function\n  ): Function;\n  addGlobalEventListener(\n    target: string,\n    eventName: string,\n    handler: Function\n  ): Function;\n  getZone(): NgZone;\n  _findPluginFor(eventName: string): EventManagerPlugin;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "HAMMER_GESTURE_CONFIG",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L64-L64",
        "signature": "const HAMMER_GESTURE_CONFIG: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "HAMMER_LOADER",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L79-L79",
        "signature": "const HAMMER_LOADER: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "ɵHAMMER_PROVIDERS__POST_R3__",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L261-L261",
        "signature": "const HAMMER_PROVIDERS__POST_R3__: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "HammerGestureConfig",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L92-L155",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\nfor gesture recognition. Configures specific event recognition."
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "events",
              "description": "A set of supported event names for gestures to be used in Angular.\nAngular supports all built-in recognizers, as listed in\n[HammerJS documentation](http://hammerjs.github.io/).",
              "type": "string[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "overrides",
              "description": "Maps gesture event names to a set of configuration options\nthat specify overrides to the default values for specific properties.\n\nThe key is a supported event name to be configured,\nand the options object contains a set of properties, with override values\nto be applied to the named recognizer event.\nFor example, to disable recognition of the rotate event, specify\n `{\"rotate\": {\"enable\": false}}`.\n\nProperties that are not present take the HammerJS default values.\nFor information about which properties are supported for which events,\nand their allowed and default values, see\n[HammerJS documentation](http://hammerjs.github.io/).",
              "type": "{ [key: string]: Object; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "options",
              "description": "Properties whose default values can be overridden for a given event.\nDifferent sets of properties apply to different events.\nFor information about which properties are supported for which events,\nand their allowed and default values, see\n[HammerJS documentation](http://hammerjs.github.io/).",
              "type": "{ cssProps?: any; domEvents?: boolean; enable?: boolean | ((manager: any) => boolean); preset?: any[]; touchAction?: string; recognizers?: any[]; inputClass?: any; inputTarget?: EventTarget; }"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "buildHammer",
              "info": {
                "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L143-L154",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\nand attaches it to a given HTML element."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "element",
                      "description": "The element that will recognize gestures.",
                      "type": "HTMLElement"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A HammerJS event-manager object.\n"
                    }
                  ]
                ],
                "signature": "buildHammer(element: HTMLElement): HammerInstance;"
              }
            }
          ]
        ],
        "signature": "class HammerGestureConfig {\n  events: string[] = [];\n  overrides: { [key: string]: Object } = {};\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  buildHammer(element: HTMLElement): HammerInstance;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "platform-browser",
    "name": "HammerLoader",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L72-L72",
        "signature": "export type HammerLoader = () => Promise<void>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "HammerModule",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L289-L291",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Adds support for HammerJS.\n\nImport this module at the root of your application so that Angular can work with\nHammerJS to detect gesture events.\n\nNote that applications still need to include the HammerJS script itself. This module\nsimply sets up the coordination layer between HammerJS and Angular's EventManager.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class HammerModule {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "DomSanitizer",
    "overloads": [
      {
        "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L89-L144",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\nvalues to be safe to use in the different DOM contexts.\n\nFor example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\nsanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\nthe website.\n\nIn specific situations, it might be necessary to disable sanitization, for example if the\napplication genuinely needs to produce a `javascript:` style link with a dynamic value in it.\nUsers can bypass security by constructing a value with one of the `bypassSecurityTrust...`\nmethods, and then binding to that value from the template.\n\nThese situations should be very rare, and extraordinary care must be taken to avoid creating a\nCross Site Scripting (XSS) security bug!\n\nWhen using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\nclose as possible to the source of the value, to make it easy to verify no security bug is\ncreated by its use.\n\nIt is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\ndoes not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\ncode. The sanitizer leaves safe values intact.\n"
            }
          ],
          [
            "security",
            {
              "__kind": "heading",
              "description": "Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\nsanitization for the value passed in. Carefully check and audit all values and code paths going\ninto this call. Make sure any user data is appropriately escaped for this security context.\nFor more detail, see the [Security Guide](http://g.co/ng/security).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "sanitize",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L99-L99",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sanitizes a value for use in the given SecurityContext.\n\nIf value is trusted for the context, this method will unwrap the contained safe value and use\nit directly. Otherwise, value will be sanitized to be safe in the given context, for example\nby replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\nis responsible to make sure that the value can definitely be safely used in the given context.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "context",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string | SafeValue"
                    }
                  ]
                ],
                "signature": "abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bypassSecurityTrustHtml",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L109-L109",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\nis unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\nleave safe HTML intact, so in most situations this method should not be used.\n\n**WARNING:** calling this method with untrusted user data exposes your application to XSS\nsecurity risks!\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract bypassSecurityTrustHtml(value: string): SafeHtml;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bypassSecurityTrustStyle",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L117-L117",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Bypass security and trust the given value to be safe style value (CSS).\n\n**WARNING:** calling this method with untrusted user data exposes your application to XSS\nsecurity risks!\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract bypassSecurityTrustStyle(value: string): SafeStyle;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bypassSecurityTrustScript",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L125-L125",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Bypass security and trust the given value to be safe JavaScript.\n\n**WARNING:** calling this method with untrusted user data exposes your application to XSS\nsecurity risks!\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract bypassSecurityTrustScript(value: string): SafeScript;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bypassSecurityTrustUrl",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L134-L134",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\nin hyperlinks or `<img src>`.\n\n**WARNING:** calling this method with untrusted user data exposes your application to XSS\nsecurity risks!\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract bypassSecurityTrustUrl(value: string): SafeUrl;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bypassSecurityTrustResourceUrl",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L143-L143",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\nbe used to load executable code from, like `<script src>`, or `<iframe src>`.\n\n**WARNING:** calling this method with untrusted user data exposes your application to XSS\nsecurity risks!\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;"
              }
            }
          ]
        ],
        "signature": "class DomSanitizer implements Sanitizer {\n  abstract sanitize(\n    context: SecurityContext,\n    value: SafeValue | string | null\n  ): string | null;\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "platform-browser",
    "name": "SafeHtml",
    "overloads": [
      {
        "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L28-L28",
        "signature": "interface SafeHtml {\n  // inherited from SafeValue\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use as HTML.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "platform-browser",
    "name": "SafeResourceUrl",
    "overloads": [
      {
        "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L56-L56",
        "signature": "interface SafeResourceUrl {\n  // inherited from SafeValue\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use as a URL to load executable code from.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "platform-browser",
    "name": "SafeScript",
    "overloads": [
      {
        "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L42-L42",
        "signature": "interface SafeScript {\n  // inherited from SafeValue\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use as JavaScript.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "platform-browser",
    "name": "SafeStyle",
    "overloads": [
      {
        "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L35-L35",
        "signature": "interface SafeStyle {\n  // inherited from SafeValue\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use as style (CSS).\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "platform-browser",
    "name": "SafeUrl",
    "overloads": [
      {
        "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L49-L49",
        "signature": "interface SafeUrl {\n  // inherited from SafeValue\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use as a URL linking to a document.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "platform-browser",
    "name": "SafeValue",
    "overloads": [
      {
        "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L21-L21",
        "signature": "interface SafeValue {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Marker interface for a value that's safe to use in a particular context.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "VERSION",
    "overloads": [
      {
        "file": "packages/platform-browser/src/version.ts#L20-L20",
        "signature": "const VERSION: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "ɵELEMENT_PROBE_PROVIDERS__POST_R3__",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/debug/ng_probe.ts#L47-L47",
        "signature": "const ELEMENT_PROBE_PROVIDERS__POST_R3__: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "ɵBROWSER_SANITIZATION_PROVIDERS",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser.ts#L58-L58",
        "signature": "const BROWSER_SANITIZATION_PROVIDERS: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser.ts#L50-L50",
        "signature": "const BROWSER_SANITIZATION_PROVIDERS__POST_R3__: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "platform-browser",
    "name": "ɵinitDomAdapter",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser.ts#L24-L27",
        "signature": "function initDomAdapter();",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser.ts#L39-L43",
        "signature": "const INTERNAL_BROWSER_PLATFORM_PROVIDERS: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "ɵBrowserDomAdapter",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/browser_adapter.ts#L31-L138",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A `DomAdapter` powered by full browser DOM APIs.\n"
            }
          ],
          [
            "security",
            {
              "__kind": "heading",
              "description": "Tread carefully! Interacting with the DOM directly is dangerous and\ncan introduce XSS risks.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "makeCurrent",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L32-L34",
                "info": [],
                "signature": "static makeCurrent();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getProperty",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L35-L37",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "",
                      "type": "Node"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getProperty(el: Node, name: string): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "log",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L39-L43",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "log(error: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "logGroup",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L45-L49",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "error",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "logGroup(error: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "logGroupEnd",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L51-L55",
                "info": [],
                "signature": "logGroupEnd(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onAndCancel",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L57-L64",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "",
                      "type": "Node"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "evt",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "listener",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "onAndCancel(el: Node, evt: any, listener: any): Function;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "dispatchEvent",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L65-L67",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "",
                      "type": "Node"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "evt",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "dispatchEvent(el: Node, evt: any);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "remove",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L68-L73",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "",
                      "type": "Node"
                    }
                  ]
                ],
                "signature": "remove(node: Node): Node;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getValue",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L74-L76",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "el",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getValue(el: any): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createElement",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L77-L80",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tagName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "doc",
                      "description": "",
                      "type": "Document"
                    }
                  ]
                ],
                "signature": "createElement(tagName: string, doc?: Document): HTMLElement;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createHtmlDocument",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L81-L83",
                "info": [],
                "signature": "createHtmlDocument(): HTMLDocument;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getDefaultDocument",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L84-L86",
                "info": [],
                "signature": "getDefaultDocument(): Document;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isElementNode",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L88-L90",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "",
                      "type": "Node"
                    }
                  ]
                ],
                "signature": "isElementNode(node: Node): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isShadowRoot",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L92-L94",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "node",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "isShadowRoot(node: any): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getGlobalEventTarget",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L96-L107",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "doc",
                      "description": "",
                      "type": "Document"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "target",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getGlobalEventTarget(doc: Document, target: string): EventTarget|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getHistory",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L108-L110",
                "info": [],
                "signature": "getHistory(): History;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getLocation",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L111-L113",
                "info": [],
                "signature": "getLocation(): Location;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getBaseHref",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L114-L117",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "doc",
                      "description": "",
                      "type": "Document"
                    }
                  ]
                ],
                "signature": "getBaseHref(doc: Document): string|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resetBaseElement",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L118-L120",
                "info": [],
                "signature": "resetBaseElement(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getUserAgent",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L121-L123",
                "info": [],
                "signature": "getUserAgent(): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "performanceNow",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L124-L129",
                "info": [],
                "signature": "performanceNow(): number;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "supportsCookies",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L131-L133",
                "info": [],
                "signature": "supportsCookies(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getCookie",
              "info": {
                "file": "packages/platform-browser/src/browser/browser_adapter.ts#L135-L137",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "name",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getCookie(name: string): string|null;"
              }
            }
          ]
        ],
        "signature": "class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent();\n  getProperty(el: Node, name: string): any;\n  log(error: string): void;\n  logGroup(error: string): void;\n  logGroupEnd(): void;\n  onAndCancel(el: Node, evt: any, listener: any): Function;\n  dispatchEvent(el: Node, evt: any);\n  remove(node: Node): Node;\n  getValue(el: any): string;\n  createElement(tagName: string, doc?: Document): HTMLElement;\n  createHtmlDocument(): HTMLDocument;\n  getDefaultDocument(): Document;\n  isElementNode(node: Node): boolean;\n  isShadowRoot(node: any): boolean;\n  getGlobalEventTarget(doc: Document, target: string): EventTarget | null;\n  getHistory(): History;\n  getLocation(): Location;\n  getBaseHref(doc: Document): string | null;\n  resetBaseElement(): void;\n  getUserAgent(): string;\n  performanceNow(): number;\n  supportsCookies(): boolean;\n  getCookie(name: string): string | null;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "ɵTRANSITION_ID",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/server-transition.ts#L16-L16",
        "signature": "const TRANSITION_ID: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "ɵBrowserGetTestability",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/testability.ts#L12-L68",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "init",
              "info": {
                "file": "packages/platform-browser/src/browser/testability.ts#L13-L15",
                "info": [],
                "signature": "static init();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addToWindow",
              "info": {
                "file": "packages/platform-browser/src/browser/testability.ts#L17-L50",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "registry",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "addToWindow(registry: TestabilityRegistry): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "findTestabilityInTree",
              "info": {
                "file": "packages/platform-browser/src/browser/testability.ts#L52-L67",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "registry",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "elem",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "findInAncestors",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):   Testability|null;"
              }
            }
          ]
        ],
        "signature": "class BrowserGetTestability implements GetTestability {\n  static init();\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(\n    registry: TestabilityRegistry,\n    elem: any,\n    findInAncestors: boolean\n  ): Testability | null;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "platform-browser",
    "name": "ɵescapeHtml",
    "overloads": [
      {
        "file": "packages/platform-browser/src/browser/transfer_state.ts#L12-L21",
        "signature": "function escapeHtml(text: string): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "text",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "ɵELEMENT_PROBE_PROVIDERS",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/debug/ng_probe.ts#L63-L63",
        "signature": "const ELEMENT_PROBE_PROVIDERS: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "ɵDomRendererFactory2",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/dom_renderer.ts#L77-L119",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "createRenderer",
              "info": {
                "file": "packages/platform-browser/src/dom/dom_renderer.ts#L88-L115",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "element",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "createRenderer(element: any, type: RendererType2|null): Renderer2;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "begin",
              "info": {
                "file": "packages/platform-browser/src/dom/dom_renderer.ts#L117-L117",
                "info": [],
                "signature": "begin();"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "end",
              "info": {
                "file": "packages/platform-browser/src/dom/dom_renderer.ts#L118-L118",
                "info": [],
                "signature": "end();"
              }
            }
          ]
        ],
        "signature": "class DomRendererFactory2 implements RendererFactory2 {\n  createRenderer(element: any, type: RendererType2 | null): Renderer2;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "platform-browser",
    "name": "ɵflattenStyles",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/dom_renderer.ts#L37-L50",
        "signature": "function flattenStyles(\n  compId: string,\n  styles: Array<any | any[]>,\n  target: string[]\n): string[];",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "compId",
              "description": "",
              "type": "string"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "styles",
              "description": "",
              "type": "any[]"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "target",
              "description": "",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser",
    "name": "ɵNAMESPACE_URIS",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/dom_renderer.ts#L14-L20",
        "signature": "const NAMESPACE_URIS: { [ns: string]: string };",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "platform-browser",
    "name": "ɵshimContentAttribute",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/dom_renderer.ts#L29-L31",
        "signature": "function shimContentAttribute(componentShortId: string): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "componentShortId",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "platform-browser",
    "name": "ɵshimHostAttribute",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/dom_renderer.ts#L33-L35",
        "signature": "function shimHostAttribute(componentShortId: string): string;",
        "info": [
          [
            "param",
            {
              "__kind": "table",
              "label": "componentShortId",
              "description": "",
              "type": "string"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "ɵDomEventsPlugin",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/dom_events.ts#L14-L34",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "supports",
              "info": {
                "file": "packages/platform-browser/src/dom/events/dom_events.ts#L22-L24",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "supports(eventName: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addEventListener",
              "info": {
                "file": "packages/platform-browser/src/dom/events/dom_events.ts#L26-L29",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "element",
                      "description": "",
                      "type": "HTMLElement"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "handler",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeEventListener",
              "info": {
                "file": "packages/platform-browser/src/dom/events/dom_events.ts#L31-L33",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "target",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "callback",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "removeEventListener(target: any, eventName: string, callback: Function): void;"
              }
            }
          ]
        ],
        "signature": "class DomEventsPlugin extends EventManagerPlugin {\n  supports(eventName: string): boolean;\n  addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function\n  ): Function;\n  removeEventListener(target: any, eventName: string, callback: Function): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "ɵHammerGesturesPlugin",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L162-L254",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Event plugin that adds Hammer support to an application.\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "HammerModule\n" }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "supports",
              "info": {
                "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L171-L184",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "supports(eventName: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addEventListener",
              "info": {
                "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L186-L249",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "element",
                      "description": "",
                      "type": "HTMLElement"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "handler",
                      "description": "",
                      "type": "Function"
                    }
                  ]
                ],
                "signature": "addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isCustomEvent",
              "info": {
                "file": "packages/platform-browser/src/dom/events/hammer_gestures.ts#L251-L253",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "isCustomEvent(eventName: string): boolean;"
              }
            }
          ]
        ],
        "signature": "class HammerGesturesPlugin extends EventManagerPlugin {\n  supports(eventName: string): boolean;\n  addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function\n  ): Function;\n  isCustomEvent(eventName: string): boolean;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "ɵKeyEventsPlugin",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/events/key_events.ts#L76-L191",
        "info": [
          [
            "publicApi",
            {
              "__kind": "heading",
              "description": "\nA browser plug-in that provides support for handling of key events in Angular.\n"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "supports",
              "info": {
                "file": "packages/platform-browser/src/dom/events/key_events.ts#L91-L93",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Reports whether a named key event is supported."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "The event name to query.",
                      "type": "string"
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "True if the named key event is supported.\n"
                    }
                  ]
                ],
                "signature": "supports(eventName: string): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "addEventListener",
              "info": {
                "file": "packages/platform-browser/src/dom/events/key_events.ts#L103-L112",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Registers a handler for a specific element and key event."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "element",
                      "description": "The HTML element to receive event notifications.",
                      "type": "HTMLElement"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "The name of the key event to listen for.",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "handler",
                      "description": "A function to call when the notification occurs. Receives the",
                      "type": "Function"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The key event that was registered.\n"
                    }
                  ]
                ],
                "signature": "addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseEventName",
              "info": {
                "file": "packages/platform-browser/src/dom/events/key_events.ts#L114-L143",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "eventName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "static parseEventName(eventName: string): {[key: string]: string}|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getEventFullKey",
              "info": {
                "file": "packages/platform-browser/src/dom/events/key_events.ts#L145-L164",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "event",
                      "description": "",
                      "type": "KeyboardEvent"
                    }
                  ]
                ],
                "signature": "static getEventFullKey(event: KeyboardEvent): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "eventCallback",
              "info": {
                "file": "packages/platform-browser/src/dom/events/key_events.ts#L173-L179",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Configures a handler callback for a key event."
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fullKey",
                      "description": "The event name that combines all simultaneous keystrokes.",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "handler",
                      "description": "The function that responds to the key event.",
                      "type": "Function"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "zone",
                      "description": "The zone in which the event occurred.",
                      "type": "any"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A callback function.\n"
                    }
                  ]
                ],
                "signature": "static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "_normalizeKey",
              "info": {
                "file": "packages/platform-browser/src/dom/events/key_events.ts#L182-L190",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "keyName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "static _normalizeKey(keyName: string): string;"
              }
            }
          ]
        ],
        "signature": "class KeyEventsPlugin extends EventManagerPlugin {\n  supports(eventName: string): boolean;\n  addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function\n  ): Function;\n  static parseEventName(eventName: string): { [key: string]: string } | null;\n  static getEventFullKey(event: KeyboardEvent): string;\n  static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function;\n  static _normalizeKey(keyName: string): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "ɵDomSharedStylesHost",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/shared_styles_host.ts#L35-L68",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "addHost",
              "info": {
                "file": "packages/platform-browser/src/dom/shared_styles_host.ts#L52-L55",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "hostNode",
                      "description": "",
                      "type": "Node"
                    }
                  ]
                ],
                "signature": "addHost(hostNode: Node): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "removeHost",
              "info": {
                "file": "packages/platform-browser/src/dom/shared_styles_host.ts#L57-L59",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "hostNode",
                      "description": "",
                      "type": "Node"
                    }
                  ]
                ],
                "signature": "removeHost(hostNode: Node): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onStylesAdded",
              "info": {
                "file": "packages/platform-browser/src/dom/shared_styles_host.ts#L61-L63",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "additions",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "onStylesAdded(additions: Set<string>): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/platform-browser/src/dom/shared_styles_host.ts#L65-L67",
                "info": [],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ]
        ],
        "signature": "class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\n  addHost(hostNode: Node): void;\n  removeHost(hostNode: Node): void;\n  onStylesAdded(additions: Set<string>): void;\n  ngOnDestroy(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "ɵSharedStylesHost",
    "overloads": [
      {
        "file": "packages/platform-browser/src/dom/shared_styles_host.ts#L12-L33",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "addStyles",
              "info": {
                "file": "packages/platform-browser/src/dom/shared_styles_host.ts#L17-L26",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "styles",
                      "description": "",
                      "type": "string[]"
                    }
                  ]
                ],
                "signature": "addStyles(styles: string[]): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onStylesAdded",
              "info": {
                "file": "packages/platform-browser/src/dom/shared_styles_host.ts#L28-L28",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "additions",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "onStylesAdded(additions: Set<string>): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getAllStyles",
              "info": {
                "file": "packages/platform-browser/src/dom/shared_styles_host.ts#L30-L32",
                "info": [],
                "signature": "getAllStyles(): string[];"
              }
            }
          ]
        ],
        "signature": "class SharedStylesHost {\n  addStyles(styles: string[]): void;\n  getAllStyles(): string[];\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser",
    "name": "ɵDomSanitizerImpl",
    "overloads": [
      {
        "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L150-L208",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "sanitize",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L156-L191",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ctx",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string | SafeValue"
                    }
                  ]
                ],
                "signature": "sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bypassSecurityTrustHtml",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L193-L195",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "bypassSecurityTrustHtml(value: string): SafeHtml;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bypassSecurityTrustStyle",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L196-L198",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "bypassSecurityTrustStyle(value: string): SafeStyle;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bypassSecurityTrustScript",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L199-L201",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "bypassSecurityTrustScript(value: string): SafeScript;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bypassSecurityTrustUrl",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L202-L204",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "bypassSecurityTrustUrl(value: string): SafeUrl;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "bypassSecurityTrustResourceUrl",
              "info": {
                "file": "packages/platform-browser/src/security/dom_sanitization_service.ts#L205-L207",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "value",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;"
              }
            }
          ]
        ],
        "signature": "class DomSanitizerImpl extends DomSanitizer {\n  sanitize(\n    ctx: SecurityContext,\n    value: SafeValue | string | null\n  ): string | null;\n  bypassSecurityTrustHtml(value: string): SafeHtml;\n  bypassSecurityTrustStyle(value: string): SafeStyle;\n  bypassSecurityTrustScript(value: string): SafeScript;\n  bypassSecurityTrustUrl(value: string): SafeUrl;\n  bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser-dynamic",
    "name": "VERSION",
    "overloads": [
      {
        "file": "packages/platform-browser-dynamic/src/version.ts#L20-L20",
        "signature": "const VERSION: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser-dynamic",
    "name": "JitCompilerFactory",
    "overloads": [
      {
        "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L175-L212",
        "info": [
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "createCompiler",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L188-L211",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "",
                      "type": "any[]"
                    }
                  ]
                ],
                "signature": "createCompiler(options: CompilerOptions[] = []): Compiler;"
              }
            }
          ]
        ],
        "signature": "class JitCompilerFactory implements CompilerFactory {\n  createCompiler(options: CompilerOptions[] = []): Compiler;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser-dynamic",
    "name": "RESOURCE_CACHE_PROVIDER",
    "overloads": [
      {
        "file": "packages/platform-browser-dynamic/src/platform-browser-dynamic.ts#L23-L24",
        "signature": "const RESOURCE_CACHE_PROVIDER: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser-dynamic",
    "name": "platformBrowserDynamic",
    "overloads": [
      {
        "file": "packages/platform-browser-dynamic/src/platform-browser-dynamic.ts#L29-L30",
        "signature": "const platformBrowserDynamic: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser-dynamic",
    "name": "ɵCOMPILER_PROVIDERS__POST_R3__",
    "overloads": [
      {
        "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L169-L170",
        "signature": "const COMPILER_PROVIDERS__POST_R3__: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser-dynamic",
    "name": "ɵCompilerImpl",
    "overloads": [
      {
        "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L33-L94",
        "info": [
          [
            "property",
            {
              "__kind": "table",
              "label": "injector",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compileModuleSync",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L54-L56",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compileModuleAsync",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L57-L59",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compileModuleAndAllComponentsSync",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L60-L66",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "compileModuleAndAllComponentsAsync",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L67-L74",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):   Promise<ModuleWithComponentFactories<T>>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "loadAotSummaries",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L75-L77",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "summaries",
                      "description": "",
                      "type": "() => any[]"
                    }
                  ]
                ],
                "signature": "loadAotSummaries(summaries: () => any[]);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasAotSummary",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L78-L80",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ref",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "hasAotSummary(ref: Type<any>): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getComponentFactory",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L81-L83",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "component",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCache",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L84-L86",
                "info": [],
                "signature": "clearCache(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "clearCacheFor",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L87-L89",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "type",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "clearCacheFor(type: Type<any>);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getModuleId",
              "info": {
                "file": "packages/platform-browser-dynamic/src/compiler_factory.ts#L90-L93",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "moduleType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "getModuleId(moduleType: Type<any>): string|undefined;"
              }
            }
          ]
        ],
        "signature": "class CompilerImpl implements Compiler {\n  public readonly injector: Injector;\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;\n  compileModuleAndAllComponentsSync<T>(\n    moduleType: Type<T>\n  ): ModuleWithComponentFactories<T>;\n  compileModuleAndAllComponentsAsync<T>(\n    moduleType: Type<T>\n  ): Promise<ModuleWithComponentFactories<T>>;\n  loadAotSummaries(summaries: () => any[]);\n  hasAotSummary(ref: Type<any>): boolean;\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n  clearCache(): void;\n  clearCacheFor(type: Type<any>);\n  getModuleId(moduleType: Type<any>): string | undefined;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser-dynamic",
    "name": "ɵplatformCoreDynamic",
    "overloads": [
      {
        "file": "packages/platform-browser-dynamic/src/platform_core_dynamic.ts#L18-L21",
        "signature": "const platformCoreDynamic: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "platform-browser-dynamic",
    "name": "ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS",
    "overloads": [
      {
        "file": "packages/platform-browser-dynamic/src/platform_providers.ts#L20-L28",
        "signature": "const INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "platform-browser-dynamic",
    "name": "ɵResourceLoaderImpl",
    "overloads": [
      {
        "file": "packages/platform-browser-dynamic/src/resource_loader/resource_loader_impl.ts#L12-L55",
        "info": [
          [
            "method",
            {
              "__kind": "info",
              "header": "get",
              "info": {
                "file": "packages/platform-browser-dynamic/src/resource_loader/resource_loader_impl.ts#L14-L54",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "get(url: string): Promise<string>;"
              }
            }
          ]
        ],
        "signature": "class ResourceLoaderImpl extends ResourceLoader {\n  get(url: string): Promise<string>;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "Data",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L77-L79",
        "signature": "export type Data = {\n  [name: string]: any;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nRepresents static data associated with a particular route.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`Route#data`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "DeprecatedLoadChildren",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L136-L136",
        "signature": "export type DeprecatedLoadChildren = string;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A string of the form `path/to/file#exportName` that acts as a URL for a set of routes to load.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`loadChildrenCallback`" }
          ],
          ["publicApi", { "__kind": "heading", "description": "" }],
          [
            "deprecated",
            {
              "__kind": "heading",
              "description": "The `string` form of `loadChildren` is deprecated in favor of the\n`LoadChildrenCallback` function which uses the ES dynamic `import()` expression.\nThis offers a more natural and standards-based mechanism to dynamically\nload an ES module at runtime.\n"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "LoadChildren",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L124-L124",
        "signature": "export type LoadChildren = LoadChildrenCallback | DeprecatedLoadChildren;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA function that returns a set of routes to load.\n\nThe string form of `LoadChildren` is deprecated (see `DeprecatedLoadChildren`). The function\nform (`LoadChildrenCallback`) should be used instead.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`loadChildrenCallback`" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "LoadChildrenCallback",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L111-L112",
        "signature": "export type LoadChildrenCallback = () =>\n  | Type<any>\n  | NgModuleFactory<any>\n  | Observable<Type<any>>\n  | Promise<NgModuleFactory<any> | Type<any> | any>;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA function that is called to resolve a collection of lazy-loaded routes.\nMust be an arrow function of the following form:\n`() => import('...').then(mod => mod.MODULE)`\n\nFor example:\n\n```\n[{\npath: 'lazy',\nloadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n}];\n```\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Route.loadChildren](api/router/Route#loadChildren)"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "QueryParamsHandling",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L149-L149",
        "signature": "export type QueryParamsHandling = \"merge\" | \"preserve\" | \"\";",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nHow to handle query parameters in a router link.\nOne of:\n- `merge` : Merge new with current parameters.\n- `preserve` : Preserve current parameters.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "`NavigationExtras#queryParamsHandling`"
            }
          ],
          ["see", { "__kind": "heading", "description": "`RouterLink`" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "ResolveData",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L89-L91",
        "signature": "export type ResolveData = {\n  [name: string]: any;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nRepresents the resolved data associated with a particular route.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`Route#resolve`.\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router",
    "name": "Route",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L387-L488",
        "signature": "interface Route {\n  path?: string;\n  pathMatch?: string;\n  matcher?: UrlMatcher;\n  component?: Type<any>;\n  redirectTo?: string;\n  outlet?: string;\n  canActivate?: any[];\n  canActivateChild?: any[];\n  canDeactivate?: any[];\n  canLoad?: any[];\n  data?: Data;\n  resolve?: ResolveData;\n  children?: Routes;\n  loadChildren?: LoadChildren;\n  runGuardsAndResolvers?: RunGuardsAndResolvers;\n  _loadedConfig?: LoadedRouterConfig;\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A configuration object that defines a single route.\nA set of routes are collected in a `Routes` array to define a `Router` configuration.\nThe router attempts to match segments of a given URL against each route,\nusing the configuration options defined in this object.\n\nSupports static, parameterized, redirect, and wildcard routes, as well as\ncustom route data and resolve methods.\n\nFor detailed usage information, see the [Routing Guide](guide/router).\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\n### Simple Configuration\n\nThe following route specifies that when navigating to, for example,\n`/team/11/user/bob`, the router creates the 'Team' component\nwith the 'User' child component in it.\n\n```\n[{\npath: 'team/:id',\ncomponent: Team,\nchildren: [{\npath: 'user/:name',\ncomponent: User\n}]\n}]\n```\n\n### Multiple Outlets\n\nThe following route creates sibling components with multiple outlets.\nWhen navigating to `/team/11(aux:chat/jim)`, the router creates the 'Team' component next to\nthe 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.\n\n```\n[{\npath: 'team/:id',\ncomponent: Team\n}, {\npath: 'chat/:user',\ncomponent: Chat\noutlet: 'aux'\n}]\n```\n\n### Wild Cards\n\nThe following route uses wild-card notation to specify a component\nthat is always instantiated regardless of where you navigate to.\n\n```\n[{\npath: '**',\ncomponent: WildcardComponent\n}]\n```\n\n### Redirects\n\nThe following route uses the `redirectTo` property to ignore a segment of\na given URL when looking for a child path.\n\nWhen navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n'/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\nthe Team component with the User child component in it.\n\n```\n[{\npath: 'team/:id',\ncomponent: Team,\nchildren: [{\npath: 'legacy/user/:name',\nredirectTo: 'user/:name'\n}, {\npath: 'user/:name',\ncomponent: User\n}]\n}]\n```\n\nThe redirect path can be relative, as shown in this example, or absolute.\nIf we change the `redirectTo` value in the example to the absolute URL segment '/user/:name',\nthe result URL is also absolute, '/user/jim'.\n\n### Empty Path\n\nEmpty-path route configurations can be used to instantiate components that do not 'consume'\nany URL segments.\n\nIn the following configuration, when navigating to\n`/team/11`, the router instantiates the 'AllUsers' component.\n\n```\n[{\npath: 'team/:id',\ncomponent: Team,\nchildren: [{\npath: '',\ncomponent: AllUsers\n}, {\npath: 'user/:name',\ncomponent: User\n}]\n}]\n```\n\nEmpty-path routes can have children. In the following example, when navigating\nto `/team/11/user/jim`, the router instantiates the wrapper component with\nthe user component in it.\n\nNote that an empty path route inherits its parent's parameters and data.\n\n```\n[{\npath: 'team/:id',\ncomponent: Team,\nchildren: [{\npath: '',\ncomponent: WrapperCmp,\nchildren: [{\npath: 'user/:name',\ncomponent: User\n}]\n}]\n}]\n```\n\n### Matching Strategy\n\nThe default path-match strategy is 'prefix', which means that the router\nchecks URL elements from the left to see if the URL matches a specified path.\nFor example, '/team/11/user' matches 'team/:id'.\n\n```\n[{\npath: '',\npathMatch: 'prefix', //default\nredirectTo: 'main'\n}, {\npath: 'main',\ncomponent: Main\n}]\n```\n\nYou can specify the path-match strategy 'full' to make sure that the path\ncovers the whole unconsumed URL. It is important to do this when redirecting\nempty-path routes. Otherwise, because an empty path is a prefix of any URL,\nthe router would apply the redirect even when navigating to the redirect destination,\ncreating an endless loop.\n\nIn the following example, supplying the 'full' `pathMatch` strategy ensures\nthat the router applies the redirect if and only if navigating to '/'.\n\n```\n[{\npath: '',\npathMatch: 'full',\nredirectTo: 'main'\n}, {\npath: 'main',\ncomponent: Main\n}]\n```\n\n### Componentless Routes\n\nYou can share parameters between sibling components.\nFor example, suppose that two sibling components should go next to each other,\nand both of them require an ID parameter. You can accomplish this using a route\nthat does not specify a component at the top level.\n\nIn the following example, 'MainChild' and 'AuxChild' are siblings.\nWhen navigating to 'parent/10/(a//aux:b)', the route instantiates\nthe main child and aux child components next to each other.\nFor this to work, the application component must have the primary and aux outlets defined.\n\n```\n[{\npath: 'parent/:id',\nchildren: [\n{ path: 'a', component: MainChild },\n{ path: 'b', component: AuxChild, outlet: 'aux' }\n]\n}]\n```\n\nThe router merges the parameters, data, and resolve of the componentless\nparent into the parameters, data, and resolve of the children.\n\nThis is especially useful when child components are defined\nwith an empty path string, as in the following example.\nWith this configuration, navigating to '/parent/10' creates\nthe main child and aux components.\n\n```\n[{\npath: 'parent/:id',\nchildren: [\n{ path: '', component: MainChild },\n{ path: '', component: AuxChild, outlet: 'aux' }\n]\n}]\n```\n\n### Lazy Loading\n\nLazy loading speeds up application load time by splitting the application\ninto multiple bundles and loading them on demand.\nTo use lazy loading, provide the `loadChildren` property in the `Route` object,\ninstead of the `children` property.\n\nGiven the following example route, the router will lazy load\nthe associated module on demand using the browser native import system.\n\n```\n[{\npath: 'lazy',\nloadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n}];\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "path",
              "description": "The path to match against. Cannot be used together with a custom `matcher` function.\nA URL string that uses router matching notation.\nCan be a wild card (`**`) that matches any URL (see Usage Notes below).\nDefault is \"/\" (the root path).",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "pathMatch",
              "description": "The path-matching strategy, one of 'prefix' or 'full'.\nDefault is 'prefix'.\n\nBy default, the router checks URL elements from the left to see if the URL\nmatches a given  path, and stops when there is a match. For example,\n'/team/11/user' matches 'team/:id'.\n\nThe path-match strategy 'full' matches against the entire URL.\nIt is important to do this when redirecting empty-path routes.\nOtherwise, because an empty path is a prefix of any URL,\nthe router would apply the redirect even when navigating\nto the redirect destination, creating an endless loop.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "matcher",
              "description": "A custom URL-matching function. Cannot be used together with `path`.",
              "type": "UrlMatcher"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "component",
              "description": "The component to instantiate when the path matches.\nCan be empty if child routes specify components.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "redirectTo",
              "description": "A URL to redirect to when the path matches.\nAbsolute if the URL begins with a slash (/), otherwise relative to the path URL.\nWhen not present, router does not redirect.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "outlet",
              "description": "Name of a `RouterOutlet` object where the component can be placed\nwhen the path matches.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "canActivate",
              "description": "An array of dependency-injection tokens used to look up `CanActivate()`\nhandlers, in order to determine if the current user is allowed to\nactivate the component. By default, any user can activate.",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "canActivateChild",
              "description": "An array of DI tokens used to look up `CanActivateChild()` handlers,\nin order to determine if the current user is allowed to activate\na child of the component. By default, any user can activate a child.",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "canDeactivate",
              "description": "An array of DI tokens used to look up `CanDeactivate()`\nhandlers, in order to determine if the current user is allowed to\ndeactivate the component. By default, any user can deactivate.",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "canLoad",
              "description": "An array of DI tokens used to look up `CanLoad()`\nhandlers, in order to determine if the current user is allowed to\nload the component. By default, any user can load.",
              "type": "any[]"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "data",
              "description": "Additional developer-defined data provided to the component via\n`ActivatedRoute`. By default, no additional data is passed.",
              "type": "Data"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "resolve",
              "description": "A map of DI tokens used to look up data resolvers. See `Resolve`.",
              "type": "ResolveData"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "children",
              "description": "An array of child `Route` objects that specifies a nested route\nconfiguration.",
              "type": "Routes"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "loadChildren",
              "description": "An object specifying lazy-loaded child routes.",
              "type": "LoadChildren"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "runGuardsAndResolvers",
              "description": "Defines when guards and resolvers will be run. One of\n- `paramsOrQueryParamsChange` : Run when query parameters change.\n- `always` : Run on every execution.\nBy default, guards and resolvers run only when the matrix\nparameters of the route change.",
              "type": "RunGuardsAndResolvers"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_loadedConfig",
              "description": "Filled for routes with `loadChildren` once the module has been loaded",
              "type": "LoadedRouterConfig"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "Routes",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L28-L28",
        "signature": "export type Routes = Route[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents a route configuration for the Router service.\nAn array of `Route` objects, used in `Router.config` and for nested route configurations\nin `Route.children`.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`Route`" }],
          ["see", { "__kind": "heading", "description": "`Router`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Router configuration guide](guide/router#configuration)"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "RunGuardsAndResolvers",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L158-L160",
        "signature": "export type RunGuardsAndResolvers =\n  | \"pathParamsChange\"\n  | \"pathParamsOrQueryParamsChange\"\n  | \"paramsChange\"\n  | \"paramsOrQueryParamsChange\"\n  | \"always\"\n  | ((from: ActivatedRouteSnapshot, to: ActivatedRouteSnapshot) => boolean);",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\nA policy for when to run guards and resolvers on a route.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Route.runGuardsAndResolvers](api/router/Route#runGuardsAndResolvers)"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "UrlMatcher",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L66-L67",
        "signature": "export type UrlMatcher = (\n  segments: UrlSegment[],\n  group: UrlSegmentGroup,\n  route: Route\n) => UrlMatchResult | null;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A function for matching a route against URLs. Implement a custom URL matcher\nfor `Route.matcher` when a combination of `path` and `pathMatch`\nis not expressive enough. Cannot be used together with `path` and `pathMatch`.\n\nThe function takes the following arguments and returns a `UrlMatchResult` object.\n* *segments* : An array of URL segments.\n* *group* : A segment group.\n* *route* : The route to match against.\n\nThe following example implementation matches HTML files.\n\n```\nexport function htmlFiles(url: UrlSegment[]) {\nreturn url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n}\n\nexport const routes = [{ matcher: htmlFiles, component: AnyComponent }];\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "UrlMatchResult",
    "overloads": [
      {
        "file": "packages/router/src/config.ts#L39-L42",
        "signature": "export type UrlMatchResult = {\n  consumed: UrlSegment[];\n  posParams?: { [name: string]: UrlSegment };\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents the result of matching URLs with a custom matching function.\n\n* `consumed` is an array of the consumed URL segments.\n* `posParams` is a map of positional parameters.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`UrlMatcher()`" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouterLink",
    "overloads": [
      {
        "file": "packages/router/src/directives/router_link.ts#L114-L223",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nLets you link to specific routes in your app.\n\nConsider the following route configuration:\n`[{ path: 'user/:name', component: UserCmp }]`.\nWhen linking to this `user/:name` route, you use the `RouterLink` directive.\n\nIf the link is static, you can use the directive as follows:\n`<a routerLink=\"/user/bob\">link to user component</a>`\n\nIf you use dynamic values to generate the link, you can pass an array of path\nsegments, followed by the params for each segment.\n\nFor instance `['/team', teamId, 'user', userName, {details: true}]`\nmeans that we want to generate a link to `/team/11/user/bob;details=true`.\n\nMultiple static segments can be merged into one\n(e.g., `['/team/11/user', userName, {details: true}]`).\n\nThe first segment name can be prepended with `/`, `./`, or `../`:\n* If the first segment begins with `/`, the router will look up the route from the root of the\napp.\n* If the first segment begins with `./`, or doesn't begin with a slash, the router will\ninstead look in the children of the current activated route.\n* And if the first segment begins with `../`, the router will go up one level.\n\nYou can set query params and fragment as follows:\n\n```\n<a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\nlink to user component\n</a>\n```\nRouterLink will use these to generate this link: `/user/bob?debug=true#education`.\n\n(Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\ndirective to preserve the current query params and fragment:\n\n```\n<a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\nlink to user component\n</a>\n```\n\nYou can tell the directive how to handle queryParams. Available options are:\n- `'merge'`: merge the queryParams into the current queryParams\n- `'preserve'`: preserve the current queryParams\n- default/`''`: use the queryParams only\n\nSame options for {@link NavigationExtras#queryParamsHandling\nNavigationExtras#queryParamsHandling}.\n\n```\n<a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\nlink to user component\n</a>\n```\n\nYou can provide a `state` value to be persisted to the browser's History.state\nproperty (See https://developer.mozilla.org/en-US/docs/Web/API/History#Properties). It's\nused as follows:\n\n```\n<a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\nlink to user component\n</a>\n```\n\nAnd later the value can be read from the router through `router.getCurrentNavigation`.\nFor example, to capture the `tracingId` above during the `NavigationStart` event:\n\n```\n// Get NavigationStart events\nrouter.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\nconst navigation = router.getCurrentNavigation();\ntracingService.trace({id: navigation.extras.state.tracingId});\n});\n```\n\nThe router link directive always treats the provided input as a delta to the current url.\n\nFor instance, if the current url is `/user/(box//aux:team)`.\n\nThen the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n`/user/(jim//aux:team)`.\n\nSee {@link Router#createUrlTree createUrlTree} for more information.\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "RouterModule\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "queryParams",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "{ [k: string]: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "fragment",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queryParamsHandling",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "QueryParamsHandling"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preserveFragment",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "skipLocationChange",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "replaceUrl",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "state",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "{ [k: string]: any; }"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onClick",
              "info": {
                "file": "packages/router/src/directives/router_link.ts#L202-L211",
                "info": [],
                "signature": "@HostListener('click') onClick(): boolean;"
              }
            }
          ]
        ],
        "signature": "class RouterLink {\n  @Input() queryParams!: { [k: string]: any };\n  @Input() fragment!: string;\n  @Input() queryParamsHandling!: QueryParamsHandling;\n  @Input() preserveFragment!: boolean;\n  @Input() skipLocationChange!: boolean;\n  @Input() replaceUrl!: boolean;\n  @Input() state?: { [k: string]: any };\n\n  @HostListener(\"click\")\n  onClick(): boolean;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouterLinkWithHref",
    "overloads": [
      {
        "file": "packages/router/src/directives/router_link.ts#L236-L374",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nLets you link to specific routes in your app.\n\nSee `RouterLink` for more information.\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "RouterModule\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "target",
              "description": "",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queryParams",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "{ [k: string]: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "fragment",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queryParamsHandling",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "QueryParamsHandling"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preserveFragment",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "skipLocationChange",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "replaceUrl",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "state",
              "description": "Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the `NavigationExtras`.",
              "type": "{ [k: string]: any; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "href",
              "description": "",
              "type": "string"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/router/src/directives/router_link.ts#L334-L336",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "",
                      "type": "{}"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: {}): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/router/src/directives/router_link.ts#L337-L339",
                "info": [],
                "signature": "ngOnDestroy(): any;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onClick",
              "info": {
                "file": "packages/router/src/directives/router_link.ts#L341-L358",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "button",
                      "description": "",
                      "type": "number"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ctrlKey",
                      "description": "",
                      "type": "boolean"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "metaKey",
                      "description": "",
                      "type": "boolean"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "shiftKey",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "@HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey']) onClick(button: number, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean): boolean;"
              }
            }
          ]
        ],
        "signature": "class RouterLinkWithHref implements OnChanges, OnDestroy {\n  @HostBinding(\"attr.target\") @Input() target!: string;\n  @Input() queryParams!: { [k: string]: any };\n  @Input() fragment!: string;\n  @Input() queryParamsHandling!: QueryParamsHandling;\n  @Input() preserveFragment!: boolean;\n  @Input() skipLocationChange!: boolean;\n  @Input() replaceUrl!: boolean;\n  @Input() state?: { [k: string]: any };\n  @HostBinding() href!: string;\n\n  ngOnChanges(changes: {}): any;\n  ngOnDestroy(): any;\n  @HostListener(\"click\", [\n    \"$event.button\",\n    \"$event.ctrlKey\",\n    \"$event.metaKey\",\n    \"$event.shiftKey\",\n  ])\n  onClick(\n    button: number,\n    ctrlKey: boolean,\n    metaKey: boolean,\n    shiftKey: boolean\n  ): boolean;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouterLinkActive",
    "overloads": [
      {
        "file": "packages/router/src/directives/router_link_active.ts#L75-L152",
        "info": [
          ["description", { "__kind": "heading", "description": "" }],
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nLets you add a CSS class to an element when the link's route becomes active.\n\nThis directive lets you add a CSS class to an element when the link's route\nbecomes active.\n\nConsider the following example:\n\n```\n<a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n```\n\nWhen the url is either '/user' or '/user/bob', the active-link class will\nbe added to the `a` tag. If the url changes, the class will be removed.\n\nYou can set more than one class, as follows:\n\n```\n<a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n<a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n```\n\nYou can configure RouterLinkActive by passing `exact: true`. This will add the classes\nonly when the url matches the link exactly.\n\n```\n<a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\ntrue}\">Bob</a>\n```\n\nYou can assign the RouterLinkActive instance to a template variable and directly check\nthe `isActive` status.\n```\n<a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\nBob {{ rla.isActive ? '(already open)' : ''}}\n</a>\n```\n\nFinally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n\n```\n<div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n<a routerLink=\"/user/jim\">Jim</a>\n<a routerLink=\"/user/bob\">Bob</a>\n</div>\n```\n\nThis will set the active-link class on the div tag if the url is either '/user/jim' or\n'/user/bob'.\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "RouterModule\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "links",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "linksWithHrefs",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "isActive",
              "description": "",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "routerLinkActiveOptions",
              "description": "",
              "type": "{ exact: boolean; }"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngAfterContentInit",
              "info": {
                "file": "packages/router/src/directives/router_link_active.ts#L104-L108",
                "info": [],
                "signature": "ngAfterContentInit(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnChanges",
              "info": {
                "file": "packages/router/src/directives/router_link_active.ts#L116-L118",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "changes",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "ngOnChanges(changes: SimpleChanges): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/router/src/directives/router_link_active.ts#L119-L121",
                "info": [],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ]
        ],
        "signature": "class RouterLinkActive implements OnChanges, OnDestroy, AfterContentInit {\n  @ContentChildren(RouterLink, { descendants: true }) links!: QueryList<\n    RouterLink\n  >;\n  @ContentChildren(RouterLinkWithHref, { descendants: true })\n  linksWithHrefs!: QueryList<RouterLinkWithHref>;\n  public readonly isActive: boolean = false;\n  @Input() routerLinkActiveOptions: { exact: boolean } = { exact: false };\n\n  ngAfterContentInit(): void;\n  ngOnChanges(changes: SimpleChanges): void;\n  ngOnDestroy(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouterOutlet",
    "overloads": [
      {
        "file": "packages/router/src/directives/router_outlet.ts#L62-L169",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nActs as a placeholder that Angular dynamically fills based on the current router state.\n\nEach outlet can have a unique name, determined by the optional `name` attribute.\nThe name cannot be set or changed dynamically. If not set, default value is \"primary\".\n\n```\n<router-outlet></router-outlet>\n<router-outlet name='left'></router-outlet>\n<router-outlet name='right'></router-outlet>\n```\n\nNamed outlets can be the targets of secondary routes.\nThe `Route` object for a secondary route has an `outlet` property to identify the target outlet:\n\n`{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`\n\nUsing named outlets and secondary routes, you can target multiple outlets in\nthe same `RouterLink` directive.\n\nThe router keeps track of separate branches in a navigation tree for each named outlet and\ngenerates a representation of that tree in the URL.\nThe URL for a secondary route uses the following syntax to specify both the primary and secondary\nroutes at the same time:\n\n`http://base-path/primary-route-path(outlet-name:route-path)`\n\nA router outlet emits an activate event when a new component is instantiated,\nand a deactivate event when a component is destroyed.\n\n```\n<router-outlet\n(activate)='onActivate($event)'\n(deactivate)='onDeactivate($event)'></router-outlet>\n```\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Routing tutorial](guide/router-tutorial-toh#named-outlets \"Example of a named\noutlet and secondary route configuration\")."
            }
          ],
          ["see", { "__kind": "heading", "description": "`RouterLink`" }],
          ["see", { "__kind": "heading", "description": "`Route`" }],
          [
            "ngModule",
            { "__kind": "heading", "description": "RouterModule\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "activateEvents",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "deactivateEvents",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/router/src/directives/router_outlet.ts#L79-L81",
                "info": [],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnInit",
              "info": {
                "file": "packages/router/src/directives/router_outlet.ts#L83-L98",
                "info": [],
                "signature": "ngOnInit(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "detach",
              "info": {
                "file": "packages/router/src/directives/router_outlet.ts#L124-L131",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Called when the `RouteReuseStrategy` instructs to detach the subtree\n"
                    }
                  ]
                ],
                "signature": "detach(): ComponentRef<any>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "attach",
              "info": {
                "file": "packages/router/src/directives/router_outlet.ts#L136-L140",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "ref",
                      "description": "",
                      "type": "any"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "activatedRoute",
                      "description": "",
                      "type": "ActivatedRoute"
                    }
                  ]
                ],
                "signature": "attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "deactivate",
              "info": {
                "file": "packages/router/src/directives/router_outlet.ts#L142-L150",
                "info": [],
                "signature": "deactivate(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "activateWith",
              "info": {
                "file": "packages/router/src/directives/router_outlet.ts#L152-L168",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "activatedRoute",
                      "description": "",
                      "type": "ActivatedRoute"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "resolver",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver|null);"
              }
            }
          ]
        ],
        "signature": "class RouterOutlet implements OnDestroy, OnInit {\n  @Output(\"activate\") activateEvents = new EventEmitter<any>();\n  @Output(\"deactivate\") deactivateEvents = new EventEmitter<any>();\n\n  ngOnDestroy(): void;\n  ngOnInit(): void;\n  detach(): ComponentRef<any>;\n  attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute);\n  deactivate(): void;\n  activateWith(\n    activatedRoute: ActivatedRoute,\n    resolver: ComponentFactoryResolver | null\n  );\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "ActivationEnd",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L415-L423",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered at the end of the activation part\nof the Resolve phase of routing."
            }
          ],
          ["see", { "__kind": "heading", "description": "`ActivationStart`" }],
          ["see", { "__kind": "heading", "description": "`ResolveStart`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L419-L422",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ActivationEnd {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "ActivationStart",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L397-L405",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered at the start of the activation part\nof the Resolve phase of routing."
            }
          ],
          ["see", { "__kind": "heading", "description": "`ActivationEnd`" }],
          ["see", { "__kind": "heading", "description": "`ResolveStart`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L401-L404",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ActivationStart {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "ChildActivationEnd",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L379-L387",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered at the end of the child-activation part\nof the Resolve phase of routing."
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`ChildActivationStart`" }
          ],
          ["see", { "__kind": "heading", "description": "`ResolveStart`" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L383-L386",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ChildActivationEnd {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "ChildActivationStart",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L362-L370",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered at the start of the child-activation\npart of the Resolve phase of routing."
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`ChildActivationEnd`" }
          ],
          ["see", { "__kind": "heading", "description": "`ResolveStart`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L366-L369",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ChildActivationStart {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "Event",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L480-L481",
        "signature": "export type Event =\n  | RouterEvent\n  | RouteConfigLoadStart\n  | RouteConfigLoadEnd\n  | ChildActivationStart\n  | ChildActivationEnd\n  | ActivationStart\n  | ActivationEnd\n  | Scroll;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Router events that allow you to track the lifecycle of the router.\n\nThe events occur in the following sequence:\n\n* [NavigationStart](api/router/NavigationStart): Navigation starts.\n* [RouteConfigLoadStart](api/router/RouteConfigLoadStart): Before\nthe router [lazy loads](/guide/router#lazy-loading) a route configuration.\n* [RouteConfigLoadEnd](api/router/RouteConfigLoadEnd): After a route has been lazy loaded.\n* [RoutesRecognized](api/router/RoutesRecognized): When the router parses the URL\nand the routes are recognized.\n* [GuardsCheckStart](api/router/GuardsCheckStart): When the router begins the *guards*\nphase of routing.\n* [ChildActivationStart](api/router/ChildActivationStart): When the router\nbegins activating a route's children.\n* [ActivationStart](api/router/ActivationStart): When the router begins activating a route.\n* [GuardsCheckEnd](api/router/GuardsCheckEnd): When the router finishes the *guards*\nphase of routing successfully.\n* [ResolveStart](api/router/ResolveStart): When the router begins the *resolve*\nphase of routing.\n* [ResolveEnd](api/router/ResolveEnd): When the router finishes the *resolve*\nphase of routing successfuly.\n* [ChildActivationEnd](api/router/ChildActivationEnd): When the router finishes\nactivating a route's children.\n* [ActivationEnd](api/router/ActivationStart): When the router finishes activating a route.\n* [NavigationEnd](api/router/NavigationEnd): When navigation ends successfully.\n* [NavigationCancel](api/router/NavigationCancel): When navigation is canceled.\n* [NavigationError](api/router/NavigationError): When navigation fails\ndue to an unexpected error.\n* [Scroll](api/router/Scroll): When the user scrolls.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "GuardsCheckEnd",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L247-L266",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered at the end of the Guard phase of routing.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`GuardsCheckStart`\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L262-L265",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class GuardsCheckEnd extends RouterEvent {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "GuardsCheckStart",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L221-L238",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered at the start of the Guard phase of routing.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`GuardsCheckEnd`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L234-L237",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class GuardsCheckStart extends RouterEvent {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "NavigationCancel",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L146-L161",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered when a navigation is canceled, directly or indirectly.\nThis can happen when a route guard\nreturns `false` or initiates a redirect by returning a `UrlTree`.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`NavigationStart`" }],
          ["see", { "__kind": "heading", "description": "`NavigationEnd`" }],
          [
            "see",
            { "__kind": "heading", "description": "`NavigationError`\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L158-L160",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class NavigationCancel extends RouterEvent {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "NavigationEnd",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L117-L133",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered when a navigation ends successfully.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`NavigationStart`" }],
          ["see", { "__kind": "heading", "description": "`NavigationCancel`" }],
          [
            "see",
            { "__kind": "heading", "description": "`NavigationError`\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L129-L132",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class NavigationEnd extends RouterEvent {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "NavigationError",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L172-L187",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered when a navigation fails due to an unexpected error.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`NavigationStart`" }],
          ["see", { "__kind": "heading", "description": "`NavigationEnd`" }],
          [
            "see",
            { "__kind": "heading", "description": "`NavigationCancel`\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L184-L186",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class NavigationError extends RouterEvent {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "NavigationStart",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L58-L106",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered when a navigation starts.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "navigationTrigger",
              "description": "Identifies the call or event that triggered the navigation.\nAn `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.",
              "type": "\"imperative\" | \"popstate\" | \"hashchange\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "restoredState",
              "description": "The navigation state that was previously supplied to the `pushState` call,\nwhen the navigation is triggered by a `popstate` event. Otherwise null.\n\nThe state object is defined by `NavigationExtras`, and contains any\ndeveloper-defined state value, as well as a unique ID that\nthe router assigns to every router transition/navigation.\n\nFrom the perspective of the router, the router never \"goes back\".\nWhen the user clicks on the back button in the browser,\na new navigation ID is created.\n\nUse the ID in this previous-state object to differentiate between a newly created\nstate and one returned to by a `popstate` event, so that you can restore some\nremembered state, such as scroll position.",
              "type": "{ [k: string]: any; navigationId: number; }"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L103-L105",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class NavigationStart extends RouterEvent {\n  navigationTrigger?: \"imperative\" | \"popstate\" | \"hashchange\";\n  restoredState?: { [k: string]: any; navigationId: number } | null;\n\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "ResolveEnd",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L303-L320",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered at the end of the Resolve phase of routing."
            }
          ],
          ["see", { "__kind": "heading", "description": "`ResolveStart`.\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L316-L319",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ResolveEnd extends RouterEvent {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "ResolveStart",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L278-L295",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered at the the start of the Resolve phase of routing.\n\nRuns in the \"resolve\" phase whether or not there is anything to resolve.\nIn future, may change to only run when there are things to be resolved.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`ResolveEnd`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L291-L294",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ResolveStart extends RouterEvent {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouteConfigLoadEnd",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L345-L352",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered when a route has been lazy loaded.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`RouteConfigLoadStart`\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L349-L351",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class RouteConfigLoadEnd {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouteConfigLoadStart",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L329-L336",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered before lazy loading a route configuration.\n"
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`RouteConfigLoadEnd`\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L333-L335",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class RouteConfigLoadStart {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouterEvent",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L45-L51",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Base for events the router goes through, as opposed to events tied to a specific\nroute. Fired one time for any given navigation.\n\nThe following code shows how a class subscribes to router events.\n\n```ts\nclass MyService {\nconstructor(public router: Router, logger: Logger) {\nrouter.events.pipe(\nfilter((e: Event): e is RouterEvent => e instanceof RouterEvent)\n).subscribe((e: RouterEvent) => {\nlogger.log(e.id, e.url);\n});\n}\n}\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`Event`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Router events summary](guide/router#router-events)"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ],
        "signature": "class RouterEvent {}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RoutesRecognized",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L194-L212",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered when routes are recognized.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L208-L211",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class RoutesRecognized extends RouterEvent {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "Scroll",
    "overloads": [
      {
        "file": "packages/router/src/events.ts#L430-L445",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event triggered by scrolling.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/events.ts#L441-L444",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class Scroll {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router",
    "name": "CanActivate",
    "overloads": [
      {
        "file": "packages/router/src/interfaces.ts#L92-L95",
        "signature": "interface CanActivate {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nInterface that a class can implement to be a guard deciding if a route can be activated.\nIf all guards return `true`, navigation continues. If any guard returns `false`,\nnavigation is cancelled. If any guard returns a `UrlTree`, the current navigation\nis cancelled and a new navigation begins to the `UrlTree` returned from the guard.\n\nThe following example implements a `CanActivate` function that checks whether the\ncurrent user has permission to activate the requested route.\n\n```\nclass UserToken {}\nclass Permissions {\ncanActivate(user: UserToken, id: string): boolean {\nreturn true;\n}\n}\n"
            }
          ],
          [
            "Injectable()",
            {
              "__kind": "heading",
              "description": "\nclass CanActivateTeam implements CanActivate {\nconstructor(private permissions: Permissions, private currentUser: UserToken) {}\n\ncanActivate(\nroute: ActivatedRouteSnapshot,\nstate: RouterStateSnapshot\n): Observable<boolean|UrlTree>|Promise<boolean|UrlTree>|boolean|UrlTree {\nreturn this.permissions.canActivate(this.currentUser, route.params.id);\n}\n}\n```\n\nHere, the defined guard function is provided as part of the `Route` object\nin the router configuration:\n\n```"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [\nRouterModule.forRoot([\n{\npath: 'team/:id',\ncomponent: TeamComponent,\ncanActivate: [CanActivateTeam]\n}\n])\n],\nproviders: [CanActivateTeam, UserToken, Permissions]\n})\nclass AppModule {}\n```\n\nYou can alternatively provide an in-line function with the `canActivate` signature:\n\n```"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [\nRouterModule.forRoot([\n{\npath: 'team/:id',\ncomponent: TeamComponent,\ncanActivate: ['canActivateTeam']\n}\n])\n],\nproviders: [\n{\nprovide: 'canActivateTeam',\nuseValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n}\n]\n})\nclass AppModule {}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router",
    "name": "CanActivateChild",
    "overloads": [
      {
        "file": "packages/router/src/interfaces.ts#L186-L189",
        "signature": "interface CanActivateChild {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nInterface that a class can implement to be a guard deciding if a child route can be activated.\nIf all guards return `true`, navigation continues. If any guard returns `false`,\nnavigation is cancelled. If any guard returns a `UrlTree`, current navigation\nis cancelled and a new navigation begins to the `UrlTree` returned from the guard.\n\nThe following example implements a `CanActivateChild` function that checks whether the\ncurrent user has permission to activate the requested child route.\n\n```\nclass UserToken {}\nclass Permissions {\ncanActivate(user: UserToken, id: string): boolean {\nreturn true;\n}\n}\n"
            }
          ],
          [
            "Injectable()",
            {
              "__kind": "heading",
              "description": "\nclass CanActivateTeam implements CanActivateChild {\nconstructor(private permissions: Permissions, private currentUser: UserToken) {}\n\ncanActivateChild(\nroute: ActivatedRouteSnapshot,\nstate: RouterStateSnapshot\n): Observable<boolean|UrlTree>|Promise<boolean|UrlTree>|boolean|UrlTree {\nreturn this.permissions.canActivate(this.currentUser, route.params.id);\n}\n}\n```\n\nHere, the defined guard function is provided as part of the `Route` object\nin the router configuration:\n\n```"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [\nRouterModule.forRoot([\n{\npath: 'root',\ncanActivateChild: [CanActivateTeam],\nchildren: [\n{\npath: 'team/:id',\ncomponent: TeamComponent\n}\n]\n}\n])\n],\nproviders: [CanActivateTeam, UserToken, Permissions]\n})\nclass AppModule {}\n```\n\nYou can alternatively provide an in-line function with the `canActivateChild` signature:\n\n```"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [\nRouterModule.forRoot([\n{\npath: 'root',\ncanActivateChild: ['canActivateTeam'],\nchildren: [\n{\npath: 'team/:id',\ncomponent: TeamComponent\n}\n]\n}\n])\n],\nproviders: [\n{\nprovide: 'canActivateTeam',\nuseValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => true\n}\n]\n})\nclass AppModule {}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router",
    "name": "CanDeactivate",
    "overloads": [
      {
        "file": "packages/router/src/interfaces.ts#L274-L279",
        "signature": "interface CanDeactivate<T> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nInterface that a class can implement to be a guard deciding if a route can be deactivated.\nIf all guards return `true`, navigation continues. If any guard returns `false`,\nnavigation is cancelled. If any guard returns a `UrlTree`, current navigation\nis cancelled and a new navigation begins to the `UrlTree` returned from the guard.\n\nThe following example implements a `CanDeactivate` function that checks whether the\ncurrent user has permission to deactivate the requested route.\n\n```\nclass UserToken {}\nclass Permissions {\ncanDeactivate(user: UserToken, id: string): boolean {\nreturn true;\n}\n}\n```\n\nHere, the defined guard function is provided as part of the `Route` object\nin the router configuration:\n\n```\n"
            }
          ],
          [
            "Injectable()",
            {
              "__kind": "heading",
              "description": "\nclass CanDeactivateTeam implements CanDeactivate<TeamComponent> {\nconstructor(private permissions: Permissions, private currentUser: UserToken) {}\n\ncanDeactivate(\ncomponent: TeamComponent,\ncurrentRoute: ActivatedRouteSnapshot,\ncurrentState: RouterStateSnapshot,\nnextState: RouterStateSnapshot\n): Observable<boolean|UrlTree>|Promise<boolean|UrlTree>|boolean|UrlTree {\nreturn this.permissions.canDeactivate(this.currentUser, route.params.id);\n}\n}\n"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [\nRouterModule.forRoot([\n{\npath: 'team/:id',\ncomponent: TeamComponent,\ncanDeactivate: [CanDeactivateTeam]\n}\n])\n],\nproviders: [CanDeactivateTeam, UserToken, Permissions]\n})\nclass AppModule {}\n```\n\nYou can alternatively provide an in-line function with the `canDeactivate` signature:\n\n```"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [\nRouterModule.forRoot([\n{\npath: 'team/:id',\ncomponent: TeamComponent,\ncanDeactivate: ['canDeactivateTeam']\n}\n])\n],\nproviders: [\n{\nprovide: 'canDeactivateTeam',\nuseValue: (component: TeamComponent, currentRoute: ActivatedRouteSnapshot, currentState:\nRouterStateSnapshot, nextState: RouterStateSnapshot) => true\n}\n]\n})\nclass AppModule {}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router",
    "name": "CanLoad",
    "overloads": [
      {
        "file": "packages/router/src/interfaces.ts#L469-L472",
        "signature": "interface CanLoad {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nInterface that a class can implement to be a guard deciding if children can be loaded.\nIf all guards return `true`, navigation continues. If any guard returns `false`,\nnavigation is cancelled. If any guard returns a `UrlTree`, current navigation\nis cancelled and a new navigation starts to the `UrlTree` returned from the guard.\n\nThe following example implements a `CanLoad` function that decides whether the\ncurrent user has permission to load requested child routes.\n\n\n```\nclass UserToken {}\nclass Permissions {\ncanLoadChildren(user: UserToken, id: string, segments: UrlSegment[]): boolean {\nreturn true;\n}\n}\n"
            }
          ],
          [
            "Injectable()",
            {
              "__kind": "heading",
              "description": "\nclass CanLoadTeamSection implements CanLoad {\nconstructor(private permissions: Permissions, private currentUser: UserToken) {}\n\ncanLoad(route: Route, segments: UrlSegment[]): Observable<boolean>|Promise<boolean>|boolean {\nreturn this.permissions.canLoadChildren(this.currentUser, route, segments);\n}\n}\n```\n\nHere, the defined guard function is provided as part of the `Route` object\nin the router configuration:\n\n```\n"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [\nRouterModule.forRoot([\n{\npath: 'team/:id',\ncomponent: TeamComponent,\nloadChildren: 'team.js',\ncanLoad: [CanLoadTeamSection]\n}\n])\n],\nproviders: [CanLoadTeamSection, UserToken, Permissions]\n})\nclass AppModule {}\n```\n\nYou can alternatively provide an in-line function with the `canLoad` signature:\n\n```"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [\nRouterModule.forRoot([\n{\npath: 'team/:id',\ncomponent: TeamComponent,\nloadChildren: 'team.js',\ncanLoad: ['canLoadTeamSection']\n}\n])\n],\nproviders: [\n{\nprovide: 'canLoadTeamSection',\nuseValue: (route: Route, segments: UrlSegment[]) => true\n}\n]\n})\nclass AppModule {}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router",
    "name": "Resolve",
    "overloads": [
      {
        "file": "packages/router/src/interfaces.ts#L387-L389",
        "signature": "interface Resolve<T> {}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nInterface that classes can implement to be a data provider.\nA data provider class can be used with the router to resolve data during navigation.\nThe interface defines a `resolve()` method that is invoked when the navigation starts.\nThe router waits for the data to be resolved before the route is finally activated.\n\nThe following example implements a `resolve()` method that retrieves the data\nneeded to activate the requested route.\n\n```"
            }
          ],
          [
            "Injectable({",
            {
              "__kind": "heading",
              "description": "providedIn: 'root' })\nexport class HeroResolver implements Resolve<Hero> {\nconstructor(private service: HeroService) {}\n\nresolve(\nroute: ActivatedRouteSnapshot,\nstate: RouterStateSnapshot\n): Observable<any>|Promise<any>|any {\nreturn this.service.getHero(route.paramMap.get('id'));\n}\n}\n```\n\nHere, the defined `resolve()` function is provided as part of the `Route` object\nin the router configuration:\n\n```\n"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [\nRouterModule.forRoot([\n{\npath: 'detail/:id',\ncomponent: HeroDetailComponent,\nresolve: {\nhero: HeroResolver\n}\n}\n])\n],\nexports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\nYou can alternatively provide an in-line function with the `resolve()` signature:\n\n```\nexport const myHero: Hero = {\n// ...\n}\n"
            }
          ],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [\nRouterModule.forRoot([\n{\npath: 'detail/:id',\ncomponent: HeroComponent,\nresolve: {\nhero: 'heroResolver'\n}\n}\n])\n],\nproviders: [\n{\nprovide: 'heroResolver',\nuseValue: (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => myHero\n}\n]\n})\nexport class AppModule {}\n```\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nWhen both guard and resolvers are specified, the resolvers are not executed until\nall guards have run and succeeded.\nFor example, consider the following route configuration:\n\n```\n{\npath: 'base'\ncanActivate: [BaseGuard],\nresolve: {data: BaseDataResolver}\nchildren: [\n{\npath: 'child',\nguards: [ChildGuard],\ncomponent: ChildComponent,\nresolve: {childData: ChildDataResolver}\n}\n]\n}\n```\nThe order of execution is: BaseGuard, ChildGuard, BaseDataResolver, ChildDataResolver.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "DetachedRouteHandle",
    "overloads": [
      {
        "file": "packages/router/src/route_reuse_strategy.ts#L25-L25",
        "signature": "export type DetachedRouteHandle = {};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nRepresents the detached route tree.\n\nThis is an opaque value the router will give to a custom route reuse strategy\nto store and retrieve later on.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouteReuseStrategy",
    "overloads": [
      {
        "file": "packages/router/src/route_reuse_strategy.ts#L41-L60",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nProvides a way to customize when activated routes get reused.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "shouldDetach",
              "info": {
                "file": "packages/router/src/route_reuse_strategy.ts#L43-L43",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "route",
                      "description": "",
                      "type": "ActivatedRouteSnapshot"
                    }
                  ]
                ],
                "signature": "abstract shouldDetach(route: ActivatedRouteSnapshot): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "store",
              "info": {
                "file": "packages/router/src/route_reuse_strategy.ts#L50-L50",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Stores the detached route.\n\nStoring a `null` value should erase the previously stored value.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "route",
                      "description": "",
                      "type": "ActivatedRouteSnapshot"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "handle",
                      "description": "",
                      "type": "DetachedRouteHandle"
                    }
                  ]
                ],
                "signature": "abstract store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle|null): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "shouldAttach",
              "info": {
                "file": "packages/router/src/route_reuse_strategy.ts#L53-L53",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "route",
                      "description": "",
                      "type": "ActivatedRouteSnapshot"
                    }
                  ]
                ],
                "signature": "abstract shouldAttach(route: ActivatedRouteSnapshot): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "retrieve",
              "info": {
                "file": "packages/router/src/route_reuse_strategy.ts#L56-L56",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "route",
                      "description": "",
                      "type": "ActivatedRouteSnapshot"
                    }
                  ]
                ],
                "signature": "abstract retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "shouldReuseRoute",
              "info": {
                "file": "packages/router/src/route_reuse_strategy.ts#L59-L59",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "future",
                      "description": "",
                      "type": "ActivatedRouteSnapshot"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "curr",
                      "description": "",
                      "type": "ActivatedRouteSnapshot"
                    }
                  ]
                ],
                "signature": "abstract shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;"
              }
            }
          ]
        ],
        "signature": "class RouteReuseStrategy {\n  abstract shouldDetach(route: ActivatedRouteSnapshot): boolean;\n  abstract store(\n    route: ActivatedRouteSnapshot,\n    handle: DetachedRouteHandle | null\n  ): void;\n  abstract shouldAttach(route: ActivatedRouteSnapshot): boolean;\n  abstract retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null;\n  abstract shouldReuseRoute(\n    future: ActivatedRouteSnapshot,\n    curr: ActivatedRouteSnapshot\n  ): boolean;\n}"
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "Navigation",
    "overloads": [
      {
        "file": "packages/router/src/router.ts#L231-L270",
        "signature": "export type Navigation = {\n  /**\n   * The unique identifier of the current navigation.\n   */\n  id: number;\n  /**\n   * The target URL passed into the `Router#navigateByUrl()` call before navigation. This is\n   * the value before the router has parsed or applied redirects to it.\n   */\n  initialUrl: string | UrlTree;\n  /**\n   * The initial target URL after being parsed with `UrlSerializer.extract()`.\n   */\n  extractedUrl: UrlTree;\n  /**\n   * The extracted URL after redirects have been applied.\n   * This URL may not be available immediately, therefore this property can be `undefined`.\n   * It is guaranteed to be set after the `RoutesRecognized` event fires.\n   */\n  finalUrl?: UrlTree;\n  /**\n   * Identifies how this navigation was triggered.\n   *\n   * * 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.\n   * * 'popstate'--Triggered by a popstate event.\n   * * 'hashchange'--Triggered by a hashchange event.\n   */\n  trigger: \"imperative\" | \"popstate\" | \"hashchange\";\n  /**\n   * Options that controlled the strategy used for this navigation.\n   * See `NavigationExtras`.\n   */\n  extras: NavigationExtras;\n  /**\n   * The previously successful `Navigation` object. Only one previous navigation\n   * is available, therefore this previous `Navigation` object has a `null` value\n   * for its own `previousNavigation`.\n   */\n  previousNavigation: Navigation | null;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Information about a navigation operation.\nRetrieve the most recent navigation object with the\n[Router.getCurrentNavigation() method](api/router/Router#getcurrentnavigation) .\n\n* *id* : The unique identifier of the current navigation.\n* *initialUrl* : The target URL passed into the `Router#navigateByUrl()` call before navigation.\nThis is the value before the router has parsed or applied redirects to it.\n* *extractedUrl* : The initial target URL after being parsed with `UrlSerializer.extract()`.\n* *finalUrl* : The extracted URL after redirects have been applied.\nThis URL may not be available immediately, therefore this property can be `undefined`.\nIt is guaranteed to be set after the `RoutesRecognized` event fires.\n* *trigger* : Identifies how this navigation was triggered.\n-- 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.\n-- 'popstate'--Triggered by a popstate event.\n-- 'hashchange'--Triggered by a hashchange event.\n* *extras* : A `NavigationExtras` options object that controlled the strategy used for this\nnavigation.\n* *previousNavigation* : The previously successful `Navigation` object. Only one previous\nnavigation is available, therefore this previous `Navigation` object has a `null` value for its\nown `previousNavigation`.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router",
    "name": "NavigationExtras",
    "overloads": [
      {
        "file": "packages/router/src/router.ts#L50-L181",
        "signature": "interface NavigationExtras {\n  relativeTo?: ActivatedRoute | null;\n  queryParams?: Params | null;\n  fragment?: string;\n  preserveQueryParams?: boolean;\n  queryParamsHandling?: QueryParamsHandling | null;\n  preserveFragment?: boolean;\n  skipLocationChange?: boolean;\n  replaceUrl?: boolean;\n  state?: { [k: string]: any };\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nOptions that modify the `Router` navigation strategy.\nSupply an object containing any of these properties to a `Router` navigation function to\ncontrol how the target URL should be constructed or interpreted.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Router.navigate() method](api/router/Router#navigate)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Router.navigateByUrl() method](api/router/Router#navigatebyurl)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Router.createUrlTree() method](api/router/Router#createurltree)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Routing and Navigation guide](guide/router)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "relativeTo",
              "description": "Specifies a root URI to use for relative navigation.\n\nFor example, consider the following route configuration where the parent route\nhas two children.\n\n```\n[{\n  path: 'parent',\n  component: ParentComponent,\n  children: [{\n    path: 'list',\n    component: ListComponent\n  },{\n    path: 'child',\n    component: ChildComponent\n  }]\n}]\n```\n\nThe following `go()` function navigates to the `list` route by\ninterpreting the destination URI as relative to the activated `child`  route\n\n```",
              "type": "ActivatedRoute"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queryParams",
              "description": "Sets query parameters to the URL.\n\n```\n// Navigate to /results?page=1\nthis.router.navigate(['/results'], { queryParams: { page: 1 } });\n```",
              "type": "Params"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "fragment",
              "description": "Sets the hash fragment for the URL.\n\n```\n// Navigate to /results#top\nthis.router.navigate(['/results'], { fragment: 'top' });\n```",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preserveQueryParams",
              "description": "**DEPRECATED**: Use `queryParamsHandling: \"preserve\"` instead to preserve\nquery parameters for the next navigation.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "queryParamsHandling",
              "description": "How to handle query parameters in the router link for the next navigation.\nOne of:\n* `preserve` : Preserve current parameters.\n* `merge` : Merge new with current parameters.\n\nThe \"preserve\" option discards any new query params:\n```\n// from /view1?page=1 to/view2?page=1\nthis.router.navigate(['/view2'], { queryParams: { page: 2 },  queryParamsHandling: \"preserve\"\n});\n```\nThe \"merge\" option appends new query params to the params from the current URL:\n```\n// from /view1?page=1 to/view2?page=1&otherKey=2\nthis.router.navigate(['/view2'], { queryParams: { otherKey: 2 },  queryParamsHandling: \"merge\"\n});\n```\nIn case of a key collision between current parameters and those in the `queryParams` object,\nthe new value is used.",
              "type": "QueryParamsHandling"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preserveFragment",
              "description": "When true, preserves the URL fragment for the next navigation\n\n```\n// Preserve fragment from /results#top to /view#top\nthis.router.navigate(['/view'], { preserveFragment: true });\n```",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "skipLocationChange",
              "description": "When true, navigates without pushing a new state into history.\n\n```\n// Navigate silently to /view\nthis.router.navigate(['/view'], { skipLocationChange: true });\n```",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "replaceUrl",
              "description": "When true, navigates while replacing the current state in history.\n\n```\n// Navigate to /view\nthis.router.navigate(['/view'], { replaceUrl: true });\n```",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "state",
              "description": "Developer-defined state that can be passed to any navigation.\nAccess this value through the `Navigation.extras` object\nreturned from the [Router.getCurrentNavigation()\nmethod](api/router/Router#getcurrentnavigation) while a navigation is executing.\n\nAfter a navigation completes, the router writes an object containing this\nvalue together with a `navigationId` to `history.state`.\nThe value is written when `location.go()` or `location.replaceState()`\nis called before activating this route.\n\nNote that `history.state` does not pass an object equality test because\nthe router adds the `navigationId` on each navigation.",
              "type": "{ [k: string]: any; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "Router",
    "overloads": [
      {
        "file": "packages/router/src/router.ts#L339-L1316",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nA service that provides navigation among views and URL manipulation capabilities.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`Route`." }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Routing and Navigation Guide](guide/router).\n"
            }
          ],
          [
            "ngModule",
            { "__kind": "heading", "description": "RouterModule\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "events",
              "description": "An event stream for routing events in this NgModule.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "routerState",
              "description": "The current state of routing in this NgModule.",
              "type": "RouterState"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "errorHandler",
              "description": "A handler for navigation errors in this NgModule.",
              "type": "ErrorHandler"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "malformedUriErrorHandler",
              "description": "A handler for errors thrown by `Router.parseUrl(url)`\nwhen `url` contains an invalid character.\nThe most common case is a `%` sign\nthat's not encoded and is not part of a percent encoded sequence.",
              "type": "(error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "navigated",
              "description": "True if at least one navigation event has occurred,\nfalse otherwise.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "hooks",
              "description": "Hooks that enable you to pause navigation,\neither before or after the preactivation phase.\nUsed by `RouterModule`.",
              "type": "{ beforePreactivation: RouterHook; afterPreactivation: RouterHook; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "urlHandlingStrategy",
              "description": "A strategy for extracting and merging URLs.\nUsed for AngularJS to Angular migrations.",
              "type": "UrlHandlingStrategy"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "routeReuseStrategy",
              "description": "A strategy for re-using routes.",
              "type": "RouteReuseStrategy"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onSameUrlNavigation",
              "description": "How to handle a navigation request to the current URL. One of:\n- `'ignore'` :  The router ignores the request.\n- `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.",
              "type": "\"reload\" | \"ignore\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "paramsInheritanceStrategy",
              "description": "How to merge parameters, data, and resolved data from parent to child\nroutes. One of:\n\n- `'emptyOnly'` : Inherit parent parameters, data, and resolved data\nfor path-less or component-less routes.\n- `'always'` : Inherit parent parameters, data, and resolved data\nfor all child routes.",
              "type": "\"emptyOnly\" | \"always\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "urlUpdateStrategy",
              "description": "Determines when the router updates the browser URL.\nBy default (`\"deferred\"`), updates the browser URL after navigation has finished.\nSet to `'eager'` to update the browser URL at the beginning of navigation.\nYou can choose to update early so that, if navigation fails,\nyou can show an error message with the URL that failed.",
              "type": "\"deferred\" | \"eager\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "relativeLinkResolution",
              "description": "Enables a bug fix that corrects relative link resolution in components with empty paths.",
              "type": "\"legacy\" | \"corrected\""
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resetRootComponentType",
              "info": {
                "file": "packages/router/src/router.ts#L875-L880",
                "info": [
                  [
                    "internal",
                    {
                      "__kind": "heading",
                      "description": "\nTODO: this should be removed once the constructor of the router made internal\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rootComponentType",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "resetRootComponentType(rootComponentType: Type<any>): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "initialNavigation",
              "info": {
                "file": "packages/router/src/router.ts#L898-L903",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets up the location change listener and performs the initial navigation.\n"
                    }
                  ]
                ],
                "signature": "initialNavigation(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "setUpLocationChangeListener",
              "info": {
                "file": "packages/router/src/router.ts#L910-L928",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Sets up the location change listener. This listener detects navigations triggered from outside\nthe Router (the browser back/forward buttons, for example) and schedules a corresponding Router\nnavigation so that the correct events, guards, etc. are triggered.\n"
                    }
                  ]
                ],
                "signature": "setUpLocationChangeListener(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getCurrentNavigation",
              "info": {
                "file": "packages/router/src/router.ts#L972-L974",
                "info": [],
                "signature": "getCurrentNavigation(): Navigation|null;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "triggerEvent",
              "info": {
                "file": "packages/router/src/router.ts#L977-L979",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "event",
                      "description": "",
                      "type": "Event"
                    }
                  ]
                ],
                "signature": "triggerEvent(event: Event): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "resetConfig",
              "info": {
                "file": "packages/router/src/router.ts#L997-L1002",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Resets the route configuration used for navigation and generating links.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "The route array for the new configuration.",
                      "type": "Routes"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n```\nrouter.resetConfig([\n{ path: 'team/:id', component: TeamCmp, children: [\n{ path: 'simple', component: SimpleCmp },\n{ path: 'user/:name', component: UserCmp }\n]}\n]);\n```\n"
                    }
                  ]
                ],
                "signature": "resetConfig(config: Routes): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/router/src/router.ts#L1005-L1007",
                "info": [],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "dispose",
              "info": {
                "file": "packages/router/src/router.ts#L1010-L1015",
                "info": [],
                "signature": "dispose(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "createUrlTree",
              "info": {
                "file": "packages/router/src/router.ts#L1063-L1096",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Appends URL segments to the current URL tree to create a new URL tree.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "commands",
                      "description": "An array of URL fragments with which to construct the new URL tree.",
                      "type": "any[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "navigationExtras",
                      "description": "Options that control the navigation strategy. This function",
                      "type": "NavigationExtras"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "The new URL tree.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\n```\n// create /team/33/user/11\nrouter.createUrlTree(['/team', 33, 'user', 11]);\n\n// create /team/33;expand=true/user/11\nrouter.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n\n// you can collapse static segments like this (this works only with the first passed-in value):\nrouter.createUrlTree(['/team/33/user', userId]);\n\n// If the first segment can contain slashes, and you do not want the router to split it,\n// you can do the following:\nrouter.createUrlTree([{segmentPath: '/one/two'}]);\n\n// create /team/33/(user/11//right:chat)\nrouter.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n\n// remove the right secondary node\nrouter.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n\n// assuming the current url is `/team/33/user/11` and the route points to `user/11`\n\n// navigate to /team/33/user/11/details\nrouter.createUrlTree(['details'], {relativeTo: route});\n\n// navigate to /team/33/user/22\nrouter.createUrlTree(['../22'], {relativeTo: route});\n\n// navigate to /team/44/user/22\nrouter.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n```\n"
                    }
                  ]
                ],
                "signature": "createUrlTree(commands: any[], navigationExtras: NavigationExtras = {}): UrlTree;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "navigateByUrl",
              "info": {
                "file": "packages/router/src/router.ts#L1124-L1135",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Navigates to a view using an absolute route path.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "An absolute path for a defined route. The function does not apply any delta to the",
                      "type": "string | UrlTree"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "extras",
                      "description": "An object containing properties that modify the navigation strategy.",
                      "type": "NavigationExtras"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A Promise that resolves to 'true' when navigation succeeds,\nto 'false' when navigation fails, or is rejected on error.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\nThe following calls request navigation to an absolute path.\n\n```\nrouter.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n```\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "[Routing and Navigation guide](guide/router)\n\n"
                    }
                  ]
                ],
                "signature": "navigateByUrl(url: string|UrlTree, extras: NavigationExtras = {skipLocationChange: false}):   Promise<boolean>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "navigate",
              "info": {
                "file": "packages/router/src/router.ts#L1167-L1171",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Navigate based on the provided array of commands and a starting point.\nIf no starting route is provided, the navigation is absolute.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "commands",
                      "description": "An array of URL fragments with which to construct the target URL.",
                      "type": "any[]"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "extras",
                      "description": "An options object that determines how the URL should be constructed or",
                      "type": "NavigationExtras"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A Promise that resolves to `true` when navigation succeeds, to `false` when navigation\nfails,\nor is rejected on error.\n"
                    }
                  ],
                  [
                    "usageNotes",
                    {
                      "__kind": "heading",
                      "description": "\n\nThe following calls request navigation to a dynamic route path relative to the current URL.\n\n```\nrouter.navigate(['team', 33, 'user', 11], {relativeTo: route});\n\n// Navigate without updating the URL, overriding the default behavior\nrouter.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n```\n"
                    }
                  ],
                  [
                    "see",
                    {
                      "__kind": "heading",
                      "description": "[Routing and Navigation guide](guide/router)\n\n"
                    }
                  ]
                ],
                "signature": "navigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}):   Promise<boolean>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "serializeUrl",
              "info": {
                "file": "packages/router/src/router.ts#L1174-L1176",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "UrlTree"
                    }
                  ]
                ],
                "signature": "serializeUrl(url: UrlTree): string;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "parseUrl",
              "info": {
                "file": "packages/router/src/router.ts#L1179-L1187",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "parseUrl(url: string): UrlTree;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "isActive",
              "info": {
                "file": "packages/router/src/router.ts#L1190-L1197",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string | UrlTree"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "exact",
                      "description": "",
                      "type": "boolean"
                    }
                  ]
                ],
                "signature": "isActive(url: string|UrlTree, exact: boolean): boolean;"
              }
            }
          ]
        ],
        "signature": "class Router {\n  public readonly events: Observable<Event> = new Subject<Event>();\n  public readonly routerState: RouterState;\n  errorHandler: ErrorHandler = defaultErrorHandler;\n  malformedUriErrorHandler: (\n    error: URIError,\n    urlSerializer: UrlSerializer,\n    url: string\n  ) => UrlTree = defaultMalformedUriErrorHandler;\n  navigated: boolean = false;\n  hooks: {\n    beforePreactivation: RouterHook;\n    afterPreactivation: RouterHook;\n  } = {\n    beforePreactivation: defaultRouterHook,\n    afterPreactivation: defaultRouterHook,\n  };\n  urlHandlingStrategy: UrlHandlingStrategy = new DefaultUrlHandlingStrategy();\n  routeReuseStrategy: RouteReuseStrategy = new DefaultRouteReuseStrategy();\n  onSameUrlNavigation: \"reload\" | \"ignore\" = \"ignore\";\n  paramsInheritanceStrategy: \"emptyOnly\" | \"always\" = \"emptyOnly\";\n  urlUpdateStrategy: \"deferred\" | \"eager\" = \"deferred\";\n  relativeLinkResolution: \"legacy\" | \"corrected\" = \"legacy\";\n\n  resetRootComponentType(rootComponentType: Type<any>): void;\n  initialNavigation(): void;\n  setUpLocationChangeListener(): void;\n  getCurrentNavigation(): Navigation | null;\n  triggerEvent(event: Event): void;\n  resetConfig(config: Routes): void;\n  ngOnDestroy(): void;\n  dispose(): void;\n  createUrlTree(\n    commands: any[],\n    navigationExtras: NavigationExtras = {}\n  ): UrlTree;\n  navigateByUrl(\n    url: string | UrlTree,\n    extras: NavigationExtras = { skipLocationChange: false }\n  ): Promise<boolean>;\n  navigate(\n    commands: any[],\n    extras: NavigationExtras = { skipLocationChange: false }\n  ): Promise<boolean>;\n  serializeUrl(url: UrlTree): string;\n  parseUrl(url: string): UrlTree;\n  isActive(url: string | UrlTree, exact: boolean): boolean;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router",
    "name": "ROUTES",
    "overloads": [
      {
        "file": "packages/router/src/router_config_loader.ts#L21-L21",
        "signature": "const ROUTES: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router",
    "name": "ExtraOptions",
    "overloads": [
      {
        "file": "packages/router/src/router_module.ts#L261-L432",
        "signature": "interface ExtraOptions {\n  enableTracing?: boolean;\n  useHash?: boolean;\n  initialNavigation?: InitialNavigation;\n  errorHandler?: ErrorHandler;\n  preloadingStrategy?: any;\n  onSameUrlNavigation?: \"reload\" | \"ignore\";\n  scrollPositionRestoration?: \"disabled\" | \"enabled\" | \"top\";\n  anchorScrolling?: \"disabled\" | \"enabled\";\n  scrollOffset?: [number, number] | (() => [number, number]);\n  paramsInheritanceStrategy?: \"emptyOnly\" | \"always\";\n  malformedUriErrorHandler?: (\n    error: URIError,\n    urlSerializer: UrlSerializer,\n    url: string\n  ) => UrlTree;\n  urlUpdateStrategy?: \"deferred\" | \"eager\";\n  relativeLinkResolution?: \"legacy\" | \"corrected\";\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A set of configuration options for a router module, provided in the\n`forRoot()` method.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`forRoot()`\n\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "enableTracing",
              "description": "When true, log all internal navigation events to the console.\nUse for debugging.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "useHash",
              "description": "When true, enable the location strategy that uses the URL fragment\ninstead of the history API.",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "initialNavigation",
              "description": "One of `enabled` or `disabled`.\nWhen set to `enabled`, the initial navigation starts before the root component is created.\nThe bootstrap is blocked until the initial navigation is complete. This value is required for\n[server-side rendering](guide/universal) to work.\nWhen set to `disabled`, the initial navigation is not performed.\nThe location listener is set up before the root component gets created.\nUse if there is a reason to have more control over when the router\nstarts its initial navigation due to some complex initialization logic.\n\nLegacy values are deprecated since v4 and should not be used for new applications:\n\n* `legacy_enabled` - Default for compatibility.\nThe initial navigation starts after the root component has been created,\nbut the bootstrap is not blocked until the initial navigation is complete.\n* `legacy_disabled` - The initial navigation is not performed.\nThe location listener is set up after the root component gets created.\n* `true` - same as `legacy_enabled`.\n* `false` - same as `legacy_disabled`.",
              "type": "InitialNavigation"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "errorHandler",
              "description": "A custom error handler for failed navigations.\nIf the handler returns a value, the navigation Promise is resolved with this value.\nIf the handler throws an exception, the navigation Promise is rejected with the exception.",
              "type": "ErrorHandler"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "preloadingStrategy",
              "description": "Configures a preloading strategy.\nOne of `PreloadAllModules` or `NoPreloading` (the default).",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "onSameUrlNavigation",
              "description": "Define what the router should do if it receives a navigation request to the current URL.\nDefault is `ignore`, which causes the router ignores the navigation.\nThis can disable features such as a \"refresh\" button.\nUse this option to configure the behavior when navigating to the\ncurrent URL. Default is 'ignore'.",
              "type": "\"reload\" | \"ignore\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "scrollPositionRestoration",
              "description": "Configures if the scroll position needs to be restored when navigating back.\n\n* 'disabled'- (Default) Does nothing. Scroll position is maintained on navigation.\n* 'top'- Sets the scroll position to x = 0, y = 0 on all navigation.\n* 'enabled'- Restores the previous scroll position on backward navigation, else sets the\nposition to the anchor if one is provided, or sets the scroll position to [0, 0] (forward\nnavigation). This option will be the default in the future.\n\nYou can implement custom scroll restoration behavior by adapting the enabled behavior as\nin the following example.\n\n```typescript\nclass AppModule {\n  constructor(router: Router, viewportScroller: ViewportScroller) {\n    router.events.pipe(\n      filter((e: Event): e is Scroll => e instanceof Scroll)\n    ).subscribe(e => {\n      if (e.position) {\n        // backward navigation\n        viewportScroller.scrollToPosition(e.position);\n      } else if (e.anchor) {\n        // anchor navigation\n        viewportScroller.scrollToAnchor(e.anchor);\n      } else {\n        // forward navigation\n        viewportScroller.scrollToPosition([0, 0]);\n      }\n    });\n  }\n}\n```",
              "type": "\"enabled\" | \"disabled\" | \"top\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "anchorScrolling",
              "description": "When set to 'enabled', scrolls to the anchor element when the URL has a fragment.\nAnchor scrolling is disabled by default.\n\nAnchor scrolling does not happen on 'popstate'. Instead, we restore the position\nthat we stored or scroll to the top.",
              "type": "\"enabled\" | \"disabled\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "scrollOffset",
              "description": "Configures the scroll offset the router will use when scrolling to an element.\n\nWhen given a tuple with x and y position value,\nthe router uses that offset each time it scrolls.\nWhen given a function, the router invokes the function every time\nit restores scroll position.",
              "type": "[number, number] | (() => [number, number])"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "paramsInheritanceStrategy",
              "description": "Defines how the router merges parameters, data, and resolved data from parent to child\nroutes. By default ('emptyOnly'), inherits parent parameters only for\npath-less or component-less routes.\nSet to 'always' to enable unconditional inheritance of parent parameters.",
              "type": "\"emptyOnly\" | \"always\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "malformedUriErrorHandler",
              "description": "A custom handler for malformed URI errors. The handler is invoked when `encodedURI` contains\ninvalid character sequences.\nThe default implementation is to redirect to the root URL, dropping\nany path or parameter information. The function takes three parameters:\n\n- `'URIError'` - Error thrown when parsing a bad URL.\n- `'UrlSerializer'` - UrlSerializer that’s configured with the router.\n- `'url'` -  The malformed URL that caused the URIError",
              "type": "(error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "urlUpdateStrategy",
              "description": "Defines when the router updates the browser URL. By default ('deferred'),\nupdate after successful navigation.\nSet to 'eager' if prefer to update the URL at the beginning of navigation.\nUpdating the URL early allows you to handle a failure of navigation by\nshowing an error message with the URL that failed.",
              "type": "\"deferred\" | \"eager\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "relativeLinkResolution",
              "description": "Enables a bug fix that corrects relative link resolution in components with empty paths.\nExample:\n\n```\nconst routes = [\n  {\n    path: '',\n    component: ContainerComponent,\n    children: [\n      { path: 'a', component: AComponent },\n      { path: 'b', component: BComponent },\n    ]\n  }\n];\n```\n\nFrom the `ContainerComponent`, this will not work:\n\n`<a [routerLink]=\"['./a']\">Link to A</a>`\n\nHowever, this will work:\n\n`<a [routerLink]=\"['../a']\">Link to A</a>`\n\nIn other words, you're required to use `../` rather than `./`. This is currently the default\nbehavior. Setting this option to `corrected` enables the fix.",
              "type": "\"legacy\" | \"corrected\""
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "InitialNavigation",
    "overloads": [
      {
        "file": "packages/router/src/router_module.ts#L250-L250",
        "signature": "export type InitialNavigation =\n  | true\n  | false\n  | \"enabled\"\n  | \"disabled\"\n  | \"legacy_enabled\"\n  | \"legacy_disabled\";",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Allowed values in an `ExtraOptions` object that configure\nwhen the router performs the initial navigation operation.\n\n* 'enabled' - The initial navigation starts before the root component is created.\nThe bootstrap is blocked until the initial navigation is complete. This value is required\nfor [server-side rendering](guide/universal) to work.\n* 'disabled' - The initial navigation is not performed. The location listener is set up before\nthe root component gets created. Use if there is a reason to have\nmore control over when the router starts its initial navigation due to some complex\ninitialization logic.\n\nThe following values have been [deprecated](guide/releases#deprecation-practices) since v4,\nand should not be used for new applications.\n\n* 'legacy_enabled'- (Default, for compatibility.) The initial navigation starts after the root\ncomponent has been created. The bootstrap is not blocked until the initial navigation is\ncomplete.\n* 'legacy_disabled'- The initial navigation is not performed. The location listener is set up\nafter the root component gets created.\n* `true` - same as 'legacy_enabled'.\n* `false` - same as 'legacy_disabled'.\n\nThe 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`forRoot()`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "router",
    "name": "provideRoutes",
    "overloads": [
      {
        "file": "packages/router/src/router_module.ts#L214-L219",
        "signature": "function provideRoutes(routes: Routes): any;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Registers a [DI provider](guide/glossary#provider) for a set of routes."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "routes",
              "description": "The route configuration to provide.",
              "type": "Routes"
            }
          ],
          ["usageNotes", { "__kind": "heading", "description": "\n\n```" }],
          [
            "NgModule({",
            {
              "__kind": "heading",
              "description": "\nimports: [RouterModule.forChild(ROUTES)],\nproviders: [provideRoutes(EXTRA_ROUTES)]\n})\nclass MyNgModule {}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router",
    "name": "ROUTER_CONFIGURATION",
    "overloads": [
      {
        "file": "packages/router/src/router_module.ts#L41-L41",
        "signature": "const ROUTER_CONFIGURATION: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router",
    "name": "ROUTER_INITIALIZER",
    "overloads": [
      {
        "file": "packages/router/src/router_module.ts#L595-L596",
        "signature": "const ROUTER_INITIALIZER: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouterModule",
    "overloads": [
      {
        "file": "packages/router/src/router_module.ts#L94-L174",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nAdds directives and providers for in-app navigation among views defined in an application.\nUse the Angular `Router` service to declaratively specify application states and manage state\ntransitions.\n\nYou can import this NgModule multiple times, once for each lazy-loaded bundle.\nHowever, only one `Router` service can be active.\nTo ensure this, there are two ways to register routes when importing this module:\n\n* The `forRoot()` method creates an `NgModule` that contains all the directives, the given\nroutes, and the `Router` service itself.\n* The `forChild()` method creates an `NgModule` that contains all the directives and the given\nroutes, but does not include the `Router` service.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Routing and Navigation guide](guide/router) for an\noverview of how the `Router` service should be used.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "forRoot",
              "info": {
                "file": "packages/router/src/router_module.ts#L121-L153",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates and configures a module with all the router providers and directives.\nOptionally sets up an application listener to perform an initial navigation.\n\nWhen registering the NgModule at the root, import as follows:\n\n```"
                    }
                  ],
                  [
                    "NgModule({",
                    {
                      "__kind": "heading",
                      "description": "\nimports: [RouterModule.forRoot(ROUTES)]\n})\nclass MyNgModule {}\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "routes",
                      "description": "An array of `Route` objects that define the navigation paths for the application.",
                      "type": "Routes"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "config",
                      "description": "An `ExtraOptions` configuration object that controls how navigation is performed.",
                      "type": "ExtraOptions"
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "The new `NgModule`.\n\n"
                    }
                  ]
                ],
                "signature": "static forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterModule>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "forChild",
              "info": {
                "file": "packages/router/src/router_module.ts#L171-L173",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Creates a module with all the router directives and a provider registering routes,\nwithout creating a new Router service.\nWhen registering for submodules and lazy-loaded submodules, create the NgModule as follows:\n\n```"
                    }
                  ],
                  [
                    "NgModule({",
                    {
                      "__kind": "heading",
                      "description": "\nimports: [RouterModule.forChild(ROUTES)]\n})\nclass MyNgModule {}\n```\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "routes",
                      "description": "An array of `Route` objects that define the navigation paths for the submodule.",
                      "type": "Routes"
                    }
                  ],
                  [
                    "return",
                    {
                      "__kind": "heading",
                      "description": "The new NgModule.\n\n"
                    }
                  ]
                ],
                "signature": "static forChild(routes: Routes): ModuleWithProviders<RouterModule>;"
              }
            }
          ]
        ],
        "signature": "class RouterModule {\n  static forRoot(\n    routes: Routes,\n    config?: ExtraOptions\n  ): ModuleWithProviders<RouterModule>;\n  static forChild(routes: Routes): ModuleWithProviders<RouterModule>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "ChildrenOutletContexts",
    "overloads": [
      {
        "file": "packages/router/src/router_outlet_context.ts#L33-L84",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Store contextual information about the children (= nested) `RouterOutlet`\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "onChildOutletCreated",
              "info": {
                "file": "packages/router/src/router_outlet_context.ts#L38-L42",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "childName",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "outlet",
                      "description": "",
                      "type": "RouterOutlet"
                    }
                  ]
                ],
                "signature": "onChildOutletCreated(childName: string, outlet: RouterOutlet): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onChildOutletDestroyed",
              "info": {
                "file": "packages/router/src/router_outlet_context.ts#L49-L54",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Called when a `RouterOutlet` directive is destroyed.\nWe need to keep the context as the outlet could be destroyed inside a NgIf and might be\nre-created later.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "childName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "onChildOutletDestroyed(childName: string): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onOutletDeactivated",
              "info": {
                "file": "packages/router/src/router_outlet_context.ts#L60-L64",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Called when the corresponding route is deactivated during navigation.\nBecause the component get destroyed, all children outlet are destroyed.\n"
                    }
                  ]
                ],
                "signature": "onOutletDeactivated(): Map<string, OutletContext>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "onOutletReAttached",
              "info": {
                "file": "packages/router/src/router_outlet_context.ts#L66-L68",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "contexts",
                      "description": "",
                      "type": "any"
                    }
                  ]
                ],
                "signature": "onOutletReAttached(contexts: Map<string, OutletContext>);"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getOrCreateContext",
              "info": {
                "file": "packages/router/src/router_outlet_context.ts#L70-L79",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "childName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getOrCreateContext(childName: string): OutletContext;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "getContext",
              "info": {
                "file": "packages/router/src/router_outlet_context.ts#L81-L83",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "childName",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "getContext(childName: string): OutletContext|null;"
              }
            }
          ]
        ],
        "signature": "class ChildrenOutletContexts {\n  onChildOutletCreated(childName: string, outlet: RouterOutlet): void;\n  onChildOutletDestroyed(childName: string): void;\n  onOutletDeactivated(): Map<string, OutletContext>;\n  onOutletReAttached(contexts: Map<string, OutletContext>);\n  getOrCreateContext(childName: string): OutletContext;\n  getContext(childName: string): OutletContext | null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "OutletContext",
    "overloads": [
      {
        "file": "packages/router/src/router_outlet_context.ts#L20-L26",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Store contextual information about a `RouterOutlet`\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "outlet",
              "description": "",
              "type": "RouterOutlet"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "route",
              "description": "",
              "type": "ActivatedRoute"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "resolver",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "children",
              "description": "",
              "type": "ChildrenOutletContexts"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "attachRef",
              "description": "",
              "type": "any"
            }
          ]
        ],
        "signature": "class OutletContext {\n  outlet: RouterOutlet | null = null;\n  route: ActivatedRoute | null = null;\n  resolver: ComponentFactoryResolver | null = null;\n  children = new ChildrenOutletContexts();\n  attachRef: ComponentRef<any> | null = null;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "NoPreloading",
    "overloads": [
      {
        "file": "packages/router/src/router_preloader.ts#L56-L60",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nProvides a preloading strategy that does not preload any modules.\n\nThis strategy is enabled by default.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "preload",
              "info": {
                "file": "packages/router/src/router_preloader.ts#L57-L59",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "route",
                      "description": "",
                      "type": "Route"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "() => any"
                    }
                  ]
                ],
                "signature": "preload(route: Route, fn: () => Observable<any>): Observable<any>;"
              }
            }
          ]
        ],
        "signature": "class NoPreloading implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "PreloadAllModules",
    "overloads": [
      {
        "file": "packages/router/src/router_preloader.ts#L41-L45",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nProvides a preloading strategy that preloads all modules as quickly as possible.\n\n```\nRouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "preload",
              "info": {
                "file": "packages/router/src/router_preloader.ts#L42-L44",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "route",
                      "description": "",
                      "type": "Route"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "() => any"
                    }
                  ]
                ],
                "signature": "preload(route: Route, fn: () => Observable<any>): Observable<any>;"
              }
            }
          ]
        ],
        "signature": "class PreloadAllModules implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "PreloadingStrategy",
    "overloads": [
      {
        "file": "packages/router/src/router_preloader.ts#L26-L28",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nProvides a preloading strategy.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "preload",
              "info": {
                "file": "packages/router/src/router_preloader.ts#L27-L27",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "route",
                      "description": "",
                      "type": "Route"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "fn",
                      "description": "",
                      "type": "() => any"
                    }
                  ]
                ],
                "signature": "abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;"
              }
            }
          ]
        ],
        "signature": "class PreloadingStrategy {\n  abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouterPreloader",
    "overloads": [
      {
        "file": "packages/router/src/router_preloader.ts#L74-L137",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "The preloader optimistically loads all router configurations to\nmake navigations into lazily-loaded sections of the application faster.\n\nThe preloader runs in the background. When the router bootstraps, the preloader\nstarts listening to all navigation events. After every such event, the preloader\nwill check if any configurations can be loaded lazily.\n\nIf a route is protected by `canLoad` guards, the preloaded will not load it.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "setUpPreloading",
              "info": {
                "file": "packages/router/src/router_preloader.ts#L89-L94",
                "info": [],
                "signature": "setUpPreloading(): void;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "preload",
              "info": {
                "file": "packages/router/src/router_preloader.ts#L96-L99",
                "info": [],
                "signature": "preload(): Observable<any>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "ngOnDestroy",
              "info": {
                "file": "packages/router/src/router_preloader.ts#L104-L106",
                "info": [],
                "signature": "ngOnDestroy(): void;"
              }
            }
          ]
        ],
        "signature": "class RouterPreloader implements OnDestroy {\n  setUpPreloading(): void;\n  preload(): Observable<any>;\n  ngOnDestroy(): void;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "ActivatedRoute",
    "overloads": [
      {
        "file": "packages/router/src/router_state.ts#L108-L197",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Provides access to information about a route associated with a component\nthat is loaded in an outlet.\nUse to traverse the `RouterState` tree and extract information from nodes.\n\nThe following example shows how to construct a component using information from a\ncurrently activated route.\n\n{@example router/activated-route/module.ts region=\"activated-route\"\nheader=\"activated-route.component.ts\"}\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Getting route information](guide/router#getting-route-information)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "snapshot",
              "description": "The current snapshot of this route",
              "type": "ActivatedRouteSnapshot"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_futureSnapshot",
              "description": "",
              "type": "ActivatedRouteSnapshot"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_routerState",
              "description": "",
              "type": "RouterState"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_paramMap",
              "description": "",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_queryParamMap",
              "description": "",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/router_state.ts#L194-L196",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ActivatedRoute {\n  snapshot!: ActivatedRouteSnapshot;\n  _futureSnapshot: ActivatedRouteSnapshot;\n  _routerState!: RouterState;\n  _paramMap!: Observable<ParamMap>;\n  _queryParamMap!: Observable<ParamMap>;\n\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "ActivatedRouteSnapshot",
    "overloads": [
      {
        "file": "packages/router/src/router_state.ts#L275-L364",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nContains the information about a route associated with a component loaded in an\noutlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\ntraverse the router state tree.\n\nThe following example initializes a component with route information extracted\nfrom the snapshot of the root node at the time of creation.\n\n```"
            }
          ],
          [
            "Component({templateUrl:'./my-component.html'})",
            {
              "__kind": "heading",
              "description": "\nclass MyComponent {\nconstructor(route: ActivatedRoute) {\nconst id: string = route.snapshot.params.id;\nconst url: string = route.snapshot.url.join('');\nconst user = route.snapshot.data.user;\n}\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "routeConfig",
              "description": "The configuration used to match this route",
              "type": "Route"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_urlSegment",
              "description": "",
              "type": "UrlSegmentGroup"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_lastPathIndex",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_resolve",
              "description": "",
              "type": "ResolveData"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_resolvedData",
              "description": "",
              "type": "Data"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_routerState",
              "description": "",
              "type": "RouterStateSnapshot"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_paramMap",
              "description": "",
              "type": "ParamMap"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_queryParamMap",
              "description": "",
              "type": "ParamMap"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/router_state.ts#L359-L363",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class ActivatedRouteSnapshot {\n  public readonly routeConfig: Route | null;\n  _urlSegment: UrlSegmentGroup;\n  _lastPathIndex: number;\n  _resolve: ResolveData;\n  _resolvedData!: Data;\n  _routerState!: RouterStateSnapshot;\n  _paramMap!: ParamMap;\n  _queryParamMap!: ParamMap;\n\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouterState",
    "overloads": [
      {
        "file": "packages/router/src/router_state.ts#L52-L65",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Represents the state of the router as a tree of activated routes.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nEvery node in the route tree is an `ActivatedRoute` instance\nthat knows about the \"consumed\" URL segments, the extracted parameters,\nand the resolved data.\nUse the `ActivatedRoute` properties to traverse the tree from any node.\n\nThe following fragment shows how a component gets the root node\nof the current state to establish its own route tree:\n\n```"
            }
          ],
          [
            "Component({templateUrl:'template.html'})",
            {
              "__kind": "heading",
              "description": "\nclass MyComponent {\nconstructor(router: Router) {\nconst state: RouterState = router.routerState;\nconst root: ActivatedRoute = state.root;\nconst child = root.firstChild;\nconst id: Observable<string> = child.params.map(p => p.id);\n//...\n}\n}\n```\n"
            }
          ],
          ["see", { "__kind": "heading", "description": "`ActivatedRoute`" }],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Getting route information](guide/router#getting-route-information)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/router_state.ts#L62-L64",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class RouterState extends Tree<ActivatedRoute> {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "RouterStateSnapshot",
    "overloads": [
      {
        "file": "packages/router/src/router_state.ts#L393-L405",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nRepresents the state of the router at a moment in time.\n\nThis is a tree of activated route snapshots. Every node in this tree knows about\nthe \"consumed\" URL segments, the extracted parameters, and the resolved data.\n\nThe following example shows how a component is initialized with information\nfrom the snapshot of the root node's state at the time of creation.\n\n```"
            }
          ],
          [
            "Component({templateUrl:'template.html'})",
            {
              "__kind": "heading",
              "description": "\nclass MyComponent {\nconstructor(router: Router) {\nconst state: RouterState = router.routerState;\nconst snapshot: RouterStateSnapshot = state.snapshot;\nconst root: ActivatedRouteSnapshot = snapshot.root;\nconst child = root.firstChild;\nconst id: Observable<string> = child.params.map(p => p.id);\n//...\n}\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/router_state.ts#L402-L404",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "router",
    "name": "convertToParamMap",
    "overloads": [
      {
        "file": "packages/router/src/shared.ts#L110-L112",
        "signature": "function convertToParamMap(params: Params): ParamMap;",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Converts a `Params` instance to a `ParamMap`."
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "params",
              "description": "The instance to convert.",
              "type": "Params"
            }
          ],
          [
            "returns",
            { "__kind": "heading", "description": "The new map instance.\n" }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "router",
    "name": "ParamMap",
    "overloads": [
      {
        "file": "packages/router/src/shared.ts#L41-L67",
        "signature": "interface ParamMap {\n  readonly keys: string[];\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A map that provides access to the required and optional parameters\nspecific to a route.\nThe map supports retrieving a single value with `get()`\nor multiple values with `getAll()`.\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "keys",
              "description": "Names of the parameters in the map.",
              "type": "string[]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "TypeAliasDeclaration",
    "module": "router",
    "name": "Params",
    "overloads": [
      {
        "file": "packages/router/src/shared.ts#L27-L29",
        "signature": "export type Params = {\n  [key: string]: any;\n};",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "A collection of matrix and query URL parameters."
            }
          ],
          [
            "see",
            { "__kind": "heading", "description": "`convertToParamMap()`" }
          ],
          ["see", { "__kind": "heading", "description": "`ParamMap`\n" }],
          ["publicApi", { "__kind": "heading", "description": "\n" }]
        ]
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router",
    "name": "PRIMARY_OUTLET",
    "overloads": [
      {
        "file": "packages/router/src/shared.ts#L18-L18",
        "signature": "const PRIMARY_OUTLET: \"primary\";",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "UrlHandlingStrategy",
    "overloads": [
      {
        "file": "packages/router/src/url_handling_strategy.ts#L18-L39",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nProvides a way to migrate AngularJS applications to Angular.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "shouldProcessUrl",
              "info": {
                "file": "packages/router/src/url_handling_strategy.ts#L27-L27",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Tells the router if this URL should be processed.\n\nWhen it returns true, the router will execute the regular navigation.\nWhen it returns false, the router will set the router state to an empty state.\nAs a result, all the active components will be destroyed.\n\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "UrlTree"
                    }
                  ]
                ],
                "signature": "abstract shouldProcessUrl(url: UrlTree): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "extract",
              "info": {
                "file": "packages/router/src/url_handling_strategy.ts#L33-L33",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Extracts the part of the URL that should be handled by the router.\nThe rest of the URL will remain untouched.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "UrlTree"
                    }
                  ]
                ],
                "signature": "abstract extract(url: UrlTree): UrlTree;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "merge",
              "info": {
                "file": "packages/router/src/url_handling_strategy.ts#L38-L38",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Merges the URL fragment with the rest of the URL.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "newUrlPart",
                      "description": "",
                      "type": "UrlTree"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "rawUrl",
                      "description": "",
                      "type": "UrlTree"
                    }
                  ]
                ],
                "signature": "abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;"
              }
            }
          ]
        ],
        "signature": "class UrlHandlingStrategy {\n  abstract shouldProcessUrl(url: UrlTree): boolean;\n  abstract extract(url: UrlTree): UrlTree;\n  abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "DefaultUrlSerializer",
    "overloads": [
      {
        "file": "packages/router/src/url_tree.ts#L291-L307",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nA default implementation of the `UrlSerializer`.\n\nExample URLs:\n\n```\n/inbox/33(popup:compose)\n/inbox/33;open=true/messages/44\n```\n\nDefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\ncolon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\nspecify route specific parameters.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "parse",
              "info": {
                "file": "packages/router/src/url_tree.ts#L293-L296",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "parse(url: string): UrlTree;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "serialize",
              "info": {
                "file": "packages/router/src/url_tree.ts#L299-L306",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tree",
                      "description": "",
                      "type": "UrlTree"
                    }
                  ]
                ],
                "signature": "serialize(tree: UrlTree): string;"
              }
            }
          ]
        ],
        "signature": "class DefaultUrlSerializer implements UrlSerializer {\n  parse(url: string): UrlTree;\n  serialize(tree: UrlTree): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "UrlSegment",
    "overloads": [
      {
        "file": "packages/router/src/url_tree.ts#L202-L225",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nRepresents a single URL segment.\n\nA UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\nparameters associated with the segment.\n"
            }
          ],
          [
            "usageNotes",
            { "__kind": "heading", "description": "\n### Example\n\n```" }
          ],
          [
            "Component({templateUrl:'template.html'})",
            {
              "__kind": "heading",
              "description": "\nclass MyComponent {\nconstructor(router: Router) {\nconst tree: UrlTree = router.parseUrl('/team;id=33');\nconst g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\nconst s: UrlSegment[] = g.segments;\ns[0].path; // returns 'team'\ns[0].parameters; // returns {id: 33}\n}\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_parameterMap",
              "description": "",
              "type": "ParamMap"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/url_tree.ts#L222-L224",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class UrlSegment {\n  _parameterMap!: ParamMap;\n\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "UrlSegmentGroup",
    "overloads": [
      {
        "file": "packages/router/src/url_tree.ts#L141-L173",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nRepresents the parsed URL segment group.\n\nSee `UrlTree` for more information.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_sourceSegment",
              "description": "",
              "type": "UrlSegmentGroup"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "_segmentIndexShift",
              "description": "",
              "type": "number"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "parent",
              "description": "The parent node in the url tree",
              "type": "UrlSegmentGroup"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "hasChildren",
              "info": {
                "file": "packages/router/src/url_tree.ts#L160-L162",
                "info": [],
                "signature": "hasChildren(): boolean;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/url_tree.ts#L170-L172",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class UrlSegmentGroup {\n  _sourceSegment!: UrlSegmentGroup;\n  _segmentIndexShift!: number;\n  parent: UrlSegmentGroup | null = null;\n\n  hasChildren(): boolean;\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "UrlSerializer",
    "overloads": [
      {
        "file": "packages/router/src/url_tree.ts#L265-L271",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nSerializes and deserializes a URL string into a URL tree.\n\nThe url serialization strategy is customizable. You can\nmake all URLs case insensitive by providing a custom UrlSerializer.\n\nSee `DefaultUrlSerializer` for an example of a URL serializer.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "parse",
              "info": {
                "file": "packages/router/src/url_tree.ts#L267-L267",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "url",
                      "description": "",
                      "type": "string"
                    }
                  ]
                ],
                "signature": "abstract parse(url: string): UrlTree;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "serialize",
              "info": {
                "file": "packages/router/src/url_tree.ts#L270-L270",
                "info": [
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "tree",
                      "description": "",
                      "type": "UrlTree"
                    }
                  ]
                ],
                "signature": "abstract serialize(tree: UrlTree): string;"
              }
            }
          ]
        ],
        "signature": "class UrlSerializer {\n  abstract parse(url: string): UrlTree;\n  abstract serialize(tree: UrlTree): string;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "UrlTree",
    "overloads": [
      {
        "file": "packages/router/src/url_tree.ts#L105-L130",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "\n\nRepresents the parsed URL.\n\nSince a router state is a tree, and the URL is nothing but a serialized state, the URL is a\nserialized tree.\nUrlTree is a data structure that provides a lot of affordances in dealing with URLs\n"
            }
          ],
          [
            "usageNotes",
            { "__kind": "heading", "description": "\n### Example\n\n```" }
          ],
          [
            "Component({templateUrl:'template.html'})",
            {
              "__kind": "heading",
              "description": "\nclass MyComponent {\nconstructor(router: Router) {\nconst tree: UrlTree =\nrouter.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\nconst f = tree.fragment; // return 'fragment'\nconst q = tree.queryParams; // returns {debug: 'true'}\nconst g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\nconst s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\ng.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\ng.children['support'].segments; // return 1 segment 'help'\n}\n}\n```\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "_queryParamMap",
              "description": "",
              "type": "ParamMap"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "toString",
              "info": {
                "file": "packages/router/src/url_tree.ts#L127-L129",
                "info": [],
                "signature": "toString(): string;"
              }
            }
          ]
        ],
        "signature": "class UrlTree {\n  _queryParamMap!: ParamMap;\n\n  toString(): string;\n}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router",
    "name": "VERSION",
    "overloads": [
      {
        "file": "packages/router/src/version.ts#L20-L20",
        "signature": "const VERSION: any;",
        "info": []
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "router",
    "name": "ɵEmptyOutletComponent",
    "overloads": [
      {
        "file": "packages/router/src/components/empty_outlet.ts#L20-L22",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "This component is used internally within the router to be a placeholder when an empty\nrouter-outlet is needed. For example, with a config such as:\n\n`{path: 'parent', outlet: 'nav', children: [...]}`\n\nIn order to render, there needs to be a component on this config, which will default\nto this `EmptyOutletComponent`.\n"
            }
          ]
        ],
        "signature": "class ɵEmptyOutletComponent {}"
      }
    ]
  },
  {
    "kind": "VariableDeclaration",
    "module": "router",
    "name": "ɵROUTER_PROVIDERS",
    "overloads": [
      {
        "file": "packages/router/src/router_module.ts#L48-L67",
        "signature": "const ROUTER_PROVIDERS: any[];",
        "info": []
      }
    ]
  },
  {
    "kind": "FunctionDeclaration",
    "module": "router",
    "name": "ɵflatten",
    "overloads": [
      {
        "file": "packages/router/src/utils/collection.ts#L60-L62",
        "signature": "function flatten<T>(arr: T[][]): T[];",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Flattens single-level nested arrays.\n"
            }
          ],
          [
            "param",
            {
              "__kind": "table",
              "label": "arr",
              "description": "",
              "type": "T[][]"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "service-worker",
    "name": "UpdateActivatedEvent",
    "overloads": [
      {
        "file": "packages/service-worker/src/low_level.ts#L30-L34",
        "signature": "interface UpdateActivatedEvent {\n  type: \"UPDATE_ACTIVATED\";\n  previous?: { hash: string; appData?: Object };\n  current: { hash: string; appData?: Object };\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event emitted when a new version of the app has been downloaded and activated.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "\"UPDATE_ACTIVATED\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "previous",
              "description": "",
              "type": "{ hash: string; appData?: Object; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "current",
              "description": "",
              "type": "{ hash: string; appData?: Object; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "InterfaceDeclaration",
    "module": "service-worker",
    "name": "UpdateAvailableEvent",
    "overloads": [
      {
        "file": "packages/service-worker/src/low_level.ts#L19-L23",
        "signature": "interface UpdateAvailableEvent {\n  type: \"UPDATE_AVAILABLE\";\n  current: { hash: string; appData?: Object };\n  available: { hash: string; appData?: Object };\n}",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "An event emitted when a new version of the app is available.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "type",
              "description": "",
              "type": "\"UPDATE_AVAILABLE\""
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "current",
              "description": "",
              "type": "{ hash: string; appData?: Object; }"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "available",
              "description": "",
              "type": "{ hash: string; appData?: Object; }"
            }
          ]
        ]
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "service-worker",
    "name": "ServiceWorkerModule",
    "overloads": [
      {
        "file": "packages/service-worker/src/module.ts#L157-L188",
        "info": [
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "method",
            {
              "__kind": "info",
              "header": "register",
              "info": {
                "file": "packages/service-worker/src/module.ts#L167-L187",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Register the given Angular Service Worker script.\n\nIf `enabled` is set to `false` in the given options, the module will behave as if service\nworkers are not supported by the browser, and the service worker will not be registered.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "script",
                      "description": "",
                      "type": "string"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "opts",
                      "description": "",
                      "type": "SwRegistrationOptions"
                    }
                  ]
                ],
                "signature": "static register(script: string, opts: SwRegistrationOptions = {}):   ModuleWithProviders<ServiceWorkerModule>;"
              }
            }
          ]
        ],
        "signature": "class ServiceWorkerModule {\n  static register(\n    script: string,\n    opts: SwRegistrationOptions = {}\n  ): ModuleWithProviders<ServiceWorkerModule>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "service-worker",
    "name": "SwRegistrationOptions",
    "overloads": [
      {
        "file": "packages/service-worker/src/module.ts#L30-L76",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Token that can be used to provide options for `ServiceWorkerModule` outside of\n`ServiceWorkerModule.register()`.\n\nYou can use this token to define a provider that generates the registration options at runtime,\nfor example via a function call:\n\n{@example service-worker/registration-options/module.ts region=\"registration-options\"\nheader=\"app.module.ts\"}\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "enabled",
              "description": "Whether the ServiceWorker will be registered and the related services (such as `SwPush` and\n`SwUpdate`) will attempt to communicate and interact with it.\n\nDefault: true",
              "type": "boolean"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "scope",
              "description": "A URL that defines the ServiceWorker's registration scope; that is, what range of URLs it can\ncontrol. It will be used when calling\n[ServiceWorkerContainer#register()](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register).",
              "type": "string"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "registrationStrategy",
              "description": "Defines the ServiceWorker registration strategy, which determines when it will be registered\nwith the browser.\n\nThe default behavior of registering once the application stabilizes (i.e. as soon as there are\nno pending micro- and macro-tasks) is designed to register the ServiceWorker as soon as\npossible but without affecting the application's first time load.\n\nStill, there might be cases where you want more control over when the ServiceWorker is\nregistered (for example, there might be a long-running timeout or polling interval, preventing\nthe app from stabilizing). The available option are:\n\n- `registerWhenStable:<timeout>`: Register as soon as the application stabilizes (no pending\n    micro-/macro-tasks) but no later than `<timeout>` milliseconds. If the app hasn't\n    stabilized after `<timeout>` milliseconds (for example, due to a recurrent asynchronous\n    task), the ServiceWorker will be registered anyway.\n    If `<timeout>` is omitted, the ServiceWorker will only be registered once the app\n    stabilizes.\n- `registerImmediately`: Register immediately.\n- `registerWithDelay:<timeout>`: Register with a delay of `<timeout>` milliseconds. For\n    example, use `registerWithDelay:5000` to register the ServiceWorker after 5 seconds. If\n    `<timeout>` is omitted, is defaults to `0`, which will register the ServiceWorker as soon\n    as possible but still asynchronously, once all pending micro-tasks are completed.\n- An [Observable](guide/observables) factory function: A function that returns an `Observable`.\n    The function will be used at runtime to obtain and subscribe to the `Observable` and the\n    ServiceWorker will be registered as soon as the first value is emitted.\n\nDefault: 'registerWhenStable:30000'",
              "type": "string | (() => any)"
            }
          ]
        ],
        "signature": "class SwRegistrationOptions {\n  enabled?: boolean;\n  scope?: string;\n  registrationStrategy?: string | (() => Observable<unknown>);\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "service-worker",
    "name": "SwPush",
    "overloads": [
      {
        "file": "packages/service-worker/src/push.ts#L92-L213",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Subscribe and listen to\n[Web Push\nNotifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\nAngular Service Worker.\n"
            }
          ],
          [
            "usageNotes",
            {
              "__kind": "heading",
              "description": "\n\nYou can inject a `SwPush` instance into any component or service\nas a dependency.\n\n<code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\nheader=\"app.component.ts\"></code-example>\n\nTo subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\nThe call returns a `Promise` with a new\n[`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\ninstance.\n\n<code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\nheader=\"app.component.ts\"></code-example>\n\nA request is rejected if the user denies permission, or if the browser\nblocks or does not support the Push API or ServiceWorkers.\nCheck `SwPush.isEnabled` to confirm status.\n\nInvoke Push Notifications by pushing a message with the following payload.\n\n```ts\n{\n\"notification\": {\n\"actions\": NotificationAction[],\n\"badge\": USVString\n\"body\": DOMString,\n\"data\": any,\n\"dir\": \"auto\"|\"ltr\"|\"rtl\",\n\"icon\": USVString,\n\"image\": USVString,\n\"lang\": DOMString,\n\"renotify\": boolean,\n\"requireInteraction\": boolean,\n\"silent\": boolean,\n\"tag\": DOMString,\n\"timestamp\": DOMTimeStamp,\n\"title\": DOMString,\n\"vibrate\": number[]\n}\n}\n```\n\nOnly `title` is required. See `Notification`\n[instance\nproperties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\n\nWhile the subscription is active, Service Worker listens for\n[PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\noccurrences and creates\n[Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\ninstances in response.\n\nUnsubscribe using `SwPush.unsubscribe()`.\n\nAn application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\nclicks on a notification. For example:\n\n<code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\nheader=\"app.component.ts\"></code-example>\n"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)"
            }
          ],
          [
            "see",
            {
              "__kind": "heading",
              "description": "[MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "messages",
              "description": "Emits the payloads of the received push notification messages.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "notificationClicks",
              "description": "Emits the payloads of the received push notification messages as well as the action the user\ninteracted with. If no action was used the `action` property contains an empty string `''`.\n\nNote that the `notification` property does **not** contain a\n[Notification][Mozilla Notification] object but rather a\n[NotificationOptions](https://notifications.spec.whatwg.org/#dictdef-notificationoptions)\nobject that also includes the `title` of the [Notification][Mozilla Notification] object.\n\n[Mozilla Notification]: https://developer.mozilla.org/en-US/docs/Web/API/Notification",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "subscription",
              "description": "Emits the currently active\n[PushSubscription](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\nassociated to the Service Worker registration or `null` if there is no subscription.",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "requestSubscription",
              "info": {
                "file": "packages/service-worker/src/push.ts#L162-L180",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Subscribes to Web Push Notifications,\nafter requesting and receiving user permission.\n"
                    }
                  ],
                  [
                    "param",
                    {
                      "__kind": "table",
                      "label": "options",
                      "description": "An object containing the `serverPublicKey` string.",
                      "type": "{ serverPublicKey: string; }"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A Promise that resolves to the new subscription object.\n"
                    }
                  ]
                ],
                "signature": "requestSubscription(options: {serverPublicKey: string}): Promise<PushSubscription>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "unsubscribe",
              "info": {
                "file": "packages/service-worker/src/push.ts#L188-L208",
                "info": [
                  [
                    "description",
                    {
                      "__kind": "heading",
                      "description": "Unsubscribes from Service Worker push notifications.\n"
                    }
                  ],
                  [
                    "returns",
                    {
                      "__kind": "heading",
                      "description": "A Promise that is resolved when the operation succeeds, or is rejected if there is no\nactive subscription or the unsubscribe operation fails.\n"
                    }
                  ]
                ],
                "signature": "unsubscribe(): Promise<void>;"
              }
            }
          ]
        ],
        "signature": "class SwPush {\n  readonly messages: Observable<object>;\n  readonly notificationClicks: Observable<{\n    action: string;\n    notification: NotificationOptions & {\n      title: string;\n    };\n  }>;\n  readonly subscription: Observable<PushSubscription | null>;\n\n  requestSubscription(options: {\n    serverPublicKey: string;\n  }): Promise<PushSubscription>;\n  unsubscribe(): Promise<void>;\n}"
      }
    ]
  },
  {
    "kind": "ClassDeclaration",
    "module": "service-worker",
    "name": "SwUpdate",
    "overloads": [
      {
        "file": "packages/service-worker/src/update.ts#L22-L67",
        "info": [
          [
            "description",
            {
              "__kind": "heading",
              "description": "Subscribe to update notifications from the Service Worker, trigger update\nchecks, and forcibly activate updates.\n"
            }
          ],
          ["publicApi", { "__kind": "heading", "description": "\n" }],
          [
            "property",
            {
              "__kind": "table",
              "label": "available",
              "description": "Emits an `UpdateAvailableEvent` event whenever a new app version is available.",
              "type": "any"
            }
          ],
          [
            "property",
            {
              "__kind": "table",
              "label": "activated",
              "description": "Emits an `UpdateActivatedEvent` event whenever the app has been updated to a new version.",
              "type": "any"
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "checkForUpdate",
              "info": {
                "file": "packages/service-worker/src/update.ts#L52-L58",
                "info": [],
                "signature": "checkForUpdate(): Promise<void>;"
              }
            }
          ],
          [
            "method",
            {
              "__kind": "info",
              "header": "activateUpdate",
              "info": {
                "file": "packages/service-worker/src/update.ts#L60-L66",
                "info": [],
                "signature": "activateUpdate(): Promise<void>;"
              }
            }
          ]
        ],
        "signature": "class SwUpdate {\n  readonly available: Observable<UpdateAvailableEvent>;\n  readonly activated: Observable<UpdateActivatedEvent>;\n\n  checkForUpdate(): Promise<void>;\n  activateUpdate(): Promise<void>;\n}"
      }
    ]
  }
]
